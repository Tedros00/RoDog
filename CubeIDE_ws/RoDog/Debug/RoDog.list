
RoDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d298  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0801d428  0801d428  0001e428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db98  0801db98  0001f3b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801db98  0801db98  0001eb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dba0  0801dba0  0001f3b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dba0  0801dba0  0001eba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dba4  0801dba4  0001eba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  0801dba8  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001f3b8  2**0
                  CONTENTS
 10 .bss          000034c0  200003b8  200003b8  0001f3b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003878  20003878  0001f3b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033480  00000000  00000000  0001f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f95  00000000  00000000  00052868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b60  00000000  00000000  00058800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020fb  00000000  00000000  0005b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca36  00000000  00000000  0005d45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034c0f  00000000  00000000  00089e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1e05  00000000  00000000  000beaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  001b08a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cebc  00000000  00000000  001b0958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001bd814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001bd876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    0000121b  00000000  00000000  001bd8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003b8 	.word	0x200003b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d410 	.word	0x0801d410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	0801d410 	.word	0x0801d410

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <CurvePoints>:
 */


#include"CurveGen.h"

void CurvePoints(RODOG_Control * r, arm_matrix_instance_f32 *xyz){
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b0a5      	sub	sp, #148	@ 0x94
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	float T_st = L_STRIDE/(N_GAIT_CURVE*r->BodyVel);	//period of the stance period over the number of points ;
 8000fc2:	4b8f      	ldr	r3, [pc, #572]	@ (8001200 <CurvePoints+0x248>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b8f      	ldr	r3, [pc, #572]	@ (8001204 <CurvePoints+0x24c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe0:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	//choose the correct offset based on the gait chosen
	switch(r->gait){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	f200 8170 	bhi.w	80012d8 <CurvePoints+0x320>
 8000ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <CurvePoints+0x48>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	080012a1 	.word	0x080012a1
 8001004:	080010cf 	.word	0x080010cf
 8001008:	0800107d 	.word	0x0800107d
 800100c:	08001019 	.word	0x08001019
 8001010:	080011a9 	.word	0x080011a9
 8001014:	08001145 	.word	0x08001145
		case TROT:
			r->LegCounter[1] = r->LegCounter[0] + TROT_OFFSET;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a78      	ldr	r2, [pc, #480]	@ (8001200 <CurvePoints+0x248>)
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	4a78      	ldr	r2, [pc, #480]	@ (8001204 <CurvePoints+0x24c>)
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	440a      	add	r2, r1
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	0852      	lsrs	r2, r2, #1
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	441a      	add	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
			r->LegCounter[2] = r->LegCounter[0];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
			r->LegCounter[3] = r->LegCounter[0] + TROT_OFFSET;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a70      	ldr	r2, [pc, #448]	@ (8001200 <CurvePoints+0x248>)
 8001040:	7811      	ldrb	r1, [r2, #0]
 8001042:	4a70      	ldr	r2, [pc, #448]	@ (8001204 <CurvePoints+0x24c>)
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	440a      	add	r2, r1
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	0852      	lsrs	r2, r2, #1
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	441a      	add	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c

			if(++r->LegCounter[0]>=N_GAIT_CURVE){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	621a      	str	r2, [r3, #32]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a67      	ldr	r2, [pc, #412]	@ (8001200 <CurvePoints+0x248>)
 8001064:	7811      	ldrb	r1, [r2, #0]
 8001066:	4a67      	ldr	r2, [pc, #412]	@ (8001204 <CurvePoints+0x24c>)
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	440a      	add	r2, r1
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	4293      	cmp	r3, r2
 8001070:	f0c0 812b 	bcc.w	80012ca <CurvePoints+0x312>
				r->LegCounter[0] = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
			}
			break;
 800107a:	e126      	b.n	80012ca <CurvePoints+0x312>

		case STALK:
			r->LegCounter[1] = r->LegCounter[0] + STALK_OFFSET;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a5f      	ldr	r2, [pc, #380]	@ (8001200 <CurvePoints+0x248>)
 8001082:	7811      	ldrb	r1, [r2, #0]
 8001084:	4a5f      	ldr	r2, [pc, #380]	@ (8001204 <CurvePoints+0x24c>)
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	440a      	add	r2, r1
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	0852      	lsrs	r2, r2, #1
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	441a      	add	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
			r->LegCounter[2] = r->LegCounter[1];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
			r->LegCounter[3] = r->LegCounter[0];
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c

			if(++r->LegCounter[0]>N_GAIT_CURVE){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <CurvePoints+0x248>)
 80010b6:	7811      	ldrb	r1, [r2, #0]
 80010b8:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <CurvePoints+0x24c>)
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	440a      	add	r2, r1
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f240 8104 	bls.w	80012ce <CurvePoints+0x316>
				r->LegCounter[0] = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
			}
			break;
 80010cc:	e0ff      	b.n	80012ce <CurvePoints+0x316>

		case GALLOP:
			 r->LegCounter[1] = r->LegCounter[0] + GALLOP_OFFSET;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001200 <CurvePoints+0x248>)
 80010d4:	7811      	ldrb	r1, [r2, #0]
 80010d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001204 <CurvePoints+0x24c>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	440a      	add	r2, r1
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	0892      	lsrs	r2, r2, #2
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	441a      	add	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24
			 r->LegCounter[2] = r->LegCounter[1] + GALLOP_OFFSET;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <CurvePoints+0x248>)
 80010ee:	7811      	ldrb	r1, [r2, #0]
 80010f0:	4a44      	ldr	r2, [pc, #272]	@ (8001204 <CurvePoints+0x24c>)
 80010f2:	7812      	ldrb	r2, [r2, #0]
 80010f4:	440a      	add	r2, r1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	0892      	lsrs	r2, r2, #2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	441a      	add	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
			 r->LegCounter[3] = r->LegCounter[2] + GALLOP_OFFSET;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	4a3e      	ldr	r2, [pc, #248]	@ (8001200 <CurvePoints+0x248>)
 8001108:	7811      	ldrb	r1, [r2, #0]
 800110a:	4a3e      	ldr	r2, [pc, #248]	@ (8001204 <CurvePoints+0x24c>)
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	440a      	add	r2, r1
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	0892      	lsrs	r2, r2, #2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	441a      	add	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c

			if(++r->LegCounter[0]>N_GAIT_CURVE){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a35      	ldr	r2, [pc, #212]	@ (8001200 <CurvePoints+0x248>)
 800112c:	7811      	ldrb	r1, [r2, #0]
 800112e:	4a35      	ldr	r2, [pc, #212]	@ (8001204 <CurvePoints+0x24c>)
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	440a      	add	r2, r1
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	4293      	cmp	r3, r2
 8001138:	f240 80cb 	bls.w	80012d2 <CurvePoints+0x31a>
				r->LegCounter[0] = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
			}
			 break;
 8001142:	e0c6      	b.n	80012d2 <CurvePoints+0x31a>

		case PACE:
			r->LegCounter[1] = r->LegCounter[0];
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
			r->LegCounter[2] = r->LegCounter[0] + PACE_OFFSET;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <CurvePoints+0x248>)
 8001152:	7811      	ldrb	r1, [r2, #0]
 8001154:	4a2b      	ldr	r2, [pc, #172]	@ (8001204 <CurvePoints+0x24c>)
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	440a      	add	r2, r1
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	0852      	lsrs	r2, r2, #1
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	441a      	add	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
			r->LegCounter[3] = r->LegCounter[0] + PACE_OFFSET;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a25      	ldr	r2, [pc, #148]	@ (8001200 <CurvePoints+0x248>)
 800116c:	7811      	ldrb	r1, [r2, #0]
 800116e:	4a25      	ldr	r2, [pc, #148]	@ (8001204 <CurvePoints+0x24c>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	440a      	add	r2, r1
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	0852      	lsrs	r2, r2, #1
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	441a      	add	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c

			if(++r->LegCounter[0]>N_GAIT_CURVE){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	621a      	str	r2, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <CurvePoints+0x248>)
 8001190:	7811      	ldrb	r1, [r2, #0]
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <CurvePoints+0x24c>)
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	440a      	add	r2, r1
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	4293      	cmp	r3, r2
 800119c:	f240 809b 	bls.w	80012d6 <CurvePoints+0x31e>
				r->LegCounter[0] = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
			}

			break;
 80011a6:	e096      	b.n	80012d6 <CurvePoints+0x31e>

		case CRAWL:
			//All Legs finished their Swing Phase
			if(r->CurveCount > N_SWING){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <CurvePoints+0x24c>)
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d96a      	bls.n	800128a <CurvePoints+0x2d2>
				if(r->CurveCount > 2*N_SWING){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <CurvePoints+0x24c>)
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	4293      	cmp	r3, r2
 80011c0:	d95d      	bls.n	800127e <CurvePoints+0x2c6>
					if(r->CurveCount > 3*N_SWING){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69da      	ldr	r2, [r3, #28]
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <CurvePoints+0x24c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	440b      	add	r3, r1
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d94d      	bls.n	8001272 <CurvePoints+0x2ba>
						if(r->CurveCount > 4*N_SWING){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <CurvePoints+0x24c>)
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d940      	bls.n	8001266 <CurvePoints+0x2ae>
							if(r->CurveCount > 4*N_SWING + N_STANCE){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <CurvePoints+0x24c>)
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4904      	ldr	r1, [pc, #16]	@ (8001200 <CurvePoints+0x248>)
 80011f0:	7809      	ldrb	r1, [r1, #0]
 80011f2:	440a      	add	r2, r1
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d91b      	bls.n	8001230 <CurvePoints+0x278>
								for(int i = 0 ; i < 4 ; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80011fe:	e00f      	b.n	8001220 <CurvePoints+0x268>
 8001200:	20000021 	.word	0x20000021
 8001204:	20000020 	.word	0x20000020
									r->LegCounter[i] = 0;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800120e:	3208      	adds	r2, #8
 8001210:	2100      	movs	r1, #0
 8001212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
								for(int i = 0 ; i < 4 ; i++){
 8001216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800121a:	3301      	adds	r3, #1
 800121c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001224:	2b03      	cmp	r3, #3
 8001226:	ddef      	ble.n	8001208 <CurvePoints+0x250>
									}
									r->CurveCount = 0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
 800122e:	e031      	b.n	8001294 <CurvePoints+0x2dc>
								} else{ for(int i = 0 ; i < 4 ; i++)r->LegCounter[i]++;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001236:	e011      	b.n	800125c <CurvePoints+0x2a4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	1c59      	adds	r1, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800124c:	3208      	adds	r2, #8
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001252:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800125c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001260:	2b03      	cmp	r3, #3
 8001262:	dde9      	ble.n	8001238 <CurvePoints+0x280>
 8001264:	e016      	b.n	8001294 <CurvePoints+0x2dc>
							}
						} else{r->LegCounter[2]++;}
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001270:	e010      	b.n	8001294 <CurvePoints+0x2dc>
					} else{r->LegCounter[1]++;}
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
 800127c:	e00a      	b.n	8001294 <CurvePoints+0x2dc>
				} else{r->LegCounter[3]++;}
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001288:	e004      	b.n	8001294 <CurvePoints+0x2dc>
			} else {r->LegCounter[0]++;}
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	621a      	str	r2, [r3, #32]

			r->CurveCount++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	61da      	str	r2, [r3, #28]
			break;
 800129e:	e01b      	b.n	80012d8 <CurvePoints+0x320>

		case STOP :
			for(int i = 0 ; i < 4 ; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012a6:	e00b      	b.n	80012c0 <CurvePoints+0x308>
				r->LegCounter[i] = 0.0f;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80012ae:	3208      	adds	r2, #8
 80012b0:	2100      	movs	r1, #0
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0 ; i < 4 ; i++)
 80012b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	ddef      	ble.n	80012a8 <CurvePoints+0x2f0>
			break;
 80012c8:	e006      	b.n	80012d8 <CurvePoints+0x320>
			break;
 80012ca:	bf00      	nop
 80012cc:	e004      	b.n	80012d8 <CurvePoints+0x320>
			break;
 80012ce:	bf00      	nop
 80012d0:	e002      	b.n	80012d8 <CurvePoints+0x320>
			 break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <CurvePoints+0x320>
			break;
 80012d6:	bf00      	nop
	}

	for(int i = 0 ; i < 4 ; i++){
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012de:	e18d      	b.n	80015fc <CurvePoints+0x644>

		if(r->LegCounter[i] > N_GAIT_CURVE){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <CurvePoints+0x3fc>)
 80012ee:	7811      	ldrb	r1, [r2, #0]
 80012f0:	4a31      	ldr	r2, [pc, #196]	@ (80013b8 <CurvePoints+0x400>)
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	440a      	add	r2, r1
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d917      	bls.n	800132c <CurvePoints+0x374>
			r->LegCounter[i] -=N_GAIT_CURVE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	4a2a      	ldr	r2, [pc, #168]	@ (80013b4 <CurvePoints+0x3fc>)
 800130a:	7811      	ldrb	r1, [r2, #0]
 800130c:	4a2a      	ldr	r2, [pc, #168]	@ (80013b8 <CurvePoints+0x400>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	440a      	add	r2, r1
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	1a99      	subs	r1, r3, r2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800131c:	3208      	adds	r2, #8
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->CurveCount++;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	61da      	str	r2, [r3, #28]
		}

		//swing phase(circle)
		if(r->LegCounter[i] <= N_SWING){
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <CurvePoints+0x400>)
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80a9 	bhi.w	8001494 <CurvePoints+0x4dc>
		    float32_t tempX[N_SCATTER], tempY[N_SCATTER];

		    for (int n = 0; n < N_SCATTER; n++) {
 8001342:	2300      	movs	r3, #0
 8001344:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001346:	e018      	b.n	800137a <CurvePoints+0x3c2>
		        tempX[n] = XBScatter[n];
 8001348:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <CurvePoints+0x404>)
 800134a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	3390      	adds	r3, #144	@ 0x90
 8001358:	443b      	add	r3, r7
 800135a:	3b88      	subs	r3, #136	@ 0x88
 800135c:	601a      	str	r2, [r3, #0]
		        tempY[n] = YBScatter[n];
 800135e:	4a18      	ldr	r2, [pc, #96]	@ (80013c0 <CurvePoints+0x408>)
 8001360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3390      	adds	r3, #144	@ 0x90
 800136e:	443b      	add	r3, r7
 8001370:	3b58      	subs	r3, #88	@ 0x58
 8001372:	601a      	str	r2, [r3, #0]
		    for (int n = 0; n < N_SCATTER; n++) {
 8001374:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001376:	3301      	adds	r3, #1
 8001378:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800137a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800137c:	2b0b      	cmp	r3, #11
 800137e:	dde3      	ble.n	8001348 <CurvePoints+0x390>
		    }

		    float32_t t = (float32_t)r->LegCounter[i]/N_SWING;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <CurvePoints+0x400>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		    // Calculate the i-th point on the Bezier curve using De Casteljau's algorithm
		    for (int k = 1; k < N_SCATTER; k++) {
 80013a8:	2301      	movs	r3, #1
 80013aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013ac:	e05e      	b.n	800146c <CurvePoints+0x4b4>
		        for (int j = 0; j < N_SCATTER - k; j++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80013b2:	e052      	b.n	800145a <CurvePoints+0x4a2>
 80013b4:	20000021 	.word	0x20000021
 80013b8:	20000020 	.word	0x20000020
 80013bc:	0801d4fc 	.word	0x0801d4fc
 80013c0:	0801d530 	.word	0x0801d530
		            tempX[j] = (1 - t) * tempX[j] + t * tempX[j + 1];
 80013c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80013cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	3390      	adds	r3, #144	@ 0x90
 80013d6:	443b      	add	r3, r7
 80013d8:	3b88      	subs	r3, #136	@ 0x88
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3390      	adds	r3, #144	@ 0x90
 80013ea:	443b      	add	r3, r7
 80013ec:	3b88      	subs	r3, #136	@ 0x88
 80013ee:	edd3 6a00 	vldr	s13, [r3]
 80013f2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80013f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	3390      	adds	r3, #144	@ 0x90
 8001404:	443b      	add	r3, r7
 8001406:	3b88      	subs	r3, #136	@ 0x88
 8001408:	edc3 7a00 	vstr	s15, [r3]
		            tempY[j] = (1 - t) * tempY[j] + t * tempY[j + 1];
 800140c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001410:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	3390      	adds	r3, #144	@ 0x90
 800141e:	443b      	add	r3, r7
 8001420:	3b58      	subs	r3, #88	@ 0x58
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800142c:	3301      	adds	r3, #1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	3390      	adds	r3, #144	@ 0x90
 8001432:	443b      	add	r3, r7
 8001434:	3b58      	subs	r3, #88	@ 0x58
 8001436:	edd3 6a00 	vldr	s13, [r3]
 800143a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	3390      	adds	r3, #144	@ 0x90
 800144c:	443b      	add	r3, r7
 800144e:	3b58      	subs	r3, #88	@ 0x58
 8001450:	edc3 7a00 	vstr	s15, [r3]
		        for (int j = 0; j < N_SCATTER - k; j++) {
 8001454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001456:	3301      	adds	r3, #1
 8001458:	677b      	str	r3, [r7, #116]	@ 0x74
 800145a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800145c:	f1c3 030c 	rsb	r3, r3, #12
 8001460:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001462:	429a      	cmp	r2, r3
 8001464:	dbae      	blt.n	80013c4 <CurvePoints+0x40c>
		    for (int k = 1; k < N_SCATTER; k++) {
 8001466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001468:	3301      	adds	r3, #1
 800146a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800146c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800146e:	2b0b      	cmp	r3, #11
 8001470:	dd9d      	ble.n	80013ae <CurvePoints+0x3f6>
		        }
		    }
		    // The final result is stored in tempX[0] and tempY[0]
		    xyz->pData[0+i] = tempX[0];
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	601a      	str	r2, [r3, #0]
		    xyz->pData[4+i] = tempY[0];
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800148a:	3304      	adds	r3, #4
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001492:	601a      	str	r2, [r3, #0]
		}

		//stance phase
		if(r->LegCounter[i] > N_SWING){
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	4a8f      	ldr	r2, [pc, #572]	@ (80016e0 <CurvePoints+0x728>)
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d97b      	bls.n	80015a0 <CurvePoints+0x5e8>
			xyz->pData[0+i] =  (((r->LegCounter[i]-N_SWING)*L_STRIDE)/N_STANCE) - (L_STRIDE/2.0f);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014ae:	3208      	adds	r2, #8
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	4a8a      	ldr	r2, [pc, #552]	@ (80016e0 <CurvePoints+0x728>)
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014ca:	4b86      	ldr	r3, [pc, #536]	@ (80016e4 <CurvePoints+0x72c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80014ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ee:	edc3 7a00 	vstr	s15, [r3]
			xyz->pData[4+i] = -VIRT_DIS *cos(PI*(0.5-(r->BodyVel*(float)(r->LegCounter[i]-N_SWING)*T_st)/(L_STRIDE*N_STANCE)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	4a76      	ldr	r2, [pc, #472]	@ (80016e0 <CurvePoints+0x728>)
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001516:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800151a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151e:	4b71      	ldr	r3, [pc, #452]	@ (80016e4 <CurvePoints+0x72c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 800152e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001536:	ee16 0a90 	vmov	r0, s13
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	4968      	ldr	r1, [pc, #416]	@ (80016e8 <CurvePoints+0x730>)
 8001548:	f7fe fe9e 	bl	8000288 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	a360      	add	r3, pc, #384	@ (adr r3, 80016d8 <CurvePoints+0x720>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	ec43 2b17 	vmov	d7, r2, r3
 8001566:	eeb0 0a47 	vmov.f32	s0, s14
 800156a:	eef0 0a67 	vmov.f32	s1, s15
 800156e:	f019 f9e3 	bl	801a938 <cos>
 8001572:	ec51 0b10 	vmov	r0, r1, d0
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001592:	3304      	adds	r3, #4
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	18d4      	adds	r4, r2, r3
 8001598:	f7ff fb26 	bl	8000be8 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	6023      	str	r3, [r4, #0]
		}

		//final row
		xyz->pData[8 +i] = 0;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015a8:	3308      	adds	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		xyz->pData[12+i] = 1;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015bc:	330c      	adds	r3, #12
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015c6:	601a      	str	r2, [r3, #0]

		xyz->pData[i] = xyz->pData[i]* r->CurveScale;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	ed93 7a00 	vldr	s14, [r3]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	edd3 7a06 	vldr	s15, [r3, #24]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 4 ; i++){
 80015f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001600:	2b03      	cmp	r3, #3
 8001602:	f77f ae6d 	ble.w	80012e0 <CurvePoints+0x328>
		}

	//rotate according to the heading angle
	crab(r->psi_crabbing , xyz);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f000 f873 	bl	80016fc <crab>


	//translate to LEG home frame
	for(int i = 0 ; i < 4 ; i++){
 8001616:	2300      	movs	r3, #0
 8001618:	673b      	str	r3, [r7, #112]	@ 0x70
 800161a:	e055      	b.n	80016c8 <CurvePoints+0x710>
		xyz->pData[0+i] =  (HOME_X + GaitCurveOffsetX[i] )+ xyz->pData[0+i];
 800161c:	4a33      	ldr	r2, [pc, #204]	@ (80016ec <CurvePoints+0x734>)
 800161e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800162c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	edc3 7a00 	vstr	s15, [r3]
		xyz->pData[ 4+i] = HOME_Y -  xyz->pData[4+i];
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001656:	3304      	adds	r3, #4
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001666:	3304      	adds	r3, #4
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80016f0 <CurvePoints+0x738>
 8001670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001674:	edc3 7a00 	vstr	s15, [r3]
		xyz->pData[ 8+i] = (HOME_Z + GaitCurveOffsetY[i]) - xyz->pData[8+i];
 8001678:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <CurvePoints+0x73c>)
 800167a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80016f8 <CurvePoints+0x740>
 8001688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001692:	3308      	adds	r3, #8
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016a2:	3308      	adds	r3, #8
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	edc3 7a00 	vstr	s15, [r3]
		xyz->pData[12+i] = 0;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b6:	330c      	adds	r3, #12
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 4 ; i++){
 80016c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c4:	3301      	adds	r3, #1
 80016c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80016c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	dda6      	ble.n	800161c <CurvePoints+0x664>
	}

}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3794      	adds	r7, #148	@ 0x94
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	60000000 	.word	0x60000000
 80016dc:	400921fb 	.word	0x400921fb
 80016e0:	20000020 	.word	0x20000020
 80016e4:	20000021 	.word	0x20000021
 80016e8:	3fe00000 	.word	0x3fe00000
 80016ec:	20000000 	.word	0x20000000
 80016f0:	42dd0000 	.word	0x42dd0000
 80016f4:	20000010 	.word	0x20000010
 80016f8:	422a6666 	.word	0x422a6666

080016fc <crab>:

//this function scales down and rotates the obtained curve points

void crab(float32_t psi , arm_matrix_instance_f32 * EE){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b096      	sub	sp, #88	@ 0x58
 8001700:	af00      	add	r7, sp, #0
 8001702:	ed87 0a01 	vstr	s0, [r7, #4]
 8001706:	6038      	str	r0, [r7, #0]
	float32_t cPsi = cos(psi) , sPsi = sin(psi);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7fe ff1d 	bl	8000548 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b10 	vmov	d0, r2, r3
 8001716:	f019 f90f 	bl	801a938 <cos>
 800171a:	ec53 2b10 	vmov	r2, r3, d0
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa61 	bl	8000be8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	657b      	str	r3, [r7, #84]	@ 0x54
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	ec43 2b10 	vmov	d0, r2, r3
 8001738:	f019 f95a 	bl	801a9f0 <sin>
 800173c:	ec53 2b10 	vmov	r2, r3, d0
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa50 	bl	8000be8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	653b      	str	r3, [r7, #80]	@ 0x50
	float32_t M_crabxyz[] = {  cPsi   , 0     ,  sPsi , 0 ,
 800174c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
							 0      , 1     , 0     , 0 ,
							-sPsi  , 0  	  , cPsi  , 0 ,
 8001778:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800177c:	eef1 7a67 	vneg.f32	s15, s15
	float32_t M_crabxyz[] = {  cPsi   , 0     ,  sPsi , 0 ,
 8001780:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
 800178a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	643b      	str	r3, [r7, #64]	@ 0x40
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
							  0      , 0     , 0     , 1 };

	arm_matrix_instance_f32 M_crab;
	arm_mat_init_f32(&M_crab , 4 , 4 , M_crabxyz);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	f107 0008 	add.w	r0, r7, #8
 80017b4:	2204      	movs	r2, #4
 80017b6:	2104      	movs	r1, #4
 80017b8:	f016 f88c 	bl	80178d4 <arm_mat_init_f32>
	arm_mat_mult_f32(&M_crab , EE , EE);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f015 fea3 	bl	8017510 <arm_mat_mult_f32>

}
 80017ca:	bf00      	nop
 80017cc:	3758      	adds	r7, #88	@ 0x58
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HMC5883L_readRaw>:
#include "HMC5883L.h"
#include "math.h"


void HMC5883L_readRaw(I2C_HandleTypeDef * hi2c , int16_t magxyz[]){
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af02      	add	r7, sp, #8
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]

	  uint8_t dataBuffer[6];

	  // Request data from the HMC5883L
	  uint8_t regAddress = 0x03; // Data register (X MSB)
 80017dc:	2303      	movs	r3, #3
 80017de:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS << 1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 80017e0:	f107 020f 	add.w	r2, r7, #15
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	213c      	movs	r1, #60	@ 0x3c
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f00a fda6 	bl	800c340 <HAL_I2C_Master_Transmit>

	  // Read data from the HMC5883L
	  HAL_I2C_Master_Receive(hi2c , HMC5883L_ADDRESS << 1, dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY);
 80017f4:	f107 0210 	add.w	r2, r7, #16
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2306      	movs	r3, #6
 8001800:	213c      	movs	r1, #60	@ 0x3c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f00a fe9a 	bl	800c53c <HAL_I2C_Master_Receive>

	  // Extract the data (assuming data is in two's complement)
	  magxyz[0]= (int16_t)(((dataBuffer[0] << 8) | dataBuffer[1]));
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	b21b      	sxth	r3, r3
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b21a      	sxth	r2, r3
 8001810:	7c7b      	ldrb	r3, [r7, #17]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	801a      	strh	r2, [r3, #0]
	  magxyz[1]= (int16_t)(((dataBuffer[4] << 8) | dataBuffer[5]));
 800181c:	7d3b      	ldrb	r3, [r7, #20]
 800181e:	b21b      	sxth	r3, r3
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b219      	sxth	r1, r3
 8001824:	7d7b      	ldrb	r3, [r7, #21]
 8001826:	b21a      	sxth	r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3302      	adds	r3, #2
 800182c:	430a      	orrs	r2, r1
 800182e:	b212      	sxth	r2, r2
 8001830:	801a      	strh	r2, [r3, #0]
	  magxyz[2]= (int16_t)(((dataBuffer[2] << 8) | dataBuffer[3]));
 8001832:	7cbb      	ldrb	r3, [r7, #18]
 8001834:	b21b      	sxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b219      	sxth	r1, r3
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	b21a      	sxth	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3304      	adds	r3, #4
 8001842:	430a      	orrs	r2, r1
 8001844:	b212      	sxth	r2, r2
 8001846:	801a      	strh	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HMC5883L_setOffset>:


void HMC5883L_setOffset(int16_t xo , int16_t yo)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	80fb      	strh	r3, [r7, #6]
 800185c:	4613      	mov	r3, r2
 800185e:	80bb      	strh	r3, [r7, #4]
	magn_xOffset = xo;
 8001860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001864:	4a05      	ldr	r2, [pc, #20]	@ (800187c <HMC5883L_setOffset+0x2c>)
 8001866:	6013      	str	r3, [r2, #0]
	magn_yOffset = yo;
 8001868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HMC5883L_setOffset+0x30>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20001a40 	.word	0x20001a40
 8001880:	20001a44 	.word	0x20001a44

08001884 <HMC5883L_setRange>:

void HMC5883L_setRange(hmc5883l_range_t range)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    switch(range)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b07      	cmp	r3, #7
 8001892:	d833      	bhi.n	80018fc <HMC5883L_setRange+0x78>
 8001894:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <HMC5883L_setRange+0x18>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018bd 	.word	0x080018bd
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	080018d5 	.word	0x080018d5
 80018ac:	080018dd 	.word	0x080018dd
 80018b0:	080018e5 	.word	0x080018e5
 80018b4:	080018ed 	.word	0x080018ed
 80018b8:	080018f5 	.word	0x080018f5
    {
	case HMC5883L_RANGE_0_88GA:
	    mgPerDigit = 0.0073;
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018be:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <HMC5883L_setRange+0x94>)
 80018c0:	601a      	str	r2, [r3, #0]
	    break;
 80018c2:	e01c      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mgPerDigit = 0.092f ;
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018c6:	4a15      	ldr	r2, [pc, #84]	@ (800191c <HMC5883L_setRange+0x98>)
 80018c8:	601a      	str	r2, [r3, #0]
	    break;
 80018ca:	e018      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mgPerDigit = 0.122f;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018ce:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <HMC5883L_setRange+0x9c>)
 80018d0:	601a      	str	r2, [r3, #0]
	    break;
 80018d2:	e014      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mgPerDigit = 0.152f;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018d6:	4a13      	ldr	r2, [pc, #76]	@ (8001924 <HMC5883L_setRange+0xa0>)
 80018d8:	601a      	str	r2, [r3, #0]
	    break;
 80018da:	e010      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mgPerDigit = 0.227f;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <HMC5883L_setRange+0xa4>)
 80018e0:	601a      	str	r2, [r3, #0]
	    break;
 80018e2:	e00c      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mgPerDigit = 0.256f;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018e6:	4a11      	ldr	r2, [pc, #68]	@ (800192c <HMC5883L_setRange+0xa8>)
 80018e8:	601a      	str	r2, [r3, #0]
	    break;
 80018ea:	e008      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mgPerDigit = 0.303f;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HMC5883L_setRange+0xac>)
 80018f0:	601a      	str	r2, [r3, #0]
	    break;
 80018f2:	e004      	b.n	80018fe <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mgPerDigit = 0.435f;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HMC5883L_setRange+0x90>)
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HMC5883L_setRange+0xb0>)
 80018f8:	601a      	str	r2, [r3, #0]
	    break;
 80018fa:	e000      	b.n	80018fe <HMC5883L_setRange+0x7a>

	default:
	    break;
 80018fc:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4619      	mov	r1, r3
 8001906:	2001      	movs	r0, #1
 8001908:	f000 f872 	bl	80019f0 <HMC5883L_writeRegister8>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20001a3c 	.word	0x20001a3c
 8001918:	3bef34d7 	.word	0x3bef34d7
 800191c:	3dbc6a7f 	.word	0x3dbc6a7f
 8001920:	3df9db23 	.word	0x3df9db23
 8001924:	3e1ba5e3 	.word	0x3e1ba5e3
 8001928:	3e6872b0 	.word	0x3e6872b0
 800192c:	3e83126f 	.word	0x3e83126f
 8001930:	3e9b22d1 	.word	0x3e9b22d1
 8001934:	3edeb852 	.word	0x3edeb852

08001938 <HMC5883L_setMeasurementMode>:
{
    return (hmc5883l_range_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(hmc5883l_mode_t mode)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8001942:	2002      	movs	r0, #2
 8001944:	f000 f870 	bl	8001a28 <HMC5883L_readRegister8>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4313      	orrs	r3, r2
 800195a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	4619      	mov	r1, r3
 8001960:	2002      	movs	r0, #2
 8001962:	f000 f845 	bl	80019f0 <HMC5883L_writeRegister8>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HMC5883L_setDataRate>:

    return (hmc5883l_mode_t)value;
}

void HMC5883L_setDataRate(hmc5883l_dataRate_t dataRate)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f855 	bl	8001a28 <HMC5883L_readRegister8>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	f023 031c 	bic.w	r3, r3, #28
 8001988:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	b25a      	sxtb	r2, r3
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4313      	orrs	r3, r2
 8001998:	b25b      	sxtb	r3, r3
 800199a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	4619      	mov	r1, r3
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f825 	bl	80019f0 <HMC5883L_writeRegister8>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HMC5883L_setSamples>:

    return (hmc5883l_dataRate_t)value;
}

void HMC5883L_setSamples(hmc5883l_samples_t samples)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f835 	bl	8001a28 <HMC5883L_readRegister8>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80019c8:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	015b      	lsls	r3, r3, #5
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4619      	mov	r1, r3
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 f805 	bl	80019f0 <HMC5883L_writeRegister8>
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HMC5883L_writeRegister8>:
    return (hmc5883l_samples_t)value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af04      	add	r7, sp, #16
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT  , &value ,1,500);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	1dbb      	adds	r3, r7, #6
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	213c      	movs	r1, #60	@ 0x3c
 8001a16:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <HMC5883L_writeRegister8+0x34>)
 8001a18:	f00a ffb6 	bl	800c988 <HAL_I2C_Mem_Write>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000066c 	.word	0x2000066c

08001a28 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C,HMC5883L_DEFAULT_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	213c      	movs	r1, #60	@ 0x3c
 8001a4a:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <HMC5883L_readRegister8+0x34>)
 8001a4c:	f00b f896 	bl	800cb7c <HAL_I2C_Mem_Read>
    return value;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000066c 	.word	0x2000066c

08001a60 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ae      	sub	sp, #184	@ 0xb8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001a6a:	edc7 0a08 	vstr	s1, [r7, #32]
 8001a6e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001a72:	edc7 1a06 	vstr	s3, [r7, #24]
 8001a76:	ed87 2a05 	vstr	s4, [r7, #20]
 8001a7a:	edc7 2a04 	vstr	s5, [r7, #16]
 8001a7e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001a82:	edc7 3a02 	vstr	s7, [r7, #8]
 8001a86:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d11d      	bne.n	8001ad4 <MadgwickAHRSupdate+0x74>
 8001a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	d116      	bne.n	8001ad4 <MadgwickAHRSupdate+0x74>
 8001aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d10f      	bne.n	8001ad4 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001ab4:	edd7 2a04 	vldr	s5, [r7, #16]
 8001ab8:	ed97 2a05 	vldr	s4, [r7, #20]
 8001abc:	edd7 1a06 	vldr	s3, [r7, #24]
 8001ac0:	ed97 1a07 	vldr	s2, [r7, #28]
 8001ac4:	edd7 0a08 	vldr	s1, [r7, #32]
 8001ac8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001acc:	f000 fede 	bl	800288c <MadgwickAHRSupdateIMU>
		return;
 8001ad0:	f000 becc 	b.w	800286c <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001ad4:	4be4      	ldr	r3, [pc, #912]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	eeb1 7a67 	vneg.f32	s14, s15
 8001ade:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae6:	4be1      	ldr	r3, [pc, #900]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001ae8:	edd3 6a00 	vldr	s13, [r3]
 8001aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af8:	4bdd      	ldr	r3, [pc, #884]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001afa:	edd3 6a00 	vldr	s13, [r3]
 8001afe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b12:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001b16:	4bd7      	ldr	r3, [pc, #860]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	4bd1      	ldr	r3, [pc, #836]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b36:	4bce      	ldr	r3, [pc, #824]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001b38:	edd3 6a00 	vldr	s13, [r3]
 8001b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001b54:	4bc7      	ldr	r3, [pc, #796]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	4bc1      	ldr	r3, [pc, #772]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001b64:	edd3 6a00 	vldr	s13, [r3]
 8001b68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b74:	4bbe      	ldr	r3, [pc, #760]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001b76:	edd3 6a00 	vldr	s13, [r3]
 8001b7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001b92:	4bb8      	ldr	r3, [pc, #736]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	4bb1      	ldr	r3, [pc, #708]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001ba2:	edd3 6a00 	vldr	s13, [r3]
 8001ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	4bae      	ldr	r3, [pc, #696]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001bb4:	edd3 6a00 	vldr	s13, [r3]
 8001bb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001bd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d10e      	bne.n	8001bfc <MadgwickAHRSupdate+0x19c>
 8001bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d107      	bne.n	8001bfc <MadgwickAHRSupdate+0x19c>
 8001bec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	f000 85ac 	beq.w	8002754 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f001 f958 	bl	8002ed4 <invSqrt>
 8001c24:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		ax *= recipNorm;
 8001c28:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c2c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001c38:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c3c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c44:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 8001c48:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	f001 f92a 	bl	8002ed4 <invSqrt>
 8001c80:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		mx *= recipNorm;
 8001c84:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c88:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001c94:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c98:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001ca4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ca8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		_2q0my = 2.0f * q0 * my;
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001ce0:	4b64      	ldr	r3, [pc, #400]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		_2q0 = 2.0f * q0;
 8001d0c:	4b59      	ldr	r3, [pc, #356]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d16:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		_2q1 = 2.0f * q1;
 8001d1a:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d24:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		_2q2 = 2.0f * q2;
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d32:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		_2q3 = 2.0f * q3;
 8001d36:	4b4e      	ldr	r3, [pc, #312]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d40:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d58:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001d5c:	4b43      	ldr	r3, [pc, #268]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d66:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		q0q0 = q0 * q0;
 8001d74:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		q0q1 = q0 * q1;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d8a:	ed93 7a00 	vldr	s14, [r3]
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d98:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		q0q2 = q0 * q2;
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		q0q3 = q0 * q3;
 8001db0:	4b30      	ldr	r3, [pc, #192]	@ (8001e74 <MadgwickAHRSupdate+0x414>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		q1q1 = q1 * q1;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		q1q2 = q1 * q2;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	4b23      	ldr	r3, [pc, #140]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		q1q3 = q1 * q3;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <MadgwickAHRSupdate+0x408>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		q2q2 = q2 * q2;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001e02:	ed93 7a00 	vldr	s14, [r3]
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		q2q3 = q2 * q3;
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001e16:	ed93 7a00 	vldr	s14, [r3]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		q3q3 = q3 * q3;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001e2a:	ed93 7a00 	vldr	s14, [r3]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e40:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MadgwickAHRSupdate+0x410>)
 8001e4a:	edd3 6a00 	vldr	s13, [r3]
 8001e4e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <MadgwickAHRSupdate+0x40c>)
 8001e5c:	edd3 6a00 	vldr	s13, [r3]
 8001e60:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001e64:	e008      	b.n	8001e78 <MadgwickAHRSupdate+0x418>
 8001e66:	bf00      	nop
 8001e68:	20001a1c 	.word	0x20001a1c
 8001e6c:	20001a20 	.word	0x20001a20
 8001e70:	20001a24 	.word	0x20001a24
 8001e74:	200000e8 	.word	0x200000e8
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e84:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e90:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8001e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e9c:	4bf5      	ldr	r3, [pc, #980]	@ (8002274 <MadgwickAHRSupdate+0x814>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eaa:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8001eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb6:	4bf0      	ldr	r3, [pc, #960]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ec8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ed8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001ee8:	4be3      	ldr	r3, [pc, #908]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001efa:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f06:	4bdd      	ldr	r3, [pc, #884]	@ (800227c <MadgwickAHRSupdate+0x81c>)
 8001f08:	edd3 6a00 	vldr	s13, [r3]
 8001f0c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f18:	4bd6      	ldr	r3, [pc, #856]	@ (8002274 <MadgwickAHRSupdate+0x814>)
 8001f1a:	edd3 6a00 	vldr	s13, [r3]
 8001f1e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f2e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f3e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4a:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8001f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f56:	4bc8      	ldr	r3, [pc, #800]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f64:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f74:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001f78:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001f7c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f80:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001f84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	ee17 0a90 	vmov	r0, s15
 8001f90:	f7fe fada 	bl	8000548 <__aeabi_f2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	ec43 2b10 	vmov	d0, r2, r3
 8001f9c:	f018 fb08 	bl	801a5b0 <sqrt>
 8001fa0:	ec53 2b10 	vmov	r2, r3, d0
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fe1e 	bl	8000be8 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001fb0:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001fb4:	eeb1 7a67 	vneg.f32	s14, s15
 8001fb8:	4bae      	ldr	r3, [pc, #696]	@ (8002274 <MadgwickAHRSupdate+0x814>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc2:	4bae      	ldr	r3, [pc, #696]	@ (800227c <MadgwickAHRSupdate+0x81c>)
 8001fc4:	edd3 6a00 	vldr	s13, [r3]
 8001fc8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fd8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe4:	4ba4      	ldr	r3, [pc, #656]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ffa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002006:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 800200a:	edd7 7a02 	vldr	s15, [r7, #8]
 800200e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002012:	4b99      	ldr	r3, [pc, #612]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800201c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002020:	edd7 6a01 	vldr	s13, [r7, #4]
 8002024:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002030:	edd7 6a01 	vldr	s13, [r7, #4]
 8002034:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4bx = 2.0f * _2bx;
 8002044:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002048:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800204c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_4bz = 2.0f * _2bz;
 8002050:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002054:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002058:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800205c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002060:	eeb1 7a67 	vneg.f32	s14, s15
 8002064:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002068:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800206c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002070:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002074:	edd7 7a06 	vldr	s15, [r7, #24]
 8002078:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800207c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002080:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002084:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002088:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800208c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002090:	edd7 7a05 	vldr	s15, [r7, #20]
 8002094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002098:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800209c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a4:	4b73      	ldr	r3, [pc, #460]	@ (8002274 <MadgwickAHRSupdate+0x814>)
 80020a6:	edd3 6a00 	vldr	s13, [r3]
 80020aa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80020b6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80020ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 80020be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80020c2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80020c6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020ce:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 80020d2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80020d6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80020da:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020de:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80020e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020fa:	eef1 6a67 	vneg.f32	s13, s15
 80020fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <MadgwickAHRSupdate+0x81c>)
 800210a:	ed93 6a00 	vldr	s12, [r3]
 800210e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002112:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002116:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800211a:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 800211e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002122:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002126:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800212a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800212e:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8002132:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002136:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800213a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800213e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002142:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002146:	edd7 7a02 	vldr	s15, [r7, #8]
 800214a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <MadgwickAHRSupdate+0x814>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002160:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002164:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8002168:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800216c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002170:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002174:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002178:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800217c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002180:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002184:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002188:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800218c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002190:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002194:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002198:	edd7 7a01 	vldr	s15, [r7, #4]
 800219c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80021ac:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80021b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021b4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80021b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80021c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021cc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80021d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021d4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80021d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021e4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80021e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f0:	4b22      	ldr	r3, [pc, #136]	@ (800227c <MadgwickAHRSupdate+0x81c>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80021fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021fe:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002206:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800220a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800220e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002212:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002216:	ee36 6a67 	vsub.f32	s12, s12, s15
 800221a:	edd7 7a04 	vldr	s15, [r7, #16]
 800221e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <MadgwickAHRSupdate+0x818>)
 800222c:	edd3 6a00 	vldr	s13, [r3]
 8002230:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002234:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002238:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800223c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002240:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002244:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002248:	ee36 6a67 	vsub.f32	s12, s12, s15
 800224c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002250:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002254:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8002258:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800225c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002260:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002264:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002268:	ee36 6a27 	vadd.f32	s12, s12, s15
 800226c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002270:	e006      	b.n	8002280 <MadgwickAHRSupdate+0x820>
 8002272:	bf00      	nop
 8002274:	20001a20 	.word	0x20001a20
 8002278:	20001a24 	.word	0x20001a24
 800227c:	20001a1c 	.word	0x20001a1c
 8002280:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228c:	4bf6      	ldr	r3, [pc, #984]	@ (8002668 <MadgwickAHRSupdate+0xc08>)
 800228e:	edd3 6a00 	vldr	s13, [r3]
 8002292:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002296:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800229a:	4bf4      	ldr	r3, [pc, #976]	@ (800266c <MadgwickAHRSupdate+0xc0c>)
 800229c:	ed93 6a00 	vldr	s12, [r3]
 80022a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80022a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022ac:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 80022b0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80022b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80022b8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80022bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c0:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 80022c4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80022c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80022cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80022d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80022d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	4be1      	ldr	r3, [pc, #900]	@ (8002670 <MadgwickAHRSupdate+0xc10>)
 80022ea:	edd3 6a00 	vldr	s13, [r3]
 80022ee:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80022f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f6:	4bdf      	ldr	r3, [pc, #892]	@ (8002674 <MadgwickAHRSupdate+0xc14>)
 80022f8:	ed93 6a00 	vldr	s12, [r3]
 80022fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002300:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002304:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002308:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800230c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002310:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002314:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002318:	ee26 6a27 	vmul.f32	s12, s12, s15
 800231c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8002320:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002324:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002328:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800232c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002330:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002334:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002338:	ee36 6a27 	vadd.f32	s12, s12, s15
 800233c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002340:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002350:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002354:	eeb1 7a67 	vneg.f32	s14, s15
 8002358:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800235c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002360:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002364:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002368:	edd7 7a06 	vldr	s15, [r7, #24]
 800236c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002374:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002378:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800237c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002380:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002384:	edd7 7a05 	vldr	s15, [r7, #20]
 8002388:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800238c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002398:	4bb3      	ldr	r3, [pc, #716]	@ (8002668 <MadgwickAHRSupdate+0xc08>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80023a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023a6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80023aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80023b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023b6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80023ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80023c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023d6:	eef1 6a67 	vneg.f32	s13, s15
 80023da:	4ba3      	ldr	r3, [pc, #652]	@ (8002668 <MadgwickAHRSupdate+0xc08>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023e4:	4ba1      	ldr	r3, [pc, #644]	@ (800266c <MadgwickAHRSupdate+0xc0c>)
 80023e6:	ed93 6a00 	vldr	s12, [r3]
 80023ea:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023f6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80023fa:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80023fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002402:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002406:	ee36 6a67 	vsub.f32	s12, s12, s15
 800240a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800240e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002412:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8002416:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800241a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800241e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002422:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002426:	ee36 6a27 	vadd.f32	s12, s12, s15
 800242a:	edd7 7a03 	vldr	s15, [r7, #12]
 800242e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243a:	4b8e      	ldr	r3, [pc, #568]	@ (8002674 <MadgwickAHRSupdate+0xc14>)
 800243c:	edd3 6a00 	vldr	s13, [r3]
 8002440:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002444:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002448:	4b89      	ldr	r3, [pc, #548]	@ (8002670 <MadgwickAHRSupdate+0xc10>)
 800244a:	ed93 6a00 	vldr	s12, [r3]
 800244e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002452:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002456:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800245a:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 800245e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002462:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002466:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800246a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800246e:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8002472:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002476:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800247a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800247e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002482:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002486:	edd7 7a02 	vldr	s15, [r7, #8]
 800248a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800248e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <MadgwickAHRSupdate+0xc0c>)
 8002498:	edd3 6a00 	vldr	s13, [r3]
 800249c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80024a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024a4:	4b70      	ldr	r3, [pc, #448]	@ (8002668 <MadgwickAHRSupdate+0xc08>)
 80024a6:	ed93 6a00 	vldr	s12, [r3]
 80024aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024b6:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 80024ba:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80024be:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80024c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ca:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80024ce:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80024d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80024d6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024da:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80024de:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80024e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80024fe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002502:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002506:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800250a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800251a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002522:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002526:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800252a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800252e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002532:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002536:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800253e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002542:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002546:	eef1 6a67 	vneg.f32	s13, s15
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <MadgwickAHRSupdate+0xc10>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002554:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <MadgwickAHRSupdate+0xc14>)
 8002556:	ed93 6a00 	vldr	s12, [r3]
 800255a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800255e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002562:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002566:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800256a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800256e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002572:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002576:	ee36 6a67 	vsub.f32	s12, s12, s15
 800257a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800257e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002582:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8002586:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800258a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800258e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002592:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002596:	ee36 6a27 	vadd.f32	s12, s12, s15
 800259a:	edd7 7a03 	vldr	s15, [r7, #12]
 800259e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025aa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80025ae:	eef1 6a67 	vneg.f32	s13, s15
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <MadgwickAHRSupdate+0xc0c>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <MadgwickAHRSupdate+0xc08>)
 80025be:	ed93 6a00 	vldr	s12, [r3]
 80025c2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025ce:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 80025d2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80025d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80025da:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80025de:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025e2:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 80025e6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80025ea:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80025ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025f2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025f6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80025fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80025fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MadgwickAHRSupdate+0xc14>)
 800260c:	edd3 6a00 	vldr	s13, [r3]
 8002610:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002614:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002618:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800261c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002620:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002624:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002628:	ee26 6a27 	vmul.f32	s12, s12, s15
 800262c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8002630:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002634:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002638:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800263c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002640:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002644:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002648:	ee36 6a27 	vadd.f32	s12, s12, s15
 800264c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002650:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002660:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002664:	e008      	b.n	8002678 <MadgwickAHRSupdate+0xc18>
 8002666:	bf00      	nop
 8002668:	20001a20 	.word	0x20001a20
 800266c:	200000e8 	.word	0x200000e8
 8002670:	20001a24 	.word	0x20001a24
 8002674:	20001a1c 	.word	0x20001a1c
 8002678:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800267c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002680:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002688:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800268c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002694:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002698:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a0:	eeb0 0a67 	vmov.f32	s0, s15
 80026a4:	f000 fc16 	bl	8002ed4 <invSqrt>
 80026a8:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		s0 *= recipNorm;
 80026ac:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80026b0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80026b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 *= recipNorm;
 80026bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80026c0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 *= recipNorm;
 80026cc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80026d0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 *= recipNorm;
 80026dc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80026e0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 80026ec:	4b61      	ldr	r3, [pc, #388]	@ (8002874 <MadgwickAHRSupdate+0xe14>)
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
		qDot2 -= beta * s1;
 8002706:	4b5b      	ldr	r3, [pc, #364]	@ (8002874 <MadgwickAHRSupdate+0xe14>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
		qDot3 -= beta * s2;
 8002720:	4b54      	ldr	r3, [pc, #336]	@ (8002874 <MadgwickAHRSupdate+0xe14>)
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002736:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		qDot4 -= beta * s3;
 800273a:	4b4e      	ldr	r3, [pc, #312]	@ (8002874 <MadgwickAHRSupdate+0xe14>)
 800273c:	ed93 7a00 	vldr	s14, [r3]
 8002740:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002754:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8002758:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002878 <MadgwickAHRSupdate+0xe18>
 800275c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002760:	4b46      	ldr	r3, [pc, #280]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 800276c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002770:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002774:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002878 <MadgwickAHRSupdate+0xe18>
 8002778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800277c:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 8002788:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800278c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002790:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002878 <MadgwickAHRSupdate+0xe18>
 8002794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 80027a4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80027a8:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80027ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002878 <MadgwickAHRSupdate+0xe18>
 80027b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027b4:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 80027c0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 80027d6:	edd3 6a00 	vldr	s13, [r3]
 80027da:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e8:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 80027ea:	edd3 6a00 	vldr	s13, [r3]
 80027ee:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 80027fe:	edd3 6a00 	vldr	s13, [r3]
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	f000 fb5e 	bl	8002ed4 <invSqrt>
 8002818:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	q0 *= recipNorm;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 800281e:	ed93 7a00 	vldr	s14, [r3]
 8002822:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <MadgwickAHRSupdate+0xe1c>)
 800282c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002830:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 8002832:	ed93 7a00 	vldr	s14, [r3]
 8002836:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <MadgwickAHRSupdate+0xe20>)
 8002840:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <MadgwickAHRSupdate+0xe24>)
 8002854:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <MadgwickAHRSupdate+0xe28>)
 8002868:	edc3 7a00 	vstr	s15, [r3]
}
 800286c:	37b8      	adds	r7, #184	@ 0xb8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200000ec 	.word	0x200000ec
 8002878:	3c5a740e 	.word	0x3c5a740e
 800287c:	200000e8 	.word	0x200000e8
 8002880:	20001a1c 	.word	0x20001a1c
 8002884:	20001a20 	.word	0x20001a20
 8002888:	20001a24 	.word	0x20001a24

0800288c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b09c      	sub	sp, #112	@ 0x70
 8002890:	af00      	add	r7, sp, #0
 8002892:	ed87 0a05 	vstr	s0, [r7, #20]
 8002896:	edc7 0a04 	vstr	s1, [r7, #16]
 800289a:	ed87 1a03 	vstr	s2, [r7, #12]
 800289e:	edc7 1a02 	vstr	s3, [r7, #8]
 80028a2:	ed87 2a01 	vstr	s4, [r7, #4]
 80028a6:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80028aa:	4bec      	ldr	r3, [pc, #944]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eeb1 7a67 	vneg.f32	s14, s15
 80028b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028bc:	4be8      	ldr	r3, [pc, #928]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 80028be:	edd3 6a00 	vldr	s13, [r3]
 80028c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ce:	4be5      	ldr	r3, [pc, #916]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 80028d0:	edd3 6a00 	vldr	s13, [r3]
 80028d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80028ec:	4bde      	ldr	r3, [pc, #888]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fa:	4bd9      	ldr	r3, [pc, #868]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 80028fc:	edd3 6a00 	vldr	s13, [r3]
 8002900:	edd7 7a03 	vldr	s15, [r7, #12]
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290c:	4bd5      	ldr	r3, [pc, #852]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 800290e:	edd3 6a00 	vldr	s13, [r3]
 8002912:	edd7 7a04 	vldr	s15, [r7, #16]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800292a:	4bcf      	ldr	r3, [pc, #828]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	edd7 7a04 	vldr	s15, [r7, #16]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	4bc8      	ldr	r3, [pc, #800]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 800293a:	edd3 6a00 	vldr	s13, [r3]
 800293e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294a:	4bc6      	ldr	r3, [pc, #792]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 800294c:	edd3 6a00 	vldr	s13, [r3]
 8002950:	edd7 7a05 	vldr	s15, [r7, #20]
 8002954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002964:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002968:	4bbf      	ldr	r3, [pc, #764]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 800296a:	ed93 7a00 	vldr	s14, [r3]
 800296e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002976:	4bb9      	ldr	r3, [pc, #740]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002978:	edd3 6a00 	vldr	s13, [r3]
 800297c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	4bb5      	ldr	r3, [pc, #724]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 800298a:	edd3 6a00 	vldr	s13, [r3]
 800298e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80029a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	d10e      	bne.n	80029d2 <MadgwickAHRSupdateIMU+0x146>
 80029b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	d107      	bne.n	80029d2 <MadgwickAHRSupdateIMU+0x146>
 80029c2:	edd7 7a00 	vldr	s15, [r7]
 80029c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	f000 81e5 	beq.w	8002d9c <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80029d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029da:	edd7 7a01 	vldr	s15, [r7, #4]
 80029de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e6:	edd7 7a00 	vldr	s15, [r7]
 80029ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	f000 fa6d 	bl	8002ed4 <invSqrt>
 80029fa:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 80029fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a02:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a12:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8002a1e:	ed97 7a00 	vldr	s14, [r7]
 8002a22:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a38:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 8002a3c:	4b87      	ldr	r3, [pc, #540]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a46:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 8002a4a:	4b85      	ldr	r3, [pc, #532]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a54:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 8002a58:	4b82      	ldr	r3, [pc, #520]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a62:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 8002a66:	4b80      	ldr	r3, [pc, #512]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 8002a78:	4b78      	ldr	r3, [pc, #480]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a86:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 8002a8a:	4b75      	ldr	r3, [pc, #468]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aaa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 8002aae:	4b6c      	ldr	r3, [pc, #432]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 8002ac0:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	4b68      	ldr	r3, [pc, #416]	@ (8002c68 <MadgwickAHRSupdateIMU+0x3dc>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 8002ad4:	4b61      	ldr	r3, [pc, #388]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002ad6:	ed93 7a00 	vldr	s14, [r3]
 8002ada:	4b60      	ldr	r3, [pc, #384]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	4b5c      	ldr	r3, [pc, #368]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 8002afc:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <MadgwickAHRSupdateIMU+0x3d8>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002b10:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002b14:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002b30:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002b50:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002b54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002b70:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002b74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b78:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <MadgwickAHRSupdateIMU+0x3d0>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b86:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b96:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b9e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002ba2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002bb2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbe:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002bc2:	edd7 7a00 	vldr	s15, [r7]
 8002bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002bd2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002bd6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002bda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <MadgwickAHRSupdateIMU+0x3d4>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be8:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002bec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002bfc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c08:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c18:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c20:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002c24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002c34:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c40:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002c44:	edd7 7a00 	vldr	s15, [r7]
 8002c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002c54:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002c58:	e008      	b.n	8002c6c <MadgwickAHRSupdateIMU+0x3e0>
 8002c5a:	bf00      	nop
 8002c5c:	20001a1c 	.word	0x20001a1c
 8002c60:	20001a20 	.word	0x20001a20
 8002c64:	20001a24 	.word	0x20001a24
 8002c68:	200000e8 	.word	0x200000e8
 8002c6c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c74:	4b91      	ldr	r3, [pc, #580]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c92:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002c96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c9a:	4b88      	ldr	r3, [pc, #544]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb8:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002cbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002cc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002cc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cec:	f000 f8f2 	bl	8002ed4 <invSqrt>
 8002cf0:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 8002cf4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002cf8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 8002d04:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d08:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d10:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002d14:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d18:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d20:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002d24:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d28:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002d34:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <MadgwickAHRSupdateIMU+0x634>)
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d42:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec0 <MadgwickAHRSupdateIMU+0x634>)
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d64:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 8002d68:	4b55      	ldr	r3, [pc, #340]	@ (8002ec0 <MadgwickAHRSupdateIMU+0x634>)
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 8002d82:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec0 <MadgwickAHRSupdateIMU+0x634>)
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d90:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d98:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002d9c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002da0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002ec4 <MadgwickAHRSupdateIMU+0x638>
 8002da4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002da8:	4b47      	ldr	r3, [pc, #284]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	4b45      	ldr	r3, [pc, #276]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002db8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002dbc:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002ec4 <MadgwickAHRSupdateIMU+0x638>
 8002dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dc4:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002dd0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002dd4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002dd8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002ec4 <MadgwickAHRSupdateIMU+0x638>
 8002ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002dec:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002df0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002df4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002ec4 <MadgwickAHRSupdateIMU+0x638>
 8002df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002e08:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002e1e:	edd3 6a00 	vldr	s13, [r3]
 8002e22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002e32:	edd3 6a00 	vldr	s13, [r3]
 8002e36:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e44:	4b1d      	ldr	r3, [pc, #116]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002e46:	edd3 6a00 	vldr	s13, [r3]
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f000 f83a 	bl	8002ed4 <invSqrt>
 8002e60:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 8002e64:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <MadgwickAHRSupdateIMU+0x63c>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002e7a:	ed93 7a00 	vldr	s14, [r3]
 8002e7e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MadgwickAHRSupdateIMU+0x640>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <MadgwickAHRSupdateIMU+0x644>)
 8002e9c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	4b03      	ldr	r3, [pc, #12]	@ (8002ebc <MadgwickAHRSupdateIMU+0x630>)
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
}
 8002eb4:	bf00      	nop
 8002eb6:	3770      	adds	r7, #112	@ 0x70
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20001a24 	.word	0x20001a24
 8002ec0:	200000ec 	.word	0x200000ec
 8002ec4:	3c5a740e 	.word	0x3c5a740e
 8002ec8:	200000e8 	.word	0x200000e8
 8002ecc:	20001a1c 	.word	0x20001a1c
 8002ed0:	20001a20 	.word	0x20001a20

08002ed4 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	105a      	asrs	r2, r3, #1
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <invSqrt+0x74>)
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002f0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
}
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	5f3759df 	.word	0x5f3759df
 8002f4c:	00000000 	.word	0x00000000

08002f50 <quaternion_to_euler>:

void quaternion_to_euler(float q0, float q1, float q2, float q3, float *roll, float *pitch, float *yaw) {
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b092      	sub	sp, #72	@ 0x48
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f5a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f5e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f62:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
    // Roll (x-axis rotation)
    double sinr_cosp = 2.0 * (q0 * q1 + q2 * q3);
 8002f6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f78:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fadc 	bl	8000548 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	f7fd f97a 	bl	800028c <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double cosr_cosp = 1.0 - 2.0 * (q1 * q1 + q2 * q2);
 8002fa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fa4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	ee17 0a90 	vmov	r0, s15
 8002fb8:	f7fd fac6 	bl	8000548 <__aeabi_f2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	f7fd f964 	bl	800028c <__adddf3>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	495a      	ldr	r1, [pc, #360]	@ (8003138 <quaternion_to_euler+0x1e8>)
 8002fce:	f7fd f95b 	bl	8000288 <__aeabi_dsub>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    *roll = atan2(sinr_cosp, cosr_cosp);
 8002fda:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8002fde:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8002fe2:	f017 fa3f 	bl	801a464 <atan2>
 8002fe6:	ec53 2b10 	vmov	r2, r3, d0
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7fd fdfb 	bl	8000be8 <__aeabi_d2f>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

    // Pitch (z-axis rotation)
    double sinp = 2.0 * (q0 * q2 - q3 * q1);
 8002ff8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003004:	edd7 6a04 	vldr	s13, [r7, #16]
 8003008:	edd7 7a06 	vldr	s15, [r7, #24]
 800300c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003014:	ee17 0a90 	vmov	r0, s15
 8003018:	f7fd fa96 	bl	8000548 <__aeabi_f2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	f7fd f934 	bl	800028c <__adddf3>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    if (fabs(sinp) >= 1.0) {
 800302c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003030:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b3f      	ldr	r3, [pc, #252]	@ (8003138 <quaternion_to_euler+0x1e8>)
 800303a:	4620      	mov	r0, r4
 800303c:	4629      	mov	r1, r5
 800303e:	f7fd fd61 	bl	8000b04 <__aeabi_dcmpge>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00f      	beq.n	8003068 <quaternion_to_euler+0x118>
        *pitch = copysign(PI / 2.0, sinp); // Use 90 degrees if out of range
 8003048:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800304c:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8003130 <quaternion_to_euler+0x1e0>
 8003050:	f015 fc53 	bl	80188fa <copysign>
 8003054:	ec53 2b10 	vmov	r2, r3, d0
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f7fd fdc4 	bl	8000be8 <__aeabi_d2f>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e00c      	b.n	8003082 <quaternion_to_euler+0x132>
    } else {
        *pitch = asin(sinp);
 8003068:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800306c:	f017 f9c6 	bl	801a3fc <asin>
 8003070:	ec53 2b10 	vmov	r2, r3, d0
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fdb6 	bl	8000be8 <__aeabi_d2f>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	601a      	str	r2, [r3, #0]
    }

    // Yaw (y-axis rotation)
    double siny_cosp = 2.0 * (q0 * q3 + q1 * q2);
 8003082:	ed97 7a07 	vldr	s14, [r7, #28]
 8003086:	edd7 7a04 	vldr	s15, [r7, #16]
 800308a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003092:	edd7 7a05 	vldr	s15, [r7, #20]
 8003096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd fa51 	bl	8000548 <__aeabi_f2d>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	f7fd f8ef 	bl	800028c <__adddf3>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double cosy_cosp = 1.0 - 2.0 * (q2 * q2 + q3 * q3);
 80030b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80030be:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ca:	ee17 0a90 	vmov	r0, s15
 80030ce:	f7fd fa3b 	bl	8000548 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	f7fd f8d9 	bl	800028c <__adddf3>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	4915      	ldr	r1, [pc, #84]	@ (8003138 <quaternion_to_euler+0x1e8>)
 80030e4:	f7fd f8d0 	bl	8000288 <__aeabi_dsub>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    *yaw = atan(siny_cosp / cosy_cosp);
 80030f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030f8:	f7fd fba8 	bl	800084c <__aeabi_ddiv>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	ec43 2b17 	vmov	d7, r2, r3
 8003104:	eeb0 0a47 	vmov.f32	s0, s14
 8003108:	eef0 0a67 	vmov.f32	s1, s15
 800310c:	f017 fa7c 	bl	801a608 <atan>
 8003110:	ec53 2b10 	vmov	r2, r3, d0
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fd66 	bl	8000be8 <__aeabi_d2f>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
	//*yaw = PI * (*yaw + 0.07);

}
 8003122:	bf00      	nop
 8003124:	3748      	adds	r7, #72	@ 0x48
 8003126:	46bd      	mov	sp, r7
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	bf00      	nop
 800312c:	f3af 8000 	nop.w
 8003130:	60000000 	.word	0x60000000
 8003134:	3ff921fb 	.word	0x3ff921fb
 8003138:	3ff00000 	.word	0x3ff00000
 800313c:	00000000 	.word	0x00000000

08003140 <IK_leg>:
 *  Created on: May 21, 2022
 *      Author: Wissam
 */
#include "kinematics.h"

void IK_leg(float * HLK_cmd ,  float * EExyz_cmd){
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	ed2d 8b02 	vpush	{d8}
 8003146:	b094      	sub	sp, #80	@ 0x50
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]


	for(int i = 0 ; i < 4 ; i++){
 800314e:	2300      	movs	r3, #0
 8003150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003152:	e257      	b.n	8003604 <IK_leg+0x4c4>
		//calculate the needed variables only once, this function needs to loop at a very high rate
		float32_t x = EExyz_cmd[0+i];
 8003154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	4413      	add	r3, r2
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
		float32_t y = EExyz_cmd[4+i];
 8003160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003162:	3304      	adds	r3, #4
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	647b      	str	r3, [r7, #68]	@ 0x44
		float32_t z = EExyz_cmd[8+i];
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	3308      	adds	r3, #8
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	643b      	str	r3, [r7, #64]	@ 0x40

		float32_t R = sqrt(x*x + y*y + z*z);
 800317c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003180:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003184:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003188:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003194:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	ee17 0a90 	vmov	r0, s15
 80031a0:	f7fd f9d2 	bl	8000548 <__aeabi_f2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	ec43 2b10 	vmov	d0, r2, r3
 80031ac:	f017 fa00 	bl	801a5b0 <sqrt>
 80031b0:	ec53 2b10 	vmov	r2, r3, d0
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fd16 	bl	8000be8 <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c

		//check if the given data points are inside the contour of definition
		//if not, translate the end effector to the extreme, on the sphere of enclosing the volume

		if(R > MAX_L){
 80031c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80031c4:	ed9f 7ae6 	vldr	s14, [pc, #920]	@ 8003560 <IK_leg+0x420>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	dd6c      	ble.n	80032ac <IK_leg+0x16c>
		   float32_t c_phi,s_phi,c_theta,s_theta,Rs_phi; //polar angles in radiant
			c_phi = z/R;
 80031d2:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80031d6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80031da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			s_phi = sqrt(1-pow(c_phi/R , 2));
 80031e2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80031e6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80031ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031ee:	ee16 0a90 	vmov	r0, s13
 80031f2:	f7fd f9a9 	bl	8000548 <__aeabi_f2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ed9f 1bd5 	vldr	d1, [pc, #852]	@ 8003550 <IK_leg+0x410>
 80031fe:	ec43 2b10 	vmov	d0, r2, r3
 8003202:	f017 f965 	bl	801a4d0 <pow>
 8003206:	ec53 2b10 	vmov	r2, r3, d0
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	49d5      	ldr	r1, [pc, #852]	@ (8003564 <IK_leg+0x424>)
 8003210:	f7fd f83a 	bl	8000288 <__aeabi_dsub>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	ec43 2b17 	vmov	d7, r2, r3
 800321c:	eeb0 0a47 	vmov.f32	s0, s14
 8003220:	eef0 0a67 	vmov.f32	s1, s15
 8003224:	f017 f9c4 	bl	801a5b0 <sqrt>
 8003228:	ec53 2b10 	vmov	r2, r3, d0
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f7fd fcda 	bl	8000be8 <__aeabi_d2f>
 8003234:	4603      	mov	r3, r0
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
			Rs_phi = R*s_phi;
 8003238:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800323c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003244:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			s_theta = y /Rs_phi;
 8003248:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800324c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003254:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			c_theta = x /Rs_phi;
 8003258:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800325c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003264:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			R = MAX_L;
 8003268:	4bbf      	ldr	r3, [pc, #764]	@ (8003568 <IK_leg+0x428>)
 800326a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			//update the EE position
			x  = R * s_phi * c_theta;
 800326c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003270:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800327c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003280:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
			y  = R * s_phi * s_theta;
 8003284:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003288:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800328c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003290:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			z  = R * c_phi;
 800329c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80032a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		}

		// Might consider better frame offsets for the IK leg.

		//hip angle
		float32_t R0 = sqrt(pow(z,2) + pow(y,2) - pow(L_HIPS,2));
 80032ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80032ae:	f7fd f94b 	bl	8000548 <__aeabi_f2d>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8003550 <IK_leg+0x410>
 80032ba:	ec43 2b10 	vmov	d0, r2, r3
 80032be:	f017 f907 	bl	801a4d0 <pow>
 80032c2:	ec55 4b10 	vmov	r4, r5, d0
 80032c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80032c8:	f7fd f93e 	bl	8000548 <__aeabi_f2d>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003550 <IK_leg+0x410>
 80032d4:	ec43 2b10 	vmov	d0, r2, r3
 80032d8:	f017 f8fa 	bl	801a4d0 <pow>
 80032dc:	ec53 2b10 	vmov	r2, r3, d0
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fc ffd2 	bl	800028c <__adddf3>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	a399      	add	r3, pc, #612	@ (adr r3, 8003558 <IK_leg+0x418>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fc ffc7 	bl	8000288 <__aeabi_dsub>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	ec43 2b17 	vmov	d7, r2, r3
 8003302:	eeb0 0a47 	vmov.f32	s0, s14
 8003306:	eef0 0a67 	vmov.f32	s1, s15
 800330a:	f017 f951 	bl	801a5b0 <sqrt>
 800330e:	ec53 2b10 	vmov	r2, r3, d0
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f7fd fc67 	bl	8000be8 <__aeabi_d2f>
 800331a:	4603      	mov	r3, r0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
		float32_t Phi = atan2(y,z);
 800331e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003320:	f7fd f912 	bl	8000548 <__aeabi_f2d>
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800332a:	f7fd f90d 	bl	8000548 <__aeabi_f2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	ec43 2b11 	vmov	d1, r2, r3
 8003336:	ec45 4b10 	vmov	d0, r4, r5
 800333a:	f017 f893 	bl	801a464 <atan2>
 800333e:	ec53 2b10 	vmov	r2, r3, d0
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	f7fd fc4f 	bl	8000be8 <__aeabi_d2f>
 800334a:	4603      	mov	r3, r0
 800334c:	623b      	str	r3, [r7, #32]
		float32_t Psi = asin(L_HIPS/R0);
 800334e:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800356c <IK_leg+0x42c>
 8003352:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335a:	ee16 0a90 	vmov	r0, s13
 800335e:	f7fd f8f3 	bl	8000548 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	ec43 2b10 	vmov	d0, r2, r3
 800336a:	f017 f847 	bl	801a3fc <asin>
 800336e:	ec53 2b10 	vmov	r2, r3, d0
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fc37 	bl	8000be8 <__aeabi_d2f>
 800337a:	4603      	mov	r3, r0
 800337c:	61fb      	str	r3, [r7, #28]
		HLK_cmd[i] = Phi - Psi + 0.7637336417948966f;
 800337e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003382:	edd7 7a07 	vldr	s15, [r7, #28]
 8003386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003570 <IK_leg+0x430>
 8003396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800339a:	edc3 7a00 	vstr	s15, [r3]

		float32_t D = sqrt( pow(hypot(y,z),2) - pow(L_HIPS,2));
 800339e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80033a0:	f7fd f8d2 	bl	8000548 <__aeabi_f2d>
 80033a4:	4604      	mov	r4, r0
 80033a6:	460d      	mov	r5, r1
 80033a8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80033aa:	f7fd f8cd 	bl	8000548 <__aeabi_f2d>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ec43 2b11 	vmov	d1, r2, r3
 80033b6:	ec45 4b10 	vmov	d0, r4, r5
 80033ba:	f017 f855 	bl	801a468 <hypot>
 80033be:	eeb0 7a40 	vmov.f32	s14, s0
 80033c2:	eef0 7a60 	vmov.f32	s15, s1
 80033c6:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 8003550 <IK_leg+0x410>
 80033ca:	eeb0 0a47 	vmov.f32	s0, s14
 80033ce:	eef0 0a67 	vmov.f32	s1, s15
 80033d2:	f017 f87d 	bl	801a4d0 <pow>
 80033d6:	ec51 0b10 	vmov	r0, r1, d0
 80033da:	a35f      	add	r3, pc, #380	@ (adr r3, 8003558 <IK_leg+0x418>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fc ff52 	bl	8000288 <__aeabi_dsub>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	ec43 2b17 	vmov	d7, r2, r3
 80033ec:	eeb0 0a47 	vmov.f32	s0, s14
 80033f0:	eef0 0a67 	vmov.f32	s1, s15
 80033f4:	f017 f8dc 	bl	801a5b0 <sqrt>
 80033f8:	ec53 2b10 	vmov	r2, r3, d0
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fbf2 	bl	8000be8 <__aeabi_d2f>
 8003404:	4603      	mov	r3, r0
 8003406:	61bb      	str	r3, [r7, #24]
		float32_t R1 = hypot(x , D);
 8003408:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800340a:	f7fd f89d 	bl	8000548 <__aeabi_f2d>
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	f7fd f898 	bl	8000548 <__aeabi_f2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	ec43 2b11 	vmov	d1, r2, r3
 8003420:	ec45 4b10 	vmov	d0, r4, r5
 8003424:	f017 f820 	bl	801a468 <hypot>
 8003428:	ec53 2b10 	vmov	r2, r3, d0
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fbda 	bl	8000be8 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	617b      	str	r3, [r7, #20]
		float32_t Alpha = atan2(D,x);
 8003438:	69b8      	ldr	r0, [r7, #24]
 800343a:	f7fd f885 	bl	8000548 <__aeabi_f2d>
 800343e:	4604      	mov	r4, r0
 8003440:	460d      	mov	r5, r1
 8003442:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003444:	f7fd f880 	bl	8000548 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	ec43 2b11 	vmov	d1, r2, r3
 8003450:	ec45 4b10 	vmov	d0, r4, r5
 8003454:	f017 f806 	bl	801a464 <atan2>
 8003458:	ec53 2b10 	vmov	r2, r3, d0
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fbc2 	bl	8000be8 <__aeabi_d2f>
 8003464:	4603      	mov	r3, r0
 8003466:	613b      	str	r3, [r7, #16]
		float32_t Beta = atan2(L_LEG*sin(PI-HLK_cmd[12+i]) , L_COXA+L_LEG*cos(PI-HLK_cmd[12+i]));
 8003468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346a:	330c      	adds	r3, #12
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003574 <IK_leg+0x434>
 800347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347e:	ee17 0a90 	vmov	r0, s15
 8003482:	f7fd f861 	bl	8000548 <__aeabi_f2d>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	ec43 2b10 	vmov	d0, r2, r3
 800348e:	f017 faaf 	bl	801a9f0 <sin>
 8003492:	ec51 0b10 	vmov	r0, r1, d0
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <IK_leg+0x438>)
 800349c:	f7fd f8ac 	bl	80005f8 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	ec43 2b18 	vmov	d8, r2, r3
 80034a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034aa:	330c      	adds	r3, #12
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003574 <IK_leg+0x434>
 80034ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034be:	ee17 0a90 	vmov	r0, s15
 80034c2:	f7fd f841 	bl	8000548 <__aeabi_f2d>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	ec43 2b10 	vmov	d0, r2, r3
 80034ce:	f017 fa33 	bl	801a938 <cos>
 80034d2:	ec51 0b10 	vmov	r0, r1, d0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <IK_leg+0x438>)
 80034dc:	f7fd f88c 	bl	80005f8 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4b23      	ldr	r3, [pc, #140]	@ (800357c <IK_leg+0x43c>)
 80034ee:	f7fc fecd 	bl	800028c <__adddf3>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	ec43 2b17 	vmov	d7, r2, r3
 80034fa:	eeb0 1a47 	vmov.f32	s2, s14
 80034fe:	eef0 1a67 	vmov.f32	s3, s15
 8003502:	eeb0 0a48 	vmov.f32	s0, s16
 8003506:	eef0 0a68 	vmov.f32	s1, s17
 800350a:	f016 ffab 	bl	801a464 <atan2>
 800350e:	ec53 2b10 	vmov	r2, r3, d0
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f7fd fb67 	bl	8000be8 <__aeabi_d2f>
 800351a:	4603      	mov	r3, r0
 800351c:	60fb      	str	r3, [r7, #12]
		HLK_cmd[4+i] = PI - (Alpha-Beta);
 800351e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003522:	edd7 7a03 	vldr	s15, [r7, #12]
 8003526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352c:	3304      	adds	r3, #4
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003574 <IK_leg+0x434>
 8003538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353c:	edc3 7a00 	vstr	s15, [r3]

		//knee angle
		HLK_cmd[12+i] = acos( (pow(L_COXA,2) + pow(L_LEG,2) - pow(R1,2) )/(2.0f*L_COXA*L_LEG));
 8003540:	6978      	ldr	r0, [r7, #20]
 8003542:	f7fd f801 	bl	8000548 <__aeabi_f2d>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	e019      	b.n	8003580 <IK_leg+0x440>
 800354c:	f3af 8000 	nop.w
 8003550:	00000000 	.word	0x00000000
 8003554:	40000000 	.word	0x40000000
 8003558:	1b5c2900 	.word	0x1b5c2900
 800355c:	409c5b0a 	.word	0x409c5b0a
 8003560:	43340000 	.word	0x43340000
 8003564:	3ff00000 	.word	0x3ff00000
 8003568:	43340000 	.word	0x43340000
 800356c:	422a6666 	.word	0x422a6666
 8003570:	3f43840c 	.word	0x3f43840c
 8003574:	40490fdb 	.word	0x40490fdb
 8003578:	405a0000 	.word	0x405a0000
 800357c:	40474000 	.word	0x40474000
 8003580:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8003690 <IK_leg+0x550>
 8003584:	ec43 2b10 	vmov	d0, r2, r3
 8003588:	f016 ffa2 	bl	801a4d0 <pow>
 800358c:	ec53 2b10 	vmov	r2, r3, d0
 8003590:	a142      	add	r1, pc, #264	@ (adr r1, 800369c <IK_leg+0x55c>)
 8003592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003596:	f7fc fe77 	bl	8000288 <__aeabi_dsub>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	a340      	add	r3, pc, #256	@ (adr r3, 80036a4 <IK_leg+0x564>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f7fd f950 	bl	800084c <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	ec43 2b17 	vmov	d7, r2, r3
 80035b4:	eeb0 0a47 	vmov.f32	s0, s14
 80035b8:	eef0 0a67 	vmov.f32	s1, s15
 80035bc:	f016 feea 	bl	801a394 <acos>
 80035c0:	ec51 0b10 	vmov	r0, r1, d0
 80035c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c6:	330c      	adds	r3, #12
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	18d4      	adds	r4, r2, r3
 80035ce:	f7fd fb0b 	bl	8000be8 <__aeabi_d2f>
 80035d2:	4603      	mov	r3, r0
 80035d4:	6023      	str	r3, [r4, #0]

		//convert knee to crank angle
		HLK_cmd[8+i] = knee_to_crank(HLK_cmd[12+i]);
 80035d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d8:	330c      	adds	r3, #12
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e6:	3308      	adds	r3, #8
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	18d4      	adds	r4, r2, r3
 80035ee:	eeb0 0a67 	vmov.f32	s0, s15
 80035f2:	f000 f85d 	bl	80036b0 <knee_to_crank>
 80035f6:	eef0 7a40 	vmov.f32	s15, s0
 80035fa:	edc4 7a00 	vstr	s15, [r4]
	for(int i = 0 ; i < 4 ; i++){
 80035fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003600:	3301      	adds	r3, #1
 8003602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003606:	2b03      	cmp	r3, #3
 8003608:	f77f ada4 	ble.w	8003154 <IK_leg+0x14>
	}

	//convert Knee Angles to the motor crank angle
	//mirror angles for left side of the robot
	//UPPER LEG MIRRORS
	HLK_cmd[6] = PI-HLK_cmd[6];
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3318      	adds	r3, #24
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3318      	adds	r3, #24
 8003618:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8003698 <IK_leg+0x558>
 800361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003620:	edc3 7a00 	vstr	s15, [r3]
	//HTK[7] = PI-HTK[7];

	//KNEE MIRRORS
	HLK_cmd[8] = PI-HLK_cmd[8];
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3320      	adds	r3, #32
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3320      	adds	r3, #32
 8003630:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003698 <IK_leg+0x558>
 8003634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003638:	edc3 7a00 	vstr	s15, [r3]
	HLK_cmd[9] = PI-HLK_cmd[9];
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3324      	adds	r3, #36	@ 0x24
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3324      	adds	r3, #36	@ 0x24
 8003648:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003698 <IK_leg+0x558>
 800364c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003650:	edc3 7a00 	vstr	s15, [r3]

	//HIP MIRRORS
	HLK_cmd[1]  = PI - HLK_cmd[1];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003698 <IK_leg+0x558>
 8003664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003668:	edc3 7a00 	vstr	s15, [r3]
	HLK_cmd[3]  = PI - HLK_cmd[3];
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	330c      	adds	r3, #12
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	330c      	adds	r3, #12
 8003678:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003698 <IK_leg+0x558>
 800367c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003680:	edc3 7a00 	vstr	s15, [r3]

	return;
 8003684:	bf00      	nop
}
 8003686:	3750      	adds	r7, #80	@ 0x50
 8003688:	46bd      	mov	sp, r7
 800368a:	ecbd 8b02 	vpop	{d8}
 800368e:	bdb0      	pop	{r4, r5, r7, pc}
 8003690:	00000000 	.word	0x00000000
 8003694:	40000000 	.word	0x40000000
 8003698:	40490fdb 	.word	0x40490fdb
 800369c:	00000000 	.word	0x00000000
 80036a0:	40c95920 	.word	0x40c95920
 80036a4:	00000000 	.word	0x00000000
 80036a8:	40c2e400 	.word	0x40c2e400
 80036ac:	00000000 	.word	0x00000000

080036b0 <knee_to_crank>:

float32_t knee_to_crank(float32_t knee){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	ed87 0a01 	vstr	s0, [r7, #4]

	return (asin( (knee-AMP_CRANK_SINE)/(ANGULAR_OFFSET_CRANK_SINE) ) - TIME_OFFSET_CRANK_SINE)/(OMEGA_CRANK_SINE);
 80036ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80036be:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003730 <knee_to_crank+0x80>
 80036c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003734 <knee_to_crank+0x84>
 80036ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036ce:	ee16 0a90 	vmov	r0, s13
 80036d2:	f7fc ff39 	bl	8000548 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	ec43 2b10 	vmov	d0, r2, r3
 80036de:	f016 fe8d 	bl	801a3fc <asin>
 80036e2:	ec51 0b10 	vmov	r0, r1, d0
 80036e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8003720 <knee_to_crank+0x70>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc fdce 	bl	800028c <__adddf3>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8003728 <knee_to_crank+0x78>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fd f8a5 	bl	800084c <__aeabi_ddiv>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd fa6d 	bl	8000be8 <__aeabi_d2f>
 800370e:	4603      	mov	r3, r0
 8003710:	ee07 3a90 	vmov	s15, r3

}
 8003714:	eeb0 0a67 	vmov.f32	s0, s15
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40000000 	.word	0x40000000
 8003724:	3ff55fac 	.word	0x3ff55fac
 8003728:	e0000000 	.word	0xe0000000
 800372c:	3fef2d9f 	.word	0x3fef2d9f
 8003730:	3f4b8d20 	.word	0x3f4b8d20
 8003734:	3f93f3ae 	.word	0x3f93f3ae

08003738 <IK_body>:

arm_status IK_body(RODOG_Control * r, arm_matrix_instance_f32 * EE_cmd){
 8003738:	b580      	push	{r7, lr}
 800373a:	b0bc      	sub	sp, #240	@ 0xf0
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	//limit the given parameters
	if(r->BodyTx>MAX_TX)r->BodyTx = MAX_TX;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80039dc <IK_body+0x2a4>
 800374c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	dd03      	ble.n	800375e <IK_body+0x26>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4aa1      	ldr	r2, [pc, #644]	@ (80039e0 <IK_body+0x2a8>)
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e00c      	b.n	8003778 <IK_body+0x40>
	else if(r->BodyTx<MIN_TX)r->BodyTx = MIN_TX;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80039e4 <IK_body+0x2ac>
 8003768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	d502      	bpl.n	8003778 <IK_body+0x40>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a9c      	ldr	r2, [pc, #624]	@ (80039e8 <IK_body+0x2b0>)
 8003776:	601a      	str	r2, [r3, #0]

	if(r->BodyTy>MAX_TY)r->BodyTy = MAX_TY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	edd3 7a01 	vldr	s15, [r3, #4]
 800377e:	eeb3 7a03 	vmov.f32	s14, #51	@ 0x41980000  19.0
 8003782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	dd03      	ble.n	8003794 <IK_body+0x5c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a97      	ldr	r2, [pc, #604]	@ (80039ec <IK_body+0x2b4>)
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e00c      	b.n	80037ae <IK_body+0x76>
	else if(r->BodyTy<MIN_TY)r->BodyTy = MIN_TY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	edd3 7a01 	vldr	s15, [r3, #4]
 800379a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800379e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	d502      	bpl.n	80037ae <IK_body+0x76>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a91      	ldr	r2, [pc, #580]	@ (80039f0 <IK_body+0x2b8>)
 80037ac:	605a      	str	r2, [r3, #4]

	if(r->BodyTz>MAX_TZ)r->BodyTz = MAX_TZ;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80037b4:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80039f4 <IK_body+0x2bc>
 80037b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	dd03      	ble.n	80037ca <IK_body+0x92>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a8c      	ldr	r2, [pc, #560]	@ (80039f8 <IK_body+0x2c0>)
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e00c      	b.n	80037e4 <IK_body+0xac>
	else if(r->BodyTz<MIN_TZ)r->BodyTz = MIN_TZ;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80037d0:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80039fc <IK_body+0x2c4>
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d502      	bpl.n	80037e4 <IK_body+0xac>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a87      	ldr	r2, [pc, #540]	@ (8003a00 <IK_body+0x2c8>)
 80037e2:	609a      	str	r2, [r3, #8]

	if(r->BodyPitch>MAX_PITCH)r->BodyPitch = MAX_PITCH;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80037ea:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003a04 <IK_body+0x2cc>
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	dd03      	ble.n	8003800 <IK_body+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a83      	ldr	r2, [pc, #524]	@ (8003a08 <IK_body+0x2d0>)
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e00c      	b.n	800381a <IK_body+0xe2>
	else if(r->BodyPitch<MIN_PITCH)r->BodyPitch = MIN_PITCH;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	edd3 7a03 	vldr	s15, [r3, #12]
 8003806:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003a0c <IK_body+0x2d4>
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d502      	bpl.n	800381a <IK_body+0xe2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a7e      	ldr	r2, [pc, #504]	@ (8003a10 <IK_body+0x2d8>)
 8003818:	60da      	str	r2, [r3, #12]

	if(r->BodyRoll>MAX_ROLL)r->BodyRoll = MAX_ROLL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003820:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8003a04 <IK_body+0x2cc>
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	dd03      	ble.n	8003836 <IK_body+0xfe>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a75      	ldr	r2, [pc, #468]	@ (8003a08 <IK_body+0x2d0>)
 8003832:	611a      	str	r2, [r3, #16]
 8003834:	e00c      	b.n	8003850 <IK_body+0x118>
	else if(r->BodyRoll<MIN_ROLL)r->BodyRoll = MIN_ROLL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	edd3 7a04 	vldr	s15, [r3, #16]
 800383c:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003a0c <IK_body+0x2d4>
 8003840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d502      	bpl.n	8003850 <IK_body+0x118>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a70      	ldr	r2, [pc, #448]	@ (8003a10 <IK_body+0x2d8>)
 800384e:	611a      	str	r2, [r3, #16]

	if(r->BodyYaw>MAX_YAW)r->BodyYaw = MAX_YAW;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	edd3 7a05 	vldr	s15, [r3, #20]
 8003856:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003a04 <IK_body+0x2cc>
 800385a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	dd03      	ble.n	800386c <IK_body+0x134>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a68      	ldr	r2, [pc, #416]	@ (8003a08 <IK_body+0x2d0>)
 8003868:	615a      	str	r2, [r3, #20]
 800386a:	e00c      	b.n	8003886 <IK_body+0x14e>
	else if(r->BodyYaw<MIN_YAW)r->BodyYaw = MIN_YAW;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003872:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003a0c <IK_body+0x2d4>
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	d502      	bpl.n	8003886 <IK_body+0x14e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a63      	ldr	r2, [pc, #396]	@ (8003a10 <IK_body+0x2d8>)
 8003884:	615a      	str	r2, [r3, #20]

	//pre calculate some the frequently used variables
	float32_t Mxyz[16],MINVxyz[16], M_CH0xyz[16];
	arm_matrix_instance_f32 M, MINV, M_CH0,CH0;

	arm_mat_init_f32(&M , 4 , 4 , Mxyz);
 8003886:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800388a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800388e:	2204      	movs	r2, #4
 8003890:	2104      	movs	r1, #4
 8003892:	f014 f81f 	bl	80178d4 <arm_mat_init_f32>
	arm_mat_init_f32(&MINV , 4 , 4 , MINVxyz);
 8003896:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800389a:	f107 001c 	add.w	r0, r7, #28
 800389e:	2204      	movs	r2, #4
 80038a0:	2104      	movs	r1, #4
 80038a2:	f014 f817 	bl	80178d4 <arm_mat_init_f32>
	arm_mat_init_f32(&M_CH0 , 4 , 4 , M_CH0xyz);
 80038a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038aa:	f107 0014 	add.w	r0, r7, #20
 80038ae:	2204      	movs	r2, #4
 80038b0:	2104      	movs	r1, #4
 80038b2:	f014 f80f 	bl	80178d4 <arm_mat_init_f32>
	arm_mat_init_f32(&CH0 , 4 , 4 ,(float32_t*)CH0xyz);
 80038b6:	f107 000c 	add.w	r0, r7, #12
 80038ba:	4b56      	ldr	r3, [pc, #344]	@ (8003a14 <IK_body+0x2dc>)
 80038bc:	2204      	movs	r2, #4
 80038be:	2104      	movs	r1, #4
 80038c0:	f014 f808 	bl	80178d4 <arm_mat_init_f32>

	//create Transform Matrices
	TransformMatrix(r , &M  ,  FALSE);
 80038c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c8:	2200      	movs	r2, #0
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8a3 	bl	8003a18 <TransformMatrix>

	arm_status b = ARM_MATH_SUCCESS;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	 EE_cmd->pData[10] = -EE_cmd->pData[10];
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	3328      	adds	r3, #40	@ 0x28
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	eef1 7a67 	vneg.f32	s15, s15
 80038ec:	edc3 7a00 	vstr	s15, [r3]
	 EE_cmd->pData[11] = -EE_cmd->pData[11];
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	332c      	adds	r3, #44	@ 0x2c
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	332c      	adds	r3, #44	@ 0x2c
 8003900:	eef1 7a67 	vneg.f32	s15, s15
 8003904:	edc3 7a00 	vstr	s15, [r3]

	 //get the EE position with respect to the COM
	 b = b + arm_mat_add_f32(EE_cmd , &CH0 ,EE_cmd);
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f013 ffe3 	bl	80178dc <arm_mat_add_f32>
 8003916:	4603      	mov	r3, r0
 8003918:	b2da      	uxtb	r2, r3
 800391a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800391e:	4413      	add	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	 //rotate the EE positions according to the robot heading angle

	 //transform the body frame with the matrix M
	 b = b + arm_mat_mult_f32(&M , &CH0 , &M_CH0);
 8003926:	f107 0214 	add.w	r2, r7, #20
 800392a:	f107 010c 	add.w	r1, r7, #12
 800392e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003932:	4618      	mov	r0, r3
 8003934:	f013 fdec 	bl	8017510 <arm_mat_mult_f32>
 8003938:	4603      	mov	r3, r0
 800393a:	b2da      	uxtb	r2, r3
 800393c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8003940:	4413      	add	r3, r2
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	 EE_cmd->pData[15] = 1;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	333c      	adds	r3, #60	@ 0x3c
 800394e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003952:	601a      	str	r2, [r3, #0]

	 arm_mat_inverse_f32(&M , &MINV);
 8003954:	f107 021c 	add.w	r2, r7, #28
 8003958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f013 fe7a 	bl	8017658 <arm_mat_inverse_f32>
	 //get the local transformed EE position with respect to each root,
	 //by rotating the leg frame contrary to the body frame

	 b = b + arm_mat_mult_f32(&MINV , EE_cmd , EE_cmd);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f013 fdcf 	bl	8017510 <arm_mat_mult_f32>
 8003972:	4603      	mov	r3, r0
 8003974:	b2da      	uxtb	r2, r3
 8003976:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800397a:	4413      	add	r3, r2
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	 //get the transformed EE positions with respect to the COM
	 b = b + arm_mat_sub_f32(EE_cmd , &M_CH0 , EE_cmd);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f013 fd64 	bl	8017458 <arm_mat_sub_f32>
 8003990:	4603      	mov	r3, r0
 8003992:	b2da      	uxtb	r2, r3
 8003994:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8003998:	4413      	add	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	 EE_cmd->pData[10] = -EE_cmd->pData[10];
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	3328      	adds	r3, #40	@ 0x28
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3328      	adds	r3, #40	@ 0x28
 80039b0:	eef1 7a67 	vneg.f32	s15, s15
 80039b4:	edc3 7a00 	vstr	s15, [r3]
	 EE_cmd->pData[11] = -EE_cmd->pData[11];
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	332c      	adds	r3, #44	@ 0x2c
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	332c      	adds	r3, #44	@ 0x2c
 80039c8:	eef1 7a67 	vneg.f32	s15, s15
 80039cc:	edc3 7a00 	vstr	s15, [r3]
	 //the matrix EE is to be the input of the IK_leg() function to deduce
	 //the joint angles of the robot

	 return b;	//b = 0 => success
 80039d0:	f997 30ef 	ldrsb.w	r3, [r7, #239]	@ 0xef
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	37f0      	adds	r7, #240	@ 0xf0
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	42200000 	.word	0x42200000
 80039e0:	42200000 	.word	0x42200000
 80039e4:	c2200000 	.word	0xc2200000
 80039e8:	c2200000 	.word	0xc2200000
 80039ec:	41980000 	.word	0x41980000
 80039f0:	c1f00000 	.word	0xc1f00000
 80039f4:	42340000 	.word	0x42340000
 80039f8:	42340000 	.word	0x42340000
 80039fc:	c2340000 	.word	0xc2340000
 8003a00:	c2340000 	.word	0xc2340000
 8003a04:	3e860a92 	.word	0x3e860a92
 8003a08:	3e860a92 	.word	0x3e860a92
 8003a0c:	be860a92 	.word	0xbe860a92
 8003a10:	be860a92 	.word	0xbe860a92
 8003a14:	20000028 	.word	0x20000028

08003a18 <TransformMatrix>:

void TransformMatrix(RODOG_Control * r , arm_matrix_instance_f32 * M , bool Translation_only){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0de      	sub	sp, #376	@ 0x178
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a22:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a26:	6018      	str	r0, [r3, #0]
 8003a28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003a30:	6019      	str	r1, [r3, #0]
 8003a32:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a36:	f2a3 1371 	subw	r3, r3, #369	@ 0x171
 8003a3a:	701a      	strb	r2, [r3, #0]
	double cr,sr,cp,sp,cy,sy,tx,ty,tz;
	arm_matrix_instance_f32 t ,rx , ry , rz;

	if(Translation_only == FALSE){
 8003a3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a40:	f2a3 1371 	subw	r3, r3, #369	@ 0x171
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 80c4 	bne.w	8003bd4 <TransformMatrix+0x1bc>
		cr = cos(r->BodyRoll/2.0f);
 8003a4c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a5a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a62:	ee16 0a90 	vmov	r0, s13
 8003a66:	f7fc fd6f 	bl	8000548 <__aeabi_f2d>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	ec43 2b10 	vmov	d0, r2, r3
 8003a72:	f016 ff61 	bl	801a938 <cos>
 8003a76:	ed87 0b5c 	vstr	d0, [r7, #368]	@ 0x170
		sr = sin(r->BodyRoll/2.0f);
 8003a7a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003a7e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a88:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a90:	ee16 0a90 	vmov	r0, s13
 8003a94:	f7fc fd58 	bl	8000548 <__aeabi_f2d>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	ec43 2b10 	vmov	d0, r2, r3
 8003aa0:	f016 ffa6 	bl	801a9f0 <sin>
 8003aa4:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168

		cp = cos(r->BodyPitch/2.0f);
 8003aa8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003aac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ab6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003aba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003abe:	ee16 0a90 	vmov	r0, s13
 8003ac2:	f7fc fd41 	bl	8000548 <__aeabi_f2d>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	ec43 2b10 	vmov	d0, r2, r3
 8003ace:	f016 ff33 	bl	801a938 <cos>
 8003ad2:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
		sp = sin(r->BodyPitch/2.0f);
 8003ad6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003ada:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ae4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003ae8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003aec:	ee16 0a90 	vmov	r0, s13
 8003af0:	f7fc fd2a 	bl	8000548 <__aeabi_f2d>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	ec43 2b10 	vmov	d0, r2, r3
 8003afc:	f016 ff78 	bl	801a9f0 <sin>
 8003b00:	ed87 0b56 	vstr	d0, [r7, #344]	@ 0x158

		cy = cos(r->BodyYaw/2.0f);
 8003b04:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003b08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b12:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b1a:	ee16 0a90 	vmov	r0, s13
 8003b1e:	f7fc fd13 	bl	8000548 <__aeabi_f2d>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	ec43 2b10 	vmov	d0, r2, r3
 8003b2a:	f016 ff05 	bl	801a938 <cos>
 8003b2e:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150
		sy = sin(r->BodyYaw/2.0f);
 8003b32:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003b36:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b40:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b48:	ee16 0a90 	vmov	r0, s13
 8003b4c:	f7fc fcfc 	bl	8000548 <__aeabi_f2d>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	ec43 2b10 	vmov	d0, r2, r3
 8003b58:	f016 ff4a 	bl	801a9f0 <sin>
 8003b5c:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148

		tx = r->BodyTx/2.0f;
 8003b60:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003b64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b76:	ee16 0a90 	vmov	r0, s13
 8003b7a:	f7fc fce5 	bl	8000548 <__aeabi_f2d>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
		ty = r->BodyTy/2.0f;
 8003b86:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003b8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b94:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b9c:	ee16 0a90 	vmov	r0, s13
 8003ba0:	f7fc fcd2 	bl	8000548 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		tz = r->BodyTz/2.0f;
 8003bac:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003bb0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003bbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bc2:	ee16 0a90 	vmov	r0, s13
 8003bc6:	f7fc fcbf 	bl	8000548 <__aeabi_f2d>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 8003bd2:	e04b      	b.n	8003c6c <TransformMatrix+0x254>
	}

	else{
		cr = cos(0.0f);
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <TransformMatrix+0x250>)
 8003bda:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		sr = sin(0.0f);
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168

		cp = cos(0.0f);
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	4b1e      	ldr	r3, [pc, #120]	@ (8003c68 <TransformMatrix+0x250>)
 8003bf0:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		sp = sin(0.0f);
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158

		cy = cos(0.0f);
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <TransformMatrix+0x250>)
 8003c06:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		sy = sin(0.0f);
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148

		tx = r->BodyTx;
 8003c16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003c1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fc90 	bl	8000548 <__aeabi_f2d>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
		ty = r->BodyTy;
 8003c30:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003c34:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc83 	bl	8000548 <__aeabi_f2d>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		tz = r->BodyTz;
 8003c4a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003c4e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fc76 	bl	8000548 <__aeabi_f2d>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 8003c64:	e002      	b.n	8003c6c <TransformMatrix+0x254>
 8003c66:	bf00      	nop
 8003c68:	3ff00000 	.word	0x3ff00000
	}

	float32_t T[] = {1 , 0 , 0 , tx,
 8003c6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c84:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003c88:	f7fc ffae 	bl	8000be8 <__aeabi_d2f>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003caa:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8003cae:	f7fc ff9b 	bl	8000be8 <__aeabi_d2f>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cd0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8003cd4:	f7fc ff88 	bl	8000be8 <__aeabi_d2f>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cf6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003cfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				 	 0 , 1 , 0 , ty,
					 0 , 0 , 1 , tz,
					 0 , 0 , 0 , 1};

	float32_t Rx[] = {1 , 0 , 0 ,    0 ,
 8003cfe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d26:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003d2a:	f7fc ff5d 	bl	8000be8 <__aeabi_d2f>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d34:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003d38:	f7fc ff56 	bl	8000be8 <__aeabi_d2f>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef1 7a67 	vneg.f32	s15, s15
 8003d46:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d5a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003d5e:	f7fc ff43 	bl	8000be8 <__aeabi_d2f>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d68:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003d6c:	f7fc ff3c 	bl	8000be8 <__aeabi_d2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d96:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				  	  0 , cr , -sr , 0 ,
					  0 , sr , cr ,  0 ,
					  0 , 0 , 0 ,    1};

	float32_t Ry[] = {cy , 0 , sy , 0,
 8003d9e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8003da2:	f7fc ff21 	bl	8000be8 <__aeabi_d2f>
 8003da6:	4602      	mov	r2, r0
 8003da8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003dac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003db6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003dc4:	f7fc ff10 	bl	8000be8 <__aeabi_d2f>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003dce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003dd8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003de6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
 8003df0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003df4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003df8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003dfc:	615a      	str	r2, [r3, #20]
 8003dfe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
 8003e0c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e10:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
 8003e1a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003e1e:	f7fc fee3 	bl	8000be8 <__aeabi_d2f>
 8003e22:	4603      	mov	r3, r0
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef1 7a67 	vneg.f32	s15, s15
 8003e2c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e30:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e34:	edc3 7a08 	vstr	s15, [r3, #32]
 8003e38:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e3c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e46:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8003e4a:	f7fc fecd 	bl	8000be8 <__aeabi_d2f>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e54:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e58:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e5a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e68:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e6c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e76:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e7a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e84:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e88:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e92:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003e96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
				   	   0 , 1 , 0 ,  0,
					   -sy , 0 , cy , 0,
					   0 , 0 , 0 ,  1 };

	float32_t Rz[] = {cp , -sp , 0 , 0,
 8003ea0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8003ea4:	f7fc fea0 	bl	8000be8 <__aeabi_d2f>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003eae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003eb8:	f7fc fe96 	bl	8000be8 <__aeabi_d2f>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef1 7a67 	vneg.f32	s15, s15
 8003ec6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003eca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ece:	edc3 7a01 	vstr	s15, [r3, #4]
 8003ed2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003ed6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003ee4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003ef2:	f7fc fe79 	bl	8000be8 <__aeabi_d2f>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003efc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8003f06:	f7fc fe6f 	bl	8000be8 <__aeabi_d2f>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f10:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f14:	615a      	str	r2, [r3, #20]
 8003f16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
 8003f24:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f28:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
 8003f32:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f36:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f44:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f4e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f5c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f60:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f6a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f78:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f7c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f86:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f8a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f94:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003f98:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
					  sp , cp ,  0 , 0,
					   0 ,  0 ,  1,  0,
					   0 ,  0 ,  0 , 1};
//init matrices
arm_mat_init_f32(&t  , 4 , 4 , T );
 8003fa2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003fa6:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8003faa:	2204      	movs	r2, #4
 8003fac:	2104      	movs	r1, #4
 8003fae:	f013 fc91 	bl	80178d4 <arm_mat_init_f32>
arm_mat_init_f32(&rx , 4 , 4 , Rx);
 8003fb2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003fb6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8003fba:	2204      	movs	r2, #4
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	f013 fc89 	bl	80178d4 <arm_mat_init_f32>
arm_mat_init_f32(&ry , 4 , 4 , Ry);
 8003fc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003fc6:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8003fca:	2204      	movs	r2, #4
 8003fcc:	2104      	movs	r1, #4
 8003fce:	f013 fc81 	bl	80178d4 <arm_mat_init_f32>
arm_mat_init_f32(&rz , 4 , 4 , Rz);
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8003fda:	2204      	movs	r2, #4
 8003fdc:	2104      	movs	r1, #4
 8003fde:	f013 fc79 	bl	80178d4 <arm_mat_init_f32>

//get the transform matrix
arm_mat_mult_f32(&rx , &ry , M);
 8003fe2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003fe6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003fea:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8003fee:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	f013 fa8c 	bl	8017510 <arm_mat_mult_f32>
arm_mat_mult_f32(M   , &rz , M);
 8003ff8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8003ffc:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8004000:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004004:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8004008:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	f013 fa7e 	bl	8017510 <arm_mat_mult_f32>
arm_mat_mult_f32(M   , &t  , M);
 8004014:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8004018:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 800401c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8004020:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8004024:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	f013 fa70 	bl	8017510 <arm_mat_mult_f32>

}
 8004030:	bf00      	nop
 8004032:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop

0800403c <lsm6dso32x_read_reg>:
  *
  */
int32_t lsm6dso32x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	461a      	mov	r2, r3
 8004048:	460b      	mov	r3, r1
 800404a:	72fb      	strb	r3, [r7, #11]
 800404c:	4613      	mov	r3, r2
 800404e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685c      	ldr	r4, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6898      	ldr	r0, [r3, #8]
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	7af9      	ldrb	r1, [r7, #11]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	47a0      	blx	r4
 8004060:	6178      	str	r0, [r7, #20]

  return ret;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}

0800406c <lsm6dso32x_write_reg>:
  *
  */
int32_t lsm6dso32x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	461a      	mov	r2, r3
 8004078:	460b      	mov	r3, r1
 800407a:	72fb      	strb	r3, [r7, #11]
 800407c:	4613      	mov	r3, r2
 800407e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681c      	ldr	r4, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6898      	ldr	r0, [r3, #8]
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	7af9      	ldrb	r1, [r7, #11]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	47a0      	blx	r4
 8004090:	6178      	str	r0, [r7, #20]

  return ret;
 8004092:	697b      	ldr	r3, [r7, #20]
}
 8004094:	4618      	mov	r0, r3
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <bytecpy+0x1e>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <bytecpy+0x1e>
  {
    *target = *source;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	701a      	strb	r2, [r3, #0]
  }
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <lsm6dso32x_from_fs4_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso32x_from_fs4_to_mg(int16_t lsb)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 80040d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80040f4 <lsm6dso32x_from_fs4_to_mg+0x2c>
 80040e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80040e6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	3d79db23 	.word	0x3d79db23

080040f8 <lsm6dso32x_from_fs8_to_mg>:

float_t lsm6dso32x_from_fs8_to_mg(int16_t lsb)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.244f;
 8004102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004124 <lsm6dso32x_from_fs8_to_mg+0x2c>
 8004112:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	3e79db23 	.word	0x3e79db23

08004128 <lsm6dso32x_from_fs16_to_mg>:

float_t lsm6dso32x_from_fs16_to_mg(int16_t lsb)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.488f;
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004154 <lsm6dso32x_from_fs16_to_mg+0x2c>
 8004142:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004146:	eeb0 0a67 	vmov.f32	s0, s15
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	3ef9db23 	.word	0x3ef9db23

08004158 <lsm6dso32x_from_fs32_to_mg>:

float_t lsm6dso32x_from_fs32_to_mg(int16_t lsb)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.976f;
 8004162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004184 <lsm6dso32x_from_fs32_to_mg+0x2c>
 8004172:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	3f79db23 	.word	0x3f79db23

08004188 <lsm6dso32x_from_fs125_to_mdps>:

float_t lsm6dso32x_from_fs125_to_mdps(int16_t lsb)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8004192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80041b4 <lsm6dso32x_from_fs125_to_mdps+0x2c>
 80041a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80041a6:	eeb0 0a67 	vmov.f32	s0, s15
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	408c0000 	.word	0x408c0000

080041b8 <lsm6dso32x_from_fs500_to_mdps>:

float_t lsm6dso32x_from_fs500_to_mdps(int16_t lsb)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 17.50f;
 80041c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ce:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80041e4 <lsm6dso32x_from_fs500_to_mdps+0x2c>
 80041d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80041d6:	eeb0 0a67 	vmov.f32	s0, s15
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	418c0000 	.word	0x418c0000

080041e8 <lsm6dso32x_from_fs250_to_mdps>:

float_t lsm6dso32x_from_fs250_to_mdps(int16_t lsb)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 8.750f;
 80041f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004214 <lsm6dso32x_from_fs250_to_mdps+0x2c>
 8004202:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004206:	eeb0 0a67 	vmov.f32	s0, s15
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	410c0000 	.word	0x410c0000

08004218 <lsm6dso32x_from_fs1000_to_mdps>:

float_t lsm6dso32x_from_fs1000_to_mdps(int16_t lsb)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 35.0f;
 8004222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800422e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004244 <lsm6dso32x_from_fs1000_to_mdps+0x2c>
 8004232:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004236:	eeb0 0a67 	vmov.f32	s0, s15
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	420c0000 	.word	0x420c0000

08004248 <lsm6dso32x_from_fs2000_to_mdps>:

float_t lsm6dso32x_from_fs2000_to_mdps(int16_t lsb)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 8004252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004274 <lsm6dso32x_from_fs2000_to_mdps+0x2c>
 8004262:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004266:	eeb0 0a67 	vmov.f32	s0, s15
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	428c0000 	.word	0x428c0000

08004278 <lsm6dso32x_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dso32x_fs_xl_t val)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL1_XL, (uint8_t *)&reg, 1);
 8004284:	f107 0208 	add.w	r2, r7, #8
 8004288:	2301      	movs	r3, #1
 800428a:	2110      	movs	r1, #16
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fed5 	bl	800403c <lsm6dso32x_read_reg>
 8004292:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <lsm6dso32x_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	7a3b      	ldrb	r3, [r7, #8]
 80042a4:	f362 0383 	bfi	r3, r2, #2, #2
 80042a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL1_XL, (uint8_t *)&reg, 1);
 80042aa:	f107 0208 	add.w	r2, r7, #8
 80042ae:	2301      	movs	r3, #1
 80042b0:	2110      	movs	r1, #16
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff feda 	bl	800406c <lsm6dso32x_write_reg>
 80042b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <lsm6dso32x_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso32x_odr_xl_t val)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_odr_xl_t odr_xl =  val;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	77fb      	strb	r3, [r7, #31]
  lsm6dso32x_mlc_odr_t mlc_odr;
  lsm6dso32x_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso32x_fsm_enable_get(ctx, &fsm_enable);
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fe5e 	bl	8004f9c <lsm6dso32x_fsm_enable_get>
 80042e0:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f040 80c4 	bne.w	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042ea:	7d3b      	ldrb	r3, [r7, #20]
 80042ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80042f2:	7d3b      	ldrb	r3, [r7, #20]
 80042f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042f8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042fa:	4313      	orrs	r3, r2
 80042fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80042fe:	7d3b      	ldrb	r3, [r7, #20]
 8004300:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004304:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004306:	4313      	orrs	r3, r2
 8004308:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800430a:	7d3b      	ldrb	r3, [r7, #20]
 800430c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004310:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004312:	4313      	orrs	r3, r2
 8004314:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004316:	7d3b      	ldrb	r3, [r7, #20]
 8004318:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800431c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800431e:	4313      	orrs	r3, r2
 8004320:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004322:	7d3b      	ldrb	r3, [r7, #20]
 8004324:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004328:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800432a:	4313      	orrs	r3, r2
 800432c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800432e:	7d3b      	ldrb	r3, [r7, #20]
 8004330:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004334:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004336:	4313      	orrs	r3, r2
 8004338:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800433a:	7d3b      	ldrb	r3, [r7, #20]
 800433c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004340:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004342:	4313      	orrs	r3, r2
 8004344:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004346:	7d7b      	ldrb	r3, [r7, #21]
 8004348:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800434c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800434e:	4313      	orrs	r3, r2
 8004350:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004352:	7d7b      	ldrb	r3, [r7, #21]
 8004354:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004358:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800435a:	4313      	orrs	r3, r2
 800435c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800435e:	7d7b      	ldrb	r3, [r7, #21]
 8004360:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004364:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004366:	4313      	orrs	r3, r2
 8004368:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800436a:	7d7b      	ldrb	r3, [r7, #21]
 800436c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004370:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004372:	4313      	orrs	r3, r2
 8004374:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004376:	7d7b      	ldrb	r3, [r7, #21]
 8004378:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800437c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800437e:	4313      	orrs	r3, r2
 8004380:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004382:	7d7b      	ldrb	r3, [r7, #21]
 8004384:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004388:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800438a:	4313      	orrs	r3, r2
 800438c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800438e:	7d7b      	ldrb	r3, [r7, #21]
 8004390:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004394:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004396:	4313      	orrs	r3, r2
 8004398:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800439a:	7d7b      	ldrb	r3, [r7, #21]
 800439c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80043a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d163      	bne.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso32x_fsm_data_rate_get(ctx, &fsm_odr);
 80043aa:	f107 0313 	add.w	r3, r7, #19
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fe15 	bl	8004fe0 <lsm6dso32x_fsm_data_rate_get>
 80043b6:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d159      	bne.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d853      	bhi.n	800446c <lsm6dso32x_xl_data_rate_set+0x1a8>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <lsm6dso32x_xl_data_rate_set+0x108>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043ef 	.word	0x080043ef
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	08004437 	.word	0x08004437
        {
          case LSM6DSO32X_ODR_FSM_12Hz5:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <lsm6dso32x_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO32X_XL_ODR_12Hz5;
 80043e2:	2301      	movs	r3, #1
 80043e4:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80043e6:	e044      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	77fb      	strb	r3, [r7, #31]
            break;
 80043ec:	e041      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_26Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <lsm6dso32x_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO32X_XL_ODR_26Hz;
 80043f4:	2302      	movs	r3, #2
 80043f6:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80043f8:	e03b      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <lsm6dso32x_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO32X_XL_ODR_26Hz;
 8004400:	2302      	movs	r3, #2
 8004402:	77fb      	strb	r3, [r7, #31]
            break;
 8004404:	e035      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	77fb      	strb	r3, [r7, #31]
            break;
 800440a:	e032      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_52Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <lsm6dso32x_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 8004412:	2303      	movs	r3, #3
 8004414:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8004416:	e02c      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <lsm6dso32x_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 800441e:	2303      	movs	r3, #3
 8004420:	77fb      	strb	r3, [r7, #31]
            break;
 8004422:	e026      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_26Hz)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d102      	bne.n	8004430 <lsm6dso32x_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 800442a:	2303      	movs	r3, #3
 800442c:	77fb      	strb	r3, [r7, #31]
            break;
 800442e:	e020      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	77fb      	strb	r3, [r7, #31]
            break;
 8004434:	e01d      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_104Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <lsm6dso32x_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 800443c:	2304      	movs	r3, #4
 800443e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8004440:	e017      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d102      	bne.n	800444e <lsm6dso32x_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
            break;
 800444c:	e011      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_26Hz)
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d102      	bne.n	800445a <lsm6dso32x_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004454:	2304      	movs	r3, #4
 8004456:	77fb      	strb	r3, [r7, #31]
            break;
 8004458:	e00b      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_XL_ODR_52Hz)
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d102      	bne.n	8004466 <lsm6dso32x_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004460:	2304      	movs	r3, #4
 8004462:	77fb      	strb	r3, [r7, #31]
            break;
 8004464:	e005      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	77fb      	strb	r3, [r7, #31]
            break;
 800446a:	e002      	b.n	8004472 <lsm6dso32x_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	77fb      	strb	r3, [r7, #31]
            break;
 8004470:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8004472:	7c3b      	ldrb	r3, [r7, #16]
 8004474:	f023 0308 	bic.w	r3, r3, #8
 8004478:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d172      	bne.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
  {
    ret = lsm6dso32x_embedded_sens_get(ctx, &emb_sens);
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f002 f9ec 	bl	8006864 <lsm6dso32x_embedded_sens_get>
 800448c:	61b8      	str	r0, [r7, #24]

    if ((ret == 0) && (emb_sens.mlc == PROPERTY_ENABLE))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d168      	bne.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
 8004494:	7c3b      	ldrb	r3, [r7, #16]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d062      	beq.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
    {
      ret =  lsm6dso32x_mlc_data_rate_get(ctx, &mlc_odr);
 80044a0:	f107 030f 	add.w	r3, r7, #15
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fde2 	bl	8005070 <lsm6dso32x_mlc_data_rate_get>
 80044ac:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d158      	bne.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
      {
        switch (mlc_odr)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d852      	bhi.n	8004560 <lsm6dso32x_xl_data_rate_set+0x29c>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <lsm6dso32x_xl_data_rate_set+0x1fc>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e3 	.word	0x080044e3
 80044c8:	08004501 	.word	0x08004501
 80044cc:	0800452b 	.word	0x0800452b
        {
          case LSM6DSO32X_ODR_PRGS_12Hz5:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <lsm6dso32x_xl_data_rate_set+0x218>
            {
              odr_xl = LSM6DSO32X_XL_ODR_12Hz5;
 80044d6:	2301      	movs	r3, #1
 80044d8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80044da:	e044      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
              odr_xl = val;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	77fb      	strb	r3, [r7, #31]
            break;
 80044e0:	e041      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>

          case LSM6DSO32X_ODR_PRGS_26Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <lsm6dso32x_xl_data_rate_set+0x22a>
            {
              odr_xl = LSM6DSO32X_XL_ODR_26Hz;
 80044e8:	2302      	movs	r3, #2
 80044ea:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80044ec:	e03b      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <lsm6dso32x_xl_data_rate_set+0x236>
              odr_xl = LSM6DSO32X_XL_ODR_26Hz;
 80044f4:	2302      	movs	r3, #2
 80044f6:	77fb      	strb	r3, [r7, #31]
            break;
 80044f8:	e035      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
              odr_xl = val;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	77fb      	strb	r3, [r7, #31]
            break;
 80044fe:	e032      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>

          case LSM6DSO32X_ODR_PRGS_52Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <lsm6dso32x_xl_data_rate_set+0x248>
            {
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 8004506:	2303      	movs	r3, #3
 8004508:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800450a:	e02c      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <lsm6dso32x_xl_data_rate_set+0x254>
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 8004512:	2303      	movs	r3, #3
 8004514:	77fb      	strb	r3, [r7, #31]
            break;
 8004516:	e026      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_26Hz)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d102      	bne.n	8004524 <lsm6dso32x_xl_data_rate_set+0x260>
              odr_xl = LSM6DSO32X_XL_ODR_52Hz;
 800451e:	2303      	movs	r3, #3
 8004520:	77fb      	strb	r3, [r7, #31]
            break;
 8004522:	e020      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
              odr_xl = val;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	77fb      	strb	r3, [r7, #31]
            break;
 8004528:	e01d      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>

          case LSM6DSO32X_ODR_PRGS_104Hz:
            if (val == LSM6DSO32X_XL_ODR_OFF)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <lsm6dso32x_xl_data_rate_set+0x272>
            {
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004530:	2304      	movs	r3, #4
 8004532:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8004534:	e017      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_12Hz5)
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <lsm6dso32x_xl_data_rate_set+0x27e>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 800453c:	2304      	movs	r3, #4
 800453e:	77fb      	strb	r3, [r7, #31]
            break;
 8004540:	e011      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_26Hz)
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d102      	bne.n	800454e <lsm6dso32x_xl_data_rate_set+0x28a>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004548:	2304      	movs	r3, #4
 800454a:	77fb      	strb	r3, [r7, #31]
            break;
 800454c:	e00b      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
            else if (val == LSM6DSO32X_XL_ODR_52Hz)
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d102      	bne.n	800455a <lsm6dso32x_xl_data_rate_set+0x296>
              odr_xl = LSM6DSO32X_XL_ODR_104Hz;
 8004554:	2304      	movs	r3, #4
 8004556:	77fb      	strb	r3, [r7, #31]
            break;
 8004558:	e005      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>
              odr_xl = val;
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	77fb      	strb	r3, [r7, #31]
            break;
 800455e:	e002      	b.n	8004566 <lsm6dso32x_xl_data_rate_set+0x2a2>

          default:
            odr_xl = val;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	77fb      	strb	r3, [r7, #31]
            break;
 8004564:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <lsm6dso32x_xl_data_rate_set+0x2b8>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL1_XL, (uint8_t *)&reg, 1);
 800456c:	f107 020c 	add.w	r2, r7, #12
 8004570:	2301      	movs	r3, #1
 8004572:	2110      	movs	r1, #16
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fd61 	bl	800403c <lsm6dso32x_read_reg>
 800457a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10f      	bne.n	80045a2 <lsm6dso32x_xl_data_rate_set+0x2de>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	b2da      	uxtb	r2, r3
 800458a:	7b3b      	ldrb	r3, [r7, #12]
 800458c:	f362 1307 	bfi	r3, r2, #4, #4
 8004590:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL1_XL, (uint8_t *)&reg, 1);
 8004592:	f107 020c 	add.w	r2, r7, #12
 8004596:	2301      	movs	r3, #1
 8004598:	2110      	movs	r1, #16
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fd66 	bl	800406c <lsm6dso32x_write_reg>
 80045a0:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80045a2:	69bb      	ldr	r3, [r7, #24]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <lsm6dso32x_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg CTRL2_G
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso32x_fs_g_t val)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL2_G, (uint8_t *)&reg, 1);
 80045b8:	f107 0208 	add.w	r2, r7, #8
 80045bc:	2301      	movs	r3, #1
 80045be:	2111      	movs	r1, #17
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff fd3b 	bl	800403c <lsm6dso32x_read_reg>
 80045c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <lsm6dso32x_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	7a3b      	ldrb	r3, [r7, #8]
 80045d8:	f362 0343 	bfi	r3, r2, #1, #3
 80045dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL2_G, (uint8_t *)&reg, 1);
 80045de:	f107 0208 	add.w	r2, r7, #8
 80045e2:	2301      	movs	r3, #1
 80045e4:	2111      	movs	r1, #17
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fd40 	bl	800406c <lsm6dso32x_write_reg>
 80045ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <lsm6dso32x_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg CTRL2_G
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso32x_odr_g_t val)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_odr_g_t odr_gy =  val;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	77fb      	strb	r3, [r7, #31]
  lsm6dso32x_mlc_odr_t mlc_odr;
  lsm6dso32x_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso32x_fsm_enable_get(ctx, &fsm_enable);
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fcc4 	bl	8004f9c <lsm6dso32x_fsm_enable_get>
 8004614:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 80c4 	bne.w	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800461e:	7d3b      	ldrb	r3, [r7, #20]
 8004620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004626:	7d3b      	ldrb	r3, [r7, #20]
 8004628:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800462c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800462e:	4313      	orrs	r3, r2
 8004630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004632:	7d3b      	ldrb	r3, [r7, #20]
 8004634:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800463a:	4313      	orrs	r3, r2
 800463c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800463e:	7d3b      	ldrb	r3, [r7, #20]
 8004640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004646:	4313      	orrs	r3, r2
 8004648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800464a:	7d3b      	ldrb	r3, [r7, #20]
 800464c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004650:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004652:	4313      	orrs	r3, r2
 8004654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004656:	7d3b      	ldrb	r3, [r7, #20]
 8004658:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800465c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800465e:	4313      	orrs	r3, r2
 8004660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004662:	7d3b      	ldrb	r3, [r7, #20]
 8004664:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800466a:	4313      	orrs	r3, r2
 800466c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800466e:	7d3b      	ldrb	r3, [r7, #20]
 8004670:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004676:	4313      	orrs	r3, r2
 8004678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800467a:	7d7b      	ldrb	r3, [r7, #21]
 800467c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004680:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004682:	4313      	orrs	r3, r2
 8004684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004686:	7d7b      	ldrb	r3, [r7, #21]
 8004688:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800468c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800468e:	4313      	orrs	r3, r2
 8004690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004692:	7d7b      	ldrb	r3, [r7, #21]
 8004694:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800469a:	4313      	orrs	r3, r2
 800469c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800469e:	7d7b      	ldrb	r3, [r7, #21]
 80046a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80046aa:	7d7b      	ldrb	r3, [r7, #21]
 80046ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80046b2:	4313      	orrs	r3, r2
 80046b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80046b6:	7d7b      	ldrb	r3, [r7, #21]
 80046b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80046be:	4313      	orrs	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80046c2:	7d7b      	ldrb	r3, [r7, #21]
 80046c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80046ce:	7d7b      	ldrb	r3, [r7, #21]
 80046d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d163      	bne.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso32x_fsm_data_rate_get(ctx, &fsm_odr);
 80046de:	f107 0313 	add.w	r3, r7, #19
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fc7b 	bl	8004fe0 <lsm6dso32x_fsm_data_rate_get>
 80046ea:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d159      	bne.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d853      	bhi.n	80047a0 <lsm6dso32x_gy_data_rate_set+0x1a8>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <lsm6dso32x_gy_data_rate_set+0x108>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004711 	.word	0x08004711
 8004704:	08004723 	.word	0x08004723
 8004708:	08004741 	.word	0x08004741
 800470c:	0800476b 	.word	0x0800476b
        {
          case LSM6DSO32X_ODR_FSM_12Hz5:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <lsm6dso32x_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO32X_GY_ODR_12Hz5;
 8004716:	2301      	movs	r3, #1
 8004718:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800471a:	e044      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	77fb      	strb	r3, [r7, #31]
            break;
 8004720:	e041      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_26Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <lsm6dso32x_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO32X_GY_ODR_26Hz;
 8004728:	2302      	movs	r3, #2
 800472a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800472c:	e03b      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <lsm6dso32x_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO32X_GY_ODR_26Hz;
 8004734:	2302      	movs	r3, #2
 8004736:	77fb      	strb	r3, [r7, #31]
            break;
 8004738:	e035      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	77fb      	strb	r3, [r7, #31]
            break;
 800473e:	e032      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_52Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <lsm6dso32x_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 8004746:	2303      	movs	r3, #3
 8004748:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800474a:	e02c      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <lsm6dso32x_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 8004752:	2303      	movs	r3, #3
 8004754:	77fb      	strb	r3, [r7, #31]
            break;
 8004756:	e026      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_26Hz)
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d102      	bne.n	8004764 <lsm6dso32x_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 800475e:	2303      	movs	r3, #3
 8004760:	77fb      	strb	r3, [r7, #31]
            break;
 8004762:	e020      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	77fb      	strb	r3, [r7, #31]
            break;
 8004768:	e01d      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>

          case LSM6DSO32X_ODR_FSM_104Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <lsm6dso32x_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8004774:	e017      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d102      	bne.n	8004782 <lsm6dso32x_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 800477c:	2304      	movs	r3, #4
 800477e:	77fb      	strb	r3, [r7, #31]
            break;
 8004780:	e011      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_26Hz)
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d102      	bne.n	800478e <lsm6dso32x_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
            break;
 800478c:	e00b      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSO32X_GY_ODR_52Hz)
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d102      	bne.n	800479a <lsm6dso32x_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
            break;
 8004798:	e005      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	77fb      	strb	r3, [r7, #31]
            break;
 800479e:	e002      	b.n	80047a6 <lsm6dso32x_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	77fb      	strb	r3, [r7, #31]
            break;
 80047a4:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 80047a6:	7c3b      	ldrb	r3, [r7, #16]
 80047a8:	f023 0308 	bic.w	r3, r3, #8
 80047ac:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d170      	bne.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dso32x_embedded_sens_get(ctx, &emb_sens);
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 f852 	bl	8006864 <lsm6dso32x_embedded_sens_get>
 80047c0:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 80047c2:	7c3b      	ldrb	r3, [r7, #16]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dso32x_mlc_data_rate_get(ctx, &mlc_odr);
 80047ce:	f107 030f 	add.w	r3, r7, #15
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fc4b 	bl	8005070 <lsm6dso32x_mlc_data_rate_get>
 80047da:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d159      	bne.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d853      	bhi.n	8004890 <lsm6dso32x_gy_data_rate_set+0x298>
 80047e8:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <lsm6dso32x_gy_data_rate_set+0x1f8>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004813 	.word	0x08004813
 80047f8:	08004831 	.word	0x08004831
 80047fc:	0800485b 	.word	0x0800485b
        {
          case LSM6DSO32X_ODR_PRGS_12Hz5:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <lsm6dso32x_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSO32X_GY_ODR_12Hz5;
 8004806:	2301      	movs	r3, #1
 8004808:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800480a:	e044      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
              odr_gy = val;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	77fb      	strb	r3, [r7, #31]
            break;
 8004810:	e041      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>

          case LSM6DSO32X_ODR_PRGS_26Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <lsm6dso32x_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSO32X_GY_ODR_26Hz;
 8004818:	2302      	movs	r3, #2
 800481a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800481c:	e03b      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <lsm6dso32x_gy_data_rate_set+0x232>
              odr_gy = LSM6DSO32X_GY_ODR_26Hz;
 8004824:	2302      	movs	r3, #2
 8004826:	77fb      	strb	r3, [r7, #31]
            break;
 8004828:	e035      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
              odr_gy = val;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	77fb      	strb	r3, [r7, #31]
            break;
 800482e:	e032      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>

          case LSM6DSO32X_ODR_PRGS_52Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <lsm6dso32x_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 8004836:	2303      	movs	r3, #3
 8004838:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800483a:	e02c      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <lsm6dso32x_gy_data_rate_set+0x250>
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 8004842:	2303      	movs	r3, #3
 8004844:	77fb      	strb	r3, [r7, #31]
            break;
 8004846:	e026      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_26Hz)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d102      	bne.n	8004854 <lsm6dso32x_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSO32X_GY_ODR_52Hz;
 800484e:	2303      	movs	r3, #3
 8004850:	77fb      	strb	r3, [r7, #31]
            break;
 8004852:	e020      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
              odr_gy = val;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	77fb      	strb	r3, [r7, #31]
            break;
 8004858:	e01d      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>

          case LSM6DSO32X_ODR_PRGS_104Hz:
            if (val == LSM6DSO32X_GY_ODR_OFF)
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <lsm6dso32x_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8004864:	e017      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_12Hz5)
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d102      	bne.n	8004872 <lsm6dso32x_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 800486c:	2304      	movs	r3, #4
 800486e:	77fb      	strb	r3, [r7, #31]
            break;
 8004870:	e011      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_26Hz)
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d102      	bne.n	800487e <lsm6dso32x_gy_data_rate_set+0x286>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004878:	2304      	movs	r3, #4
 800487a:	77fb      	strb	r3, [r7, #31]
            break;
 800487c:	e00b      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
            else if (val == LSM6DSO32X_GY_ODR_52Hz)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d102      	bne.n	800488a <lsm6dso32x_gy_data_rate_set+0x292>
              odr_gy = LSM6DSO32X_GY_ODR_104Hz;
 8004884:	2304      	movs	r3, #4
 8004886:	77fb      	strb	r3, [r7, #31]
            break;
 8004888:	e005      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>
              odr_gy = val;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	77fb      	strb	r3, [r7, #31]
            break;
 800488e:	e002      	b.n	8004896 <lsm6dso32x_gy_data_rate_set+0x29e>

          default:
            odr_gy = val;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	77fb      	strb	r3, [r7, #31]
            break;
 8004894:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <lsm6dso32x_gy_data_rate_set+0x2b4>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL2_G, (uint8_t *)&reg, 1);
 800489c:	f107 020c 	add.w	r2, r7, #12
 80048a0:	2301      	movs	r3, #1
 80048a2:	2111      	movs	r1, #17
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fbc9 	bl	800403c <lsm6dso32x_read_reg>
 80048aa:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <lsm6dso32x_gy_data_rate_set+0x2da>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80048b2:	7ffb      	ldrb	r3, [r7, #31]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	7b3b      	ldrb	r3, [r7, #12]
 80048bc:	f362 1307 	bfi	r3, r2, #4, #4
 80048c0:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL2_G, (uint8_t *)&reg, 1);
 80048c2:	f107 020c 	add.w	r2, r7, #12
 80048c6:	2301      	movs	r3, #1
 80048c8:	2111      	movs	r1, #17
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fbce 	bl	800406c <lsm6dso32x_write_reg>
 80048d0:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80048d2:	69bb      	ldr	r3, [r7, #24]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <lsm6dso32x_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL3_C, (uint8_t *)&reg, 1);
 80048e8:	f107 0208 	add.w	r2, r7, #8
 80048ec:	2301      	movs	r3, #1
 80048ee:	2112      	movs	r1, #18
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fba3 	bl	800403c <lsm6dso32x_read_reg>
 80048f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <lsm6dso32x_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	b2da      	uxtb	r2, r3
 8004906:	7a3b      	ldrb	r3, [r7, #8]
 8004908:	f362 1386 	bfi	r3, r2, #6, #1
 800490c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL3_C, (uint8_t *)&reg, 1);
 800490e:	f107 0208 	add.w	r2, r7, #8
 8004912:	2301      	movs	r3, #1
 8004914:	2112      	movs	r1, #18
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fba8 	bl	800406c <lsm6dso32x_write_reg>
 800491c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <lsm6dso32x_angular_rate_raw_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_OUTX_L_G, buff, 6);
 8004932:	f107 020c 	add.w	r2, r7, #12
 8004936:	2306      	movs	r3, #6
 8004938:	2122      	movs	r1, #34	@ 0x22
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fb7e 	bl	800403c <lsm6dso32x_read_reg>
 8004940:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004942:	7b7b      	ldrb	r3, [r7, #13]
 8004944:	b21a      	sxth	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004950:	b29b      	uxth	r3, r3
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	b29b      	uxth	r3, r3
 8004956:	7b3a      	ldrb	r2, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	b21a      	sxth	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3302      	adds	r3, #2
 8004968:	b212      	sxth	r2, r2
 800496a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	3302      	adds	r3, #2
 8004970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004974:	b29b      	uxth	r3, r3
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b29b      	uxth	r3, r3
 800497a:	7bba      	ldrb	r2, [r7, #14]
 800497c:	4413      	add	r3, r2
 800497e:	b29a      	uxth	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	3302      	adds	r3, #2
 8004984:	b212      	sxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004988:	7c7a      	ldrb	r2, [r7, #17]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	3304      	adds	r3, #4
 800498e:	b212      	sxth	r2, r2
 8004990:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	3304      	adds	r3, #4
 8004996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800499a:	b29b      	uxth	r3, r3
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	b29b      	uxth	r3, r3
 80049a0:	7c3a      	ldrb	r2, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	b212      	sxth	r2, r2
 80049ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <lsm6dso32x_acceleration_raw_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_OUTX_L_A, buff, 6);
 80049c2:	f107 020c 	add.w	r2, r7, #12
 80049c6:	2306      	movs	r3, #6
 80049c8:	2128      	movs	r1, #40	@ 0x28
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fb36 	bl	800403c <lsm6dso32x_read_reg>
 80049d0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80049d2:	7b7b      	ldrb	r3, [r7, #13]
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	7b3a      	ldrb	r2, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	b21a      	sxth	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	3302      	adds	r3, #2
 80049f8:	b212      	sxth	r2, r2
 80049fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3302      	adds	r3, #2
 8004a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	7bba      	ldrb	r2, [r7, #14]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	3302      	adds	r3, #2
 8004a14:	b212      	sxth	r2, r2
 8004a16:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a18:	7c7a      	ldrb	r2, [r7, #17]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	b212      	sxth	r2, r2
 8004a20:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3304      	adds	r3, #4
 8004a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	7c3a      	ldrb	r2, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	b212      	sxth	r2, r2
 8004a3c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <lsm6dso32x_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_mem_bank_set(stmdev_ctx_t *ctx,
                                lsm6dso32x_reg_access_t val)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FUNC_CFG_ACCESS,
 8004a54:	f107 0208 	add.w	r2, r7, #8
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff faed 	bl	800403c <lsm6dso32x_read_reg>
 8004a62:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);

  if (ret == 0)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <lsm6dso32x_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	7a3b      	ldrb	r3, [r7, #8]
 8004a74:	f362 1387 	bfi	r3, r2, #6, #2
 8004a78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_FUNC_CFG_ACCESS,
 8004a7a:	f107 0208 	add.w	r2, r7, #8
 8004a7e:	2301      	movs	r3, #1
 8004a80:	2101      	movs	r1, #1
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff faf2 	bl	800406c <lsm6dso32x_write_reg>
 8004a88:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&reg, 1);
  }

  return ret;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <lsm6dso32x_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_WHO_AM_I, buff, 1);
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fac9 	bl	800403c <lsm6dso32x_read_reg>
 8004aaa:	60f8      	str	r0, [r7, #12]

  return ret;
 8004aac:	68fb      	ldr	r3, [r7, #12]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <lsm6dso32x_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL3_C, (uint8_t *)&reg, 1);
 8004ac2:	f107 0208 	add.w	r2, r7, #8
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	2112      	movs	r1, #18
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fab6 	bl	800403c <lsm6dso32x_read_reg>
 8004ad0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10f      	bne.n	8004af8 <lsm6dso32x_reset_set+0x42>
  {
    reg.sw_reset = val;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	7a3b      	ldrb	r3, [r7, #8]
 8004ae2:	f362 0300 	bfi	r3, r2, #0, #1
 8004ae6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL3_C, (uint8_t *)&reg, 1);
 8004ae8:	f107 0208 	add.w	r2, r7, #8
 8004aec:	2301      	movs	r3, #1
 8004aee:	2112      	movs	r1, #18
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fabb 	bl	800406c <lsm6dso32x_write_reg>
 8004af6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004af8:	68fb      	ldr	r3, [r7, #12]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <lsm6dso32x_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
  lsm6dso32x_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL3_C, (uint8_t *)&reg, 1);
 8004b0c:	f107 0208 	add.w	r2, r7, #8
 8004b10:	2301      	movs	r3, #1
 8004b12:	2112      	movs	r1, #18
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fa91 	bl	800403c <lsm6dso32x_read_reg>
 8004b1a:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8004b1c:	7a3b      	ldrb	r3, [r7, #8]
 8004b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <lsm6dso32x_xl_lp2_on_6d_set>:
  * @param  val      change the values of low_pass_on_6d in reg CTRL8_XL
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_xl_lp2_on_6d_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL8_XL, (uint8_t *)&reg, 1);
 8004b40:	f107 0208 	add.w	r2, r7, #8
 8004b44:	2301      	movs	r3, #1
 8004b46:	2117      	movs	r1, #23
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fa77 	bl	800403c <lsm6dso32x_read_reg>
 8004b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <lsm6dso32x_xl_lp2_on_6d_set+0x42>
  {
    reg.low_pass_on_6d = val;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	7a3b      	ldrb	r3, [r7, #8]
 8004b60:	f362 0300 	bfi	r3, r2, #0, #1
 8004b64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL8_XL, (uint8_t *)&reg, 1);
 8004b66:	f107 0208 	add.w	r2, r7, #8
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	2117      	movs	r1, #23
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fa7c 	bl	800406c <lsm6dso32x_write_reg>
 8004b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <lsm6dso32x_i3c_disable_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_i3c_disable_set(stmdev_ctx_t *ctx,
                                   lsm6dso32x_i3c_disable_t val)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso32x_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL9_XL,
 8004b8c:	f107 020c 	add.w	r2, r7, #12
 8004b90:	2301      	movs	r3, #1
 8004b92:	2118      	movs	r1, #24
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fa51 	bl	800403c <lsm6dso32x_read_reg>
 8004b9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d111      	bne.n	8004bc6 <lsm6dso32x_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	09db      	lsrs	r3, r3, #7
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	7b3b      	ldrb	r3, [r7, #12]
 8004bb0:	f362 0341 	bfi	r3, r2, #1, #1
 8004bb4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL9_XL,
 8004bb6:	f107 020c 	add.w	r2, r7, #12
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2118      	movs	r1, #24
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fa54 	bl	800406c <lsm6dso32x_write_reg>
 8004bc4:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <lsm6dso32x_i3c_disable_set+0x5c>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_I3C_BUS_AVB,
 8004bcc:	f107 0210 	add.w	r2, r7, #16
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2162      	movs	r1, #98	@ 0x62
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fa31 	bl	800403c <lsm6dso32x_read_reg>
 8004bda:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <lsm6dso32x_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	7c3b      	ldrb	r3, [r7, #16]
 8004bec:	f362 03c4 	bfi	r3, r2, #3, #2
 8004bf0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_I3C_BUS_AVB,
 8004bf2:	f107 0210 	add.w	r2, r7, #16
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	2162      	movs	r1, #98	@ 0x62
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fa36 	bl	800406c <lsm6dso32x_write_reg>
 8004c00:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <lsm6dso32x_tap_detection_on_z_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_detection_on_z_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004c18:	f107 0208 	add.w	r2, r7, #8
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	2156      	movs	r1, #86	@ 0x56
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fa0b 	bl	800403c <lsm6dso32x_read_reg>
 8004c26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <lsm6dso32x_tap_detection_on_z_set+0x42>
  {
    reg.tap_z_en = val;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	7a3b      	ldrb	r3, [r7, #8]
 8004c38:	f362 0341 	bfi	r3, r2, #1, #1
 8004c3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004c3e:	f107 0208 	add.w	r2, r7, #8
 8004c42:	2301      	movs	r3, #1
 8004c44:	2156      	movs	r1, #86	@ 0x56
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fa10 	bl	800406c <lsm6dso32x_write_reg>
 8004c4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <lsm6dso32x_tap_detection_on_y_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_detection_on_y_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004c64:	f107 0208 	add.w	r2, r7, #8
 8004c68:	2301      	movs	r3, #1
 8004c6a:	2156      	movs	r1, #86	@ 0x56
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff f9e5 	bl	800403c <lsm6dso32x_read_reg>
 8004c72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <lsm6dso32x_tap_detection_on_y_set+0x42>
  {
    reg.tap_y_en = val;
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	7a3b      	ldrb	r3, [r7, #8]
 8004c84:	f362 0382 	bfi	r3, r2, #2, #1
 8004c88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2156      	movs	r1, #86	@ 0x56
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff f9ea 	bl	800406c <lsm6dso32x_write_reg>
 8004c98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <lsm6dso32x_tap_detection_on_x_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_detection_on_x_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2156      	movs	r1, #86	@ 0x56
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff f9bf 	bl	800403c <lsm6dso32x_read_reg>
 8004cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <lsm6dso32x_tap_detection_on_x_set+0x42>
  {
    reg.tap_x_en = val;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	7a3b      	ldrb	r3, [r7, #8]
 8004cd0:	f362 03c3 	bfi	r3, r2, #3, #1
 8004cd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG0, (uint8_t *)&reg, 1);
 8004cd6:	f107 0208 	add.w	r2, r7, #8
 8004cda:	2301      	movs	r3, #1
 8004cdc:	2156      	movs	r1, #86	@ 0x56
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff f9c4 	bl	800406c <lsm6dso32x_write_reg>
 8004ce4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <lsm6dso32x_tap_threshold_x_set>:
  * @param  val      change the values of tap_ths_x in reg TAP_CFG1
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_threshold_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_cfg1_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG1, (uint8_t *)&reg, 1);
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	2301      	movs	r3, #1
 8004d02:	2157      	movs	r1, #87	@ 0x57
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff f999 	bl	800403c <lsm6dso32x_read_reg>
 8004d0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <lsm6dso32x_tap_threshold_x_set+0x42>
  {
    reg.tap_ths_x = val;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	7a3b      	ldrb	r3, [r7, #8]
 8004d1c:	f362 0304 	bfi	r3, r2, #0, #5
 8004d20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG1, (uint8_t *)&reg, 1);
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	2301      	movs	r3, #1
 8004d28:	2157      	movs	r1, #87	@ 0x57
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff f99e 	bl	800406c <lsm6dso32x_write_reg>
 8004d30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <lsm6dso32x_tap_threshold_y_set>:
  * @param  val      change the values of tap_ths_y in reg TAP_CFG2
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_threshold_y_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_cfg2_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG2, (uint8_t *)&reg, 1);
 8004d48:	f107 0208 	add.w	r2, r7, #8
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	2158      	movs	r1, #88	@ 0x58
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff f973 	bl	800403c <lsm6dso32x_read_reg>
 8004d56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <lsm6dso32x_tap_threshold_y_set+0x42>
  {
    reg.tap_ths_y = val;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	7a3b      	ldrb	r3, [r7, #8]
 8004d68:	f362 0304 	bfi	r3, r2, #0, #5
 8004d6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG2, (uint8_t *)&reg, 1);
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	2301      	movs	r3, #1
 8004d74:	2158      	movs	r1, #88	@ 0x58
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff f978 	bl	800406c <lsm6dso32x_write_reg>
 8004d7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <lsm6dso32x_tap_threshold_z_set>:
  * @param  val      change the values of tap_ths_z in reg TAP_THS_6D
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_threshold_z_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_THS_6D, (uint8_t *)&reg, 1);
 8004d94:	f107 0208 	add.w	r2, r7, #8
 8004d98:	2301      	movs	r3, #1
 8004d9a:	2159      	movs	r1, #89	@ 0x59
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff f94d 	bl	800403c <lsm6dso32x_read_reg>
 8004da2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <lsm6dso32x_tap_threshold_z_set+0x42>
  {
    reg.tap_ths_z = val;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	f362 0304 	bfi	r3, r2, #0, #5
 8004db8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_THS_6D,
 8004dba:	f107 0208 	add.w	r2, r7, #8
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	2159      	movs	r1, #89	@ 0x59
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f952 	bl	800406c <lsm6dso32x_write_reg>
 8004dc8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&reg, 1);
  }

  return ret;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <lsm6dso32x_tap_shock_set>:
  * @param  val      change the values of shock in reg INT_DUR2
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_shock_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004de0:	f107 0208 	add.w	r2, r7, #8
 8004de4:	2301      	movs	r3, #1
 8004de6:	215a      	movs	r1, #90	@ 0x5a
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff f927 	bl	800403c <lsm6dso32x_read_reg>
 8004dee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <lsm6dso32x_tap_shock_set+0x42>
  {
    reg.shock = val;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	7a3b      	ldrb	r3, [r7, #8]
 8004e00:	f362 0301 	bfi	r3, r2, #0, #2
 8004e04:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004e06:	f107 0208 	add.w	r2, r7, #8
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	215a      	movs	r1, #90	@ 0x5a
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff f92c 	bl	800406c <lsm6dso32x_write_reg>
 8004e14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e16:	68fb      	ldr	r3, [r7, #12]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <lsm6dso32x_tap_quiet_set>:
  * @param  val      change the values of quiet in reg INT_DUR2
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_quiet_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004e2c:	f107 0208 	add.w	r2, r7, #8
 8004e30:	2301      	movs	r3, #1
 8004e32:	215a      	movs	r1, #90	@ 0x5a
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff f901 	bl	800403c <lsm6dso32x_read_reg>
 8004e3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <lsm6dso32x_tap_quiet_set+0x42>
  {
    reg.quiet = val;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	7a3b      	ldrb	r3, [r7, #8]
 8004e4c:	f362 0383 	bfi	r3, r2, #2, #2
 8004e50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004e52:	f107 0208 	add.w	r2, r7, #8
 8004e56:	2301      	movs	r3, #1
 8004e58:	215a      	movs	r1, #90	@ 0x5a
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff f906 	bl	800406c <lsm6dso32x_write_reg>
 8004e60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <lsm6dso32x_tap_dur_set>:
  * @param  val      change the values of dur in reg INT_DUR2
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004e78:	f107 0208 	add.w	r2, r7, #8
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	215a      	movs	r1, #90	@ 0x5a
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff f8db 	bl	800403c <lsm6dso32x_read_reg>
 8004e86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <lsm6dso32x_tap_dur_set+0x42>
  {
    reg.dur = val;
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	7a3b      	ldrb	r3, [r7, #8]
 8004e98:	f362 1307 	bfi	r3, r2, #4, #4
 8004e9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_INT_DUR2, (uint8_t *)&reg, 1);
 8004e9e:	f107 0208 	add.w	r2, r7, #8
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	215a      	movs	r1, #90	@ 0x5a
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff f8e0 	bl	800406c <lsm6dso32x_write_reg>
 8004eac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <lsm6dso32x_tap_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_tap_mode_set(stmdev_ctx_t *ctx,
                                lsm6dso32x_single_double_tap_t val)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_wake_up_ths_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_WAKE_UP_THS,
 8004ec4:	f107 0208 	add.w	r2, r7, #8
 8004ec8:	2301      	movs	r3, #1
 8004eca:	215b      	movs	r1, #91	@ 0x5b
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff f8b5 	bl	800403c <lsm6dso32x_read_reg>
 8004ed2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);

  if (ret == 0)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <lsm6dso32x_tap_mode_set+0x42>
  {
    reg.single_double_tap = (uint8_t)val;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	7a3b      	ldrb	r3, [r7, #8]
 8004ee4:	f362 13c7 	bfi	r3, r2, #7, #1
 8004ee8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_WAKE_UP_THS,
 8004eea:	f107 0208 	add.w	r2, r7, #8
 8004eee:	2301      	movs	r3, #1
 8004ef0:	215b      	movs	r1, #91	@ 0x5b
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff f8ba 	bl	800406c <lsm6dso32x_write_reg>
 8004ef8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&reg, 1);
  }

  return ret;
 8004efa:	68fb      	ldr	r3, [r7, #12]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <lsm6dso32x_6d_threshold_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_6d_threshold_set(stmdev_ctx_t *ctx,
                                    lsm6dso32x_sixd_ths_t val)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_THS_6D, (uint8_t *)&reg, 1);
 8004f10:	f107 0208 	add.w	r2, r7, #8
 8004f14:	2301      	movs	r3, #1
 8004f16:	2159      	movs	r1, #89	@ 0x59
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f88f 	bl	800403c <lsm6dso32x_read_reg>
 8004f1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <lsm6dso32x_6d_threshold_set+0x42>
  {
    reg.sixd_ths = (uint8_t)val;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	7a3b      	ldrb	r3, [r7, #8]
 8004f30:	f362 1346 	bfi	r3, r2, #5, #2
 8004f34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_THS_6D,
 8004f36:	f107 0208 	add.w	r2, r7, #8
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	2159      	movs	r1, #89	@ 0x59
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff f894 	bl	800406c <lsm6dso32x_write_reg>
 8004f44:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&reg, 1);
  }

  return ret;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <lsm6dso32x_4d_mode_set>:
  * @param  val      change the values of d4d_en in reg TAP_THS_6D
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_4d_mode_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso32x_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_THS_6D, (uint8_t *)&reg, 1);
 8004f5c:	f107 0208 	add.w	r2, r7, #8
 8004f60:	2301      	movs	r3, #1
 8004f62:	2159      	movs	r1, #89	@ 0x59
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff f869 	bl	800403c <lsm6dso32x_read_reg>
 8004f6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <lsm6dso32x_4d_mode_set+0x42>
  {
    reg.d4d_en = val;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	7a3b      	ldrb	r3, [r7, #8]
 8004f7c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004f80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_THS_6D,
 8004f82:	f107 0208 	add.w	r2, r7, #8
 8004f86:	2301      	movs	r3, #1
 8004f88:	2159      	movs	r1, #89	@ 0x59
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff f86e 	bl	800406c <lsm6dso32x_write_reg>
 8004f90:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&reg, 1);
  }

  return ret;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <lsm6dso32x_fsm_enable_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_fsm_enable_get(stmdev_ctx_t *ctx,
                                  lsm6dso32x_emb_fsm_enable_t *val)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fd4d 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8004fae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <lsm6dso32x_fsm_enable_get+0x28>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FSM_ENABLE_A,
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	2146      	movs	r1, #70	@ 0x46
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff f83d 	bl	800403c <lsm6dso32x_read_reg>
 8004fc2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *) val,
                              2);
  }

  if (ret == 0)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <lsm6dso32x_fsm_enable_get+0x38>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fd3b 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8004fd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <lsm6dso32x_fsm_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso32x_fsm_odr_t *val)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  lsm6dso32x_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 8004fea:	2102      	movs	r1, #2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fd2b 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8004ff2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d107      	bne.n	800500a <lsm6dso32x_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_ODR_CFG_B,
 8004ffa:	f107 0208 	add.w	r2, r7, #8
 8004ffe:	2301      	movs	r3, #1
 8005000:	215f      	movs	r1, #95	@ 0x5f
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff f81a 	bl	800403c <lsm6dso32x_read_reg>
 8005008:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d12a      	bne.n	8005066 <lsm6dso32x_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005010:	7a3b      	ldrb	r3, [r7, #8]
 8005012:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b03      	cmp	r3, #3
 800501a:	d81b      	bhi.n	8005054 <lsm6dso32x_fsm_data_rate_get+0x74>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <lsm6dso32x_fsm_data_rate_get+0x44>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	0800503d 	.word	0x0800503d
 800502c:	08005045 	.word	0x08005045
 8005030:	0800504d 	.word	0x0800504d
    {
      case LSM6DSO32X_ODR_FSM_12Hz5:
        *val = LSM6DSO32X_ODR_FSM_12Hz5;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
        break;
 800503a:	e00f      	b.n	800505c <lsm6dso32x_fsm_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_FSM_26Hz:
        *val = LSM6DSO32X_ODR_FSM_26Hz;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
        break;
 8005042:	e00b      	b.n	800505c <lsm6dso32x_fsm_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_FSM_52Hz:
        *val = LSM6DSO32X_ODR_FSM_52Hz;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
        break;
 800504a:	e007      	b.n	800505c <lsm6dso32x_fsm_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_FSM_104Hz:
        *val = LSM6DSO32X_ODR_FSM_104Hz;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2203      	movs	r2, #3
 8005050:	701a      	strb	r2, [r3, #0]
        break;
 8005052:	e003      	b.n	800505c <lsm6dso32x_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO32X_ODR_FSM_12Hz5;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
        break;
 800505a:	bf00      	nop
    }

    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 800505c:	2100      	movs	r1, #0
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fcf2 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8005064:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005066:	68fb      	ldr	r3, [r7, #12]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <lsm6dso32x_mlc_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     lsm6dso32x_mlc_odr_t *val)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  lsm6dso32x_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 800507a:	2102      	movs	r1, #2
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fce3 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8005082:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <lsm6dso32x_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_ODR_CFG_C,
 800508a:	f107 0208 	add.w	r2, r7, #8
 800508e:	2301      	movs	r3, #1
 8005090:	2160      	movs	r1, #96	@ 0x60
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe ffd2 	bl	800403c <lsm6dso32x_read_reg>
 8005098:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d12a      	bne.n	80050f6 <lsm6dso32x_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80050a0:	7a3b      	ldrb	r3, [r7, #8]
 80050a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d81b      	bhi.n	80050e4 <lsm6dso32x_mlc_data_rate_get+0x74>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <lsm6dso32x_mlc_data_rate_get+0x44>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050cd 	.word	0x080050cd
 80050bc:	080050d5 	.word	0x080050d5
 80050c0:	080050dd 	.word	0x080050dd
    {
      case LSM6DSO32X_ODR_PRGS_12Hz5:
        *val = LSM6DSO32X_ODR_PRGS_12Hz5;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
        break;
 80050ca:	e00f      	b.n	80050ec <lsm6dso32x_mlc_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_PRGS_26Hz:
        *val = LSM6DSO32X_ODR_PRGS_26Hz;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
        break;
 80050d2:	e00b      	b.n	80050ec <lsm6dso32x_mlc_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_PRGS_52Hz:
        *val = LSM6DSO32X_ODR_PRGS_52Hz;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2202      	movs	r2, #2
 80050d8:	701a      	strb	r2, [r3, #0]
        break;
 80050da:	e007      	b.n	80050ec <lsm6dso32x_mlc_data_rate_get+0x7c>

      case LSM6DSO32X_ODR_PRGS_104Hz:
        *val = LSM6DSO32X_ODR_PRGS_104Hz;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2203      	movs	r2, #3
 80050e0:	701a      	strb	r2, [r3, #0]
        break;
 80050e2:	e003      	b.n	80050ec <lsm6dso32x_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSO32X_ODR_PRGS_12Hz5;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
        break;
 80050ea:	bf00      	nop
    }

    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 80050ec:	2100      	movs	r1, #0
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fcaa 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 80050f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <lsm6dso32x_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dso32x_pin_int1_route_t val)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b092      	sub	sp, #72	@ 0x48
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso32x_pin_int2_route_t  pin_int2_route;
  lsm6dso32x_emb_func_int1_t   emb_func_int1 = {0};
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  lsm6dso32x_fsm_int1_a_t      fsm_int1_a = {0};
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  lsm6dso32x_fsm_int1_b_t      fsm_int1_b = {0};
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  lsm6dso32x_int1_ctrl_t       int1_ctrl = {0};
 8005120:	2300      	movs	r3, #0
 8005122:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  lsm6dso32x_int2_ctrl_t       int2_ctrl;
  lsm6dso32x_mlc_int1_t        mlc_int1 = {0};
 8005126:	2300      	movs	r3, #0
 8005128:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso32x_tap_cfg2_t        tap_cfg2;
  lsm6dso32x_md2_cfg_t         md2_cfg;
  lsm6dso32x_md1_cfg_t         md1_cfg = {0};
 800512c:	2300      	movs	r3, #0
 800512e:	763b      	strb	r3, [r7, #24]
  lsm6dso32x_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8005130:	793b      	ldrb	r3, [r7, #4]
 8005132:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005136:	b2da      	uxtb	r2, r3
 8005138:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800513c:	f362 0300 	bfi	r3, r2, #0, #1
 8005140:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8005144:	793b      	ldrb	r3, [r7, #4]
 8005146:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005150:	f362 0341 	bfi	r3, r2, #1, #1
 8005154:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_boot      = val.boot;
 8005158:	793b      	ldrb	r3, [r7, #4]
 800515a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005164:	f362 0382 	bfi	r3, r2, #2, #1
 8005168:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 800516c:	793b      	ldrb	r3, [r7, #4]
 800516e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005178:	f362 03c3 	bfi	r3, r2, #3, #1
 800517c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8005180:	793b      	ldrb	r3, [r7, #4]
 8005182:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800518c:	f362 1304 	bfi	r3, r2, #4, #1
 8005190:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8005194:	793b      	ldrb	r3, [r7, #4]
 8005196:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051a0:	f362 1345 	bfi	r3, r2, #5, #1
 80051a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 80051a8:	793b      	ldrb	r3, [r7, #4]
 80051aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051b4:	f362 1386 	bfi	r3, r2, #6, #1
 80051b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.den_drdy_flag  = val.den_flag;
 80051bc:	797b      	ldrb	r3, [r7, #5]
 80051be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80051cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  md1_cfg.int1_shub         = val.sh_endop;
 80051d0:	797b      	ldrb	r3, [r7, #5]
 80051d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	7e3b      	ldrb	r3, [r7, #24]
 80051da:	f362 0300 	bfi	r3, r2, #0, #1
 80051de:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_6d           = val.six_d;
 80051e0:	797b      	ldrb	r3, [r7, #5]
 80051e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	7e3b      	ldrb	r3, [r7, #24]
 80051ea:	f362 0382 	bfi	r3, r2, #2, #1
 80051ee:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_double_tap   = val.double_tap;
 80051f0:	797b      	ldrb	r3, [r7, #5]
 80051f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	7e3b      	ldrb	r3, [r7, #24]
 80051fa:	f362 03c3 	bfi	r3, r2, #3, #1
 80051fe:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_ff           = val.free_fall;
 8005200:	797b      	ldrb	r3, [r7, #5]
 8005202:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	7e3b      	ldrb	r3, [r7, #24]
 800520a:	f362 1304 	bfi	r3, r2, #4, #1
 800520e:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_wu           = val.wake_up;
 8005210:	797b      	ldrb	r3, [r7, #5]
 8005212:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	7e3b      	ldrb	r3, [r7, #24]
 800521a:	f362 1345 	bfi	r3, r2, #5, #1
 800521e:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_single_tap   = val.single_tap;
 8005220:	797b      	ldrb	r3, [r7, #5]
 8005222:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	7e3b      	ldrb	r3, [r7, #24]
 800522a:	f362 1386 	bfi	r3, r2, #6, #1
 800522e:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8005230:	79bb      	ldrb	r3, [r7, #6]
 8005232:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	7e3b      	ldrb	r3, [r7, #24]
 800523a:	f362 13c7 	bfi	r3, r2, #7, #1
 800523e:	763b      	strb	r3, [r7, #24]
  emb_func_int1.int1_step_detector = val.step_detector;
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800524c:	f362 03c3 	bfi	r3, r2, #3, #1
 8005250:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_tilt          = val.tilt;
 8005254:	79bb      	ldrb	r3, [r7, #6]
 8005256:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005260:	f362 1304 	bfi	r3, r2, #4, #1
 8005264:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8005268:	79bb      	ldrb	r3, [r7, #6]
 800526a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005274:	f362 1345 	bfi	r3, r2, #5, #1
 8005278:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 800527c:	79bb      	ldrb	r3, [r7, #6]
 800527e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005288:	f362 13c7 	bfi	r3, r2, #7, #1
 800528c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8005290:	79bb      	ldrb	r3, [r7, #6]
 8005292:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800529c:	f362 0300 	bfi	r3, r2, #0, #1
 80052a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm2 = val.fsm2;
 80052a4:	79bb      	ldrb	r3, [r7, #6]
 80052a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052b0:	f362 0341 	bfi	r3, r2, #1, #1
 80052b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm3 = val.fsm3;
 80052b8:	79bb      	ldrb	r3, [r7, #6]
 80052ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052c4:	f362 0382 	bfi	r3, r2, #2, #1
 80052c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm4 = val.fsm4;
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052d8:	f362 03c3 	bfi	r3, r2, #3, #1
 80052dc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm5 = val.fsm5;
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052ec:	f362 1304 	bfi	r3, r2, #4, #1
 80052f0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm6 = val.fsm6;
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005300:	f362 1345 	bfi	r3, r2, #5, #1
 8005304:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800530e:	b2da      	uxtb	r2, r3
 8005310:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005314:	f362 1386 	bfi	r3, r2, #6, #1
 8005318:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm8 = val.fsm8;
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005328:	f362 13c7 	bfi	r3, r2, #7, #1
 800532c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800533c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005340:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005350:	f362 1386 	bfi	r3, r2, #6, #1
 8005354:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005364:	f362 1345 	bfi	r3, r2, #5, #1
 8005368:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm12 = val.fsm12;
 800536c:	7a3b      	ldrb	r3, [r7, #8]
 800536e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005378:	f362 1304 	bfi	r3, r2, #4, #1
 800537c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8005380:	7a3b      	ldrb	r3, [r7, #8]
 8005382:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800538c:	f362 03c3 	bfi	r3, r2, #3, #1
 8005390:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8005394:	7a3b      	ldrb	r3, [r7, #8]
 8005396:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80053a0:	f362 0382 	bfi	r3, r2, #2, #1
 80053a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm15 = val.fsm15;
 80053a8:	7a3b      	ldrb	r3, [r7, #8]
 80053aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80053b4:	f362 0341 	bfi	r3, r2, #1, #1
 80053b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm16 = val.fsm16;
 80053bc:	7a3b      	ldrb	r3, [r7, #8]
 80053be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80053c8:	f362 0300 	bfi	r3, r2, #0, #1
 80053cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  mlc_int1.int1_mlc1 = val.mlc1;
 80053d0:	7a3b      	ldrb	r3, [r7, #8]
 80053d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053dc:	f362 0300 	bfi	r3, r2, #0, #1
 80053e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc2 = val.mlc2;
 80053e4:	7a3b      	ldrb	r3, [r7, #8]
 80053e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053f0:	f362 0341 	bfi	r3, r2, #1, #1
 80053f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc3 = val.mlc3;
 80053f8:	7a3b      	ldrb	r3, [r7, #8]
 80053fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005404:	f362 0382 	bfi	r3, r2, #2, #1
 8005408:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc4 = val.mlc4;
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005418:	f362 03c3 	bfi	r3, r2, #3, #1
 800541c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc5 = val.mlc5;
 8005420:	7a7b      	ldrb	r3, [r7, #9]
 8005422:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800542c:	f362 1304 	bfi	r3, r2, #4, #1
 8005430:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc6 = val.mlc6;
 8005434:	7a7b      	ldrb	r3, [r7, #9]
 8005436:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005440:	f362 1345 	bfi	r3, r2, #5, #1
 8005444:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc7 = val.mlc7;
 8005448:	7a7b      	ldrb	r3, [r7, #9]
 800544a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005454:	f362 1386 	bfi	r3, r2, #6, #1
 8005458:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc8 = val.mlc8;
 800545c:	7a7b      	ldrb	r3, [r7, #9]
 800545e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005468:	f362 13c7 	bfi	r3, r2, #7, #1
 800546c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL4_C,
 8005470:	f107 0214 	add.w	r2, r7, #20
 8005474:	2301      	movs	r3, #1
 8005476:	2113      	movs	r1, #19
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7fe fddf 	bl	800403c <lsm6dso32x_read_reg>
 800547e:	6478      	str	r0, [r7, #68]	@ 0x44
                            (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11c      	bne.n	80054c0 <lsm6dso32x_pin_int1_route_set+0x3c0>
  {
    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8005486:	793b      	ldrb	r3, [r7, #4]
 8005488:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800548c:	b2da      	uxtb	r2, r3
 800548e:	797b      	ldrb	r3, [r7, #5]
 8005490:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <lsm6dso32x_pin_int1_route_set+0x3a8>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 800549e:	7d3b      	ldrb	r3, [r7, #20]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	753b      	strb	r3, [r7, #20]
 80054a6:	e003      	b.n	80054b0 <lsm6dso32x_pin_int1_route_set+0x3b0>
    }

    else
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 80054a8:	7d3b      	ldrb	r3, [r7, #20]
 80054aa:	f023 0320 	bic.w	r3, r3, #32
 80054ae:	753b      	strb	r3, [r7, #20]
    }

    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL4_C,
 80054b0:	f107 0214 	add.w	r2, r7, #20
 80054b4:	2301      	movs	r3, #1
 80054b6:	2113      	movs	r1, #19
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7fe fdd7 	bl	800406c <lsm6dso32x_write_reg>
 80054be:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&ctrl4_c, 1);
  }

  if (ret == 0)
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <lsm6dso32x_pin_int1_route_set+0x3d0>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 80054c6:	2102      	movs	r1, #2
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fabd 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 80054ce:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 80054d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <lsm6dso32x_pin_int1_route_set+0x3e6>
  {
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_MLC_INT1,
 80054d6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80054da:	2301      	movs	r3, #1
 80054dc:	210d      	movs	r1, #13
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7fe fdc4 	bl	800406c <lsm6dso32x_write_reg>
 80054e4:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 80054e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d107      	bne.n	80054fc <lsm6dso32x_pin_int1_route_set+0x3fc>
  {
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_EMB_FUNC_INT1,
 80054ec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80054f0:	2301      	movs	r3, #1
 80054f2:	210a      	movs	r1, #10
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7fe fdb9 	bl	800406c <lsm6dso32x_write_reg>
 80054fa:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 80054fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <lsm6dso32x_pin_int1_route_set+0x412>
  {
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_FSM_INT1_A,
 8005502:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005506:	2301      	movs	r3, #1
 8005508:	210b      	movs	r1, #11
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7fe fdae 	bl	800406c <lsm6dso32x_write_reg>
 8005510:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8005512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <lsm6dso32x_pin_int1_route_set+0x428>
  {
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_FSM_INT1_B,
 8005518:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800551c:	2301      	movs	r3, #1
 800551e:	210c      	movs	r1, #12
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7fe fda3 	bl	800406c <lsm6dso32x_write_reg>
 8005526:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8005528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <lsm6dso32x_pin_int1_route_set+0x438>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 800552e:	2100      	movs	r1, #0
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff fa89 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8005536:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 80d5 	bne.w	80056ea <lsm6dso32x_pin_int1_route_set+0x5ea>
  {
    if ((emb_func_int1.int1_fsm_lc
 8005540:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005544:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005548:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_sig_mot
 800554a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800554e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4313      	orrs	r3, r2
 8005556:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_step_detector
 8005558:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800555c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_tilt
 8005566:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800556a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm1
 8005574:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005578:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm2
 8005582:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005586:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4313      	orrs	r3, r2
 800558e:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm3
 8005590:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm4
 800559e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm5
 80055ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm6
 80055ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm7
 80055c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm8
 80055d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm9
 80055e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80055e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm10
 80055f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80055f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm11
 8005600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005604:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4313      	orrs	r3, r2
 800560c:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm12
 800560e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005612:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm13
 800561c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm14
 800562a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800562e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm15
 8005638:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800563c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm16
 8005646:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800564a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc1
 8005654:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005658:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc2
 8005662:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005666:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc3
 8005670:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005674:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc4
 800567e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005682:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc5
 800568c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005690:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc6
 800569a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800569e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc7
 80056a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc8) != PROPERTY_DISABLE)
 80056b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b2db      	uxtb	r3, r3
    if ((emb_func_int1.int1_fsm_lc
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <lsm6dso32x_pin_int1_route_set+0x5d2>
    {
      md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 80056c8:	7e3b      	ldrb	r3, [r7, #24]
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	763b      	strb	r3, [r7, #24]
 80056d0:	e003      	b.n	80056da <lsm6dso32x_pin_int1_route_set+0x5da>
    }

    else
    {
      md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 80056d2:	7e3b      	ldrb	r3, [r7, #24]
 80056d4:	f023 0302 	bic.w	r3, r3, #2
 80056d8:	763b      	strb	r3, [r7, #24]
    }

    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_INT1_CTRL,
 80056da:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80056de:	2301      	movs	r3, #1
 80056e0:	210d      	movs	r1, #13
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7fe fcc2 	bl	800406c <lsm6dso32x_write_reg>
 80056e8:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 80056ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <lsm6dso32x_pin_int1_route_set+0x600>
  {
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_MD1_CFG,
 80056f0:	f107 0218 	add.w	r2, r7, #24
 80056f4:	2301      	movs	r3, #1
 80056f6:	215e      	movs	r1, #94	@ 0x5e
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7fe fcb7 	bl	800406c <lsm6dso32x_write_reg>
 80056fe:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&md1_cfg, 1);
  }

  if (ret == 0)
 8005700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <lsm6dso32x_pin_int1_route_set+0x616>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT2_CTRL,
 8005706:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800570a:	2301      	movs	r3, #1
 800570c:	210e      	movs	r1, #14
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7fe fc94 	bl	800403c <lsm6dso32x_read_reg>
 8005714:	6478      	str	r0, [r7, #68]	@ 0x44
                              (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8005716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005718:	2b00      	cmp	r3, #0
 800571a:	d111      	bne.n	8005740 <lsm6dso32x_pin_int1_route_set+0x640>
  {
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800571c:	793b      	ldrb	r3, [r7, #4]
 800571e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005728:	f362 0382 	bfi	r3, r2, #2, #1
 800572c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_INT2_CTRL,
 8005730:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005734:	2301      	movs	r3, #1
 8005736:	210e      	movs	r1, #14
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7fe fc97 	bl	800406c <lsm6dso32x_write_reg>
 800573e:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8005740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005742:	2b00      	cmp	r3, #0
 8005744:	d107      	bne.n	8005756 <lsm6dso32x_pin_int1_route_set+0x656>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MD2_CFG,
 8005746:	f107 021c 	add.w	r2, r7, #28
 800574a:	2301      	movs	r3, #1
 800574c:	215f      	movs	r1, #95	@ 0x5f
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7fe fc74 	bl	800403c <lsm6dso32x_read_reg>
 8005754:	6478      	str	r0, [r7, #68]	@ 0x44
                              (uint8_t *)&md2_cfg, 1);
  }

  if (ret == 0)
 8005756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <lsm6dso32x_pin_int1_route_set+0x67c>
  {
    md2_cfg.int2_timestamp = val.timestamp;
 800575c:	797b      	ldrb	r3, [r7, #5]
 800575e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	7f3b      	ldrb	r3, [r7, #28]
 8005766:	f362 0300 	bfi	r3, r2, #0, #1
 800576a:	773b      	strb	r3, [r7, #28]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_MD2_CFG,
 800576c:	f107 021c 	add.w	r2, r7, #28
 8005770:	2301      	movs	r3, #1
 8005772:	215f      	movs	r1, #95	@ 0x5f
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7fe fc79 	bl	800406c <lsm6dso32x_write_reg>
 800577a:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *)&md2_cfg, 1);
  }

  if (ret == 0)
 800577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <lsm6dso32x_pin_int1_route_set+0x692>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_TAP_CFG2,
 8005782:	f107 0220 	add.w	r2, r7, #32
 8005786:	2301      	movs	r3, #1
 8005788:	2158      	movs	r1, #88	@ 0x58
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7fe fc56 	bl	800403c <lsm6dso32x_read_reg>
 8005790:	6478      	str	r0, [r7, #68]	@ 0x44
                              (uint8_t *) &tap_cfg2, 1);
  }

  if (ret == 0)
 8005792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <lsm6dso32x_pin_int1_route_set+0x6a6>
  {
    ret = lsm6dso32x_pin_int2_route_get(ctx, &pin_int2_route);
 8005798:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800579c:	4619      	mov	r1, r3
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fb10 	bl	8005dc4 <lsm6dso32x_pin_int2_route_get>
 80057a4:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 80057a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 80d2 	bne.w	8005952 <lsm6dso32x_pin_int1_route_set+0x852>
  {
    if ((pin_int2_route.fifo_bdr
 80057ae:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057b6:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_g
 80057b8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_temp
 80057c6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4313      	orrs	r3, r2
 80057d2:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_xl
 80057d4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_full
 80057e2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	4313      	orrs	r3, r2
 80057ee:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_ovr
 80057f0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80057f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_th
 80057fe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005802:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	b2da      	uxtb	r2, r3
         | pin_int2_route.six_d
 800580c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005810:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	4313      	orrs	r3, r2
 8005818:	b2da      	uxtb	r2, r3
         | pin_int2_route.double_tap
 800581a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800581e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b2da      	uxtb	r2, r3
         | pin_int2_route.free_fall
 8005828:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800582c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	4313      	orrs	r3, r2
 8005834:	b2da      	uxtb	r2, r3
         | pin_int2_route.wake_up
 8005836:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800583a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	b2da      	uxtb	r2, r3
         | pin_int2_route.single_tap
 8005844:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005848:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	4313      	orrs	r3, r2
 8005850:	b2da      	uxtb	r2, r3
         | pin_int2_route.sleep_change
 8005852:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005856:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4313      	orrs	r3, r2
 800585e:	b2da      	uxtb	r2, r3
         | int1_ctrl.den_drdy_flag
 8005860:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005864:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_boot
 800586e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005872:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_cnt_bdr
 800587c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005880:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_g
 800588a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800588e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4313      	orrs	r3, r2
 8005896:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_xl
 8005898:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800589c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_full
 80058a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_ovr
 80058b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_th
 80058c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	4313      	orrs	r3, r2
 80058ce:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_shub
 80058d0:	7e3b      	ldrb	r3, [r7, #24]
 80058d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4313      	orrs	r3, r2
 80058da:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_6d
 80058dc:	7e3b      	ldrb	r3, [r7, #24]
 80058de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	4313      	orrs	r3, r2
 80058e6:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_double_tap
 80058e8:	7e3b      	ldrb	r3, [r7, #24]
 80058ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_ff
 80058f4:	7e3b      	ldrb	r3, [r7, #24]
 80058f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_wu
 8005900:	7e3b      	ldrb	r3, [r7, #24]
 8005902:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4313      	orrs	r3, r2
 800590a:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_single_tap
 800590c:	7e3b      	ldrb	r3, [r7, #24]
 800590e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4313      	orrs	r3, r2
 8005916:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8005918:	7e3b      	ldrb	r3, [r7, #24]
 800591a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b2db      	uxtb	r3, r3
    if ((pin_int2_route.fifo_bdr
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <lsm6dso32x_pin_int1_route_set+0x836>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8005928:	f897 3020 	ldrb.w	r3, [r7, #32]
 800592c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005930:	f887 3020 	strb.w	r3, [r7, #32]
 8005934:	e005      	b.n	8005942 <lsm6dso32x_pin_int1_route_set+0x842>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8005936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800593a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800593e:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_TAP_CFG2,
 8005942:	f107 0220 	add.w	r2, r7, #32
 8005946:	2301      	movs	r3, #1
 8005948:	2158      	movs	r1, #88	@ 0x58
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fe fb8e 	bl	800406c <lsm6dso32x_write_reg>
 8005950:	6478      	str	r0, [r7, #68]	@ 0x44
                               (uint8_t *) &tap_cfg2, 1);
  }

  return ret;
 8005952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005954:	4618      	mov	r0, r3
 8005956:	3748      	adds	r7, #72	@ 0x48
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <lsm6dso32x_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_pin_int1_route_get(stmdev_ctx_t *ctx,
                                      lsm6dso32x_pin_int1_route_t *val)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  lsm6dso32x_mlc_int1_t        mlc_int1;
  lsm6dso32x_md2_cfg_t         md2_cfg;
  lsm6dso32x_md1_cfg_t         md1_cfg;
  lsm6dso32x_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 8005966:	2102      	movs	r1, #2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff f86d 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 800596e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if (ret == 0)
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <lsm6dso32x_pin_int1_route_get+0x2a>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MLC_INT1,
 8005976:	f107 0214 	add.w	r2, r7, #20
 800597a:	2301      	movs	r3, #1
 800597c:	210d      	movs	r1, #13
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe fb5c 	bl	800403c <lsm6dso32x_read_reg>
 8005984:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <lsm6dso32x_pin_int1_route_get+0x40>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_INT1,
 800598c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005990:	2301      	movs	r3, #1
 8005992:	210a      	movs	r1, #10
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe fb51 	bl	800403c <lsm6dso32x_read_reg>
 800599a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 800599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <lsm6dso32x_pin_int1_route_get+0x56>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FSM_INT1_A,
 80059a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80059a6:	2301      	movs	r3, #1
 80059a8:	210b      	movs	r1, #11
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fe fb46 	bl	800403c <lsm6dso32x_read_reg>
 80059b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <lsm6dso32x_pin_int1_route_get+0x6c>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FSM_INT1_B,
 80059b8:	f107 0220 	add.w	r2, r7, #32
 80059bc:	2301      	movs	r3, #1
 80059be:	210c      	movs	r1, #12
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fe fb3b 	bl	800403c <lsm6dso32x_read_reg>
 80059c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <lsm6dso32x_pin_int1_route_get+0x7c>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff f839 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 80059d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ret == 0)
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <lsm6dso32x_pin_int1_route_get+0x92>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT1_CTRL,
 80059de:	f107 021c 	add.w	r2, r7, #28
 80059e2:	2301      	movs	r3, #1
 80059e4:	210d      	movs	r1, #13
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fe fb28 	bl	800403c <lsm6dso32x_read_reg>
 80059ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <lsm6dso32x_pin_int1_route_get+0xa8>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MD1_CFG,
 80059f4:	f107 020c 	add.w	r2, r7, #12
 80059f8:	2301      	movs	r3, #1
 80059fa:	215e      	movs	r1, #94	@ 0x5e
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fe fb1d 	bl	800403c <lsm6dso32x_read_reg>
 8005a02:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&md1_cfg, 1);
  }

  if (ret == 0)
 8005a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d107      	bne.n	8005a1a <lsm6dso32x_pin_int1_route_get+0xbe>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL4_C,
 8005a0a:	f107 0208 	add.w	r2, r7, #8
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2113      	movs	r1, #19
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fe fb12 	bl	800403c <lsm6dso32x_read_reg>
 8005a18:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&ctrl4_c, 1);
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 8005a1a:	7a3b      	ldrb	r3, [r7, #8]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <lsm6dso32x_pin_int1_route_get+0x11c>
  {
    if (ret == 0)
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d110      	bne.n	8005a4e <lsm6dso32x_pin_int1_route_get+0xf2>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT2_CTRL,
 8005a2c:	f107 0218 	add.w	r2, r7, #24
 8005a30:	2301      	movs	r3, #1
 8005a32:	210e      	movs	r1, #14
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fe fb01 	bl	800403c <lsm6dso32x_read_reg>
 8005a3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                (uint8_t *)&int2_ctrl, 1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005a3c:	7e3b      	ldrb	r3, [r7, #24]
 8005a3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a42:	b2d9      	uxtb	r1, r3
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	7813      	ldrb	r3, [r2, #0]
 8005a48:	f361 0382 	bfi	r3, r1, #2, #1
 8005a4c:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11b      	bne.n	8005a8c <lsm6dso32x_pin_int1_route_get+0x130>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MD2_CFG,
 8005a54:	f107 0210 	add.w	r2, r7, #16
 8005a58:	2301      	movs	r3, #1
 8005a5a:	215f      	movs	r1, #95	@ 0x5f
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fe faed 	bl	800403c <lsm6dso32x_read_reg>
 8005a62:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                (uint8_t *)&md2_cfg, 1);
      val->timestamp = md2_cfg.int2_timestamp;
 8005a64:	7c3b      	ldrb	r3, [r7, #16]
 8005a66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a6a:	b2d9      	uxtb	r1, r3
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	7853      	ldrb	r3, [r2, #1]
 8005a70:	f361 0382 	bfi	r3, r1, #2, #1
 8005a74:	7053      	strb	r3, [r2, #1]
 8005a76:	e009      	b.n	8005a8c <lsm6dso32x_pin_int1_route_get+0x130>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	7813      	ldrb	r3, [r2, #0]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	7853      	ldrb	r3, [r2, #1]
 8005a86:	f023 0304 	bic.w	r3, r3, #4
 8005a8a:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8005a8c:	7f3b      	ldrb	r3, [r7, #28]
 8005a8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a92:	b2d9      	uxtb	r1, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	7813      	ldrb	r3, [r2, #0]
 8005a98:	f361 0300 	bfi	r3, r1, #0, #1
 8005a9c:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8005a9e:	7f3b      	ldrb	r3, [r7, #28]
 8005aa0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005aa4:	b2d9      	uxtb	r1, r3
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7813      	ldrb	r3, [r2, #0]
 8005aaa:	f361 0341 	bfi	r3, r1, #1, #1
 8005aae:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8005ab0:	7f3b      	ldrb	r3, [r7, #28]
 8005ab2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ab6:	b2d9      	uxtb	r1, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	7813      	ldrb	r3, [r2, #0]
 8005abc:	f361 03c3 	bfi	r3, r1, #3, #1
 8005ac0:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 8005ac2:	7f3b      	ldrb	r3, [r7, #28]
 8005ac4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ac8:	b2d9      	uxtb	r1, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	7813      	ldrb	r3, [r2, #0]
 8005ace:	f361 1304 	bfi	r3, r1, #4, #1
 8005ad2:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 8005ad4:	7f3b      	ldrb	r3, [r7, #28]
 8005ad6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ada:	b2d9      	uxtb	r1, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	7813      	ldrb	r3, [r2, #0]
 8005ae0:	f361 1345 	bfi	r3, r1, #5, #1
 8005ae4:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 8005ae6:	7f3b      	ldrb	r3, [r7, #28]
 8005ae8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005aec:	b2d9      	uxtb	r1, r3
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	7813      	ldrb	r3, [r2, #0]
 8005af2:	f361 1386 	bfi	r3, r1, #6, #1
 8005af6:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8005af8:	7f3b      	ldrb	r3, [r7, #28]
 8005afa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	7813      	ldrb	r3, [r2, #0]
 8005b04:	f361 13c7 	bfi	r3, r1, #7, #1
 8005b08:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8005b0a:	7f3b      	ldrb	r3, [r7, #28]
 8005b0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b10:	b2d9      	uxtb	r1, r3
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	7853      	ldrb	r3, [r2, #1]
 8005b16:	f361 0300 	bfi	r3, r1, #0, #1
 8005b1a:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8005b1c:	7b3b      	ldrb	r3, [r7, #12]
 8005b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b22:	b2d9      	uxtb	r1, r3
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	7853      	ldrb	r3, [r2, #1]
 8005b28:	f361 0341 	bfi	r3, r1, #1, #1
 8005b2c:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8005b2e:	7b3b      	ldrb	r3, [r7, #12]
 8005b30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b34:	b2d9      	uxtb	r1, r3
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	7853      	ldrb	r3, [r2, #1]
 8005b3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8005b3e:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8005b40:	7b3b      	ldrb	r3, [r7, #12]
 8005b42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b46:	b2d9      	uxtb	r1, r3
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	7853      	ldrb	r3, [r2, #1]
 8005b4c:	f361 1304 	bfi	r3, r1, #4, #1
 8005b50:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 8005b52:	7b3b      	ldrb	r3, [r7, #12]
 8005b54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b58:	b2d9      	uxtb	r1, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	7853      	ldrb	r3, [r2, #1]
 8005b5e:	f361 1345 	bfi	r3, r1, #5, #1
 8005b62:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8005b64:	7b3b      	ldrb	r3, [r7, #12]
 8005b66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b6a:	b2d9      	uxtb	r1, r3
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	7853      	ldrb	r3, [r2, #1]
 8005b70:	f361 1386 	bfi	r3, r1, #6, #1
 8005b74:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8005b76:	7b3b      	ldrb	r3, [r7, #12]
 8005b78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b7c:	b2d9      	uxtb	r1, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	7853      	ldrb	r3, [r2, #1]
 8005b82:	f361 13c7 	bfi	r3, r1, #7, #1
 8005b86:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8005b88:	7b3b      	ldrb	r3, [r7, #12]
 8005b8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b8e:	b2d9      	uxtb	r1, r3
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	7893      	ldrb	r3, [r2, #2]
 8005b94:	f361 0300 	bfi	r3, r1, #0, #1
 8005b98:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 8005b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ba2:	b2d9      	uxtb	r1, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	7893      	ldrb	r3, [r2, #2]
 8005ba8:	f361 0341 	bfi	r3, r1, #1, #1
 8005bac:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8005bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bb6:	b2d9      	uxtb	r1, r3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	7893      	ldrb	r3, [r2, #2]
 8005bbc:	f361 0382 	bfi	r3, r1, #2, #1
 8005bc0:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8005bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bca:	b2d9      	uxtb	r1, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	7893      	ldrb	r3, [r2, #2]
 8005bd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8005bd4:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8005bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bda:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bde:	b2d9      	uxtb	r1, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	7893      	ldrb	r3, [r2, #2]
 8005be4:	f361 1304 	bfi	r3, r1, #4, #1
 8005be8:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8005bea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bf2:	b2d9      	uxtb	r1, r3
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	7893      	ldrb	r3, [r2, #2]
 8005bf8:	f361 1345 	bfi	r3, r1, #5, #1
 8005bfc:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8005bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c06:	b2d9      	uxtb	r1, r3
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	7893      	ldrb	r3, [r2, #2]
 8005c0c:	f361 1386 	bfi	r3, r1, #6, #1
 8005c10:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 8005c12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c1a:	b2d9      	uxtb	r1, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	7893      	ldrb	r3, [r2, #2]
 8005c20:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c24:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 8005c26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c2e:	b2d9      	uxtb	r1, r3
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	78d3      	ldrb	r3, [r2, #3]
 8005c34:	f361 0300 	bfi	r3, r1, #0, #1
 8005c38:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8005c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c42:	b2d9      	uxtb	r1, r3
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	78d3      	ldrb	r3, [r2, #3]
 8005c48:	f361 0341 	bfi	r3, r1, #1, #1
 8005c4c:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8005c4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c56:	b2d9      	uxtb	r1, r3
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	78d3      	ldrb	r3, [r2, #3]
 8005c5c:	f361 0382 	bfi	r3, r1, #2, #1
 8005c60:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 8005c62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c6a:	b2d9      	uxtb	r1, r3
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	78d3      	ldrb	r3, [r2, #3]
 8005c70:	f361 03c3 	bfi	r3, r1, #3, #1
 8005c74:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8005c76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c7a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c7e:	b2d9      	uxtb	r1, r3
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	78d3      	ldrb	r3, [r2, #3]
 8005c84:	f361 1304 	bfi	r3, r1, #4, #1
 8005c88:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8005c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c92:	b2d9      	uxtb	r1, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	78d3      	ldrb	r3, [r2, #3]
 8005c98:	f361 1345 	bfi	r3, r1, #5, #1
 8005c9c:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8005c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ca2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ca6:	b2d9      	uxtb	r1, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	78d3      	ldrb	r3, [r2, #3]
 8005cac:	f361 1386 	bfi	r3, r1, #6, #1
 8005cb0:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 8005cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cba:	b2d9      	uxtb	r1, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	78d3      	ldrb	r3, [r2, #3]
 8005cc0:	f361 13c7 	bfi	r3, r1, #7, #1
 8005cc4:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8005cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005cce:	b2d9      	uxtb	r1, r3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	7913      	ldrb	r3, [r2, #4]
 8005cd4:	f361 0300 	bfi	r3, r1, #0, #1
 8005cd8:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8005cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ce2:	b2d9      	uxtb	r1, r3
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	7913      	ldrb	r3, [r2, #4]
 8005ce8:	f361 0341 	bfi	r3, r1, #1, #1
 8005cec:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8005cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cf2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005cf6:	b2d9      	uxtb	r1, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	7913      	ldrb	r3, [r2, #4]
 8005cfc:	f361 0382 	bfi	r3, r1, #2, #1
 8005d00:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 8005d02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d0a:	b2d9      	uxtb	r1, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	7913      	ldrb	r3, [r2, #4]
 8005d10:	f361 03c3 	bfi	r3, r1, #3, #1
 8005d14:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 8005d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d1e:	b2d9      	uxtb	r1, r3
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	7913      	ldrb	r3, [r2, #4]
 8005d24:	f361 1304 	bfi	r3, r1, #4, #1
 8005d28:	7113      	strb	r3, [r2, #4]
  val->mlc1 = mlc_int1.int1_mlc1;
 8005d2a:	7d3b      	ldrb	r3, [r7, #20]
 8005d2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d30:	b2d9      	uxtb	r1, r3
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	7913      	ldrb	r3, [r2, #4]
 8005d36:	f361 1345 	bfi	r3, r1, #5, #1
 8005d3a:	7113      	strb	r3, [r2, #4]
  val->mlc2 = mlc_int1.int1_mlc2;
 8005d3c:	7d3b      	ldrb	r3, [r7, #20]
 8005d3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d42:	b2d9      	uxtb	r1, r3
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	7913      	ldrb	r3, [r2, #4]
 8005d48:	f361 1386 	bfi	r3, r1, #6, #1
 8005d4c:	7113      	strb	r3, [r2, #4]
  val->mlc3 = mlc_int1.int1_mlc3;
 8005d4e:	7d3b      	ldrb	r3, [r7, #20]
 8005d50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d54:	b2d9      	uxtb	r1, r3
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	7913      	ldrb	r3, [r2, #4]
 8005d5a:	f361 13c7 	bfi	r3, r1, #7, #1
 8005d5e:	7113      	strb	r3, [r2, #4]
  val->mlc4 = mlc_int1.int1_mlc4;
 8005d60:	7d3b      	ldrb	r3, [r7, #20]
 8005d62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d66:	b2d9      	uxtb	r1, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	7953      	ldrb	r3, [r2, #5]
 8005d6c:	f361 0300 	bfi	r3, r1, #0, #1
 8005d70:	7153      	strb	r3, [r2, #5]
  val->mlc5 = mlc_int1.int1_mlc5;
 8005d72:	7d3b      	ldrb	r3, [r7, #20]
 8005d74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	7953      	ldrb	r3, [r2, #5]
 8005d7e:	f361 0341 	bfi	r3, r1, #1, #1
 8005d82:	7153      	strb	r3, [r2, #5]
  val->mlc6 = mlc_int1.int1_mlc6;
 8005d84:	7d3b      	ldrb	r3, [r7, #20]
 8005d86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d8a:	b2d9      	uxtb	r1, r3
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	7953      	ldrb	r3, [r2, #5]
 8005d90:	f361 0382 	bfi	r3, r1, #2, #1
 8005d94:	7153      	strb	r3, [r2, #5]
  val->mlc7 = mlc_int1.int1_mlc7;
 8005d96:	7d3b      	ldrb	r3, [r7, #20]
 8005d98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d9c:	b2d9      	uxtb	r1, r3
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	7953      	ldrb	r3, [r2, #5]
 8005da2:	f361 03c3 	bfi	r3, r1, #3, #1
 8005da6:	7153      	strb	r3, [r2, #5]
  val->mlc8 = mlc_int1.int1_mlc8;
 8005da8:	7d3b      	ldrb	r3, [r7, #20]
 8005daa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dae:	b2d9      	uxtb	r1, r3
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	7953      	ldrb	r3, [r2, #5]
 8005db4:	f361 1304 	bfi	r3, r1, #4, #1
 8005db8:	7153      	strb	r3, [r2, #5]

  return ret;
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3730      	adds	r7, #48	@ 0x30
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <lsm6dso32x_pin_int2_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_pin_int2_route_get(stmdev_ctx_t *ctx,
                                      lsm6dso32x_pin_int2_route_t *val)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  lsm6dso32x_int2_ctrl_t      int2_ctrl;
  lsm6dso32x_mlc_int2_t       mlc_int2;
  lsm6dso32x_md2_cfg_t        md2_cfg;
  lsm6dso32x_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ctx != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8207 	beq.w	80061e8 <lsm6dso32x_pin_int2_route_get+0x424>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 8005dda:	2102      	movs	r1, #2
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fe fe33 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8005de2:	6278      	str	r0, [r7, #36]	@ 0x24

    if (ret == 0)
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <lsm6dso32x_pin_int2_route_get+0x36>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MLC_INT2,
 8005dea:	f107 0210 	add.w	r2, r7, #16
 8005dee:	2301      	movs	r3, #1
 8005df0:	2111      	movs	r1, #17
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fe f922 	bl	800403c <lsm6dso32x_read_reg>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d107      	bne.n	8005e10 <lsm6dso32x_pin_int2_route_get+0x4c>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_INT2,
 8005e00:	f107 0220 	add.w	r2, r7, #32
 8005e04:	2301      	movs	r3, #1
 8005e06:	210e      	movs	r1, #14
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe f917 	bl	800403c <lsm6dso32x_read_reg>
 8005e0e:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <lsm6dso32x_pin_int2_route_get+0x62>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FSM_INT2_A,
 8005e16:	f107 021c 	add.w	r2, r7, #28
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	210f      	movs	r1, #15
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fe f90c 	bl	800403c <lsm6dso32x_read_reg>
 8005e24:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <lsm6dso32x_pin_int2_route_get+0x78>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_FSM_INT2_B,
 8005e2c:	f107 0218 	add.w	r2, r7, #24
 8005e30:	2301      	movs	r3, #1
 8005e32:	2110      	movs	r1, #16
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fe f901 	bl	800403c <lsm6dso32x_read_reg>
 8005e3a:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <lsm6dso32x_pin_int2_route_get+0x88>
    {
      ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 8005e42:	2100      	movs	r1, #0
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fe fdff 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8005e4a:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    if (ret == 0)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <lsm6dso32x_pin_int2_route_get+0x9e>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT2_CTRL,
 8005e52:	f107 0214 	add.w	r2, r7, #20
 8005e56:	2301      	movs	r3, #1
 8005e58:	210e      	movs	r1, #14
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fe f8ee 	bl	800403c <lsm6dso32x_read_reg>
 8005e60:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <lsm6dso32x_pin_int2_route_get+0xb4>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MD2_CFG,
 8005e68:	f107 020c 	add.w	r2, r7, #12
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	215f      	movs	r1, #95	@ 0x5f
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fe f8e3 	bl	800403c <lsm6dso32x_read_reg>
 8005e76:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d107      	bne.n	8005e8e <lsm6dso32x_pin_int2_route_get+0xca>
    {
      ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL4_C,
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	2301      	movs	r3, #1
 8005e84:	2113      	movs	r1, #19
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe f8d8 	bl	800403c <lsm6dso32x_read_reg>
 8005e8c:	6278      	str	r0, [r7, #36]	@ 0x24
                                (uint8_t *)&ctrl4_c, 1);
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8005e8e:	7a3b      	ldrb	r3, [r7, #8]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d128      	bne.n	8005eec <lsm6dso32x_pin_int2_route_get+0x128>
    {
      if (ret == 0)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <lsm6dso32x_pin_int2_route_get+0xfe>
      {
        ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_INT2_CTRL,
 8005ea0:	f107 0214 	add.w	r2, r7, #20
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	210e      	movs	r1, #14
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe f8c7 	bl	800403c <lsm6dso32x_read_reg>
 8005eae:	6278      	str	r0, [r7, #36]	@ 0x24
                                  (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005eb0:	7d3b      	ldrb	r3, [r7, #20]
 8005eb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005eb6:	b2d9      	uxtb	r1, r3
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	7813      	ldrb	r3, [r2, #0]
 8005ebc:	f361 0382 	bfi	r3, r1, #2, #1
 8005ec0:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11b      	bne.n	8005f00 <lsm6dso32x_pin_int2_route_get+0x13c>
      {
        ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_MD2_CFG,
 8005ec8:	f107 020c 	add.w	r2, r7, #12
 8005ecc:	2301      	movs	r3, #1
 8005ece:	215f      	movs	r1, #95	@ 0x5f
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fe f8b3 	bl	800403c <lsm6dso32x_read_reg>
 8005ed6:	6278      	str	r0, [r7, #36]	@ 0x24
                                  (uint8_t *)&md2_cfg, 1);
        val->timestamp = md2_cfg.int2_timestamp;
 8005ed8:	7b3b      	ldrb	r3, [r7, #12]
 8005eda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ede:	b2d9      	uxtb	r1, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	7813      	ldrb	r3, [r2, #0]
 8005ee4:	f361 13c7 	bfi	r3, r1, #7, #1
 8005ee8:	7013      	strb	r3, [r2, #0]
 8005eea:	e009      	b.n	8005f00 <lsm6dso32x_pin_int2_route_get+0x13c>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	7813      	ldrb	r3, [r2, #0]
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	7813      	ldrb	r3, [r2, #0]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005efe:	7013      	strb	r3, [r2, #0]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8005f00:	7d3b      	ldrb	r3, [r7, #20]
 8005f02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f06:	b2d9      	uxtb	r1, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	7813      	ldrb	r3, [r2, #0]
 8005f0c:	f361 0300 	bfi	r3, r1, #0, #1
 8005f10:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8005f12:	7d3b      	ldrb	r3, [r7, #20]
 8005f14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f18:	b2d9      	uxtb	r1, r3
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	7813      	ldrb	r3, [r2, #0]
 8005f1e:	f361 0341 	bfi	r3, r1, #1, #1
 8005f22:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005f24:	7d3b      	ldrb	r3, [r7, #20]
 8005f26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f2a:	b2d9      	uxtb	r1, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	7813      	ldrb	r3, [r2, #0]
 8005f30:	f361 0382 	bfi	r3, r1, #2, #1
 8005f34:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8005f36:	7d3b      	ldrb	r3, [r7, #20]
 8005f38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f3c:	b2d9      	uxtb	r1, r3
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	7813      	ldrb	r3, [r2, #0]
 8005f42:	f361 03c3 	bfi	r3, r1, #3, #1
 8005f46:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8005f48:	7d3b      	ldrb	r3, [r7, #20]
 8005f4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f4e:	b2d9      	uxtb	r1, r3
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	7813      	ldrb	r3, [r2, #0]
 8005f54:	f361 1304 	bfi	r3, r1, #4, #1
 8005f58:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8005f5a:	7d3b      	ldrb	r3, [r7, #20]
 8005f5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f60:	b2d9      	uxtb	r1, r3
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7813      	ldrb	r3, [r2, #0]
 8005f66:	f361 1345 	bfi	r3, r1, #5, #1
 8005f6a:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 8005f6c:	7d3b      	ldrb	r3, [r7, #20]
 8005f6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f72:	b2d9      	uxtb	r1, r3
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	7813      	ldrb	r3, [r2, #0]
 8005f78:	f361 1386 	bfi	r3, r1, #6, #1
 8005f7c:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 8005f7e:	7b3b      	ldrb	r3, [r7, #12]
 8005f80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f84:	b2d9      	uxtb	r1, r3
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7813      	ldrb	r3, [r2, #0]
 8005f8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8005f8e:	7013      	strb	r3, [r2, #0]
    val->six_d        = md2_cfg.int2_6d;
 8005f90:	7b3b      	ldrb	r3, [r7, #12]
 8005f92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f96:	b2d9      	uxtb	r1, r3
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	7853      	ldrb	r3, [r2, #1]
 8005f9c:	f361 0300 	bfi	r3, r1, #0, #1
 8005fa0:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8005fa2:	7b3b      	ldrb	r3, [r7, #12]
 8005fa4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fa8:	b2d9      	uxtb	r1, r3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	7853      	ldrb	r3, [r2, #1]
 8005fae:	f361 0341 	bfi	r3, r1, #1, #1
 8005fb2:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8005fb4:	7b3b      	ldrb	r3, [r7, #12]
 8005fb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fba:	b2d9      	uxtb	r1, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	7853      	ldrb	r3, [r2, #1]
 8005fc0:	f361 0382 	bfi	r3, r1, #2, #1
 8005fc4:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8005fc6:	7b3b      	ldrb	r3, [r7, #12]
 8005fc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fcc:	b2d9      	uxtb	r1, r3
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	7853      	ldrb	r3, [r2, #1]
 8005fd2:	f361 03c3 	bfi	r3, r1, #3, #1
 8005fd6:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8005fd8:	7b3b      	ldrb	r3, [r7, #12]
 8005fda:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fde:	b2d9      	uxtb	r1, r3
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	7853      	ldrb	r3, [r2, #1]
 8005fe4:	f361 1304 	bfi	r3, r1, #4, #1
 8005fe8:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8005fea:	7b3b      	ldrb	r3, [r7, #12]
 8005fec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ff0:	b2d9      	uxtb	r1, r3
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	7853      	ldrb	r3, [r2, #1]
 8005ff6:	f361 1345 	bfi	r3, r1, #5, #1
 8005ffa:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 8005ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006000:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006004:	b2d9      	uxtb	r1, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	7853      	ldrb	r3, [r2, #1]
 800600a:	f361 1386 	bfi	r3, r1, #6, #1
 800600e:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8006010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006014:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006018:	b2d9      	uxtb	r1, r3
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	7853      	ldrb	r3, [r2, #1]
 800601e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006022:	7053      	strb	r3, [r2, #1]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8006024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006028:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800602c:	b2d9      	uxtb	r1, r3
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	7893      	ldrb	r3, [r2, #2]
 8006032:	f361 0341 	bfi	r3, r1, #1, #1
 8006036:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8006038:	7f3b      	ldrb	r3, [r7, #28]
 800603a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800603e:	b2d9      	uxtb	r1, r3
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	7893      	ldrb	r3, [r2, #2]
 8006044:	f361 0382 	bfi	r3, r1, #2, #1
 8006048:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800604a:	7f3b      	ldrb	r3, [r7, #28]
 800604c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006050:	b2d9      	uxtb	r1, r3
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7893      	ldrb	r3, [r2, #2]
 8006056:	f361 03c3 	bfi	r3, r1, #3, #1
 800605a:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800605c:	7f3b      	ldrb	r3, [r7, #28]
 800605e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006062:	b2d9      	uxtb	r1, r3
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	7893      	ldrb	r3, [r2, #2]
 8006068:	f361 1304 	bfi	r3, r1, #4, #1
 800606c:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800606e:	7f3b      	ldrb	r3, [r7, #28]
 8006070:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006074:	b2d9      	uxtb	r1, r3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7893      	ldrb	r3, [r2, #2]
 800607a:	f361 1345 	bfi	r3, r1, #5, #1
 800607e:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8006080:	7f3b      	ldrb	r3, [r7, #28]
 8006082:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006086:	b2d9      	uxtb	r1, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	7893      	ldrb	r3, [r2, #2]
 800608c:	f361 1386 	bfi	r3, r1, #6, #1
 8006090:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8006092:	7f3b      	ldrb	r3, [r7, #28]
 8006094:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006098:	b2d9      	uxtb	r1, r3
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	7893      	ldrb	r3, [r2, #2]
 800609e:	f361 13c7 	bfi	r3, r1, #7, #1
 80060a2:	7093      	strb	r3, [r2, #2]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 80060a4:	7f3b      	ldrb	r3, [r7, #28]
 80060a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060aa:	b2d9      	uxtb	r1, r3
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	78d3      	ldrb	r3, [r2, #3]
 80060b0:	f361 0300 	bfi	r3, r1, #0, #1
 80060b4:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 80060b6:	7f3b      	ldrb	r3, [r7, #28]
 80060b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060bc:	b2d9      	uxtb	r1, r3
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	78d3      	ldrb	r3, [r2, #3]
 80060c2:	f361 0341 	bfi	r3, r1, #1, #1
 80060c6:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 80060c8:	7e3b      	ldrb	r3, [r7, #24]
 80060ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060ce:	b2d9      	uxtb	r1, r3
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	78d3      	ldrb	r3, [r2, #3]
 80060d4:	f361 0382 	bfi	r3, r1, #2, #1
 80060d8:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 80060da:	7e3b      	ldrb	r3, [r7, #24]
 80060dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060e0:	b2d9      	uxtb	r1, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	78d3      	ldrb	r3, [r2, #3]
 80060e6:	f361 03c3 	bfi	r3, r1, #3, #1
 80060ea:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 80060ec:	7e3b      	ldrb	r3, [r7, #24]
 80060ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060f2:	b2d9      	uxtb	r1, r3
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	78d3      	ldrb	r3, [r2, #3]
 80060f8:	f361 1304 	bfi	r3, r1, #4, #1
 80060fc:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 80060fe:	7e3b      	ldrb	r3, [r7, #24]
 8006100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006104:	b2d9      	uxtb	r1, r3
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	78d3      	ldrb	r3, [r2, #3]
 800610a:	f361 1345 	bfi	r3, r1, #5, #1
 800610e:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8006110:	7e3b      	ldrb	r3, [r7, #24]
 8006112:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006116:	b2d9      	uxtb	r1, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	78d3      	ldrb	r3, [r2, #3]
 800611c:	f361 1386 	bfi	r3, r1, #6, #1
 8006120:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8006122:	7e3b      	ldrb	r3, [r7, #24]
 8006124:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006128:	b2d9      	uxtb	r1, r3
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	78d3      	ldrb	r3, [r2, #3]
 800612e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006132:	70d3      	strb	r3, [r2, #3]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8006134:	7e3b      	ldrb	r3, [r7, #24]
 8006136:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800613a:	b2d9      	uxtb	r1, r3
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	7913      	ldrb	r3, [r2, #4]
 8006140:	f361 0300 	bfi	r3, r1, #0, #1
 8006144:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8006146:	7e3b      	ldrb	r3, [r7, #24]
 8006148:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800614c:	b2d9      	uxtb	r1, r3
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	7913      	ldrb	r3, [r2, #4]
 8006152:	f361 0341 	bfi	r3, r1, #1, #1
 8006156:	7113      	strb	r3, [r2, #4]
    val->mlc1 = mlc_int2.int2_mlc1;
 8006158:	7c3b      	ldrb	r3, [r7, #16]
 800615a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800615e:	b2d9      	uxtb	r1, r3
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	7913      	ldrb	r3, [r2, #4]
 8006164:	f361 0382 	bfi	r3, r1, #2, #1
 8006168:	7113      	strb	r3, [r2, #4]
    val->mlc2 = mlc_int2.int2_mlc2;
 800616a:	7c3b      	ldrb	r3, [r7, #16]
 800616c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006170:	b2d9      	uxtb	r1, r3
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7913      	ldrb	r3, [r2, #4]
 8006176:	f361 03c3 	bfi	r3, r1, #3, #1
 800617a:	7113      	strb	r3, [r2, #4]
    val->mlc3 = mlc_int2.int2_mlc3;
 800617c:	7c3b      	ldrb	r3, [r7, #16]
 800617e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006182:	b2d9      	uxtb	r1, r3
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	7913      	ldrb	r3, [r2, #4]
 8006188:	f361 1304 	bfi	r3, r1, #4, #1
 800618c:	7113      	strb	r3, [r2, #4]
    val->mlc4 = mlc_int2.int2_mlc4;
 800618e:	7c3b      	ldrb	r3, [r7, #16]
 8006190:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006194:	b2d9      	uxtb	r1, r3
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	7913      	ldrb	r3, [r2, #4]
 800619a:	f361 1345 	bfi	r3, r1, #5, #1
 800619e:	7113      	strb	r3, [r2, #4]
    val->mlc5 = mlc_int2.int2_mlc5;
 80061a0:	7c3b      	ldrb	r3, [r7, #16]
 80061a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061a6:	b2d9      	uxtb	r1, r3
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	7913      	ldrb	r3, [r2, #4]
 80061ac:	f361 1386 	bfi	r3, r1, #6, #1
 80061b0:	7113      	strb	r3, [r2, #4]
    val->mlc6 = mlc_int2.int2_mlc6;
 80061b2:	7c3b      	ldrb	r3, [r7, #16]
 80061b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061b8:	b2d9      	uxtb	r1, r3
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	7913      	ldrb	r3, [r2, #4]
 80061be:	f361 13c7 	bfi	r3, r1, #7, #1
 80061c2:	7113      	strb	r3, [r2, #4]
    val->mlc7 = mlc_int2.int2_mlc7;
 80061c4:	7c3b      	ldrb	r3, [r7, #16]
 80061c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061ca:	b2d9      	uxtb	r1, r3
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	7953      	ldrb	r3, [r2, #5]
 80061d0:	f361 0300 	bfi	r3, r1, #0, #1
 80061d4:	7153      	strb	r3, [r2, #5]
    val->mlc8 = mlc_int2.int2_mlc8;
 80061d6:	7c3b      	ldrb	r3, [r7, #16]
 80061d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80061dc:	b2d9      	uxtb	r1, r3
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	7953      	ldrb	r3, [r2, #5]
 80061e2:	f361 0341 	bfi	r3, r1, #1, #1
 80061e6:	7153      	strb	r3, [r2, #5]
  }

  return ret;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	@ 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <lsm6dso32x_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_all_sources_get(stmdev_ctx_t *ctx,
                                   lsm6dso32x_all_sources_t *val)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b094      	sub	sp, #80	@ 0x50
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  lsm6dso32x_tap_src_t                  tap_src;
  lsm6dso32x_d6d_src_t                  d6d_src;
  lsm6dso32x_ctrl5_c_t                  ctrl5_c;
  uint8_t                             reg[12];
  int32_t                             ret;
  ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_CTRL5_C,
 80061fc:	f107 0218 	add.w	r2, r7, #24
 8006200:	2301      	movs	r3, #1
 8006202:	2114      	movs	r1, #20
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fd ff19 	bl	800403c <lsm6dso32x_read_reg>
 800620a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                            (uint8_t *)&ctrl5_c, 1);

  if (ret == 0)
 800620c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <lsm6dso32x_all_sources_get+0x38>
  {
    ctrl5_c.not_used_01 = PROPERTY_ENABLE;
 8006212:	7e3b      	ldrb	r3, [r7, #24]
 8006214:	f043 0310 	orr.w	r3, r3, #16
 8006218:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL5_C,
 800621a:	f107 0218 	add.w	r2, r7, #24
 800621e:	2301      	movs	r3, #1
 8006220:	2114      	movs	r1, #20
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fd ff22 	bl	800406c <lsm6dso32x_write_reg>
 8006228:	64f8      	str	r0, [r7, #76]	@ 0x4c
                               (uint8_t *)&ctrl5_c, 1);
  }

  if (ret == 0)
 800622a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d107      	bne.n	8006240 <lsm6dso32x_all_sources_get+0x4e>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_ALL_INT_SRC, reg, 12);
 8006230:	f107 020c 	add.w	r2, r7, #12
 8006234:	230c      	movs	r3, #12
 8006236:	211a      	movs	r1, #26
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fd feff 	bl	800403c <lsm6dso32x_read_reg>
 800623e:	64f8      	str	r0, [r7, #76]	@ 0x4c
  }

  if (ret == 0)
 8006240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 8309 	bne.w	800685a <lsm6dso32x_all_sources_get+0x668>
  {
    bytecpy((uint8_t *)&all_int_src, &reg[0]);
 8006248:	f107 020c 	add.w	r2, r7, #12
 800624c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd ff22 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&wake_up_src, &reg[1]);
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7fd ff19 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&tap_src, &reg[2]);
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	f107 0320 	add.w	r3, r7, #32
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd ff10 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&d6d_src, &reg[3]);
 800627c:	f107 030c 	add.w	r3, r7, #12
 8006280:	1cda      	adds	r2, r3, #3
 8006282:	f107 031c 	add.w	r3, r7, #28
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd ff07 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&status_reg, &reg[4]);
 800628e:	f107 030c 	add.w	r3, r7, #12
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd fefe 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&emb_func_status_mainpage, &reg[5]);
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	1d5a      	adds	r2, r3, #5
 80062a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fd fef5 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&fsm_status_a_mainpage, &reg[6]);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	1d9a      	adds	r2, r3, #6
 80062b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80062bc:	4611      	mov	r1, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd feec 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&fsm_status_b_mainpage, &reg[7]);
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	1dda      	adds	r2, r3, #7
 80062ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80062ce:	4611      	mov	r1, r2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fd fee3 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&mlc_status_mainpage, &reg[8]);
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	f103 0208 	add.w	r2, r3, #8
 80062de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd fed9 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&status_master_mainpage, &reg[9]);
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	f103 0209 	add.w	r2, r3, #9
 80062f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fd fecf 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&fifo_status1, &reg[10]);
 80062fe:	f107 030c 	add.w	r3, r7, #12
 8006302:	f103 020a 	add.w	r2, r3, #10
 8006306:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd fec5 	bl	800409c <bytecpy>
    bytecpy((uint8_t *)&fifo_status2, &reg[11]);
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	f103 020b 	add.w	r2, r3, #11
 800631a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7fd febb 	bl	800409c <bytecpy>
    val->timestamp = all_int_src.timestamp_endcount;
 8006326:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800632a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800632e:	b2d9      	uxtb	r1, r3
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	7813      	ldrb	r3, [r2, #0]
 8006334:	f361 1304 	bfi	r3, r1, #4, #1
 8006338:	7013      	strb	r3, [r2, #0]
    val->wake_up_z    = wake_up_src.z_wu;
 800633a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800633e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006342:	b2d9      	uxtb	r1, r3
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	7813      	ldrb	r3, [r2, #0]
 8006348:	f361 13c7 	bfi	r3, r1, #7, #1
 800634c:	7013      	strb	r3, [r2, #0]
    val->wake_up_y    = wake_up_src.y_wu;
 800634e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006352:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006356:	b2d9      	uxtb	r1, r3
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	7853      	ldrb	r3, [r2, #1]
 800635c:	f361 0300 	bfi	r3, r1, #0, #1
 8006360:	7053      	strb	r3, [r2, #1]
    val->wake_up_x    = wake_up_src.x_wu;
 8006362:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006366:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800636a:	b2d9      	uxtb	r1, r3
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	7853      	ldrb	r3, [r2, #1]
 8006370:	f361 0341 	bfi	r3, r1, #1, #1
 8006374:	7053      	strb	r3, [r2, #1]
    val->wake_up      = wake_up_src.wu_ia;
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800637a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800637e:	b2d9      	uxtb	r1, r3
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	7813      	ldrb	r3, [r2, #0]
 8006384:	f361 1386 	bfi	r3, r1, #6, #1
 8006388:	7013      	strb	r3, [r2, #0]
    val->sleep_state  = wake_up_src.sleep_state;
 800638a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800638e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006392:	b2d9      	uxtb	r1, r3
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	78d3      	ldrb	r3, [r2, #3]
 8006398:	f361 0300 	bfi	r3, r1, #0, #1
 800639c:	70d3      	strb	r3, [r2, #3]
    val->free_fall    = wake_up_src.ff_ia;
 800639e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063a6:	b2d9      	uxtb	r1, r3
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	7813      	ldrb	r3, [r2, #0]
 80063ac:	f361 1345 	bfi	r3, r1, #5, #1
 80063b0:	7013      	strb	r3, [r2, #0]
    val->sleep_change = wake_up_src.sleep_change_ia;
 80063b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063b6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	b2d9      	uxtb	r1, r3
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7893      	ldrb	r3, [r2, #2]
 80063c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80063ca:	7093      	strb	r3, [r2, #2]
    val->tap_x      = tap_src.x_tap;
 80063cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	7853      	ldrb	r3, [r2, #1]
 80063da:	f361 1386 	bfi	r3, r1, #6, #1
 80063de:	7053      	strb	r3, [r2, #1]
    val->tap_y      = tap_src.y_tap;
 80063e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80063e8:	b2d9      	uxtb	r1, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	7853      	ldrb	r3, [r2, #1]
 80063ee:	f361 1345 	bfi	r3, r1, #5, #1
 80063f2:	7053      	strb	r3, [r2, #1]
    val->tap_z      = tap_src.z_tap;
 80063f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	7853      	ldrb	r3, [r2, #1]
 8006402:	f361 1304 	bfi	r3, r1, #4, #1
 8006406:	7053      	strb	r3, [r2, #1]
    val->tap_sign   = tap_src.tap_sign;
 8006408:	f897 3020 	ldrb.w	r3, [r7, #32]
 800640c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006410:	b2d9      	uxtb	r1, r3
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	7853      	ldrb	r3, [r2, #1]
 8006416:	f361 13c7 	bfi	r3, r1, #7, #1
 800641a:	7053      	strb	r3, [r2, #1]
    val->double_tap = tap_src.double_tap;
 800641c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006420:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006424:	b2d9      	uxtb	r1, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	7853      	ldrb	r3, [r2, #1]
 800642a:	f361 03c3 	bfi	r3, r1, #3, #1
 800642e:	7053      	strb	r3, [r2, #1]
    val->single_tap = tap_src.single_tap;
 8006430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006434:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006438:	b2d9      	uxtb	r1, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	7853      	ldrb	r3, [r2, #1]
 800643e:	f361 0382 	bfi	r3, r1, #2, #1
 8006442:	7053      	strb	r3, [r2, #1]
    val->six_d_xl = d6d_src.xl;
 8006444:	7f3b      	ldrb	r3, [r7, #28]
 8006446:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800644a:	b2d9      	uxtb	r1, r3
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	7893      	ldrb	r3, [r2, #2]
 8006450:	f361 0341 	bfi	r3, r1, #1, #1
 8006454:	7093      	strb	r3, [r2, #2]
    val->six_d_xh = d6d_src.xh;
 8006456:	7f3b      	ldrb	r3, [r7, #28]
 8006458:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800645c:	b2d9      	uxtb	r1, r3
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	7893      	ldrb	r3, [r2, #2]
 8006462:	f361 0382 	bfi	r3, r1, #2, #1
 8006466:	7093      	strb	r3, [r2, #2]
    val->six_d_yl = d6d_src.yl;
 8006468:	7f3b      	ldrb	r3, [r7, #28]
 800646a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800646e:	b2d9      	uxtb	r1, r3
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	7893      	ldrb	r3, [r2, #2]
 8006474:	f361 03c3 	bfi	r3, r1, #3, #1
 8006478:	7093      	strb	r3, [r2, #2]
    val->six_d_yh = d6d_src.yh;
 800647a:	7f3b      	ldrb	r3, [r7, #28]
 800647c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006480:	b2d9      	uxtb	r1, r3
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	7893      	ldrb	r3, [r2, #2]
 8006486:	f361 1304 	bfi	r3, r1, #4, #1
 800648a:	7093      	strb	r3, [r2, #2]
    val->six_d_zl = d6d_src.zl;
 800648c:	7f3b      	ldrb	r3, [r7, #28]
 800648e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006492:	b2d9      	uxtb	r1, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	7893      	ldrb	r3, [r2, #2]
 8006498:	f361 1345 	bfi	r3, r1, #5, #1
 800649c:	7093      	strb	r3, [r2, #2]
    val->six_d_zh = d6d_src.zh;
 800649e:	7f3b      	ldrb	r3, [r7, #28]
 80064a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064a4:	b2d9      	uxtb	r1, r3
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	7893      	ldrb	r3, [r2, #2]
 80064aa:	f361 1386 	bfi	r3, r1, #6, #1
 80064ae:	7093      	strb	r3, [r2, #2]
    val->six_d    = d6d_src.d6d_ia;
 80064b0:	7f3b      	ldrb	r3, [r7, #28]
 80064b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80064b6:	b2d9      	uxtb	r1, r3
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	7893      	ldrb	r3, [r2, #2]
 80064bc:	f361 0300 	bfi	r3, r1, #0, #1
 80064c0:	7093      	strb	r3, [r2, #2]
    val->den_flag = d6d_src.den_drdy;
 80064c2:	7f3b      	ldrb	r3, [r7, #28]
 80064c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80064c8:	b2d9      	uxtb	r1, r3
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	7813      	ldrb	r3, [r2, #0]
 80064ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80064d2:	7013      	strb	r3, [r2, #0]
    val->drdy_xl   = status_reg.xlda;
 80064d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064dc:	b2d9      	uxtb	r1, r3
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	7813      	ldrb	r3, [r2, #0]
 80064e2:	f361 0300 	bfi	r3, r1, #0, #1
 80064e6:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = status_reg.gda;
 80064e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064f0:	b2d9      	uxtb	r1, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	7813      	ldrb	r3, [r2, #0]
 80064f6:	f361 0341 	bfi	r3, r1, #1, #1
 80064fa:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = status_reg.tda;
 80064fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006500:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006504:	b2d9      	uxtb	r1, r3
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	7813      	ldrb	r3, [r2, #0]
 800650a:	f361 0382 	bfi	r3, r1, #2, #1
 800650e:	7013      	strb	r3, [r2, #0]
    val->step_detector = emb_func_status_mainpage.is_step_det;
 8006510:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006514:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006518:	b2d9      	uxtb	r1, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	78d3      	ldrb	r3, [r2, #3]
 800651e:	f361 0341 	bfi	r3, r1, #1, #1
 8006522:	70d3      	strb	r3, [r2, #3]
    val->tilt          = emb_func_status_mainpage.is_tilt;
 8006524:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006528:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800652c:	b2d9      	uxtb	r1, r3
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	78d3      	ldrb	r3, [r2, #3]
 8006532:	f361 0382 	bfi	r3, r1, #2, #1
 8006536:	70d3      	strb	r3, [r2, #3]
    val->sig_mot       = emb_func_status_mainpage.is_sigmot;
 8006538:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800653c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006540:	b2d9      	uxtb	r1, r3
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	78d3      	ldrb	r3, [r2, #3]
 8006546:	f361 03c3 	bfi	r3, r1, #3, #1
 800654a:	70d3      	strb	r3, [r2, #3]
    val->fsm_lc        = emb_func_status_mainpage.is_fsm_lc;
 800654c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006550:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006554:	b2d9      	uxtb	r1, r3
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	78d3      	ldrb	r3, [r2, #3]
 800655a:	f361 1304 	bfi	r3, r1, #4, #1
 800655e:	70d3      	strb	r3, [r2, #3]
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
 8006560:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006564:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006568:	b2d9      	uxtb	r1, r3
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	78d3      	ldrb	r3, [r2, #3]
 800656e:	f361 1345 	bfi	r3, r1, #5, #1
 8006572:	70d3      	strb	r3, [r2, #3]
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
 8006574:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006578:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800657c:	b2d9      	uxtb	r1, r3
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	78d3      	ldrb	r3, [r2, #3]
 8006582:	f361 1386 	bfi	r3, r1, #6, #1
 8006586:	70d3      	strb	r3, [r2, #3]
    val->fsm3 = fsm_status_a_mainpage.is_fsm3;
 8006588:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800658c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006590:	b2d9      	uxtb	r1, r3
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	78d3      	ldrb	r3, [r2, #3]
 8006596:	f361 13c7 	bfi	r3, r1, #7, #1
 800659a:	70d3      	strb	r3, [r2, #3]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 800659c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80065a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80065a4:	b2d9      	uxtb	r1, r3
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	7913      	ldrb	r3, [r2, #4]
 80065aa:	f361 0300 	bfi	r3, r1, #0, #1
 80065ae:	7113      	strb	r3, [r2, #4]
    val->fsm5 = fsm_status_a_mainpage.is_fsm5;
 80065b0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80065b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80065b8:	b2d9      	uxtb	r1, r3
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	7913      	ldrb	r3, [r2, #4]
 80065be:	f361 0341 	bfi	r3, r1, #1, #1
 80065c2:	7113      	strb	r3, [r2, #4]
    val->fsm6 = fsm_status_a_mainpage.is_fsm6;
 80065c4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80065c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80065cc:	b2d9      	uxtb	r1, r3
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	7913      	ldrb	r3, [r2, #4]
 80065d2:	f361 0382 	bfi	r3, r1, #2, #1
 80065d6:	7113      	strb	r3, [r2, #4]
    val->fsm7 = fsm_status_a_mainpage.is_fsm7;
 80065d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80065dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	7913      	ldrb	r3, [r2, #4]
 80065e6:	f361 03c3 	bfi	r3, r1, #3, #1
 80065ea:	7113      	strb	r3, [r2, #4]
    val->fsm8 = fsm_status_a_mainpage.is_fsm8;
 80065ec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80065f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80065f4:	b2d9      	uxtb	r1, r3
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	7913      	ldrb	r3, [r2, #4]
 80065fa:	f361 1304 	bfi	r3, r1, #4, #1
 80065fe:	7113      	strb	r3, [r2, #4]
    val->fsm9  = fsm_status_b_mainpage.is_fsm9;
 8006600:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006604:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	7913      	ldrb	r3, [r2, #4]
 800660e:	f361 1345 	bfi	r3, r1, #5, #1
 8006612:	7113      	strb	r3, [r2, #4]
    val->fsm10 = fsm_status_b_mainpage.is_fsm10;
 8006614:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006618:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800661c:	b2d9      	uxtb	r1, r3
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	7913      	ldrb	r3, [r2, #4]
 8006622:	f361 1386 	bfi	r3, r1, #6, #1
 8006626:	7113      	strb	r3, [r2, #4]
    val->fsm11 = fsm_status_b_mainpage.is_fsm11;
 8006628:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800662c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006630:	b2d9      	uxtb	r1, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	7913      	ldrb	r3, [r2, #4]
 8006636:	f361 13c7 	bfi	r3, r1, #7, #1
 800663a:	7113      	strb	r3, [r2, #4]
    val->fsm12 = fsm_status_b_mainpage.is_fsm12;
 800663c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006644:	b2d9      	uxtb	r1, r3
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	7953      	ldrb	r3, [r2, #5]
 800664a:	f361 0300 	bfi	r3, r1, #0, #1
 800664e:	7153      	strb	r3, [r2, #5]
    val->fsm13 = fsm_status_b_mainpage.is_fsm13;
 8006650:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006654:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006658:	b2d9      	uxtb	r1, r3
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	7953      	ldrb	r3, [r2, #5]
 800665e:	f361 0341 	bfi	r3, r1, #1, #1
 8006662:	7153      	strb	r3, [r2, #5]
    val->fsm14 = fsm_status_b_mainpage.is_fsm14;
 8006664:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006668:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800666c:	b2d9      	uxtb	r1, r3
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	7953      	ldrb	r3, [r2, #5]
 8006672:	f361 0382 	bfi	r3, r1, #2, #1
 8006676:	7153      	strb	r3, [r2, #5]
    val->fsm15 = fsm_status_b_mainpage.is_fsm15;
 8006678:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800667c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006680:	b2d9      	uxtb	r1, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	7953      	ldrb	r3, [r2, #5]
 8006686:	f361 03c3 	bfi	r3, r1, #3, #1
 800668a:	7153      	strb	r3, [r2, #5]
    val->fsm16 = fsm_status_b_mainpage.is_fsm16;
 800668c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006690:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006694:	b2d9      	uxtb	r1, r3
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	7953      	ldrb	r3, [r2, #5]
 800669a:	f361 1304 	bfi	r3, r1, #4, #1
 800669e:	7153      	strb	r3, [r2, #5]
    val->mlc1 = mlc_status_mainpage.is_mlc1;
 80066a0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80066a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066a8:	b2d9      	uxtb	r1, r3
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	7953      	ldrb	r3, [r2, #5]
 80066ae:	f361 1345 	bfi	r3, r1, #5, #1
 80066b2:	7153      	strb	r3, [r2, #5]
    val->mlc2 = mlc_status_mainpage.is_mlc2;
 80066b4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80066b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066bc:	b2d9      	uxtb	r1, r3
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	7953      	ldrb	r3, [r2, #5]
 80066c2:	f361 1386 	bfi	r3, r1, #6, #1
 80066c6:	7153      	strb	r3, [r2, #5]
    val->mlc3 = mlc_status_mainpage.is_mlc3;
 80066c8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80066cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066d0:	b2d9      	uxtb	r1, r3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	7953      	ldrb	r3, [r2, #5]
 80066d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80066da:	7153      	strb	r3, [r2, #5]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 80066dc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80066e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80066e4:	b2d9      	uxtb	r1, r3
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7993      	ldrb	r3, [r2, #6]
 80066ea:	f361 0300 	bfi	r3, r1, #0, #1
 80066ee:	7193      	strb	r3, [r2, #6]
    val->mlc5 = mlc_status_mainpage.is_mlc5;
 80066f0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80066f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80066f8:	b2d9      	uxtb	r1, r3
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	7993      	ldrb	r3, [r2, #6]
 80066fe:	f361 0341 	bfi	r3, r1, #1, #1
 8006702:	7193      	strb	r3, [r2, #6]
    val->mlc6 = mlc_status_mainpage.is_mlc6;
 8006704:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006708:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800670c:	b2d9      	uxtb	r1, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	7993      	ldrb	r3, [r2, #6]
 8006712:	f361 0382 	bfi	r3, r1, #2, #1
 8006716:	7193      	strb	r3, [r2, #6]
    val->mlc7 = mlc_status_mainpage.is_mlc7;
 8006718:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800671c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006720:	b2d9      	uxtb	r1, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7993      	ldrb	r3, [r2, #6]
 8006726:	f361 03c3 	bfi	r3, r1, #3, #1
 800672a:	7193      	strb	r3, [r2, #6]
    val->mlc8 = mlc_status_mainpage.is_mlc8;
 800672c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006730:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006734:	b2d9      	uxtb	r1, r3
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	7993      	ldrb	r3, [r2, #6]
 800673a:	f361 1304 	bfi	r3, r1, #4, #1
 800673e:	7193      	strb	r3, [r2, #6]
    val->sh_endop       = status_master_mainpage.sens_hub_endop;
 8006740:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006744:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7993      	ldrb	r3, [r2, #6]
 800674e:	f361 1345 	bfi	r3, r1, #5, #1
 8006752:	7193      	strb	r3, [r2, #6]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
 8006754:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006758:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800675c:	b2d9      	uxtb	r1, r3
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	7993      	ldrb	r3, [r2, #6]
 8006762:	f361 1386 	bfi	r3, r1, #6, #1
 8006766:	7193      	strb	r3, [r2, #6]
    val->sh_slave1_nack = status_master_mainpage.slave1_nack;
 8006768:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800676c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006770:	b2d9      	uxtb	r1, r3
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	7993      	ldrb	r3, [r2, #6]
 8006776:	f361 13c7 	bfi	r3, r1, #7, #1
 800677a:	7193      	strb	r3, [r2, #6]
    val->sh_slave2_nack = status_master_mainpage.slave2_nack;
 800677c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006780:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006784:	b2d9      	uxtb	r1, r3
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	79d3      	ldrb	r3, [r2, #7]
 800678a:	f361 0300 	bfi	r3, r1, #0, #1
 800678e:	71d3      	strb	r3, [r2, #7]
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
 8006790:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006794:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006798:	b2d9      	uxtb	r1, r3
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	79d3      	ldrb	r3, [r2, #7]
 800679e:	f361 0341 	bfi	r3, r1, #1, #1
 80067a2:	71d3      	strb	r3, [r2, #7]
    val->sh_wr_once     = status_master_mainpage.wr_once_done;
 80067a4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80067a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80067ac:	b2d9      	uxtb	r1, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	79d3      	ldrb	r3, [r2, #7]
 80067b2:	f361 0382 	bfi	r3, r1, #2, #1
 80067b6:	71d3      	strb	r3, [r2, #7]
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 80067b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
                     fifo_status1.diff_fifo;
 80067c6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 80067ca:	4413      	add	r3, r2
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d2:	b299      	uxth	r1, r3
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	8913      	ldrh	r3, [r2, #8]
 80067d8:	f361 0309 	bfi	r3, r1, #0, #10
 80067dc:	8113      	strh	r3, [r2, #8]
    val->fifo_ovr_latched = fifo_status2.over_run_latched;
 80067de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067e6:	b2d9      	uxtb	r1, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	7a53      	ldrb	r3, [r2, #9]
 80067ec:	f361 0382 	bfi	r3, r1, #2, #1
 80067f0:	7253      	strb	r3, [r2, #9]
    val->fifo_bdr         = fifo_status2.counter_bdr_ia;
 80067f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80067fa:	b2d9      	uxtb	r1, r3
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	7a53      	ldrb	r3, [r2, #9]
 8006800:	f361 03c3 	bfi	r3, r1, #3, #1
 8006804:	7253      	strb	r3, [r2, #9]
    val->fifo_full        = fifo_status2.fifo_full_ia;
 8006806:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800680a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800680e:	b2d9      	uxtb	r1, r3
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	7a53      	ldrb	r3, [r2, #9]
 8006814:	f361 1304 	bfi	r3, r1, #4, #1
 8006818:	7253      	strb	r3, [r2, #9]
    val->fifo_ovr         = fifo_status2.fifo_ovr_ia;
 800681a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800681e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006822:	b2d9      	uxtb	r1, r3
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	7a53      	ldrb	r3, [r2, #9]
 8006828:	f361 1345 	bfi	r3, r1, #5, #1
 800682c:	7253      	strb	r3, [r2, #9]
    val->fifo_th          = fifo_status2.fifo_wtm_ia;
 800682e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006832:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006836:	b2d9      	uxtb	r1, r3
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	7a53      	ldrb	r3, [r2, #9]
 800683c:	f361 1386 	bfi	r3, r1, #6, #1
 8006840:	7253      	strb	r3, [r2, #9]
    ctrl5_c.not_used_01 = PROPERTY_DISABLE;
 8006842:	7e3b      	ldrb	r3, [r7, #24]
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	763b      	strb	r3, [r7, #24]
    ret = lsm6dso32x_write_reg(ctx, LSM6DSO32X_CTRL5_C,
 800684a:	f107 0218 	add.w	r2, r7, #24
 800684e:	2301      	movs	r3, #1
 8006850:	2114      	movs	r1, #20
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd fc0a 	bl	800406c <lsm6dso32x_write_reg>
 8006858:	64f8      	str	r0, [r7, #76]	@ 0x4c
                               (uint8_t *)&ctrl5_c, 1);
  }

  return ret;
 800685a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800685c:	4618      	mov	r0, r3
 800685e:	3750      	adds	r7, #80	@ 0x50
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <lsm6dso32x_embedded_sens_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dso32x_embedded_sens_get(stmdev_ctx_t *ctx,
                                     lsm6dso32x_emb_sens_t *emb_sens)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  lsm6dso32x_emb_func_en_a_t emb_func_en_a;
  lsm6dso32x_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_EMBEDDED_FUNC_BANK);
 800686e:	2102      	movs	r1, #2
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe f8e9 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 8006876:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d107      	bne.n	800688e <lsm6dso32x_embedded_sens_get+0x2a>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_EN_A,
 800687e:	f107 0210 	add.w	r2, r7, #16
 8006882:	2301      	movs	r3, #1
 8006884:	2104      	movs	r1, #4
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fd fbd8 	bl	800403c <lsm6dso32x_read_reg>
 800688c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d13d      	bne.n	8006910 <lsm6dso32x_embedded_sens_get+0xac>
  {
    ret = lsm6dso32x_read_reg(ctx, LSM6DSO32X_EMB_FUNC_EN_B,
 8006894:	f107 020c 	add.w	r2, r7, #12
 8006898:	2301      	movs	r3, #1
 800689a:	2105      	movs	r1, #5
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fd fbcd 	bl	800403c <lsm6dso32x_read_reg>
 80068a2:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 80068a4:	7b3b      	ldrb	r3, [r7, #12]
 80068a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068aa:	b2d9      	uxtb	r1, r3
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	7813      	ldrb	r3, [r2, #0]
 80068b0:	f361 03c3 	bfi	r3, r1, #3, #1
 80068b4:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 80068b6:	7b3b      	ldrb	r3, [r7, #12]
 80068b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068bc:	b2d9      	uxtb	r1, r3
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	7813      	ldrb	r3, [r2, #0]
 80068c2:	f361 1304 	bfi	r3, r1, #4, #1
 80068c6:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 80068c8:	7c3b      	ldrb	r3, [r7, #16]
 80068ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068ce:	b2d9      	uxtb	r1, r3
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	7813      	ldrb	r3, [r2, #0]
 80068d4:	f361 0341 	bfi	r3, r1, #1, #1
 80068d8:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 80068da:	7c3b      	ldrb	r3, [r7, #16]
 80068dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068e0:	b2d9      	uxtb	r1, r3
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	7813      	ldrb	r3, [r2, #0]
 80068e6:	f361 0382 	bfi	r3, r1, #2, #1
 80068ea:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80068ec:	7c3b      	ldrb	r3, [r7, #16]
 80068ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068f2:	b2d9      	uxtb	r1, r3
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	7813      	ldrb	r3, [r2, #0]
 80068f8:	f361 0300 	bfi	r3, r1, #0, #1
 80068fc:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006904:	b2d9      	uxtb	r1, r3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	7813      	ldrb	r3, [r2, #0]
 800690a:	f361 1345 	bfi	r3, r1, #5, #1
 800690e:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <lsm6dso32x_embedded_sens_get+0xbc>
  {
    ret = lsm6dso32x_mem_bank_set(ctx, LSM6DSO32X_USER_BANK);
 8006916:	2100      	movs	r1, #0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe f895 	bl	8004a48 <lsm6dso32x_mem_bank_set>
 800691e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006920:	697b      	ldr	r3, [r7, #20]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	ed93 7a00 	vldr	s14, [r3]
 800693c:	edd7 7a00 	vldr	s15, [r7]
 8006940:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	edd3 6a01 	vldr	s13, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006950:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006954:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	edd3 6a02 	vldr	s13, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	edd3 7a04 	vldr	s15, [r3, #16]
 8006964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006976:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	ee07 3a90 	vmov	s15, r3

  }
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

   HAL_Init();
 80069a8:	f003 fe62 	bl	800a670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069ac:	f000 f874 	bl	8006a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069b0:	f000 fe7c 	bl	80076ac <MX_GPIO_Init>
  MX_DMA_Init();
 80069b4:	f000 fe42 	bl	800763c <MX_DMA_Init>
  MX_ADC1_Init();
 80069b8:	f000 f8d8 	bl	8006b6c <MX_ADC1_Init>
  MX_ADC2_Init();
 80069bc:	f000 f928 	bl	8006c10 <MX_ADC2_Init>
  MX_DCMI_Init();
 80069c0:	f000 fa5a 	bl	8006e78 <MX_DCMI_Init>
  MX_I2C2_Init();
 80069c4:	f000 faae 	bl	8006f24 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80069c8:	f000 fada 	bl	8006f80 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80069cc:	f000 faf8 	bl	8006fc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80069d0:	f000 fbba 	bl	8007148 <MX_TIM2_Init>
  MX_TIM3_Init();
 80069d4:	f000 fc38 	bl	8007248 <MX_TIM3_Init>
  MX_TIM4_Init();
 80069d8:	f000 fc9a 	bl	8007310 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80069dc:	f000 fdda 	bl	8007594 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80069e0:	f00d fe9e 	bl	8014720 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80069e4:	f00e f83a 	bl	8014a5c <MX_LIBJPEG_Init>
  MX_ADC3_Init();
 80069e8:	f000 f9aa 	bl	8006d40 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80069ec:	f000 fdfc 	bl	80075e8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80069f0:	f000 fd26 	bl	8007440 <MX_TIM7_Init>
  MX_I2C1_Init();
 80069f4:	f000 fa68 	bl	8006ec8 <MX_I2C1_Init>
  MX_TIM11_Init();
 80069f8:	f000 fd82 	bl	8007500 <MX_TIM11_Init>
  MX_TIM10_Init();
 80069fc:	f000 fd5c 	bl	80074b8 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8006a00:	f010 f810 	bl	8016a24 <MX_USB_DEVICE_Init>
  //uint32_t dcmiBuf[36480] = {0};

  //camera
  //ov2640_Init(0x60, CAMERA_Picture);
  //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, dcmiBuf[0] , 36480);
  I2C_ReadAvailableDevices(&SENSORS_I2C, deviceAddresses, &numDevices);
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <main+0xc0>)
 8006a06:	4918      	ldr	r1, [pc, #96]	@ (8006a68 <main+0xc4>)
 8006a08:	4818      	ldr	r0, [pc, #96]	@ (8006a6c <main+0xc8>)
 8006a0a:	f002 fdfb 	bl	8009604 <I2C_ReadAvailableDevices>

  //LSM6DSO32X
  LSM_init();
 8006a0e:	f001 fd91 	bl	8008534 <LSM_init>

  //QMC5883
  HMC5883L_init();
 8006a12:	f001 fe41 	bl	8008698 <HMC5883L_init>

  //PWM timers init
  PWM_init();
 8006a16:	f001 fd51 	bl	80084bc <PWM_init>

  //enable robot's handler structs
  Rodog_init(&rodog);
 8006a1a:	4815      	ldr	r0, [pc, #84]	@ (8006a70 <main+0xcc>)
 8006a1c:	f001 fe9c 	bl	8008758 <Rodog_init>
  Joints_init(J);
 8006a20:	4814      	ldr	r0, [pc, #80]	@ (8006a74 <main+0xd0>)
 8006a22:	f001 f983 	bl	8007d2c <Joints_init>

  //enable DMA
  EN_DMA_IT();
 8006a26:	f002 fdcd 	bl	80095c4 <EN_DMA_IT>

  //IK matrices
  arm_mat_init_f32(&CH0 , 4 , 4 , (float32_t*)CH0xyz);		//hips position with respect to the COM at home position
 8006a2a:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <main+0xd4>)
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	2104      	movs	r1, #4
 8006a30:	4812      	ldr	r0, [pc, #72]	@ (8006a7c <main+0xd8>)
 8006a32:	f010 ff4f 	bl	80178d4 <arm_mat_init_f32>
  arm_mat_init_f32(&EE_cmd  , 4 , 4 , (float32_t*)EExyz_cmd);		//final corrected EE position after rotating the hips frame contrary to the body frame
 8006a36:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <main+0xdc>)
 8006a38:	2204      	movs	r2, #4
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	4811      	ldr	r0, [pc, #68]	@ (8006a84 <main+0xe0>)
 8006a3e:	f010 ff49 	bl	80178d4 <arm_mat_init_f32>
  //FK matrices
  arm_mat_init_f32(&EE_fb , 4 , 4 , (float32_t*)EExyz_fb);		//feedback position of the EE with respect to each HIP frame
 8006a42:	4b11      	ldr	r3, [pc, #68]	@ (8006a88 <main+0xe4>)
 8006a44:	2204      	movs	r2, #4
 8006a46:	2104      	movs	r1, #4
 8006a48:	4810      	ldr	r0, [pc, #64]	@ (8006a8c <main+0xe8>)
 8006a4a:	f010 ff43 	bl	80178d4 <arm_mat_init_f32>

  //start all the timer interrupts
  HAL_TIM_Base_Start_IT(TIM_ULTRASOUND);
 8006a4e:	4810      	ldr	r0, [pc, #64]	@ (8006a90 <main+0xec>)
 8006a50:	f00a f980 	bl	8010d54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(TIM_SENSORS);
 8006a54:	480f      	ldr	r0, [pc, #60]	@ (8006a94 <main+0xf0>)
 8006a56:	f00a f97d 	bl	8010d54 <HAL_TIM_Base_Start_IT>


  PID_init();
 8006a5a:	f001 fcf9 	bl	8008450 <PID_init>
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

  //start of run
 	while (1){
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <main+0xba>
 8006a62:	bf00      	nop
 8006a64:	20001aed 	.word	0x20001aed
 8006a68:	20001aec 	.word	0x20001aec
 8006a6c:	2000066c 	.word	0x2000066c
 8006a70:	200018f8 	.word	0x200018f8
 8006a74:	200016e8 	.word	0x200016e8
 8006a78:	20000028 	.word	0x20000028
 8006a7c:	200019dc 	.word	0x200019dc
 8006a80:	20000068 	.word	0x20000068
 8006a84:	200019e4 	.word	0x200019e4
 8006a88:	200000a8 	.word	0x200000a8
 8006a8c:	200019ec 	.word	0x200019ec
 8006a90:	20000900 	.word	0x20000900
 8006a94:	20000948 	.word	0x20000948

08006a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b094      	sub	sp, #80	@ 0x50
 8006a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a9e:	f107 0320 	add.w	r3, r7, #32
 8006aa2:	2230      	movs	r2, #48	@ 0x30
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f011 fe8a 	bl	80187c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	4b28      	ldr	r3, [pc, #160]	@ (8006b64 <SystemClock_Config+0xcc>)
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac4:	4a27      	ldr	r2, [pc, #156]	@ (8006b64 <SystemClock_Config+0xcc>)
 8006ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8006acc:	4b25      	ldr	r3, [pc, #148]	@ (8006b64 <SystemClock_Config+0xcc>)
 8006ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	4b22      	ldr	r3, [pc, #136]	@ (8006b68 <SystemClock_Config+0xd0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a21      	ldr	r2, [pc, #132]	@ (8006b68 <SystemClock_Config+0xd0>)
 8006ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b68 <SystemClock_Config+0xd0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006afe:	2302      	movs	r3, #2
 8006b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006b08:	2308      	movs	r3, #8
 8006b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006b0c:	23a8      	movs	r3, #168	@ 0xa8
 8006b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b10:	2302      	movs	r3, #2
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006b14:	2307      	movs	r3, #7
 8006b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b18:	f107 0320 	add.w	r3, r7, #32
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f008 faa9 	bl	800f074 <HAL_RCC_OscConfig>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006b28:	f002 fda4 	bl	8009674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b2c:	230f      	movs	r3, #15
 8006b2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b30:	2302      	movs	r3, #2
 8006b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	2105      	movs	r1, #5
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f008 fd0a 	bl	800f564 <HAL_RCC_ClockConfig>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006b56:	f002 fd8d 	bl	8009674 <Error_Handler>
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3750      	adds	r7, #80	@ 0x50
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40007000 	.word	0x40007000

08006b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006b72:	463b      	mov	r3, r7
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006b7e:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006b80:	4a21      	ldr	r2, [pc, #132]	@ (8006c08 <MX_ADC1_Init+0x9c>)
 8006b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006b84:	4b1f      	ldr	r3, [pc, #124]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006b92:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006b98:	4b1a      	ldr	r3, [pc, #104]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b9e:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ba6:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006bac:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bae:	4a17      	ldr	r2, [pc, #92]	@ (8006c0c <MX_ADC1_Init+0xa0>)
 8006bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006bb2:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006bb8:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006bbe:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006bcc:	480d      	ldr	r0, [pc, #52]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bce:	f003 fde5 	bl	800a79c <HAL_ADC_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006bd8:	f002 fd4c 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006be0:	2301      	movs	r3, #1
 8006be2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006be4:	2307      	movs	r3, #7
 8006be6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006be8:	463b      	mov	r3, r7
 8006bea:	4619      	mov	r1, r3
 8006bec:	4805      	ldr	r0, [pc, #20]	@ (8006c04 <MX_ADC1_Init+0x98>)
 8006bee:	f003 ff97 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006bf8:	f002 fd3c 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200003d4 	.word	0x200003d4
 8006c08:	40012000 	.word	0x40012000
 8006c0c:	0f000001 	.word	0x0f000001

08006c10 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c16:	463b      	mov	r3, r7
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006c22:	4b44      	ldr	r3, [pc, #272]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c24:	4a44      	ldr	r2, [pc, #272]	@ (8006d38 <MX_ADC2_Init+0x128>)
 8006c26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006c28:	4b42      	ldr	r3, [pc, #264]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006c2e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006c30:	4b40      	ldr	r3, [pc, #256]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006c36:	4b3f      	ldr	r3, [pc, #252]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006c42:	4b3c      	ldr	r3, [pc, #240]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c50:	4b38      	ldr	r3, [pc, #224]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c52:	4a3a      	ldr	r2, [pc, #232]	@ (8006d3c <MX_ADC2_Init+0x12c>)
 8006c54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c56:	4b37      	ldr	r3, [pc, #220]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8006c5c:	4b35      	ldr	r3, [pc, #212]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c5e:	2206      	movs	r2, #6
 8006c60:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006c62:	4b34      	ldr	r3, [pc, #208]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c6a:	4b32      	ldr	r3, [pc, #200]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006c70:	4830      	ldr	r0, [pc, #192]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c72:	f003 fd93 	bl	800a79c <HAL_ADC_Init>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006c7c:	f002 fcfa 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006c80:	2305      	movs	r3, #5
 8006c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c84:	2301      	movs	r3, #1
 8006c86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006c88:	2307      	movs	r3, #7
 8006c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4828      	ldr	r0, [pc, #160]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006c92:	f003 ff45 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006c9c:	f002 fcea 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006ca0:	2307      	movs	r3, #7
 8006ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ca8:	463b      	mov	r3, r7
 8006caa:	4619      	mov	r1, r3
 8006cac:	4821      	ldr	r0, [pc, #132]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006cae:	f003 ff37 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006cb8:	f002 fcdc 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	481a      	ldr	r0, [pc, #104]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006cca:	f003 ff29 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006cd4:	f002 fcce 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006cd8:	2309      	movs	r3, #9
 8006cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006cdc:	2304      	movs	r3, #4
 8006cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4813      	ldr	r0, [pc, #76]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006ce6:	f003 ff1b 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006cf0:	f002 fcc0 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006cf4:	230e      	movs	r3, #14
 8006cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006cf8:	2305      	movs	r3, #5
 8006cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4619      	mov	r1, r3
 8006d00:	480c      	ldr	r0, [pc, #48]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006d02:	f003 ff0d 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006d0c:	f002 fcb2 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006d10:	230f      	movs	r3, #15
 8006d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006d14:	2306      	movs	r3, #6
 8006d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d18:	463b      	mov	r3, r7
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4805      	ldr	r0, [pc, #20]	@ (8006d34 <MX_ADC2_Init+0x124>)
 8006d1e:	f003 feff 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006d28:	f002 fca4 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	2000041c 	.word	0x2000041c
 8006d38:	40012100 	.word	0x40012100
 8006d3c:	0f000001 	.word	0x0f000001

08006d40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006d46:	463b      	mov	r3, r7
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8006d52:	4b46      	ldr	r3, [pc, #280]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d54:	4a46      	ldr	r2, [pc, #280]	@ (8006e70 <MX_ADC3_Init+0x130>)
 8006d56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006d58:	4b44      	ldr	r3, [pc, #272]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006d5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006d60:	4b42      	ldr	r3, [pc, #264]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8006d66:	4b41      	ldr	r3, [pc, #260]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8006d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006d72:	4b3e      	ldr	r3, [pc, #248]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006d80:	4b3a      	ldr	r3, [pc, #232]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d82:	4a3c      	ldr	r2, [pc, #240]	@ (8006e74 <MX_ADC3_Init+0x134>)
 8006d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006d86:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8006d8c:	4b37      	ldr	r3, [pc, #220]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d8e:	2206      	movs	r2, #6
 8006d90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8006d92:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006d9a:	4b34      	ldr	r3, [pc, #208]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006da0:	4832      	ldr	r0, [pc, #200]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006da2:	f003 fcfb 	bl	800a79c <HAL_ADC_Init>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8006dac:	f002 fc62 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006db8:	2307      	movs	r3, #7
 8006dba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	482a      	ldr	r0, [pc, #168]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006dc2:	f003 fead 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8006dcc:	f002 fc52 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006dd8:	463b      	mov	r3, r7
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4823      	ldr	r0, [pc, #140]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006dde:	f003 fe9f 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8006de8:	f002 fc44 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006dec:	230a      	movs	r3, #10
 8006dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006df0:	2303      	movs	r3, #3
 8006df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006df4:	463b      	mov	r3, r7
 8006df6:	4619      	mov	r1, r3
 8006df8:	481c      	ldr	r0, [pc, #112]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006dfa:	f003 fe91 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8006e04:	f002 fc36 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006e08:	230b      	movs	r3, #11
 8006e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006e10:	463b      	mov	r3, r7
 8006e12:	4619      	mov	r1, r3
 8006e14:	4815      	ldr	r0, [pc, #84]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006e16:	f003 fe83 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8006e20:	f002 fc28 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006e24:	230c      	movs	r3, #12
 8006e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006e28:	2305      	movs	r3, #5
 8006e2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006e30:	463b      	mov	r3, r7
 8006e32:	4619      	mov	r1, r3
 8006e34:	480d      	ldr	r0, [pc, #52]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006e36:	f003 fe73 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 8006e40:	f002 fc18 	bl	8009674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006e44:	230d      	movs	r3, #13
 8006e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006e48:	2306      	movs	r3, #6
 8006e4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006e4c:	2307      	movs	r3, #7
 8006e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006e50:	463b      	mov	r3, r7
 8006e52:	4619      	mov	r1, r3
 8006e54:	4805      	ldr	r0, [pc, #20]	@ (8006e6c <MX_ADC3_Init+0x12c>)
 8006e56:	f003 fe63 	bl	800ab20 <HAL_ADC_ConfigChannel>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8006e60:	f002 fc08 	bl	8009674 <Error_Handler>



  /* USER CODE END ADC3_Init 2 */

}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000464 	.word	0x20000464
 8006e70:	40012200 	.word	0x40012200
 8006e74:	0f000001 	.word	0x0f000001

08006e78 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8006e7c:	4b10      	ldr	r3, [pc, #64]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e7e:	4a11      	ldr	r2, [pc, #68]	@ (8006ec4 <MX_DCMI_Init+0x4c>)
 8006e80:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8006e82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8006e88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8006e94:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8006e9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8006ea0:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8006eac:	4804      	ldr	r0, [pc, #16]	@ (8006ec0 <MX_DCMI_Init+0x48>)
 8006eae:	f004 faa2 	bl	800b3f6 <HAL_DCMI_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8006eb8:	f002 fbdc 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200005cc 	.word	0x200005cc
 8006ec4:	50050000 	.word	0x50050000

08006ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ecc:	4b12      	ldr	r3, [pc, #72]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006ece:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <MX_I2C1_Init+0x54>)
 8006ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006ed2:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006ed4:	4a12      	ldr	r2, [pc, #72]	@ (8006f20 <MX_I2C1_Init+0x58>)
 8006ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006ede:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006ee6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006ef2:	4b09      	ldr	r3, [pc, #36]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ef8:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006efe:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f04:	4804      	ldr	r0, [pc, #16]	@ (8006f18 <MX_I2C1_Init+0x50>)
 8006f06:	f005 f8d7 	bl	800c0b8 <HAL_I2C_Init>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006f10:	f002 fbb0 	bl	8009674 <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8006f14:	bf00      	nop
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	2000066c 	.word	0x2000066c
 8006f1c:	40005400 	.word	0x40005400
 8006f20:	00061a80 	.word	0x00061a80

08006f24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006f28:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f2a:	4a13      	ldr	r2, [pc, #76]	@ (8006f78 <MX_I2C2_Init+0x54>)
 8006f2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006f2e:	4b11      	ldr	r3, [pc, #68]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f30:	4a12      	ldr	r2, [pc, #72]	@ (8006f7c <MX_I2C2_Init+0x58>)
 8006f32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006f34:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f40:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006f46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006f4e:	4b09      	ldr	r3, [pc, #36]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f54:	4b07      	ldr	r3, [pc, #28]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f5a:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006f60:	4804      	ldr	r0, [pc, #16]	@ (8006f74 <MX_I2C2_Init+0x50>)
 8006f62:	f005 f8a9 	bl	800c0b8 <HAL_I2C_Init>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006f6c:	f002 fb82 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200006c0 	.word	0x200006c0
 8006f78:	40005800 	.word	0x40005800
 8006f7c:	000186a0 	.word	0x000186a0

08006f80 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006f86:	4a0d      	ldr	r2, [pc, #52]	@ (8006fbc <MX_SDIO_SD_Init+0x3c>)
 8006f88:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f96:	4b08      	ldr	r3, [pc, #32]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006fa2:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8006fa8:	4b03      	ldr	r3, [pc, #12]	@ (8006fb8 <MX_SDIO_SD_Init+0x38>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006fae:	bf00      	nop
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20000714 	.word	0x20000714
 8006fbc:	40012c00 	.word	0x40012c00

08006fc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b096      	sub	sp, #88	@ 0x58
 8006fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	609a      	str	r2, [r3, #8]
 8006fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
 8006fea:	60da      	str	r2, [r3, #12]
 8006fec:	611a      	str	r2, [r3, #16]
 8006fee:	615a      	str	r2, [r3, #20]
 8006ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f011 fbe1 	bl	80187c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006ffe:	4b50      	ldr	r3, [pc, #320]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007000:	4a50      	ldr	r2, [pc, #320]	@ (8007144 <MX_TIM1_Init+0x184>)
 8007002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 55;
 8007004:	4b4e      	ldr	r3, [pc, #312]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007006:	2237      	movs	r2, #55	@ 0x37
 8007008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800700a:	4b4d      	ldr	r3, [pc, #308]	@ (8007140 <MX_TIM1_Init+0x180>)
 800700c:	2200      	movs	r2, #0
 800700e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8007010:	4b4b      	ldr	r3, [pc, #300]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007012:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007018:	4b49      	ldr	r3, [pc, #292]	@ (8007140 <MX_TIM1_Init+0x180>)
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800701e:	4b48      	ldr	r3, [pc, #288]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007020:	2200      	movs	r2, #0
 8007022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007024:	4b46      	ldr	r3, [pc, #280]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007026:	2200      	movs	r2, #0
 8007028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800702a:	4845      	ldr	r0, [pc, #276]	@ (8007140 <MX_TIM1_Init+0x180>)
 800702c:	f009 fe43 	bl	8010cb6 <HAL_TIM_Base_Init>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007036:	f002 fb1d 	bl	8009674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800703a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800703e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007040:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007044:	4619      	mov	r1, r3
 8007046:	483e      	ldr	r0, [pc, #248]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007048:	f00a fa04 	bl	8011454 <HAL_TIM_ConfigClockSource>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007052:	f002 fb0f 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007056:	483a      	ldr	r0, [pc, #232]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007058:	f009 ff1b 	bl	8010e92 <HAL_TIM_PWM_Init>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007062:	f002 fb07 	bl	8009674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007066:	2300      	movs	r3, #0
 8007068:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800706a:	2300      	movs	r3, #0
 800706c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800706e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007072:	4619      	mov	r1, r3
 8007074:	4832      	ldr	r0, [pc, #200]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007076:	f00a fded 	bl	8011c54 <HAL_TIMEx_MasterConfigSynchronization>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007080:	f002 faf8 	bl	8009674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007084:	2360      	movs	r3, #96	@ 0x60
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800708c:	2300      	movs	r3, #0
 800708e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007090:	2300      	movs	r3, #0
 8007092:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007094:	2300      	movs	r3, #0
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800709c:	2300      	movs	r3, #0
 800709e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80070a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070a4:	2200      	movs	r2, #0
 80070a6:	4619      	mov	r1, r3
 80070a8:	4825      	ldr	r0, [pc, #148]	@ (8007140 <MX_TIM1_Init+0x180>)
 80070aa:	f00a f911 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80070b4:	f002 fade 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80070b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070bc:	2204      	movs	r2, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	481f      	ldr	r0, [pc, #124]	@ (8007140 <MX_TIM1_Init+0x180>)
 80070c2:	f00a f905 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80070cc:	f002 fad2 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80070d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070d4:	2208      	movs	r2, #8
 80070d6:	4619      	mov	r1, r3
 80070d8:	4819      	ldr	r0, [pc, #100]	@ (8007140 <MX_TIM1_Init+0x180>)
 80070da:	f00a f8f9 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80070e4:	f002 fac6 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80070e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ec:	220c      	movs	r2, #12
 80070ee:	4619      	mov	r1, r3
 80070f0:	4813      	ldr	r0, [pc, #76]	@ (8007140 <MX_TIM1_Init+0x180>)
 80070f2:	f00a f8ed 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80070fc:	f002 faba 	bl	8009674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007100:	2300      	movs	r3, #0
 8007102:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007104:	2300      	movs	r3, #0
 8007106:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007118:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800711a:	2300      	movs	r3, #0
 800711c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800711e:	1d3b      	adds	r3, r7, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4807      	ldr	r0, [pc, #28]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007124:	f00a fe12 	bl	8011d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800712e:	f002 faa1 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007132:	4803      	ldr	r0, [pc, #12]	@ (8007140 <MX_TIM1_Init+0x180>)
 8007134:	f002 ff0c 	bl	8009f50 <HAL_TIM_MspPostInit>

}
 8007138:	bf00      	nop
 800713a:	3758      	adds	r7, #88	@ 0x58
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000798 	.word	0x20000798
 8007144:	40010000 	.word	0x40010000

08007148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08e      	sub	sp, #56	@ 0x38
 800714c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800714e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	609a      	str	r2, [r3, #8]
 800715a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800715c:	f107 0320 	add.w	r3, r7, #32
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
 8007174:	615a      	str	r2, [r3, #20]
 8007176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007178:	4b32      	ldr	r3, [pc, #200]	@ (8007244 <MX_TIM2_Init+0xfc>)
 800717a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800717e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27;
 8007180:	4b30      	ldr	r3, [pc, #192]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007182:	221b      	movs	r2, #27
 8007184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007186:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007188:	2200      	movs	r2, #0
 800718a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 800718c:	4b2d      	ldr	r3, [pc, #180]	@ (8007244 <MX_TIM2_Init+0xfc>)
 800718e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007194:	4b2b      	ldr	r3, [pc, #172]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007196:	2200      	movs	r2, #0
 8007198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800719a:	4b2a      	ldr	r3, [pc, #168]	@ (8007244 <MX_TIM2_Init+0xfc>)
 800719c:	2200      	movs	r2, #0
 800719e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80071a0:	4828      	ldr	r0, [pc, #160]	@ (8007244 <MX_TIM2_Init+0xfc>)
 80071a2:	f009 fd88 	bl	8010cb6 <HAL_TIM_Base_Init>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80071ac:	f002 fa62 	bl	8009674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80071b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80071ba:	4619      	mov	r1, r3
 80071bc:	4821      	ldr	r0, [pc, #132]	@ (8007244 <MX_TIM2_Init+0xfc>)
 80071be:	f00a f949 	bl	8011454 <HAL_TIM_ConfigClockSource>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80071c8:	f002 fa54 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80071cc:	481d      	ldr	r0, [pc, #116]	@ (8007244 <MX_TIM2_Init+0xfc>)
 80071ce:	f009 fe60 	bl	8010e92 <HAL_TIM_PWM_Init>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80071d8:	f002 fa4c 	bl	8009674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071dc:	2300      	movs	r3, #0
 80071de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80071e4:	f107 0320 	add.w	r3, r7, #32
 80071e8:	4619      	mov	r1, r3
 80071ea:	4816      	ldr	r0, [pc, #88]	@ (8007244 <MX_TIM2_Init+0xfc>)
 80071ec:	f00a fd32 	bl	8011c54 <HAL_TIMEx_MasterConfigSynchronization>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80071f6:	f002 fa3d 	bl	8009674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80071fa:	2360      	movs	r3, #96	@ 0x60
 80071fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	2200      	movs	r2, #0
 800720e:	4619      	mov	r1, r3
 8007210:	480c      	ldr	r0, [pc, #48]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007212:	f00a f85d 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800721c:	f002 fa2a 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007220:	1d3b      	adds	r3, r7, #4
 8007222:	2204      	movs	r2, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4807      	ldr	r0, [pc, #28]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007228:	f00a f852 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8007232:	f002 fa1f 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007236:	4803      	ldr	r0, [pc, #12]	@ (8007244 <MX_TIM2_Init+0xfc>)
 8007238:	f002 fe8a 	bl	8009f50 <HAL_TIM_MspPostInit>

}
 800723c:	bf00      	nop
 800723e:	3738      	adds	r7, #56	@ 0x38
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200007e0 	.word	0x200007e0

08007248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	@ 0x28
 800724c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800724e:	f107 0320 	add.w	r3, r7, #32
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007258:	1d3b      	adds	r3, r7, #4
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	609a      	str	r2, [r3, #8]
 8007262:	60da      	str	r2, [r3, #12]
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	615a      	str	r2, [r3, #20]
 8007268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800726a:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <MX_TIM3_Init+0xc0>)
 800726c:	4a27      	ldr	r2, [pc, #156]	@ (800730c <MX_TIM3_Init+0xc4>)
 800726e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8007270:	4b25      	ldr	r3, [pc, #148]	@ (8007308 <MX_TIM3_Init+0xc0>)
 8007272:	221b      	movs	r2, #27
 8007274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007276:	4b24      	ldr	r3, [pc, #144]	@ (8007308 <MX_TIM3_Init+0xc0>)
 8007278:	2200      	movs	r2, #0
 800727a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800727c:	4b22      	ldr	r3, [pc, #136]	@ (8007308 <MX_TIM3_Init+0xc0>)
 800727e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007284:	4b20      	ldr	r3, [pc, #128]	@ (8007308 <MX_TIM3_Init+0xc0>)
 8007286:	2200      	movs	r2, #0
 8007288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800728a:	4b1f      	ldr	r3, [pc, #124]	@ (8007308 <MX_TIM3_Init+0xc0>)
 800728c:	2200      	movs	r2, #0
 800728e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007290:	481d      	ldr	r0, [pc, #116]	@ (8007308 <MX_TIM3_Init+0xc0>)
 8007292:	f009 fdfe 	bl	8010e92 <HAL_TIM_PWM_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800729c:	f002 f9ea 	bl	8009674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80072a8:	f107 0320 	add.w	r3, r7, #32
 80072ac:	4619      	mov	r1, r3
 80072ae:	4816      	ldr	r0, [pc, #88]	@ (8007308 <MX_TIM3_Init+0xc0>)
 80072b0:	f00a fcd0 	bl	8011c54 <HAL_TIMEx_MasterConfigSynchronization>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80072ba:	f002 f9db 	bl	8009674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072be:	2360      	movs	r3, #96	@ 0x60
 80072c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80072ce:	1d3b      	adds	r3, r7, #4
 80072d0:	2200      	movs	r2, #0
 80072d2:	4619      	mov	r1, r3
 80072d4:	480c      	ldr	r0, [pc, #48]	@ (8007308 <MX_TIM3_Init+0xc0>)
 80072d6:	f009 fffb 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80072e0:	f002 f9c8 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80072e4:	1d3b      	adds	r3, r7, #4
 80072e6:	2204      	movs	r2, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4807      	ldr	r0, [pc, #28]	@ (8007308 <MX_TIM3_Init+0xc0>)
 80072ec:	f009 fff0 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80072f6:	f002 f9bd 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80072fa:	4803      	ldr	r0, [pc, #12]	@ (8007308 <MX_TIM3_Init+0xc0>)
 80072fc:	f002 fe28 	bl	8009f50 <HAL_TIM_MspPostInit>

}
 8007300:	bf00      	nop
 8007302:	3728      	adds	r7, #40	@ 0x28
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000828 	.word	0x20000828
 800730c:	40000400 	.word	0x40000400

08007310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	@ 0x38
 8007314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	605a      	str	r2, [r3, #4]
 8007320:	609a      	str	r2, [r3, #8]
 8007322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007324:	f107 0320 	add.w	r3, r7, #32
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	611a      	str	r2, [r3, #16]
 800733c:	615a      	str	r2, [r3, #20]
 800733e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007340:	4b3d      	ldr	r3, [pc, #244]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007342:	4a3e      	ldr	r2, [pc, #248]	@ (800743c <MX_TIM4_Init+0x12c>)
 8007344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27;
 8007346:	4b3c      	ldr	r3, [pc, #240]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007348:	221b      	movs	r2, #27
 800734a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800734c:	4b3a      	ldr	r3, [pc, #232]	@ (8007438 <MX_TIM4_Init+0x128>)
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8007352:	4b39      	ldr	r3, [pc, #228]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007354:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007358:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800735a:	4b37      	ldr	r3, [pc, #220]	@ (8007438 <MX_TIM4_Init+0x128>)
 800735c:	2200      	movs	r2, #0
 800735e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007360:	4b35      	ldr	r3, [pc, #212]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007362:	2200      	movs	r2, #0
 8007364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007366:	4834      	ldr	r0, [pc, #208]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007368:	f009 fca5 	bl	8010cb6 <HAL_TIM_Base_Init>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007372:	f002 f97f 	bl	8009674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800737a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800737c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007380:	4619      	mov	r1, r3
 8007382:	482d      	ldr	r0, [pc, #180]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007384:	f00a f866 	bl	8011454 <HAL_TIM_ConfigClockSource>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800738e:	f002 f971 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007392:	4829      	ldr	r0, [pc, #164]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007394:	f009 fd7d 	bl	8010e92 <HAL_TIM_PWM_Init>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800739e:	f002 f969 	bl	8009674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073a2:	2300      	movs	r3, #0
 80073a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80073aa:	f107 0320 	add.w	r3, r7, #32
 80073ae:	4619      	mov	r1, r3
 80073b0:	4821      	ldr	r0, [pc, #132]	@ (8007438 <MX_TIM4_Init+0x128>)
 80073b2:	f00a fc4f 	bl	8011c54 <HAL_TIMEx_MasterConfigSynchronization>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80073bc:	f002 f95a 	bl	8009674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073c0:	2360      	movs	r3, #96	@ 0x60
 80073c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073d0:	1d3b      	adds	r3, r7, #4
 80073d2:	2200      	movs	r2, #0
 80073d4:	4619      	mov	r1, r3
 80073d6:	4818      	ldr	r0, [pc, #96]	@ (8007438 <MX_TIM4_Init+0x128>)
 80073d8:	f009 ff7a 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80073e2:	f002 f947 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	2204      	movs	r2, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4812      	ldr	r0, [pc, #72]	@ (8007438 <MX_TIM4_Init+0x128>)
 80073ee:	f009 ff6f 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80073f8:	f002 f93c 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	2208      	movs	r2, #8
 8007400:	4619      	mov	r1, r3
 8007402:	480d      	ldr	r0, [pc, #52]	@ (8007438 <MX_TIM4_Init+0x128>)
 8007404:	f009 ff64 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800740e:	f002 f931 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	220c      	movs	r2, #12
 8007416:	4619      	mov	r1, r3
 8007418:	4807      	ldr	r0, [pc, #28]	@ (8007438 <MX_TIM4_Init+0x128>)
 800741a:	f009 ff59 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8007424:	f002 f926 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007428:	4803      	ldr	r0, [pc, #12]	@ (8007438 <MX_TIM4_Init+0x128>)
 800742a:	f002 fd91 	bl	8009f50 <HAL_TIM_MspPostInit>

}
 800742e:	bf00      	nop
 8007430:	3738      	adds	r7, #56	@ 0x38
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000870 	.word	0x20000870
 800743c:	40000800 	.word	0x40000800

08007440 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007446:	463b      	mov	r3, r7
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800744e:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <MX_TIM7_Init+0x70>)
 8007450:	4a18      	ldr	r2, [pc, #96]	@ (80074b4 <MX_TIM7_Init+0x74>)
 8007452:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 8007454:	4b16      	ldr	r3, [pc, #88]	@ (80074b0 <MX_TIM7_Init+0x70>)
 8007456:	220f      	movs	r2, #15
 8007458:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <MX_TIM7_Init+0x70>)
 800745c:	2200      	movs	r2, #0
 800745e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8007460:	4b13      	ldr	r3, [pc, #76]	@ (80074b0 <MX_TIM7_Init+0x70>)
 8007462:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007466:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <MX_TIM7_Init+0x70>)
 800746a:	2200      	movs	r2, #0
 800746c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800746e:	4810      	ldr	r0, [pc, #64]	@ (80074b0 <MX_TIM7_Init+0x70>)
 8007470:	f009 fc21 	bl	8010cb6 <HAL_TIM_Base_Init>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800747a:	f002 f8fb 	bl	8009674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800747e:	2300      	movs	r3, #0
 8007480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007482:	2300      	movs	r3, #0
 8007484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007486:	463b      	mov	r3, r7
 8007488:	4619      	mov	r1, r3
 800748a:	4809      	ldr	r0, [pc, #36]	@ (80074b0 <MX_TIM7_Init+0x70>)
 800748c:	f00a fbe2 	bl	8011c54 <HAL_TIMEx_MasterConfigSynchronization>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8007496:	f002 f8ed 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  htim7.Init.Prescaler = TIM_SYS_PRESC;
 800749a:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <MX_TIM7_Init+0x70>)
 800749c:	2200      	movs	r2, #0
 800749e:	605a      	str	r2, [r3, #4]
  htim7.Init.Period = TIM_SYS_PERIOD;
 80074a0:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <MX_TIM7_Init+0x70>)
 80074a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074a6:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200008b8 	.word	0x200008b8
 80074b4:	40001400 	.word	0x40001400

080074b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80074bc:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074be:	4a0f      	ldr	r2, [pc, #60]	@ (80074fc <MX_TIM10_Init+0x44>)
 80074c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074c8:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074d8:	2200      	movs	r2, #0
 80074da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074de:	2200      	movs	r2, #0
 80074e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80074e2:	4805      	ldr	r0, [pc, #20]	@ (80074f8 <MX_TIM10_Init+0x40>)
 80074e4:	f009 fbe7 	bl	8010cb6 <HAL_TIM_Base_Init>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80074ee:	f002 f8c1 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000900 	.word	0x20000900
 80074fc:	40014400 	.word	0x40014400

08007500 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	60da      	str	r2, [r3, #12]
 8007512:	611a      	str	r2, [r3, #16]
 8007514:	615a      	str	r2, [r3, #20]
 8007516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007518:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <MX_TIM11_Init+0x8c>)
 800751a:	4a1d      	ldr	r2, [pc, #116]	@ (8007590 <MX_TIM11_Init+0x90>)
 800751c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8;
 800751e:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007520:	2208      	movs	r2, #8
 8007522:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007524:	4b19      	ldr	r3, [pc, #100]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 59999;
 800752a:	4b18      	ldr	r3, [pc, #96]	@ (800758c <MX_TIM11_Init+0x8c>)
 800752c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8007530:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007532:	4b16      	ldr	r3, [pc, #88]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007534:	2200      	movs	r2, #0
 8007536:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007538:	4b14      	ldr	r3, [pc, #80]	@ (800758c <MX_TIM11_Init+0x8c>)
 800753a:	2200      	movs	r2, #0
 800753c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800753e:	4813      	ldr	r0, [pc, #76]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007540:	f009 fbb9 	bl	8010cb6 <HAL_TIM_Base_Init>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800754a:	f002 f893 	bl	8009674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800754e:	480f      	ldr	r0, [pc, #60]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007550:	f009 fc9f 	bl	8010e92 <HAL_TIM_PWM_Init>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800755a:	f002 f88b 	bl	8009674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800755e:	2360      	movs	r3, #96	@ 0x60
 8007560:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800756e:	1d3b      	adds	r3, r7, #4
 8007570:	2200      	movs	r2, #0
 8007572:	4619      	mov	r1, r3
 8007574:	4805      	ldr	r0, [pc, #20]	@ (800758c <MX_TIM11_Init+0x8c>)
 8007576:	f009 feab 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8007580:	f002 f878 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8007584:	bf00      	nop
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000948 	.word	0x20000948
 8007590:	40014800 	.word	0x40014800

08007594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007598:	4b11      	ldr	r3, [pc, #68]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 800759a:	4a12      	ldr	r2, [pc, #72]	@ (80075e4 <MX_USART2_UART_Init+0x50>)
 800759c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800759e:	4b10      	ldr	r3, [pc, #64]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80075a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80075a6:	4b0e      	ldr	r3, [pc, #56]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075b2:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075b8:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075ba:	220c      	movs	r2, #12
 80075bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075be:	4b08      	ldr	r3, [pc, #32]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075c4:	4b06      	ldr	r3, [pc, #24]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075ca:	4805      	ldr	r0, [pc, #20]	@ (80075e0 <MX_USART2_UART_Init+0x4c>)
 80075cc:	f00a fc24 	bl	8011e18 <HAL_UART_Init>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80075d6:	f002 f84d 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075da:	bf00      	nop
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000990 	.word	0x20000990
 80075e4:	40004400 	.word	0x40004400

080075e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80075ec:	4b11      	ldr	r3, [pc, #68]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 80075ee:	4a12      	ldr	r2, [pc, #72]	@ (8007638 <MX_USART3_UART_Init+0x50>)
 80075f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80075f2:	4b10      	ldr	r3, [pc, #64]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 80075f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80075f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80075fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007600:	4b0c      	ldr	r3, [pc, #48]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 8007602:	2200      	movs	r2, #0
 8007604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007606:	4b0b      	ldr	r3, [pc, #44]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 8007608:	2200      	movs	r2, #0
 800760a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 800760e:	220c      	movs	r2, #12
 8007610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007612:	4b08      	ldr	r3, [pc, #32]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 8007614:	2200      	movs	r2, #0
 8007616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800761e:	4805      	ldr	r0, [pc, #20]	@ (8007634 <MX_USART3_UART_Init+0x4c>)
 8007620:	f00a fbfa 	bl	8011e18 <HAL_UART_Init>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800762a:	f002 f823 	bl	8009674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800762e:	bf00      	nop
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200009d4 	.word	0x200009d4
 8007638:	40004800 	.word	0x40004800

0800763c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	4b18      	ldr	r3, [pc, #96]	@ (80076a8 <MX_DMA_Init+0x6c>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764a:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <MX_DMA_Init+0x6c>)
 800764c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007650:	6313      	str	r3, [r2, #48]	@ 0x30
 8007652:	4b15      	ldr	r3, [pc, #84]	@ (80076a8 <MX_DMA_Init+0x6c>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800765a:	607b      	str	r3, [r7, #4]
 800765c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	2038      	movs	r0, #56	@ 0x38
 8007664:	f003 fdd3 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007668:	2038      	movs	r0, #56	@ 0x38
 800766a:	f003 fdec 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	2039      	movs	r0, #57	@ 0x39
 8007674:	f003 fdcb 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007678:	2039      	movs	r0, #57	@ 0x39
 800767a:	f003 fde4 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	203a      	movs	r0, #58	@ 0x3a
 8007684:	f003 fdc3 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007688:	203a      	movs	r0, #58	@ 0x3a
 800768a:	f003 fddc 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	2046      	movs	r0, #70	@ 0x46
 8007694:	f003 fdbb 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007698:	2046      	movs	r0, #70	@ 0x46
 800769a:	f003 fdd4 	bl	800b246 <HAL_NVIC_EnableIRQ>

}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40023800 	.word	0x40023800

080076ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08c      	sub	sp, #48	@ 0x30
 80076b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b2:	f107 031c 	add.w	r3, r7, #28
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	605a      	str	r2, [r3, #4]
 80076bc:	609a      	str	r2, [r3, #8]
 80076be:	60da      	str	r2, [r3, #12]
 80076c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	4b80      	ldr	r3, [pc, #512]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ca:	4a7f      	ldr	r2, [pc, #508]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076cc:	f043 0310 	orr.w	r3, r3, #16
 80076d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80076d2:	4b7d      	ldr	r3, [pc, #500]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	4b79      	ldr	r3, [pc, #484]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	4a78      	ldr	r2, [pc, #480]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076e8:	f043 0304 	orr.w	r3, r3, #4
 80076ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80076ee:	4b76      	ldr	r3, [pc, #472]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	4b72      	ldr	r3, [pc, #456]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	4a71      	ldr	r2, [pc, #452]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007708:	6313      	str	r3, [r2, #48]	@ 0x30
 800770a:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	4b6b      	ldr	r3, [pc, #428]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	4a6a      	ldr	r2, [pc, #424]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007720:	f043 0301 	orr.w	r3, r3, #1
 8007724:	6313      	str	r3, [r2, #48]	@ 0x30
 8007726:	4b68      	ldr	r3, [pc, #416]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	4b64      	ldr	r3, [pc, #400]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773a:	4a63      	ldr	r2, [pc, #396]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6313      	str	r3, [r2, #48]	@ 0x30
 8007742:	4b61      	ldr	r3, [pc, #388]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
 8007752:	4b5d      	ldr	r3, [pc, #372]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007756:	4a5c      	ldr	r2, [pc, #368]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	6313      	str	r3, [r2, #48]	@ 0x30
 800775e:	4b5a      	ldr	r3, [pc, #360]	@ (80078c8 <MX_GPIO_Init+0x21c>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Pin|MUX_S0_Pin, GPIO_PIN_RESET);
 800776a:	2200      	movs	r2, #0
 800776c:	210c      	movs	r1, #12
 800776e:	4857      	ldr	r0, [pc, #348]	@ (80078cc <MX_GPIO_Init+0x220>)
 8007770:	f004 fc64 	bl	800c03c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX_S1_Pin|MUX_S2_Pin|MUX_S3_Pin, GPIO_PIN_RESET);
 8007774:	2200      	movs	r2, #0
 8007776:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800777a:	4855      	ldr	r0, [pc, #340]	@ (80078d0 <MX_GPIO_Init+0x224>)
 800777c:	f004 fc5e 	bl	800c03c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8007780:	2200      	movs	r2, #0
 8007782:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007786:	4853      	ldr	r0, [pc, #332]	@ (80078d4 <MX_GPIO_Init+0x228>)
 8007788:	f004 fc58 	bl	800c03c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_EN_Pin|BTS_DEN_Pin|FLASH_LED_Pin, GPIO_PIN_RESET);
 800778c:	2200      	movs	r2, #0
 800778e:	f640 4101 	movw	r1, #3073	@ 0xc01
 8007792:	4851      	ldr	r0, [pc, #324]	@ (80078d8 <MX_GPIO_Init+0x22c>)
 8007794:	f004 fc52 	bl	800c03c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MUX_S0_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MUX_S0_Pin;
 8007798:	230c      	movs	r3, #12
 800779a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800779c:	2301      	movs	r3, #1
 800779e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077a8:	f107 031c 	add.w	r3, r7, #28
 80077ac:	4619      	mov	r1, r3
 80077ae:	4847      	ldr	r0, [pc, #284]	@ (80078cc <MX_GPIO_Init+0x220>)
 80077b0:	f004 fa90 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_S1_Pin MUX_S2_Pin MUX_S3_Pin */
  GPIO_InitStruct.Pin = MUX_S1_Pin|MUX_S2_Pin|MUX_S3_Pin;
 80077b4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80077b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ba:	2301      	movs	r3, #1
 80077bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c2:	2300      	movs	r3, #0
 80077c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c6:	f107 031c 	add.w	r3, r7, #28
 80077ca:	4619      	mov	r1, r3
 80077cc:	4840      	ldr	r0, [pc, #256]	@ (80078d0 <MX_GPIO_Init+0x224>)
 80077ce:	f004 fa81 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 80077d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077d8:	2301      	movs	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 80077e4:	f107 031c 	add.w	r3, r7, #28
 80077e8:	4619      	mov	r1, r3
 80077ea:	483a      	ldr	r0, [pc, #232]	@ (80078d4 <MX_GPIO_Init+0x228>)
 80077ec:	f004 fa72 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_ECHO3_Pin US_ECHO2_Pin US_ECHO1_Pin LSM_IT1_Pin */
  GPIO_InitStruct.Pin = US_ECHO3_Pin|US_ECHO2_Pin|US_ECHO1_Pin|LSM_IT1_Pin;
 80077f0:	f24e 0320 	movw	r3, #57376	@ 0xe020
 80077f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80077f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80077fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80077fc:	2302      	movs	r3, #2
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007800:	f107 031c 	add.w	r3, r7, #28
 8007804:	4619      	mov	r1, r3
 8007806:	4833      	ldr	r0, [pc, #204]	@ (80078d4 <MX_GPIO_Init+0x228>)
 8007808:	f004 fa64 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_EN_Pin BTS_DEN_Pin FLASH_LED_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|BTS_DEN_Pin|FLASH_LED_Pin;
 800780c:	f640 4301 	movw	r3, #3073	@ 0xc01
 8007810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007812:	2301      	movs	r3, #1
 8007814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007816:	2300      	movs	r3, #0
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781a:	2300      	movs	r3, #0
 800781c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800781e:	f107 031c 	add.w	r3, r7, #28
 8007822:	4619      	mov	r1, r3
 8007824:	482c      	ldr	r0, [pc, #176]	@ (80078d8 <MX_GPIO_Init+0x22c>)
 8007826:	f004 fa55 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAR_DET_Pin */
  GPIO_InitStruct.Pin = CAR_DET_Pin;
 800782a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800782e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAR_DET_GPIO_Port, &GPIO_InitStruct);
 8007838:	f107 031c 	add.w	r3, r7, #28
 800783c:	4619      	mov	r1, r3
 800783e:	4827      	ldr	r0, [pc, #156]	@ (80078dc <MX_GPIO_Init+0x230>)
 8007840:	f004 fa48 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8007844:	2310      	movs	r3, #16
 8007846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007848:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800784c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8007852:	f107 031c 	add.w	r3, r7, #28
 8007856:	4619      	mov	r1, r3
 8007858:	481f      	ldr	r0, [pc, #124]	@ (80078d8 <MX_GPIO_Init+0x22c>)
 800785a:	f004 fa3b 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAGN_INT_Pin */
  GPIO_InitStruct.Pin = MAGN_INT_Pin;
 800785e:	2380      	movs	r3, #128	@ 0x80
 8007860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007862:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007868:	2302      	movs	r3, #2
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAGN_INT_GPIO_Port, &GPIO_InitStruct);
 800786c:	f107 031c 	add.w	r3, r7, #28
 8007870:	4619      	mov	r1, r3
 8007872:	4819      	ldr	r0, [pc, #100]	@ (80078d8 <MX_GPIO_Init+0x22c>)
 8007874:	f004 fa2e 	bl	800bcd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM_IT2_Pin */
  GPIO_InitStruct.Pin = LSM_IT2_Pin;
 8007878:	2310      	movs	r3, #16
 800787a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800787c:	2300      	movs	r3, #0
 800787e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007880:	2300      	movs	r3, #0
 8007882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LSM_IT2_GPIO_Port, &GPIO_InitStruct);
 8007884:	f107 031c 	add.w	r3, r7, #28
 8007888:	4619      	mov	r1, r3
 800788a:	4812      	ldr	r0, [pc, #72]	@ (80078d4 <MX_GPIO_Init+0x228>)
 800788c:	f004 fa22 	bl	800bcd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007890:	2200      	movs	r2, #0
 8007892:	2100      	movs	r1, #0
 8007894:	200a      	movs	r0, #10
 8007896:	f003 fcba 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800789a:	200a      	movs	r0, #10
 800789c:	f003 fcd3 	bl	800b246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	2017      	movs	r0, #23
 80078a6:	f003 fcb2 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80078aa:	2017      	movs	r0, #23
 80078ac:	f003 fccb 	bl	800b246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80078b0:	2200      	movs	r2, #0
 80078b2:	2100      	movs	r1, #0
 80078b4:	2028      	movs	r0, #40	@ 0x28
 80078b6:	f003 fcaa 	bl	800b20e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80078ba:	2028      	movs	r0, #40	@ 0x28
 80078bc:	f003 fcc3 	bl	800b246 <HAL_NVIC_EnableIRQ>

}
 80078c0:	bf00      	nop
 80078c2:	3730      	adds	r7, #48	@ 0x30
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40023800 	.word	0x40023800
 80078cc:	40021000 	.word	0x40021000
 80078d0:	40020800 	.word	0x40020800
 80078d4:	40020400 	.word	0x40020400
 80078d8:	40020c00 	.word	0x40020c00
 80078dc:	40020000 	.word	0x40020000

080078e0 <IncMux>:

/* USER CODE BEGIN 4 */

int IncMux(RODOG_Control * r){
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	r->MuxSelect++;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078ee:	3301      	adds	r3, #1
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	if(r->MuxSelect >= N_MUX_CHANNELS){
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078fe:	2b0d      	cmp	r3, #13
 8007900:	d903      	bls.n	800790a <IncMux+0x2a>
		r->MuxSelect = 0;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}

	// Set pins based on the individual bits of the r->MuxSelect
	if (r->MuxSelect & 0x01) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <IncMux+0x44>
		HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, GPIO_PIN_SET);
 8007918:	2201      	movs	r2, #1
 800791a:	2108      	movs	r1, #8
 800791c:	4825      	ldr	r0, [pc, #148]	@ (80079b4 <IncMux+0xd4>)
 800791e:	f004 fb8d 	bl	800c03c <HAL_GPIO_WritePin>
 8007922:	e004      	b.n	800792e <IncMux+0x4e>
	}else{HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, GPIO_PIN_RESET);}
 8007924:	2200      	movs	r2, #0
 8007926:	2108      	movs	r1, #8
 8007928:	4822      	ldr	r0, [pc, #136]	@ (80079b4 <IncMux+0xd4>)
 800792a:	f004 fb87 	bl	800c03c <HAL_GPIO_WritePin>

	if (r->MuxSelect & 0x02) {
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <IncMux+0x6a>
		HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, GPIO_PIN_SET);
 800793c:	2201      	movs	r2, #1
 800793e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007942:	481d      	ldr	r0, [pc, #116]	@ (80079b8 <IncMux+0xd8>)
 8007944:	f004 fb7a 	bl	800c03c <HAL_GPIO_WritePin>
 8007948:	e005      	b.n	8007956 <IncMux+0x76>
	}else{HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, GPIO_PIN_RESET);}
 800794a:	2200      	movs	r2, #0
 800794c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007950:	4819      	ldr	r0, [pc, #100]	@ (80079b8 <IncMux+0xd8>)
 8007952:	f004 fb73 	bl	800c03c <HAL_GPIO_WritePin>

	if (r->MuxSelect & 0x04) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d006      	beq.n	8007972 <IncMux+0x92>
		HAL_GPIO_WritePin(MUX_S2_GPIO_Port, MUX_S2_Pin, GPIO_PIN_SET);
 8007964:	2201      	movs	r2, #1
 8007966:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800796a:	4813      	ldr	r0, [pc, #76]	@ (80079b8 <IncMux+0xd8>)
 800796c:	f004 fb66 	bl	800c03c <HAL_GPIO_WritePin>
 8007970:	e005      	b.n	800797e <IncMux+0x9e>
	}else{HAL_GPIO_WritePin(MUX_S2_GPIO_Port, MUX_S2_Pin, GPIO_PIN_RESET);}
 8007972:	2200      	movs	r2, #0
 8007974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007978:	480f      	ldr	r0, [pc, #60]	@ (80079b8 <IncMux+0xd8>)
 800797a:	f004 fb5f 	bl	800c03c <HAL_GPIO_WritePin>

	if (r->MuxSelect & 0x08) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d006      	beq.n	800799a <IncMux+0xba>
		HAL_GPIO_WritePin(MUX_S3_GPIO_Port, MUX_S3_Pin, GPIO_PIN_SET);
 800798c:	2201      	movs	r2, #1
 800798e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007992:	4809      	ldr	r0, [pc, #36]	@ (80079b8 <IncMux+0xd8>)
 8007994:	f004 fb52 	bl	800c03c <HAL_GPIO_WritePin>
 8007998:	e005      	b.n	80079a6 <IncMux+0xc6>
	}else{HAL_GPIO_WritePin(MUX_S3_GPIO_Port, MUX_S3_Pin, GPIO_PIN_RESET);}
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079a0:	4805      	ldr	r0, [pc, #20]	@ (80079b8 <IncMux+0xd8>)
 80079a2:	f004 fb4b 	bl	800c03c <HAL_GPIO_WritePin>

	return r->MuxSelect;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	40020800 	.word	0x40020800

080079bc <HAL_TIM_PeriodElapsedCallback>:

//TIM_ULTRASOUND is set to count full after a 10us period, then this function will be called to set the trig pin LOW and disable the timer interrupt
//if we don't disable the timer interrupt, this function will be called every 10us, we only need to call this function when
//we call Ultrasound_Trig() to output a pulse on the trig pin
//this is better than using delay_us(10) as we can continue processing other stuff, delay_us(10) wastes 1680 clock cycles!
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

	//check which timer triggered this interrupt
	if(htim == TIM_ULTRASOUND){
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a32      	ldr	r2, [pc, #200]	@ (8007a90 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_WritePin(US_TRIG_GPIO_Port , US_TRIG_Pin , RESET);
 80079cc:	2200      	movs	r2, #0
 80079ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80079d2:	4830      	ldr	r0, [pc, #192]	@ (8007a94 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80079d4:	f004 fb32 	bl	800c03c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(TIM_ULTRASOUND);
 80079d8:	482d      	ldr	r0, [pc, #180]	@ (8007a90 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80079da:	f009 fa2b 	bl	8010e34 <HAL_TIM_Base_Stop_IT>
	}

	if(htim == TIM_SENSORS){
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d118      	bne.n	8007a18 <HAL_TIM_PeriodElapsedCallback+0x5c>
		static uint32_t sens_last_call = 0;
		IMU_dt = HAL_GetTick() - sens_last_call;
 80079e6:	f002 fea9 	bl	800a73c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b2b      	ldr	r3, [pc, #172]	@ (8007a9c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	4a2b      	ldr	r2, [pc, #172]	@ (8007aa0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80079f4:	6013      	str	r3, [r2, #0]

		ReadServos();
 80079f6:	f000 f96b 	bl	8007cd0 <ReadServos>
		get_imu();
 80079fa:	f001 f805 	bl	8008a08 <get_imu>
		get_xl();
 80079fe:	f001 f80f 	bl	8008a20 <get_xl>
		get_gyro();
 8007a02:	f001 f823 	bl	8008a4c <get_gyro>
		get_magn();
 8007a06:	f001 f837 	bl	8008a78 <get_magn>
		combine_imu();
 8007a0a:	f001 f841 	bl	8008a90 <combine_imu>

		sens_last_call = HAL_GetTick();
 8007a0e:	f002 fe95 	bl	800a73c <HAL_GetTick>
 8007a12:	4603      	mov	r3, r0
 8007a14:	4a21      	ldr	r2, [pc, #132]	@ (8007a9c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007a16:	6013      	str	r3, [r2, #0]

	}
	if(htim == TIM_SYS){
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a22      	ldr	r2, [pc, #136]	@ (8007aa4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d132      	bne.n	8007a86 <HAL_TIM_PeriodElapsedCallback+0xca>
		static uint32_t last_call = 0;
		float32_t rx = BodyPoseSetRx , rz =  BodyPoseSetRz , ry = BodyPoseSetRy;
 8007a20:	4b21      	ldr	r3, [pc, #132]	@ (8007aa8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	4b21      	ldr	r3, [pc, #132]	@ (8007aac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	4b20      	ldr	r3, [pc, #128]	@ (8007ab0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60fb      	str	r3, [r7, #12]
	    TIM_SYS_dt = HAL_GetTick() - last_call;
 8007a32:	f002 fe83 	bl	800a73c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8007a40:	6013      	str	r3, [r2, #0]
	    if(TIM_SYS_dt > 100){
 8007a42:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b64      	cmp	r3, #100	@ 0x64
 8007a48:	d902      	bls.n	8007a50 <HAL_TIM_PeriodElapsedCallback+0x94>
	    	TIM_SYS_dt = 100;
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8007a4c:	2264      	movs	r2, #100	@ 0x64
 8007a4e:	601a      	str	r2, [r3, #0]
	    }

		//controller
		PID_body(rx , rz , ry);
 8007a50:	ed97 1a03 	vldr	s2, [r7, #12]
 8007a54:	edd7 0a04 	vldr	s1, [r7, #16]
 8007a58:	ed97 0a05 	vldr	s0, [r7, #20]
 8007a5c:	f001 f914 	bl	8008c88 <PID_body>

		//kinematics
	    CurvePoints(&rodog , &EE_cmd);
 8007a60:	4916      	ldr	r1, [pc, #88]	@ (8007abc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007a62:	4817      	ldr	r0, [pc, #92]	@ (8007ac0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8007a64:	f7f9 faa8 	bl	8000fb8 <CurvePoints>
		IK_body(&rodog , &EE_cmd);
 8007a68:	4914      	ldr	r1, [pc, #80]	@ (8007abc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007a6a:	4815      	ldr	r0, [pc, #84]	@ (8007ac0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8007a6c:	f7fb fe64 	bl	8003738 <IK_body>
        IK_leg(HLK_cmd ,EExyz_cmd);
 8007a70:	4914      	ldr	r1, [pc, #80]	@ (8007ac4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8007a72:	4815      	ldr	r0, [pc, #84]	@ (8007ac8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8007a74:	f7fb fb64 	bl	8003140 <IK_leg>

        //timers
        PublishServos();
 8007a78:	f000 f8ee 	bl	8007c58 <PublishServos>
		last_call = HAL_GetTick();
 8007a7c:	f002 fe5e 	bl	800a73c <HAL_GetTick>
 8007a80:	4603      	mov	r3, r0
 8007a82:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8007a84:	6013      	str	r3, [r2, #0]
	}
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000900 	.word	0x20000900
 8007a94:	40020400 	.word	0x40020400
 8007a98:	20000948 	.word	0x20000948
 8007a9c:	20001af0 	.word	0x20001af0
 8007aa0:	20001ae4 	.word	0x20001ae4
 8007aa4:	200008b8 	.word	0x200008b8
 8007aa8:	20000a18 	.word	0x20000a18
 8007aac:	20000024 	.word	0x20000024
 8007ab0:	20000a1c 	.word	0x20000a1c
 8007ab4:	20001af4 	.word	0x20001af4
 8007ab8:	20001ae8 	.word	0x20001ae8
 8007abc:	200019e4 	.word	0x200019e4
 8007ac0:	200018f8 	.word	0x200018f8
 8007ac4:	20000068 	.word	0x20000068
 8007ac8:	2000193c 	.word	0x2000193c

08007acc <DIS_motors>:
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port , MOTOR_EN_Pin , SET);
	HAL_GPIO_WritePin(BTS_DEN_GPIO_Port , BTS_DEN_Pin , SET);
}

//disables the motors
void DIS_motors(){
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
	rodog.IsEnabled = 0;
 8007ad0:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <DIS_motors+0x2c>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port , MOTOR_EN_Pin , RESET);
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007ade:	4807      	ldr	r0, [pc, #28]	@ (8007afc <DIS_motors+0x30>)
 8007ae0:	f004 faac 	bl	800c03c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTS_DEN_GPIO_Port , BTS_DEN_Pin , RESET);
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007aea:	4804      	ldr	r0, [pc, #16]	@ (8007afc <DIS_motors+0x30>)
 8007aec:	f004 faa6 	bl	800c03c <HAL_GPIO_WritePin>

	DIS_DMA_IT();
 8007af0:	f001 fd54 	bl	800959c <DIS_DMA_IT>
}
 8007af4:	bf00      	nop
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200018f8 	.word	0x200018f8
 8007afc:	40020c00 	.word	0x40020c00

08007b00 <rad_to_ccr>:

//convert radiant to Counter Count Reset
uint32_t rad_to_ccr(float32_t rad ){
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	ed87 0a01 	vstr	s0, [r7, #4]
 return	((MAX_CCR - MIN_CCR)/(MAX_RAD - MIN_RAD))*rad + MIN_CCR	;
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7f8 fd1c 	bl	8000548 <__aeabi_f2d>
 8007b10:	a30d      	add	r3, pc, #52	@ (adr r3, 8007b48 <rad_to_ccr+0x48>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	a30b      	add	r3, pc, #44	@ (adr r3, 8007b50 <rad_to_ccr+0x50>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fbb0 	bl	800028c <__adddf3>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f9 f838 	bl	8000ba8 <__aeabi_d2uiz>
 8007b38:	4603      	mov	r3, r0

}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	f3af 8000 	nop.w
 8007b48:	7df50802 	.word	0x7df50802
 8007b4c:	409e0482 	.word	0x409e0482
 8007b50:	00000000 	.word	0x00000000
 8007b54:	40977000 	.word	0x40977000

08007b58 <platform_write>:
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}

//lsm6dso32x platform read/write functions
int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	72fb      	strb	r3, [r7, #11]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write(handle, LSM6DSO32X_I2C_ADD_L, Reg,I2C_MEMADD_SIZE_8BIT, (uint8_t*) Bufp, len, 1000);
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2301      	movs	r3, #1
 8007b80:	21d5      	movs	r1, #213	@ 0xd5
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f004 ff00 	bl	800c988 <HAL_I2C_Mem_Write>
 8007b88:	4603      	mov	r3, r0

}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <platform_read>:

int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b088      	sub	sp, #32
 8007b96:	af04      	add	r7, sp, #16
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	72fb      	strb	r3, [r7, #11]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(handle, LSM6DSO32X_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	21d5      	movs	r1, #213	@ 0xd5
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f004 ffdd 	bl	800cb7c <HAL_I2C_Mem_Read>
 8007bc2:	4603      	mov	r3, r0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <adc_to_rad>:

//converts adc value to radians
float32_t adc_to_rad(Joint * J){
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	float32_t slope = (J->MAX_rad_pos - J->MIN_rad_pos)/(float32_t)(J->MAX_ADC_pos - J->MIN_ADC_pos);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	ed93 7a05 	vldr	s14, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007be0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	89db      	ldrh	r3, [r3, #14]
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8a1b      	ldrh	r3, [r3, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bfc:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t offset = J->MAX_rad_pos - slope*J->MAX_ADC_pos;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	ed93 7a05 	vldr	s14, [r3, #20]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	89db      	ldrh	r3, [r3, #14]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c1e:	edc7 7a02 	vstr	s15, [r7, #8]

	return slope * adc_pos_filtered[J->JointNumber] + offset;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <adc_to_rad+0x88>)
 8007c2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c42:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007c46:	eeb0 0a67 	vmov.f32	s0, s15
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	20000a38 	.word	0x20000a38

08007c58 <PublishServos>:

//publish the obtained kinematic model values to the servos
void PublishServos(){
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
	for(int j = 0 ; j < 12 ; j++){
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
 8007c62:	e029      	b.n	8007cb8 <PublishServos+0x60>
		WriteJoint(&J[j] , rad_to_ccr(HLK_cmd[J[j].index] + J[j].Offset));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	222c      	movs	r2, #44	@ 0x2c
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	4a16      	ldr	r2, [pc, #88]	@ (8007cc8 <PublishServos+0x70>)
 8007c6e:	189c      	adds	r4, r3, r2
 8007c70:	4a15      	ldr	r2, [pc, #84]	@ (8007cc8 <PublishServos+0x70>)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	212c      	movs	r1, #44	@ 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3329      	adds	r3, #41	@ 0x29
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	4a12      	ldr	r2, [pc, #72]	@ (8007ccc <PublishServos+0x74>)
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	ed93 7a00 	vldr	s14, [r3]
 8007c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8007cc8 <PublishServos+0x70>)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	212c      	movs	r1, #44	@ 0x2c
 8007c90:	fb01 f303 	mul.w	r3, r1, r3
 8007c94:	4413      	add	r3, r2
 8007c96:	3324      	adds	r3, #36	@ 0x24
 8007c98:	edd3 7a00 	vldr	s15, [r3]
 8007c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca4:	f7ff ff2c 	bl	8007b00 <rad_to_ccr>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4619      	mov	r1, r3
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fdb1 	bl	8008814 <WriteJoint>
	for(int j = 0 ; j < 12 ; j++){
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	607b      	str	r3, [r7, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b0b      	cmp	r3, #11
 8007cbc:	ddd2      	ble.n	8007c64 <PublishServos+0xc>
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd90      	pop	{r4, r7, pc}
 8007cc8:	200016e8 	.word	0x200016e8
 8007ccc:	2000193c 	.word	0x2000193c

08007cd0 <ReadServos>:

//get potentiometers feedback
void ReadServos(){
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 12 ; i++){
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e01b      	b.n	8007d14 <ReadServos+0x44>
		HLK_fb[J[i].index] = adc_to_rad(&J[i]);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	222c      	movs	r2, #44	@ 0x2c
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8007d24 <ReadServos+0x54>)
 8007ce6:	441a      	add	r2, r3
 8007ce8:	490e      	ldr	r1, [pc, #56]	@ (8007d24 <ReadServos+0x54>)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	202c      	movs	r0, #44	@ 0x2c
 8007cee:	fb00 f303 	mul.w	r3, r0, r3
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3329      	adds	r3, #41	@ 0x29
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7ff ff66 	bl	8007bcc <adc_to_rad>
 8007d00:	eef0 7a40 	vmov.f32	s15, s0
 8007d04:	4a08      	ldr	r2, [pc, #32]	@ (8007d28 <ReadServos+0x58>)
 8007d06:	00a3      	lsls	r3, r4, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 12 ; i++){
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3301      	adds	r3, #1
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b0b      	cmp	r3, #11
 8007d18:	dde0      	ble.n	8007cdc <ReadServos+0xc>
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd90      	pop	{r4, r7, pc}
 8007d24:	200016e8 	.word	0x200016e8
 8007d28:	2000197c 	.word	0x2000197c

08007d2c <Joints_init>:

//init of all the joints and setting up the indexes/parameters
void Joints_init(Joint * J){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	//Joint 0
	J[0].Timer = TIM_J0 ;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4aac      	ldr	r2, [pc, #688]	@ (8007fe8 <Joints_init+0x2bc>)
 8007d38:	605a      	str	r2, [r3, #4]
	J[0].timerNum = TIMNUM_J0;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	721a      	strb	r2, [r3, #8]
	J[0].TimerChannel = TIM_CH_J0;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	725a      	strb	r2, [r3, #9]
	J[0].ADCNum = ADC_J0;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	72da      	strb	r2, [r3, #11]
	J[0].ADCChannel = ADC_BUF_RANK_J0;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	729a      	strb	r2, [r3, #10]
	J[0].MuxChannel = CURRFB_J0 ;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2204      	movs	r2, #4
 8007d56:	731a      	strb	r2, [r3, #12]
	J[0].Offset = J0_OFFSET;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4aa4      	ldr	r2, [pc, #656]	@ (8007fec <Joints_init+0x2c0>)
 8007d5c:	625a      	str	r2, [r3, #36]	@ 0x24
	J[0].index = 0;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[0].MIN_ADC_pos = MIN_ADC_J0;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8007d6c:	821a      	strh	r2, [r3, #16]
	J[0].MAX_ADC_pos = MAX_ADC_J0;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007d74:	81da      	strh	r2, [r3, #14]
	J[0].MIN_rad_pos = MIN_RAD_J0;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a9d      	ldr	r2, [pc, #628]	@ (8007ff0 <Joints_init+0x2c4>)
 8007d7a:	619a      	str	r2, [r3, #24]
	J[0].MAX_rad_pos = MAX_RAD_J0;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a9d      	ldr	r2, [pc, #628]	@ (8007ff4 <Joints_init+0x2c8>)
 8007d80:	615a      	str	r2, [r3, #20]
	J[0].SIT_DOWN_rad_pos = MIN_RAD_J0;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a9a      	ldr	r2, [pc, #616]	@ (8007ff0 <Joints_init+0x2c4>)
 8007d86:	61da      	str	r2, [r3, #28]
	J[0].HOME_rad_pos = PI/2.0f;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a9b      	ldr	r2, [pc, #620]	@ (8007ff8 <Joints_init+0x2cc>)
 8007d8c:	621a      	str	r2, [r3, #32]

	//Joint 1
	J[1].Timer = TIM_J1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	332c      	adds	r3, #44	@ 0x2c
 8007d92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007d96:	605a      	str	r2, [r3, #4]
	J[1].timerNum = TIMNUM_J1;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	332c      	adds	r3, #44	@ 0x2c
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	721a      	strb	r2, [r3, #8]
	J[1].TimerChannel = TIM_CH_J1;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	332c      	adds	r3, #44	@ 0x2c
 8007da4:	2201      	movs	r2, #1
 8007da6:	725a      	strb	r2, [r3, #9]
	J[1].ADCNum = ADC_J1;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	332c      	adds	r3, #44	@ 0x2c
 8007dac:	2201      	movs	r2, #1
 8007dae:	72da      	strb	r2, [r3, #11]
	J[1].ADCChannel = ADC_BUF_RANK_J1;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	332c      	adds	r3, #44	@ 0x2c
 8007db4:	2201      	movs	r2, #1
 8007db6:	729a      	strb	r2, [r3, #10]
	J[1].MuxChannel = CURRFB_J1 ;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	332c      	adds	r3, #44	@ 0x2c
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	731a      	strb	r2, [r3, #12]
	J[1].Offset	= J1_OFFSET;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	332c      	adds	r3, #44	@ 0x2c
 8007dc4:	4a8d      	ldr	r2, [pc, #564]	@ (8007ffc <Joints_init+0x2d0>)
 8007dc6:	625a      	str	r2, [r3, #36]	@ 0x24
	J[1].index = 4;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	332c      	adds	r3, #44	@ 0x2c
 8007dcc:	2204      	movs	r2, #4
 8007dce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[1].MIN_ADC_pos = MIN_ADC_J1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	332c      	adds	r3, #44	@ 0x2c
 8007dd6:	f640 0234 	movw	r2, #2100	@ 0x834
 8007dda:	821a      	strh	r2, [r3, #16]
	J[1].MAX_ADC_pos = MAX_ADC_J1;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	332c      	adds	r3, #44	@ 0x2c
 8007de0:	f240 5214 	movw	r2, #1300	@ 0x514
 8007de4:	81da      	strh	r2, [r3, #14]
	J[1].MIN_rad_pos = MIN_RAD_J1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	332c      	adds	r3, #44	@ 0x2c
 8007dea:	4a85      	ldr	r2, [pc, #532]	@ (8008000 <Joints_init+0x2d4>)
 8007dec:	619a      	str	r2, [r3, #24]
	J[1].MAX_rad_pos = MAX_RAD_J1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	332c      	adds	r3, #44	@ 0x2c
 8007df2:	4a84      	ldr	r2, [pc, #528]	@ (8008004 <Joints_init+0x2d8>)
 8007df4:	615a      	str	r2, [r3, #20]
	J[1].SIT_DOWN_rad_pos = MIN_RAD_J1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	332c      	adds	r3, #44	@ 0x2c
 8007dfa:	4a81      	ldr	r2, [pc, #516]	@ (8008000 <Joints_init+0x2d4>)
 8007dfc:	61da      	str	r2, [r3, #28]
	J[1].HOME_rad_pos = 2.81026912;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	332c      	adds	r3, #44	@ 0x2c
 8007e02:	4a81      	ldr	r2, [pc, #516]	@ (8008008 <Joints_init+0x2dc>)
 8007e04:	621a      	str	r2, [r3, #32]

	//Joint 2
	J[2].Timer = TIM_J2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3358      	adds	r3, #88	@ 0x58
 8007e0a:	4a77      	ldr	r2, [pc, #476]	@ (8007fe8 <Joints_init+0x2bc>)
 8007e0c:	605a      	str	r2, [r3, #4]
	J[2].timerNum = TIMNUM_J2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3358      	adds	r3, #88	@ 0x58
 8007e12:	2204      	movs	r2, #4
 8007e14:	721a      	strb	r2, [r3, #8]
	J[2].TimerChannel = TIM_CH_J2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3358      	adds	r3, #88	@ 0x58
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	725a      	strb	r2, [r3, #9]
	J[2].ADCNum = ADC_J2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3358      	adds	r3, #88	@ 0x58
 8007e22:	2200      	movs	r2, #0
 8007e24:	72da      	strb	r2, [r3, #11]
	J[2].ADCChannel = ADC_BUF_RANK_J2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3358      	adds	r3, #88	@ 0x58
 8007e2a:	2205      	movs	r2, #5
 8007e2c:	729a      	strb	r2, [r3, #10]
	J[2].MuxChannel = CURRFB_J2 ;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3358      	adds	r3, #88	@ 0x58
 8007e32:	2201      	movs	r2, #1
 8007e34:	731a      	strb	r2, [r3, #12]
	J[2].Offset	= J2_OFFSET;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3358      	adds	r3, #88	@ 0x58
 8007e3a:	4a74      	ldr	r2, [pc, #464]	@ (800800c <Joints_init+0x2e0>)
 8007e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	J[2].index = 8;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3358      	adds	r3, #88	@ 0x58
 8007e42:	2208      	movs	r2, #8
 8007e44:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[2].MIN_ADC_pos = MIN_ADC_J2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3358      	adds	r3, #88	@ 0x58
 8007e4c:	f640 22be 	movw	r2, #2750	@ 0xabe
 8007e50:	821a      	strh	r2, [r3, #16]
	J[2].MAX_ADC_pos = MAX_ADC_J2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3358      	adds	r3, #88	@ 0x58
 8007e56:	f240 3239 	movw	r2, #825	@ 0x339
 8007e5a:	81da      	strh	r2, [r3, #14]
	J[2].MIN_rad_pos = MIN_RAD_J2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3358      	adds	r3, #88	@ 0x58
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	619a      	str	r2, [r3, #24]
	J[2].MAX_rad_pos = MAX_RAD_J2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3358      	adds	r3, #88	@ 0x58
 8007e6a:	4a69      	ldr	r2, [pc, #420]	@ (8008010 <Joints_init+0x2e4>)
 8007e6c:	615a      	str	r2, [r3, #20]
	J[2].SIT_DOWN_rad_pos = PI-0.1f;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3358      	adds	r3, #88	@ 0x58
 8007e72:	4a68      	ldr	r2, [pc, #416]	@ (8008014 <Joints_init+0x2e8>)
 8007e74:	61da      	str	r2, [r3, #28]
	J[2].HOME_rad_pos = PI/2.0f;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3358      	adds	r3, #88	@ 0x58
 8007e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8007ff8 <Joints_init+0x2cc>)
 8007e7c:	621a      	str	r2, [r3, #32]

	//Joint 3
	J[3].Timer = TIM_J3;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3384      	adds	r3, #132	@ 0x84
 8007e82:	4a65      	ldr	r2, [pc, #404]	@ (8008018 <Joints_init+0x2ec>)
 8007e84:	605a      	str	r2, [r3, #4]
	J[3].timerNum = TIMNUM_J3;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3384      	adds	r3, #132	@ 0x84
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	721a      	strb	r2, [r3, #8]
	J[3].TimerChannel = TIM_CH_J3;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3384      	adds	r3, #132	@ 0x84
 8007e92:	2201      	movs	r2, #1
 8007e94:	725a      	strb	r2, [r3, #9]
	J[3].ADCNum = ADC_J3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3384      	adds	r3, #132	@ 0x84
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	72da      	strb	r2, [r3, #11]
	J[3].ADCChannel = ADC_BUF_RANK_J3;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3384      	adds	r3, #132	@ 0x84
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	729a      	strb	r2, [r3, #10]
	J[3].MuxChannel = CURRFB_J3 ;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3384      	adds	r3, #132	@ 0x84
 8007eaa:	2203      	movs	r2, #3
 8007eac:	731a      	strb	r2, [r3, #12]
	J[3].Offset	= J3_OFFSET;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3384      	adds	r3, #132	@ 0x84
 8007eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800801c <Joints_init+0x2f0>)
 8007eb4:	625a      	str	r2, [r3, #36]	@ 0x24
	J[3].index = 1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3384      	adds	r3, #132	@ 0x84
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[3].MIN_ADC_pos = MIN_ADC_J3;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3384      	adds	r3, #132	@ 0x84
 8007ec4:	f240 5246 	movw	r2, #1350	@ 0x546
 8007ec8:	821a      	strh	r2, [r3, #16]
	J[3].MAX_ADC_pos = MAX_ADC_J3;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3384      	adds	r3, #132	@ 0x84
 8007ece:	f240 521c 	movw	r2, #1308	@ 0x51c
 8007ed2:	81da      	strh	r2, [r3, #14]
	J[3].MIN_rad_pos = MIN_RAD_J3;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3384      	adds	r3, #132	@ 0x84
 8007ed8:	4a51      	ldr	r2, [pc, #324]	@ (8008020 <Joints_init+0x2f4>)
 8007eda:	619a      	str	r2, [r3, #24]
	J[3].MAX_rad_pos = MAX_RAD_J3;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3384      	adds	r3, #132	@ 0x84
 8007ee0:	4a50      	ldr	r2, [pc, #320]	@ (8008024 <Joints_init+0x2f8>)
 8007ee2:	615a      	str	r2, [r3, #20]
	J[3].SIT_DOWN_rad_pos = MIN_RAD_J3;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3384      	adds	r3, #132	@ 0x84
 8007ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8008020 <Joints_init+0x2f4>)
 8007eea:	61da      	str	r2, [r3, #28]
	J[3].HOME_rad_pos = PI/2.0f;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3384      	adds	r3, #132	@ 0x84
 8007ef0:	4a41      	ldr	r2, [pc, #260]	@ (8007ff8 <Joints_init+0x2cc>)
 8007ef2:	621a      	str	r2, [r3, #32]

	//Joint 4
	J[4].Timer = TIM_J4;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	33b0      	adds	r3, #176	@ 0xb0
 8007ef8:	4a47      	ldr	r2, [pc, #284]	@ (8008018 <Joints_init+0x2ec>)
 8007efa:	605a      	str	r2, [r3, #4]
	J[4].timerNum = TIMNUM_J4;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	33b0      	adds	r3, #176	@ 0xb0
 8007f00:	2208      	movs	r2, #8
 8007f02:	721a      	strb	r2, [r3, #8]
	J[4].TimerChannel = TIM_CH_J4;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	33b0      	adds	r3, #176	@ 0xb0
 8007f08:	2202      	movs	r2, #2
 8007f0a:	725a      	strb	r2, [r3, #9]
	J[4].ADCNum = ADC_J4;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	33b0      	adds	r3, #176	@ 0xb0
 8007f10:	2200      	movs	r2, #0
 8007f12:	72da      	strb	r2, [r3, #11]
	J[4].ADCChannel = ADC_BUF_RANK_J4;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	33b0      	adds	r3, #176	@ 0xb0
 8007f18:	2201      	movs	r2, #1
 8007f1a:	729a      	strb	r2, [r3, #10]
	J[4].MuxChannel = CURRFB_J4 ;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	33b0      	adds	r3, #176	@ 0xb0
 8007f20:	2208      	movs	r2, #8
 8007f22:	731a      	strb	r2, [r3, #12]
	J[4].Offset	= J4_OFFSET;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	33b0      	adds	r3, #176	@ 0xb0
 8007f28:	4a3f      	ldr	r2, [pc, #252]	@ (8008028 <Joints_init+0x2fc>)
 8007f2a:	625a      	str	r2, [r3, #36]	@ 0x24
	J[4].index = 5;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	33b0      	adds	r3, #176	@ 0xb0
 8007f30:	2205      	movs	r2, #5
 8007f32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[4].MIN_ADC_pos = MIN_ADC_J4;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	33b0      	adds	r3, #176	@ 0xb0
 8007f3a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007f3e:	821a      	strh	r2, [r3, #16]
	J[4].MAX_ADC_pos = MAX_ADC_J4;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	33b0      	adds	r3, #176	@ 0xb0
 8007f44:	f240 42f6 	movw	r2, #1270	@ 0x4f6
 8007f48:	81da      	strh	r2, [r3, #14]
	J[4].MIN_rad_pos = MIN_RAD_J4;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	33b0      	adds	r3, #176	@ 0xb0
 8007f4e:	4a37      	ldr	r2, [pc, #220]	@ (800802c <Joints_init+0x300>)
 8007f50:	619a      	str	r2, [r3, #24]
	J[4].MAX_rad_pos = MAX_RAD_J4;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	33b0      	adds	r3, #176	@ 0xb0
 8007f56:	4a36      	ldr	r2, [pc, #216]	@ (8008030 <Joints_init+0x304>)
 8007f58:	615a      	str	r2, [r3, #20]
	J[4].SIT_DOWN_rad_pos = MIN_RAD_J4;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	33b0      	adds	r3, #176	@ 0xb0
 8007f5e:	4a33      	ldr	r2, [pc, #204]	@ (800802c <Joints_init+0x300>)
 8007f60:	61da      	str	r2, [r3, #28]
	J[4].HOME_rad_pos = 2.81026912f;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	33b0      	adds	r3, #176	@ 0xb0
 8007f66:	4a28      	ldr	r2, [pc, #160]	@ (8008008 <Joints_init+0x2dc>)
 8007f68:	621a      	str	r2, [r3, #32]

	//Joint 5
	J[5].Timer = TIM_J5;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	33dc      	adds	r3, #220	@ 0xdc
 8007f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007fe8 <Joints_init+0x2bc>)
 8007f70:	605a      	str	r2, [r3, #4]
	J[5].timerNum = TIMNUM_J5;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	33dc      	adds	r3, #220	@ 0xdc
 8007f76:	2204      	movs	r2, #4
 8007f78:	721a      	strb	r2, [r3, #8]
	J[5].TimerChannel = TIM_CH_J5;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	33dc      	adds	r3, #220	@ 0xdc
 8007f7e:	2202      	movs	r2, #2
 8007f80:	725a      	strb	r2, [r3, #9]
	J[5].ADCNum = ADC_J5;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	33dc      	adds	r3, #220	@ 0xdc
 8007f86:	2200      	movs	r2, #0
 8007f88:	72da      	strb	r2, [r3, #11]
	J[5].ADCChannel = ADC_BUF_RANK_J5;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	33dc      	adds	r3, #220	@ 0xdc
 8007f8e:	2203      	movs	r2, #3
 8007f90:	729a      	strb	r2, [r3, #10]
	J[5].MuxChannel = CURRFB_J5 ;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	33dc      	adds	r3, #220	@ 0xdc
 8007f96:	2206      	movs	r2, #6
 8007f98:	731a      	strb	r2, [r3, #12]
	J[5].Offset	= J5_OFFSET;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	33dc      	adds	r3, #220	@ 0xdc
 8007f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800800c <Joints_init+0x2e0>)
 8007fa0:	625a      	str	r2, [r3, #36]	@ 0x24
	J[5].index = 9;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	33dc      	adds	r3, #220	@ 0xdc
 8007fa6:	2209      	movs	r2, #9
 8007fa8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[5].MIN_ADC_pos = MIN_ADC_J5;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	33dc      	adds	r3, #220	@ 0xdc
 8007fb0:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 8007fb4:	821a      	strh	r2, [r3, #16]
	J[5].MAX_ADC_pos = MAX_ADC_J5;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	33dc      	adds	r3, #220	@ 0xdc
 8007fba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007fbe:	81da      	strh	r2, [r3, #14]
	J[5].MIN_rad_pos = MIN_RAD_J5;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	33dc      	adds	r3, #220	@ 0xdc
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	619a      	str	r2, [r3, #24]
	J[5].MAX_rad_pos = MAX_RAD_J5;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	33dc      	adds	r3, #220	@ 0xdc
 8007fce:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <Joints_init+0x2e4>)
 8007fd0:	615a      	str	r2, [r3, #20]
	J[5].SIT_DOWN_rad_pos = PI-0.1f;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	33dc      	adds	r3, #220	@ 0xdc
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008014 <Joints_init+0x2e8>)
 8007fd8:	61da      	str	r2, [r3, #28]
	J[5].HOME_rad_pos = PI/2.0f;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	33dc      	adds	r3, #220	@ 0xdc
 8007fde:	4a06      	ldr	r2, [pc, #24]	@ (8007ff8 <Joints_init+0x2cc>)
 8007fe0:	621a      	str	r2, [r3, #32]

	//Joint 6
	J[6].Timer = TIM_J6;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	e026      	b.n	8008034 <Joints_init+0x308>
 8007fe6:	bf00      	nop
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	3e99999a 	.word	0x3e99999a
 8007ff0:	3fd6b1c4 	.word	0x3fd6b1c4
 8007ff4:	3fed42c4 	.word	0x3fed42c4
 8007ff8:	3fc90fdb 	.word	0x3fc90fdb
 8007ffc:	bfb33333 	.word	0xbfb33333
 8008000:	4034068e 	.word	0x4034068e
 8008004:	40779a6b 	.word	0x40779a6b
 8008008:	4033db73 	.word	0x4033db73
 800800c:	3f19999a 	.word	0x3f19999a
 8008010:	40490fdb 	.word	0x40490fdb
 8008014:	4042a975 	.word	0x4042a975
 8008018:	40000400 	.word	0x40000400
 800801c:	be4ccccd 	.word	0xbe4ccccd
 8008020:	3fbb6ae8 	.word	0x3fbb6ae8
 8008024:	3fa4dd2f 	.word	0x3fa4dd2f
 8008028:	bfc00000 	.word	0xbfc00000
 800802c:	4037e426 	.word	0x4037e426
 8008030:	407a4f76 	.word	0x407a4f76
 8008034:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008038:	4ab8      	ldr	r2, [pc, #736]	@ (800831c <Joints_init+0x5f0>)
 800803a:	605a      	str	r2, [r3, #4]
	J[6].timerNum = TIMNUM_J6;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008042:	2201      	movs	r2, #1
 8008044:	721a      	strb	r2, [r3, #8]
	J[6].TimerChannel = TIM_CH_J6;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800804c:	2202      	movs	r2, #2
 800804e:	725a      	strb	r2, [r3, #9]
	J[6].ADCNum = ADC_J6;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008056:	2201      	movs	r2, #1
 8008058:	72da      	strb	r2, [r3, #11]
	J[6].ADCChannel = ADC_BUF_RANK_J6;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008060:	2205      	movs	r2, #5
 8008062:	729a      	strb	r2, [r3, #10]
	J[6].MuxChannel = CURRFB_J6 ;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800806a:	220a      	movs	r2, #10
 800806c:	731a      	strb	r2, [r3, #12]
	J[6].Offset	= J6_OFFSET;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	625a      	str	r2, [r3, #36]	@ 0x24
	J[6].index = 2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[6].MIN_ADC_pos = MIN_ADC_J6;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800808c:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8008090:	821a      	strh	r2, [r3, #16]
	J[6].MAX_ADC_pos = MAX_ADC_J6;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008098:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800809c:	81da      	strh	r2, [r3, #14]
	J[6].MIN_rad_pos = MIN_RAD_J6;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80080a4:	4a9e      	ldr	r2, [pc, #632]	@ (8008320 <Joints_init+0x5f4>)
 80080a6:	619a      	str	r2, [r3, #24]
	J[6].MAX_rad_pos = MAX_RAD_J6;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80080ae:	4a9d      	ldr	r2, [pc, #628]	@ (8008324 <Joints_init+0x5f8>)
 80080b0:	615a      	str	r2, [r3, #20]
	J[6].SIT_DOWN_rad_pos = MIN_RAD_J6;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80080b8:	4a99      	ldr	r2, [pc, #612]	@ (8008320 <Joints_init+0x5f4>)
 80080ba:	61da      	str	r2, [r3, #28]
	J[6].HOME_rad_pos = PI/2.0f;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80080c2:	4a99      	ldr	r2, [pc, #612]	@ (8008328 <Joints_init+0x5fc>)
 80080c4:	621a      	str	r2, [r3, #32]

	//Joint 7
	J[7].Timer = TIM_J7;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080cc:	4a93      	ldr	r2, [pc, #588]	@ (800831c <Joints_init+0x5f0>)
 80080ce:	605a      	str	r2, [r3, #4]
	J[7].timerNum = TIMNUM_J7;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080d6:	2201      	movs	r2, #1
 80080d8:	721a      	strb	r2, [r3, #8]
	J[7].TimerChannel = TIM_CH_J7;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080e0:	2203      	movs	r2, #3
 80080e2:	725a      	strb	r2, [r3, #9]
	J[7].ADCNum = ADC_J7;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080ea:	2200      	movs	r2, #0
 80080ec:	72da      	strb	r2, [r3, #11]
	J[7].ADCChannel = ADC_BUF_RANK_J7;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080f4:	2200      	movs	r2, #0
 80080f6:	729a      	strb	r2, [r3, #10]
	J[7].MuxChannel = CURRFB_J7 ;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80080fe:	2207      	movs	r2, #7
 8008100:	731a      	strb	r2, [r3, #12]
	J[7].Offset	= J7_OFFSET;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8008108:	4a88      	ldr	r2, [pc, #544]	@ (800832c <Joints_init+0x600>)
 800810a:	625a      	str	r2, [r3, #36]	@ 0x24
	J[7].index = 6;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8008112:	2206      	movs	r2, #6
 8008114:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[7].MIN_ADC_pos = MIN_ADC_J7;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800811e:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8008122:	821a      	strh	r2, [r3, #16]
	J[7].MAX_ADC_pos = MAX_ADC_J7;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800812a:	f640 2228 	movw	r2, #2600	@ 0xa28
 800812e:	81da      	strh	r2, [r3, #14]
	J[7].MIN_rad_pos = MIN_RAD_J7;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8008136:	4a7e      	ldr	r2, [pc, #504]	@ (8008330 <Joints_init+0x604>)
 8008138:	619a      	str	r2, [r3, #24]
	J[7].MAX_rad_pos = MAX_RAD_J7;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8008140:	4a7c      	ldr	r2, [pc, #496]	@ (8008334 <Joints_init+0x608>)
 8008142:	615a      	str	r2, [r3, #20]
	J[7].SIT_DOWN_rad_pos = MIN_RAD_J7;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800814a:	4a79      	ldr	r2, [pc, #484]	@ (8008330 <Joints_init+0x604>)
 800814c:	61da      	str	r2, [r3, #28]
	J[7].HOME_rad_pos = 0.331323624;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8008154:	4a78      	ldr	r2, [pc, #480]	@ (8008338 <Joints_init+0x60c>)
 8008156:	621a      	str	r2, [r3, #32]

	//Joint 8
	J[8].Timer = TIM_J8;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800815e:	4a77      	ldr	r2, [pc, #476]	@ (800833c <Joints_init+0x610>)
 8008160:	605a      	str	r2, [r3, #4]
	J[8].timerNum = TIMNUM_J8;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008168:	2204      	movs	r2, #4
 800816a:	721a      	strb	r2, [r3, #8]
	J[8].TimerChannel = TIM_CH_J8;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008172:	2203      	movs	r2, #3
 8008174:	725a      	strb	r2, [r3, #9]
	J[8].ADCNum = ADC_J8;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800817c:	2200      	movs	r2, #0
 800817e:	72da      	strb	r2, [r3, #11]
	J[8].ADCChannel = ADC_BUF_RANK_J8;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008186:	2202      	movs	r2, #2
 8008188:	729a      	strb	r2, [r3, #10]
	J[8].MuxChannel = CURRFB_J8 ;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008190:	2205      	movs	r2, #5
 8008192:	731a      	strb	r2, [r3, #12]
	J[8].Offset	= J8_OFFSET;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800819a:	4a69      	ldr	r2, [pc, #420]	@ (8008340 <Joints_init+0x614>)
 800819c:	625a      	str	r2, [r3, #36]	@ 0x24
	J[8].index = 10;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081a4:	220a      	movs	r2, #10
 80081a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[8].MIN_ADC_pos = MIN_ADC_J8;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081b0:	f240 32ca 	movw	r2, #970	@ 0x3ca
 80081b4:	821a      	strh	r2, [r3, #16]
	J[8].MAX_ADC_pos = MAX_ADC_J8;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081bc:	f640 322c 	movw	r2, #2860	@ 0xb2c
 80081c0:	81da      	strh	r2, [r3, #14]
	J[8].MIN_rad_pos = MIN_RAD_J8;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008344 <Joints_init+0x618>)
 80081ca:	619a      	str	r2, [r3, #24]
	J[8].MAX_rad_pos = MAX_RAD_J8;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	615a      	str	r2, [r3, #20]
	J[8].SIT_DOWN_rad_pos = 0.1f;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081de:	4a5a      	ldr	r2, [pc, #360]	@ (8008348 <Joints_init+0x61c>)
 80081e0:	61da      	str	r2, [r3, #28]
	J[8].HOME_rad_pos = PI/2.0f;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80081e8:	4a4f      	ldr	r2, [pc, #316]	@ (8008328 <Joints_init+0x5fc>)
 80081ea:	621a      	str	r2, [r3, #32]

	//Joint 9
	J[9].Timer = TIM_J9;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80081f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80081f6:	605a      	str	r2, [r3, #4]
	J[9].timerNum = TIMNUM_J9;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80081fe:	2202      	movs	r2, #2
 8008200:	721a      	strb	r2, [r3, #8]
	J[9].TimerChannel = TIM_CH_J9;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008208:	2202      	movs	r2, #2
 800820a:	725a      	strb	r2, [r3, #9]
	J[9].ADCNum = ADC_J9;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008212:	2201      	movs	r2, #1
 8008214:	72da      	strb	r2, [r3, #11]
	J[9].ADCChannel = ADC_BUF_RANK_J9;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800821c:	2202      	movs	r2, #2
 800821e:	729a      	strb	r2, [r3, #10]
	J[9].MuxChannel = CURRFB_J9 ;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008226:	2209      	movs	r2, #9
 8008228:	731a      	strb	r2, [r3, #12]
	J[9].Offset	= J9_OFFSET;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008230:	4a46      	ldr	r2, [pc, #280]	@ (800834c <Joints_init+0x620>)
 8008232:	625a      	str	r2, [r3, #36]	@ 0x24
	J[9].index = 3;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800823a:	2203      	movs	r2, #3
 800823c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[9].MIN_ADC_pos = MIN_ADC_J9;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008246:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800824a:	821a      	strh	r2, [r3, #16]
	J[9].MAX_ADC_pos = MAX_ADC_J9;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008252:	f240 5246 	movw	r2, #1350	@ 0x546
 8008256:	81da      	strh	r2, [r3, #14]
	J[9].MIN_rad_pos = MIN_RAD_J9;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800825e:	4a3c      	ldr	r2, [pc, #240]	@ (8008350 <Joints_init+0x624>)
 8008260:	619a      	str	r2, [r3, #24]
	J[9].MAX_rad_pos = MAX_RAD_J9;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008268:	4a3a      	ldr	r2, [pc, #232]	@ (8008354 <Joints_init+0x628>)
 800826a:	615a      	str	r2, [r3, #20]
	J[9].SIT_DOWN_rad_pos = MIN_RAD_J9;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008272:	4a37      	ldr	r2, [pc, #220]	@ (8008350 <Joints_init+0x624>)
 8008274:	61da      	str	r2, [r3, #28]
	J[9].HOME_rad_pos = PI/2.0f;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800827c:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <Joints_init+0x5fc>)
 800827e:	621a      	str	r2, [r3, #32]

	//Joint 10
	J[10].Timer = TIM_J10;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008286:	4a25      	ldr	r2, [pc, #148]	@ (800831c <Joints_init+0x5f0>)
 8008288:	605a      	str	r2, [r3, #4]
	J[10].timerNum = TIMNUM_J10;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008290:	2201      	movs	r2, #1
 8008292:	721a      	strb	r2, [r3, #8]
	J[10].TimerChannel = TIM_CH_J10;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800829a:	2204      	movs	r2, #4
 800829c:	725a      	strb	r2, [r3, #9]
	J[10].ADCNum = ADC_J10;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082a4:	2201      	movs	r2, #1
 80082a6:	72da      	strb	r2, [r3, #11]
	J[10].ADCChannel = ADC_BUF_RANK_J10;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082ae:	2200      	movs	r2, #0
 80082b0:	729a      	strb	r2, [r3, #10]
	J[10].MuxChannel = CURRFB_J10 ;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082b8:	220b      	movs	r2, #11
 80082ba:	731a      	strb	r2, [r3, #12]
	J[10].Offset = J10_OFFSET;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082c2:	4a25      	ldr	r2, [pc, #148]	@ (8008358 <Joints_init+0x62c>)
 80082c4:	625a      	str	r2, [r3, #36]	@ 0x24
	J[10].index = 7;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082cc:	2207      	movs	r2, #7
 80082ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[10].MIN_ADC_pos = MIN_ADC_J10;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082d8:	f240 726c 	movw	r2, #1900	@ 0x76c
 80082dc:	821a      	strh	r2, [r3, #16]
	J[10].MAX_ADC_pos = MAX_ADC_J10;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082e4:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 80082e8:	81da      	strh	r2, [r3, #14]
	J[10].MIN_rad_pos = MIN_RAD_J10;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082f0:	4a1a      	ldr	r2, [pc, #104]	@ (800835c <Joints_init+0x630>)
 80082f2:	619a      	str	r2, [r3, #24]
	J[10].MAX_rad_pos = MAX_RAD_J10;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80082fa:	4a19      	ldr	r2, [pc, #100]	@ (8008360 <Joints_init+0x634>)
 80082fc:	615a      	str	r2, [r3, #20]
	J[10].SIT_DOWN_rad_pos = MIN_RAD_J10;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008304:	4a15      	ldr	r2, [pc, #84]	@ (800835c <Joints_init+0x630>)
 8008306:	61da      	str	r2, [r3, #28]
	J[10].HOME_rad_pos = 2.81026912f;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800830e:	4a15      	ldr	r2, [pc, #84]	@ (8008364 <Joints_init+0x638>)
 8008310:	621a      	str	r2, [r3, #32]

	//Joint 11
	J[11].Timer = TIM_J11;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008318:	e026      	b.n	8008368 <Joints_init+0x63c>
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	3fd6b1c4 	.word	0x3fd6b1c4
 8008324:	3fed42c4 	.word	0x3fed42c4
 8008328:	3fc90fdb 	.word	0x3fc90fdb
 800832c:	3fa66666 	.word	0x3fa66666
 8008330:	3e895184 	.word	0x3e895184
 8008334:	bf450481 	.word	0xbf450481
 8008338:	3ea9a340 	.word	0x3ea9a340
 800833c:	40000800 	.word	0x40000800
 8008340:	be4ccccd 	.word	0xbe4ccccd
 8008344:	40490fdb 	.word	0x40490fdb
 8008348:	3dcccccd 	.word	0x3dcccccd
 800834c:	bdcccccd 	.word	0xbdcccccd
 8008350:	3fbb6ae8 	.word	0x3fbb6ae8
 8008354:	3fa4dd2f 	.word	0x3fa4dd2f
 8008358:	bfa66666 	.word	0xbfa66666
 800835c:	402bda51 	.word	0x402bda51
 8008360:	40779a6b 	.word	0x40779a6b
 8008364:	4033db73 	.word	0x4033db73
 8008368:	4a34      	ldr	r2, [pc, #208]	@ (800843c <Joints_init+0x710>)
 800836a:	605a      	str	r2, [r3, #4]
	J[11].timerNum = TIMNUM_J11;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008372:	2201      	movs	r2, #1
 8008374:	721a      	strb	r2, [r3, #8]
	J[11].TimerChannel = TIM_CH_J11;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800837c:	2201      	movs	r2, #1
 800837e:	725a      	strb	r2, [r3, #9]
	J[11].ADCNum = ADC_J11;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008386:	2200      	movs	r2, #0
 8008388:	72da      	strb	r2, [r3, #11]
	J[11].ADCChannel = ADC_BUF_RANK_J11;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008390:	2204      	movs	r2, #4
 8008392:	729a      	strb	r2, [r3, #10]
	J[11].MuxChannel = CURRFB_J11 ;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800839a:	2200      	movs	r2, #0
 800839c:	731a      	strb	r2, [r3, #12]
	J[11].Offset = J11_OFFSET;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083a4:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80083a8:	625a      	str	r2, [r3, #36]	@ 0x24
	J[11].index = 11;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083b0:	220b      	movs	r2, #11
 80083b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	J[11].MIN_ADC_pos = MIN_ADC_J11;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083bc:	f240 322a 	movw	r2, #810	@ 0x32a
 80083c0:	821a      	strh	r2, [r3, #16]
	J[11].MAX_ADC_pos = MAX_ADC_J11;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083c8:	f640 3272 	movw	r2, #2930	@ 0xb72
 80083cc:	81da      	strh	r2, [r3, #14]
	J[11].MIN_rad_pos = MIN_RAD_J11;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <Joints_init+0x714>)
 80083d6:	619a      	str	r2, [r3, #24]
	J[11].MAX_rad_pos = MAX_RAD_J11;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	615a      	str	r2, [r3, #20]
	J[11].SIT_DOWN_rad_pos = 0.1f;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083ea:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <Joints_init+0x718>)
 80083ec:	61da      	str	r2, [r3, #28]
	J[11].HOME_rad_pos = PI/2.0f;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083f4:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <Joints_init+0x71c>)
 80083f6:	621a      	str	r2, [r3, #32]

	for(int j = 0 ; j < N_JOINTS ; j++){
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	e014      	b.n	8008428 <Joints_init+0x6fc>
		J[j].JointNumber = j;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	222c      	movs	r2, #44	@ 0x2c
 8008402:	fb02 f303 	mul.w	r3, r2, r3
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	b2d2      	uxtb	r2, r2
 800840e:	701a      	strb	r2, [r3, #0]
		J[j].enabled = FALSE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	222c      	movs	r2, #44	@ 0x2c
 8008414:	fb02 f303 	mul.w	r3, r2, r3
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4413      	add	r3, r2
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for(int j = 0 ; j < N_JOINTS ; j++){
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3301      	adds	r3, #1
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b0b      	cmp	r3, #11
 800842c:	dde7      	ble.n	80083fe <Joints_init+0x6d2>
	}

	swd_prints("\n ------Joints init done------ \n");
 800842e:	4807      	ldr	r0, [pc, #28]	@ (800844c <Joints_init+0x720>)
 8008430:	f010 f8e6 	bl	8018600 <puts>
}
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40010000 	.word	0x40010000
 8008440:	40490fdb 	.word	0x40490fdb
 8008444:	3dcccccd 	.word	0x3dcccccd
 8008448:	3fc90fdb 	.word	0x3fc90fdb
 800844c:	0801d428 	.word	0x0801d428

08008450 <PID_init>:

void PID_init(){
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
	   //PID instances
	   pid_BodyRx.Kd = (1+PID_RX_K)*PID_RX_KD;
 8008454:	4b12      	ldr	r3, [pc, #72]	@ (80084a0 <PID_init+0x50>)
 8008456:	4a13      	ldr	r2, [pc, #76]	@ (80084a4 <PID_init+0x54>)
 8008458:	621a      	str	r2, [r3, #32]
	   pid_BodyRx.Ki = (1+PID_RX_K)*PID_RX_KI;
 800845a:	4b11      	ldr	r3, [pc, #68]	@ (80084a0 <PID_init+0x50>)
 800845c:	4a11      	ldr	r2, [pc, #68]	@ (80084a4 <PID_init+0x54>)
 800845e:	61da      	str	r2, [r3, #28]
	   pid_BodyRx.Kp = (1+PID_RX_K)*PID_RX_KP;
 8008460:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <PID_init+0x50>)
 8008462:	4a11      	ldr	r2, [pc, #68]	@ (80084a8 <PID_init+0x58>)
 8008464:	619a      	str	r2, [r3, #24]

	   pid_BodyRz.Kd = (1+PID_RZ_K)*PID_RZ_KD;
 8008466:	4b11      	ldr	r3, [pc, #68]	@ (80084ac <PID_init+0x5c>)
 8008468:	4a0e      	ldr	r2, [pc, #56]	@ (80084a4 <PID_init+0x54>)
 800846a:	621a      	str	r2, [r3, #32]
	   pid_BodyRz.Ki = (1+PID_RZ_K)*PID_RZ_KI;
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <PID_init+0x5c>)
 800846e:	4a0d      	ldr	r2, [pc, #52]	@ (80084a4 <PID_init+0x54>)
 8008470:	61da      	str	r2, [r3, #28]
	   pid_BodyRz.Kp = (1+PID_RZ_K)*PID_RZ_KP;
 8008472:	4b0e      	ldr	r3, [pc, #56]	@ (80084ac <PID_init+0x5c>)
 8008474:	4a0c      	ldr	r2, [pc, #48]	@ (80084a8 <PID_init+0x58>)
 8008476:	619a      	str	r2, [r3, #24]

	   pid_BodyRy.Kd = (1+PID_RY_K)*PID_RY_KD;
 8008478:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <PID_init+0x60>)
 800847a:	4a0e      	ldr	r2, [pc, #56]	@ (80084b4 <PID_init+0x64>)
 800847c:	621a      	str	r2, [r3, #32]
	   pid_BodyRy.Ki = (1+PID_RY_K)*PID_RY_KI;
 800847e:	4b0c      	ldr	r3, [pc, #48]	@ (80084b0 <PID_init+0x60>)
 8008480:	4a0d      	ldr	r2, [pc, #52]	@ (80084b8 <PID_init+0x68>)
 8008482:	61da      	str	r2, [r3, #28]
	   pid_BodyRy.Kp = (1+PID_RY_K)*PID_RY_KP;
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <PID_init+0x60>)
 8008486:	4a0b      	ldr	r2, [pc, #44]	@ (80084b4 <PID_init+0x64>)
 8008488:	619a      	str	r2, [r3, #24]

	   //start Balancing controller
	   arm_pid_init_f32(&pid_BodyRx , 1);
 800848a:	2101      	movs	r1, #1
 800848c:	4804      	ldr	r0, [pc, #16]	@ (80084a0 <PID_init+0x50>)
 800848e:	f00e ffbd 	bl	801740c <arm_pid_init_f32>
	   arm_pid_init_f32(&pid_BodyRz , 1);
 8008492:	2101      	movs	r1, #1
 8008494:	4805      	ldr	r0, [pc, #20]	@ (80084ac <PID_init+0x5c>)
 8008496:	f00e ffb9 	bl	801740c <arm_pid_init_f32>
	   //arm_pid_init_f32(&pid_ry , 1);
}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20001a78 	.word	0x20001a78
 80084a4:	3ca3d70a 	.word	0x3ca3d70a
 80084a8:	3cf5c28f 	.word	0x3cf5c28f
 80084ac:	20001a9c 	.word	0x20001a9c
 80084b0:	20001ac0 	.word	0x20001ac0
 80084b4:	3a03126f 	.word	0x3a03126f
 80084b8:	3951b717 	.word	0x3951b717

080084bc <PWM_init>:

void PWM_init(){
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80084c0:	2100      	movs	r1, #0
 80084c2:	4818      	ldr	r0, [pc, #96]	@ (8008524 <PWM_init+0x68>)
 80084c4:	f008 fd34 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80084c8:	2104      	movs	r1, #4
 80084ca:	4816      	ldr	r0, [pc, #88]	@ (8008524 <PWM_init+0x68>)
 80084cc:	f008 fd30 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80084d0:	2108      	movs	r1, #8
 80084d2:	4814      	ldr	r0, [pc, #80]	@ (8008524 <PWM_init+0x68>)
 80084d4:	f008 fd2c 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80084d8:	210c      	movs	r1, #12
 80084da:	4812      	ldr	r0, [pc, #72]	@ (8008524 <PWM_init+0x68>)
 80084dc:	f008 fd28 	bl	8010f30 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80084e0:	2100      	movs	r1, #0
 80084e2:	4811      	ldr	r0, [pc, #68]	@ (8008528 <PWM_init+0x6c>)
 80084e4:	f008 fd24 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80084e8:	2104      	movs	r1, #4
 80084ea:	480f      	ldr	r0, [pc, #60]	@ (8008528 <PWM_init+0x6c>)
 80084ec:	f008 fd20 	bl	8010f30 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80084f0:	2100      	movs	r1, #0
 80084f2:	480e      	ldr	r0, [pc, #56]	@ (800852c <PWM_init+0x70>)
 80084f4:	f008 fd1c 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80084f8:	2104      	movs	r1, #4
 80084fa:	480c      	ldr	r0, [pc, #48]	@ (800852c <PWM_init+0x70>)
 80084fc:	f008 fd18 	bl	8010f30 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008500:	2100      	movs	r1, #0
 8008502:	480b      	ldr	r0, [pc, #44]	@ (8008530 <PWM_init+0x74>)
 8008504:	f008 fd14 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008508:	2104      	movs	r1, #4
 800850a:	4809      	ldr	r0, [pc, #36]	@ (8008530 <PWM_init+0x74>)
 800850c:	f008 fd10 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8008510:	2108      	movs	r1, #8
 8008512:	4807      	ldr	r0, [pc, #28]	@ (8008530 <PWM_init+0x74>)
 8008514:	f008 fd0c 	bl	8010f30 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008518:	210c      	movs	r1, #12
 800851a:	4805      	ldr	r0, [pc, #20]	@ (8008530 <PWM_init+0x74>)
 800851c:	f008 fd08 	bl	8010f30 <HAL_TIM_PWM_Start>
}
 8008520:	bf00      	nop
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000798 	.word	0x20000798
 8008528:	200007e0 	.word	0x200007e0
 800852c:	20000828 	.word	0x20000828
 8008530:	20000870 	.word	0x20000870

08008534 <LSM_init>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
}

//initialize IMU, library function
void LSM_init(){
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af02      	add	r7, sp, #8
	  dev_ctx.write_reg = platform_write;
 800853a:	4b4f      	ldr	r3, [pc, #316]	@ (8008678 <LSM_init+0x144>)
 800853c:	4a4f      	ldr	r2, [pc, #316]	@ (800867c <LSM_init+0x148>)
 800853e:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 8008540:	4b4d      	ldr	r3, [pc, #308]	@ (8008678 <LSM_init+0x144>)
 8008542:	4a4f      	ldr	r2, [pc, #316]	@ (8008680 <LSM_init+0x14c>)
 8008544:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &SENSORS_I2C;
 8008546:	4b4c      	ldr	r3, [pc, #304]	@ (8008678 <LSM_init+0x144>)
 8008548:	4a4e      	ldr	r2, [pc, #312]	@ (8008684 <LSM_init+0x150>)
 800854a:	609a      	str	r2, [r3, #8]

	while(whoamI != LSM6DSO32X_ID){
 800854c:	e01c      	b.n	8008588 <LSM_init+0x54>
	  for(int i = 0 ; i < 100 ; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
 8008552:	e00b      	b.n	800856c <LSM_init+0x38>
	 	  HAL_I2C_Master_Transmit(&SENSORS_I2C , 0x00  , 0x00 , 1 , 1000);
 8008554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	2301      	movs	r3, #1
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	4848      	ldr	r0, [pc, #288]	@ (8008684 <LSM_init+0x150>)
 8008562:	f003 feed 	bl	800c340 <HAL_I2C_Master_Transmit>
	  for(int i = 0 ; i < 100 ; i++)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3301      	adds	r3, #1
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b63      	cmp	r3, #99	@ 0x63
 8008570:	ddf0      	ble.n	8008554 <LSM_init+0x20>
	  I2C1_ClearBusyFlagErratum(&SENSORS_I2C);
 8008572:	4844      	ldr	r0, [pc, #272]	@ (8008684 <LSM_init+0x150>)
 8008574:	f000 fc90 	bl	8008e98 <I2C1_ClearBusyFlagErratum>

		lsm6dso32x_device_id_get(&dev_ctx, &whoamI);
 8008578:	4943      	ldr	r1, [pc, #268]	@ (8008688 <LSM_init+0x154>)
 800857a:	483f      	ldr	r0, [pc, #252]	@ (8008678 <LSM_init+0x144>)
 800857c:	f7fc fa8a 	bl	8004a94 <lsm6dso32x_device_id_get>
		HAL_Delay(500);
 8008580:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008584:	f002 f8e6 	bl	800a754 <HAL_Delay>
	while(whoamI != LSM6DSO32X_ID){
 8008588:	4b3f      	ldr	r3, [pc, #252]	@ (8008688 <LSM_init+0x154>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b69      	cmp	r3, #105	@ 0x69
 800858e:	d1de      	bne.n	800854e <LSM_init+0x1a>
	}

	lsm6dso32x_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8008590:	2101      	movs	r1, #1
 8008592:	4839      	ldr	r0, [pc, #228]	@ (8008678 <LSM_init+0x144>)
 8008594:	f7fc fa8f 	bl	8004ab6 <lsm6dso32x_reset_set>

	uint8_t imu_rst;
	do {
	  lsm6dso32x_reset_get(&dev_ctx, &imu_rst);
 8008598:	1cfb      	adds	r3, r7, #3
 800859a:	4619      	mov	r1, r3
 800859c:	4836      	ldr	r0, [pc, #216]	@ (8008678 <LSM_init+0x144>)
 800859e:	f7fc fab0 	bl	8004b02 <lsm6dso32x_reset_get>
	} while (imu_rst);
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f7      	bne.n	8008598 <LSM_init+0x64>

	/* Disable I3C interface. */
	lsm6dso32x_i3c_disable_set(&dev_ctx, LSM6DSO32X_I3C_DISABLE);
 80085a8:	2180      	movs	r1, #128	@ 0x80
 80085aa:	4833      	ldr	r0, [pc, #204]	@ (8008678 <LSM_init+0x144>)
 80085ac:	f7fc fae8 	bl	8004b80 <lsm6dso32x_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dso32x_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80085b0:	2101      	movs	r1, #1
 80085b2:	4831      	ldr	r0, [pc, #196]	@ (8008678 <LSM_init+0x144>)
 80085b4:	f7fc f992 	bl	80048dc <lsm6dso32x_block_data_update_set>

	/* Set XL Output Data Rate to 666 Hz. */
	lsm6dso32x_xl_data_rate_set(&dev_ctx, LSM6DSO32X_XL_ODR_6667Hz);
 80085b8:	210a      	movs	r1, #10
 80085ba:	482f      	ldr	r0, [pc, #188]	@ (8008678 <LSM_init+0x144>)
 80085bc:	f7fb fe82 	bl	80042c4 <lsm6dso32x_xl_data_rate_set>
	/* Set 16g full XL scale.*/
	lsm6dso32x_xl_full_scale_set(&dev_ctx, xl_fs );
 80085c0:	4b32      	ldr	r3, [pc, #200]	@ (800868c <LSM_init+0x158>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	4619      	mov	r1, r3
 80085c6:	482c      	ldr	r0, [pc, #176]	@ (8008678 <LSM_init+0x144>)
 80085c8:	f7fb fe56 	bl	8004278 <lsm6dso32x_xl_full_scale_set>

	/* Set Gyro output data rate to 666 Hz */
	lsm6dso32x_gy_data_rate_set(&dev_ctx , LSM6DSO32X_GY_ODR_6667Hz);
 80085cc:	210a      	movs	r1, #10
 80085ce:	482a      	ldr	r0, [pc, #168]	@ (8008678 <LSM_init+0x144>)
 80085d0:	f7fc f812 	bl	80045f8 <lsm6dso32x_gy_data_rate_set>

	/* Set 2000 dps full gyro scale */
	lsm6dso32x_gy_full_scale_set(&dev_ctx , gyro_fs );
 80085d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008690 <LSM_init+0x15c>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4619      	mov	r1, r3
 80085da:	4827      	ldr	r0, [pc, #156]	@ (8008678 <LSM_init+0x144>)
 80085dc:	f7fb ffe6 	bl	80045ac <lsm6dso32x_gy_full_scale_set>

	/* Set threshold to 60 degrees. */
	lsm6dso32x_6d_threshold_set(&dev_ctx, LSM6DSO32X_DEG_60);
 80085e0:	2102      	movs	r1, #2
 80085e2:	4825      	ldr	r0, [pc, #148]	@ (8008678 <LSM_init+0x144>)
 80085e4:	f7fc fc8e 	bl	8004f04 <lsm6dso32x_6d_threshold_set>
	lsm6dso32x_mlc_data_rate_set(&dev_ctx , LSM6DSO32X_ODR_PRGS_104Hz);
	lsm6dso32x_steps_reset(&dev_ctx);*/


	//enable single double tap detection
	lsm6dso32x_tap_detection_on_z_set(&dev_ctx, PROPERTY_ENABLE);
 80085e8:	2101      	movs	r1, #1
 80085ea:	4823      	ldr	r0, [pc, #140]	@ (8008678 <LSM_init+0x144>)
 80085ec:	f7fc fb0e 	bl	8004c0c <lsm6dso32x_tap_detection_on_z_set>
	lsm6dso32x_tap_detection_on_y_set(&dev_ctx, PROPERTY_ENABLE);
 80085f0:	2101      	movs	r1, #1
 80085f2:	4821      	ldr	r0, [pc, #132]	@ (8008678 <LSM_init+0x144>)
 80085f4:	f7fc fb30 	bl	8004c58 <lsm6dso32x_tap_detection_on_y_set>
	lsm6dso32x_tap_detection_on_x_set(&dev_ctx, PROPERTY_ENABLE);
 80085f8:	2101      	movs	r1, #1
 80085fa:	481f      	ldr	r0, [pc, #124]	@ (8008678 <LSM_init+0x144>)
 80085fc:	f7fc fb52 	bl	8004ca4 <lsm6dso32x_tap_detection_on_x_set>


	 /* Set Tap threshold to 01000b, therefore the tap threshold
	  * is 500 mg (= 12 * FS_XL / 32 )
	  */
	  lsm6dso32x_tap_threshold_x_set(&dev_ctx, 0x03);
 8008600:	2103      	movs	r1, #3
 8008602:	481d      	ldr	r0, [pc, #116]	@ (8008678 <LSM_init+0x144>)
 8008604:	f7fc fb74 	bl	8004cf0 <lsm6dso32x_tap_threshold_x_set>
	  lsm6dso32x_tap_threshold_y_set(&dev_ctx, 0x03);
 8008608:	2103      	movs	r1, #3
 800860a:	481b      	ldr	r0, [pc, #108]	@ (8008678 <LSM_init+0x144>)
 800860c:	f7fc fb96 	bl	8004d3c <lsm6dso32x_tap_threshold_y_set>
	  lsm6dso32x_tap_threshold_z_set(&dev_ctx, 0x03);
 8008610:	2103      	movs	r1, #3
 8008612:	4819      	ldr	r0, [pc, #100]	@ (8008678 <LSM_init+0x144>)
 8008614:	f7fc fbb8 	bl	8004d88 <lsm6dso32x_tap_threshold_z_set>
	   * the Shock time is 57.36 ms (= 3 * 8 * ODR_XL)
	   *
	   * The QUIET field of the INT_DUR2 register is set to 11b, therefore
	   * the Quiet time is 28.68 ms (= 3 * 4 * ODR_XL)
	   */
	  lsm6dso32x_tap_dur_set(&dev_ctx, 0x06);
 8008618:	2106      	movs	r1, #6
 800861a:	4817      	ldr	r0, [pc, #92]	@ (8008678 <LSM_init+0x144>)
 800861c:	f7fc fc26 	bl	8004e6c <lsm6dso32x_tap_dur_set>
	  lsm6dso32x_tap_quiet_set(&dev_ctx, 0x02);
 8008620:	2102      	movs	r1, #2
 8008622:	4815      	ldr	r0, [pc, #84]	@ (8008678 <LSM_init+0x144>)
 8008624:	f7fc fbfc 	bl	8004e20 <lsm6dso32x_tap_quiet_set>
	  lsm6dso32x_tap_shock_set(&dev_ctx, 0x02);
 8008628:	2102      	movs	r1, #2
 800862a:	4813      	ldr	r0, [pc, #76]	@ (8008678 <LSM_init+0x144>)
 800862c:	f7fc fbd2 	bl	8004dd4 <lsm6dso32x_tap_shock_set>

	  //enable both single and double tap detection
	  lsm6dso32x_tap_mode_set(&dev_ctx, LSM6DSO32X_BOTH_SINGLE_DOUBLE);
 8008630:	2101      	movs	r1, #1
 8008632:	4811      	ldr	r0, [pc, #68]	@ (8008678 <LSM_init+0x144>)
 8008634:	f7fc fc40 	bl	8004eb8 <lsm6dso32x_tap_mode_set>

	  lsm6dso32x_pin_int1_route_get(&dev_ctx, &int1_route);
 8008638:	4916      	ldr	r1, [pc, #88]	@ (8008694 <LSM_init+0x160>)
 800863a:	480f      	ldr	r0, [pc, #60]	@ (8008678 <LSM_init+0x144>)
 800863c:	f7fd f98e 	bl	800595c <lsm6dso32x_pin_int1_route_get>
	  int1_route.single_tap = PROPERTY_ENABLE;
 8008640:	4a14      	ldr	r2, [pc, #80]	@ (8008694 <LSM_init+0x160>)
 8008642:	7853      	ldrb	r3, [r2, #1]
 8008644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008648:	7053      	strb	r3, [r2, #1]
	  int1_route.double_tap = PROPERTY_ENABLE;
 800864a:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <LSM_init+0x160>)
 800864c:	7853      	ldrb	r3, [r2, #1]
 800864e:	f043 0310 	orr.w	r3, r3, #16
 8008652:	7053      	strb	r3, [r2, #1]
      lsm6dso32x_pin_int1_route_set(&dev_ctx, int1_route);
 8008654:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <LSM_init+0x160>)
 8008656:	e893 0006 	ldmia.w	r3, {r1, r2}
 800865a:	4807      	ldr	r0, [pc, #28]	@ (8008678 <LSM_init+0x144>)
 800865c:	f7fc fd50 	bl	8005100 <lsm6dso32x_pin_int1_route_set>

  	/* LPF2 on 6D/4D function selection. */
  	lsm6dso32x_xl_lp2_on_6d_set(&dev_ctx, PROPERTY_ENABLE);
 8008660:	2101      	movs	r1, #1
 8008662:	4805      	ldr	r0, [pc, #20]	@ (8008678 <LSM_init+0x144>)
 8008664:	f7fc fa66 	bl	8004b34 <lsm6dso32x_xl_lp2_on_6d_set>
  	lsm6dso32x_4d_mode_set(&dev_ctx, PROPERTY_ENABLE);
 8008668:	2101      	movs	r1, #1
 800866a:	4803      	ldr	r0, [pc, #12]	@ (8008678 <LSM_init+0x144>)
 800866c:	f7fc fc70 	bl	8004f50 <lsm6dso32x_4d_mode_set>




}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20001a58 	.word	0x20001a58
 800867c:	08007b59 	.word	0x08007b59
 8008680:	08007b93 	.word	0x08007b93
 8008684:	2000066c 	.word	0x2000066c
 8008688:	20001a54 	.word	0x20001a54
 800868c:	200000f0 	.word	0x200000f0
 8008690:	200000f1 	.word	0x200000f1
 8008694:	20001a64 	.word	0x20001a64

08008698 <HMC5883L_init>:

void HMC5883L_init(){
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_0_88GA);
 800869c:	2000      	movs	r0, #0
 800869e:	f7f9 f8f1 	bl	8001884 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 80086a2:	2000      	movs	r0, #0
 80086a4:	f7f9 f948 	bl	8001938 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_75HZ);
 80086a8:	2006      	movs	r0, #6
 80086aa:	f7f9 f960 	bl	800196e <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_8);
 80086ae:	2003      	movs	r0, #3
 80086b0:	f7f9 f97d 	bl	80019ae <HMC5883L_setSamples>

	HMC5883L_calibrate();
 80086b4:	f000 f802 	bl	80086bc <HMC5883L_calibrate>
}
 80086b8:	bf00      	nop
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HMC5883L_calibrate>:

void HMC5883L_calibrate(){
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
	int16_t sample_size = 256;
 80086c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086c6:	80fb      	strh	r3, [r7, #6]
	int32_t magx = 0, magy = 0 , magz = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i < sample_size ; i++){
 80086d4:	2300      	movs	r3, #0
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	e019      	b.n	800870e <HMC5883L_calibrate+0x52>
		get_magn();
 80086da:	f000 f9cd 	bl	8008a78 <get_magn>
		magx += data_raw_magn[0];
 80086de:	4b1d      	ldr	r3, [pc, #116]	@ (8008754 <HMC5883L_calibrate+0x98>)
 80086e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e4:	461a      	mov	r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
		magy += data_raw_magn[1];
 80086ec:	4b19      	ldr	r3, [pc, #100]	@ (8008754 <HMC5883L_calibrate+0x98>)
 80086ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80086f2:	461a      	mov	r2, r3
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4413      	add	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
		magz += data_raw_magn[2];
 80086fa:	4b16      	ldr	r3, [pc, #88]	@ (8008754 <HMC5883L_calibrate+0x98>)
 80086fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008700:	461a      	mov	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < sample_size ; i++){
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	3301      	adds	r3, #1
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	429a      	cmp	r2, r3
 8008716:	dbe0      	blt.n	80086da <HMC5883L_calibrate+0x1e>
	}
	magx = magx/sample_size;
 8008718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	fb92 f3f3 	sdiv	r3, r2, r3
 8008722:	617b      	str	r3, [r7, #20]
	magy = magy/sample_size;
 8008724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	fb92 f3f3 	sdiv	r3, r2, r3
 800872e:	613b      	str	r3, [r7, #16]
	magz = magz/sample_size;
 8008730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	fb92 f3f3 	sdiv	r3, r2, r3
 800873a:	60fb      	str	r3, [r7, #12]

	HMC5883L_setOffset(magx , magy);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	b21b      	sxth	r3, r3
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	b212      	sxth	r2, r2
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 f882 	bl	8001850 <HMC5883L_setOffset>

}
 800874c:	bf00      	nop
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20001a28 	.word	0x20001a28

08008758 <Rodog_init>:

void Rodog_init(RODOG_Control * r){
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	r->BodyPitch = 0;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	60da      	str	r2, [r3, #12]
	r->BodyRoll = 0;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	611a      	str	r2, [r3, #16]
	r->BodyYaw = 0;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	615a      	str	r2, [r3, #20]
	r->BodyTx = 0;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
	r->BodyTy = 0;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	605a      	str	r2, [r3, #4]
	r->BodyTz = 0;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	609a      	str	r2, [r3, #8]
	r->MuxSelect = 0;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	r->CurveScale = 1;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800879e:	619a      	str	r2, [r3, #24]
	r->psi_crabbing = 0.0f;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	641a      	str	r2, [r3, #64]	@ 0x40
	r->BodyVel = 10;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a16      	ldr	r2, [pc, #88]	@ (8008804 <Rodog_init+0xac>)
 80087ac:	635a      	str	r2, [r3, #52]	@ 0x34
	r->gait = STOP;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	for(int i = 0 ; i < 4 ; i++)
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e008      	b.n	80087ce <Rodog_init+0x76>
		r->LegCounter[i] = 0;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	3208      	adds	r2, #8
 80087c2:	2100      	movs	r1, #0
 80087c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	ddf3      	ble.n	80087bc <Rodog_init+0x64>

	r->LegCounter[0] = N_SWING;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <Rodog_init+0xb0>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]
	r->IsEnabled = FALSE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

	//setup Robot posture
	r->BodyPitch = 0.0f;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	60da      	str	r2, [r3, #12]
	r->BodyTy = -10.0f;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a06      	ldr	r2, [pc, #24]	@ (800880c <Rodog_init+0xb4>)
 80087f2:	605a      	str	r2, [r3, #4]
	swd_prints("\n ------Rodog init done------ \n");
 80087f4:	4806      	ldr	r0, [pc, #24]	@ (8008810 <Rodog_init+0xb8>)
 80087f6:	f00f ff03 	bl	8018600 <puts>
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	41200000 	.word	0x41200000
 8008808:	20000020 	.word	0x20000020
 800880c:	c1200000 	.word	0xc1200000
 8008810:	0801d448 	.word	0x0801d448

08008814 <WriteJoint>:

//writes the corresponding CCR value to the joint
void WriteJoint(Joint * joint , uint32_t ccr){
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	uint32_t CCR = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
	if(joint->enabled == TRUE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <WriteJoint+0x1c>
		CCR = ccr;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	60fb      	str	r3, [r7, #12]

	switch(joint->TimerChannel){
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	7a5b      	ldrb	r3, [r3, #9]
 8008834:	3b01      	subs	r3, #1
 8008836:	2b03      	cmp	r3, #3
 8008838:	d81e      	bhi.n	8008878 <WriteJoint+0x64>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <WriteJoint+0x2c>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008851 	.word	0x08008851
 8008844:	0800885b 	.word	0x0800885b
 8008848:	08008865 	.word	0x08008865
 800884c:	0800886f 	.word	0x0800886f
		case 1:
			joint->Timer->CCR1 = CCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	635a      	str	r2, [r3, #52]	@ 0x34
			return;
 8008858:	e00e      	b.n	8008878 <WriteJoint+0x64>
		case 2:
			joint->Timer->CCR2 = CCR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	639a      	str	r2, [r3, #56]	@ 0x38
			return;
 8008862:	e009      	b.n	8008878 <WriteJoint+0x64>
		case 3:
			joint->Timer->CCR3 = CCR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	63da      	str	r2, [r3, #60]	@ 0x3c
			return;
 800886c:	e004      	b.n	8008878 <WriteJoint+0x64>
		case 4:
			joint->Timer->CCR4 = CCR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	641a      	str	r2, [r3, #64]	@ 0x40
			return;
 8008876:	bf00      	nop
	}
}
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop

08008884 <xl_to_g>:

	EN_DMA_IT();
}

//convert accelerometer data to radians
float32_t xl_to_g(int16_t xl){
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	80fb      	strh	r3, [r7, #6]
  	switch(xl_fs){
 800888e:	4b27      	ldr	r3, [pc, #156]	@ (800892c <xl_to_g+0xa8>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d83a      	bhi.n	800890c <xl_to_g+0x88>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <xl_to_g+0x18>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	080088dd 	.word	0x080088dd
		case LSM6DSO32X_4g  : return GRAVITATIONAL_kG*(lsm6dso32x_from_fs4_to_mg(xl));
 80088ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fb fc09 	bl	80040c8 <lsm6dso32x_from_fs4_to_mg>
 80088b6:	eef0 7a40 	vmov.f32	s15, s0
 80088ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008930 <xl_to_g+0xac>
 80088be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088c2:	e02e      	b.n	8008922 <xl_to_g+0x9e>
		case LSM6DSO32X_8g  : return GRAVITATIONAL_kG*(lsm6dso32x_from_fs8_to_mg(xl));
 80088c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fb fc15 	bl	80040f8 <lsm6dso32x_from_fs8_to_mg>
 80088ce:	eef0 7a40 	vmov.f32	s15, s0
 80088d2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8008930 <xl_to_g+0xac>
 80088d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088da:	e022      	b.n	8008922 <xl_to_g+0x9e>
		case LSM6DSO32X_16g : return GRAVITATIONAL_kG*(lsm6dso32x_from_fs16_to_mg(xl));
 80088dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fb fc21 	bl	8004128 <lsm6dso32x_from_fs16_to_mg>
 80088e6:	eef0 7a40 	vmov.f32	s15, s0
 80088ea:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008930 <xl_to_g+0xac>
 80088ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088f2:	e016      	b.n	8008922 <xl_to_g+0x9e>
		case LSM6DSO32X_32g : return GRAVITATIONAL_kG*(lsm6dso32x_from_fs32_to_mg(xl));
 80088f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fb fc2d 	bl	8004158 <lsm6dso32x_from_fs32_to_mg>
 80088fe:	eef0 7a40 	vmov.f32	s15, s0
 8008902:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008930 <xl_to_g+0xac>
 8008906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800890a:	e00a      	b.n	8008922 <xl_to_g+0x9e>
		default		 		: return GRAVITATIONAL_kG*(lsm6dso32x_from_fs4_to_mg(xl));
 800890c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008910:	4618      	mov	r0, r3
 8008912:	f7fb fbd9 	bl	80040c8 <lsm6dso32x_from_fs4_to_mg>
 8008916:	eef0 7a40 	vmov.f32	s15, s0
 800891a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8008930 <xl_to_g+0xac>
 800891e:	ee67 7a87 	vmul.f32	s15, s15, s14
  	}

}
 8008922:	eeb0 0a67 	vmov.f32	s0, s15
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200000f0 	.word	0x200000f0
 8008930:	3c20ac12 	.word	0x3c20ac12

08008934 <gyro_to_radps>:

float32_t gyro_to_radps(int16_t gyro){
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	80fb      	strh	r3, [r7, #6]

  	switch(gyro_fs){
 800893e:	4b30      	ldr	r3, [pc, #192]	@ (8008a00 <gyro_to_radps+0xcc>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b06      	cmp	r3, #6
 8008944:	d84c      	bhi.n	80089e0 <gyro_to_radps+0xac>
 8008946:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <gyro_to_radps+0x18>)
 8008948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894c:	08008969 	.word	0x08008969
 8008950:	08008981 	.word	0x08008981
 8008954:	08008999 	.word	0x08008999
 8008958:	080089e1 	.word	0x080089e1
 800895c:	080089b1 	.word	0x080089b1
 8008960:	080089e1 	.word	0x080089e1
 8008964:	080089c9 	.word	0x080089c9
		case LSM6DSO32X_250dps  : return kRAD * lsm6dso32x_from_fs250_to_mdps(gyro) ;
 8008968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800896c:	4618      	mov	r0, r3
 800896e:	f7fb fc3b 	bl	80041e8 <lsm6dso32x_from_fs250_to_mdps>
 8008972:	eef0 7a40 	vmov.f32	s15, s0
 8008976:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8008a04 <gyro_to_radps+0xd0>
 800897a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800897e:	e03a      	b.n	80089f6 <gyro_to_radps+0xc2>
		case LSM6DSO32X_125dps  : return kRAD * lsm6dso32x_from_fs125_to_mdps(gyro) ;
 8008980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008984:	4618      	mov	r0, r3
 8008986:	f7fb fbff 	bl	8004188 <lsm6dso32x_from_fs125_to_mdps>
 800898a:	eef0 7a40 	vmov.f32	s15, s0
 800898e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008a04 <gyro_to_radps+0xd0>
 8008992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008996:	e02e      	b.n	80089f6 <gyro_to_radps+0xc2>
		case LSM6DSO32X_500dps  : return kRAD * lsm6dso32x_from_fs500_to_mdps(gyro) ;
 8008998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800899c:	4618      	mov	r0, r3
 800899e:	f7fb fc0b 	bl	80041b8 <lsm6dso32x_from_fs500_to_mdps>
 80089a2:	eef0 7a40 	vmov.f32	s15, s0
 80089a6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8008a04 <gyro_to_radps+0xd0>
 80089aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089ae:	e022      	b.n	80089f6 <gyro_to_radps+0xc2>
		case LSM6DSO32X_1000dps : return kRAD * lsm6dso32x_from_fs1000_to_mdps(gyro);
 80089b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fb fc2f 	bl	8004218 <lsm6dso32x_from_fs1000_to_mdps>
 80089ba:	eef0 7a40 	vmov.f32	s15, s0
 80089be:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008a04 <gyro_to_radps+0xd0>
 80089c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089c6:	e016      	b.n	80089f6 <gyro_to_radps+0xc2>
		case LSM6DSO32X_2000dps : return kRAD * lsm6dso32x_from_fs2000_to_mdps(gyro);
 80089c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fb fc3b 	bl	8004248 <lsm6dso32x_from_fs2000_to_mdps>
 80089d2:	eef0 7a40 	vmov.f32	s15, s0
 80089d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008a04 <gyro_to_radps+0xd0>
 80089da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089de:	e00a      	b.n	80089f6 <gyro_to_radps+0xc2>
		default					: return kRAD * lsm6dso32x_from_fs125_to_mdps(gyro) ;
 80089e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fb fbcf 	bl	8004188 <lsm6dso32x_from_fs125_to_mdps>
 80089ea:	eef0 7a40 	vmov.f32	s15, s0
 80089ee:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8008a04 <gyro_to_radps+0xd0>
 80089f2:	ee67 7a87 	vmul.f32	s15, s15, s14
  	}
}
 80089f6:	eeb0 0a67 	vmov.f32	s0, s15
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200000f1 	.word	0x200000f1
 8008a04:	379268a9 	.word	0x379268a9

08008a08 <get_imu>:

void get_imu(){
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
	lsm6dso32x_all_sources_get(&dev_ctx, &imu);
 8008a0c:	4902      	ldr	r1, [pc, #8]	@ (8008a18 <get_imu+0x10>)
 8008a0e:	4803      	ldr	r0, [pc, #12]	@ (8008a1c <get_imu+0x14>)
 8008a10:	f7fd fbef 	bl	80061f2 <lsm6dso32x_all_sources_get>
}
 8008a14:	bf00      	nop
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20001a6c 	.word	0x20001a6c
 8008a1c:	20001a58 	.word	0x20001a58

08008a20 <get_xl>:

//accelerometer data aquisition, and filtering
void get_xl(){
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
	if (imu.drdy_xl) {
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <get_xl+0x20>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <get_xl+0x1a>
		lsm6dso32x_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8008a32:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <get_xl+0x24>)
 8008a34:	4804      	ldr	r0, [pc, #16]	@ (8008a48 <get_xl+0x28>)
 8008a36:	f7fb ffbf 	bl	80049b8 <lsm6dso32x_acceleration_raw_get>
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001a6c 	.word	0x20001a6c
 8008a44:	200019f4 	.word	0x200019f4
 8008a48:	20001a58 	.word	0x20001a58

08008a4c <get_gyro>:

void get_gyro(){
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
	if(imu.drdy_g){
 8008a50:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <get_gyro+0x20>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <get_gyro+0x1a>
		lsm6dso32x_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8008a5e:	4904      	ldr	r1, [pc, #16]	@ (8008a70 <get_gyro+0x24>)
 8008a60:	4804      	ldr	r0, [pc, #16]	@ (8008a74 <get_gyro+0x28>)
 8008a62:	f7fb ff61 	bl	8004928 <lsm6dso32x_angular_rate_raw_get>
	}
}
 8008a66:	bf00      	nop
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20001a6c 	.word	0x20001a6c
 8008a70:	200019fc 	.word	0x200019fc
 8008a74:	20001a58 	.word	0x20001a58

08008a78 <get_magn>:

void get_magn(){
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
	HMC5883L_readRaw(&SENSORS_I2C , data_raw_magn);
 8008a7c:	4902      	ldr	r1, [pc, #8]	@ (8008a88 <get_magn+0x10>)
 8008a7e:	4803      	ldr	r0, [pc, #12]	@ (8008a8c <get_magn+0x14>)
 8008a80:	f7f8 fea7 	bl	80017d2 <HMC5883L_readRaw>
}
 8008a84:	bf00      	nop
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20001a28 	.word	0x20001a28
 8008a8c:	2000066c 	.word	0x2000066c

08008a90 <combine_imu>:

void combine_imu(){
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
	 //convert xl data
	ax = xl_to_g(data_raw_acceleration[1]) + OFFSET_XL_X;
 8008a94:	4b66      	ldr	r3, [pc, #408]	@ (8008c30 <combine_imu+0x1a0>)
 8008a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fef2 	bl	8008884 <xl_to_g>
 8008aa0:	eef0 7a40 	vmov.f32	s15, s0
 8008aa4:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8008c34 <combine_imu+0x1a4>
 8008aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aac:	4b62      	ldr	r3, [pc, #392]	@ (8008c38 <combine_imu+0x1a8>)
 8008aae:	edc3 7a00 	vstr	s15, [r3]
	ay = xl_to_g(data_raw_acceleration[2]) + OFFSET_XL_Y;
 8008ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8008c30 <combine_imu+0x1a0>)
 8008ab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fee3 	bl	8008884 <xl_to_g>
 8008abe:	eef0 7a40 	vmov.f32	s15, s0
 8008ac2:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008c34 <combine_imu+0x1a4>
 8008ac6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aca:	4b5c      	ldr	r3, [pc, #368]	@ (8008c3c <combine_imu+0x1ac>)
 8008acc:	edc3 7a00 	vstr	s15, [r3]
	az = xl_to_g(data_raw_acceleration[0]) + OFFSET_XL_Z;
 8008ad0:	4b57      	ldr	r3, [pc, #348]	@ (8008c30 <combine_imu+0x1a0>)
 8008ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fed4 	bl	8008884 <xl_to_g>
 8008adc:	eef0 7a40 	vmov.f32	s15, s0
 8008ae0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8008c34 <combine_imu+0x1a4>
 8008ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae8:	4b55      	ldr	r3, [pc, #340]	@ (8008c40 <combine_imu+0x1b0>)
 8008aea:	edc3 7a00 	vstr	s15, [r3]

	//convert gyro data
	gx = gyro_to_radps(data_raw_angular_rate[0]) + OFFSET_GYRO_X;
 8008aee:	4b55      	ldr	r3, [pc, #340]	@ (8008c44 <combine_imu+0x1b4>)
 8008af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff1d 	bl	8008934 <gyro_to_radps>
 8008afa:	eef0 7a40 	vmov.f32	s15, s0
 8008afe:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8008c48 <combine_imu+0x1b8>
 8008b02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b06:	4b51      	ldr	r3, [pc, #324]	@ (8008c4c <combine_imu+0x1bc>)
 8008b08:	edc3 7a00 	vstr	s15, [r3]
	gy = gyro_to_radps(data_raw_angular_rate[2]) + OFFSET_GYRO_Y;
 8008b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8008c44 <combine_imu+0x1b4>)
 8008b0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ff0e 	bl	8008934 <gyro_to_radps>
 8008b18:	eef0 7a40 	vmov.f32	s15, s0
 8008b1c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008c48 <combine_imu+0x1b8>
 8008b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b24:	4b4a      	ldr	r3, [pc, #296]	@ (8008c50 <combine_imu+0x1c0>)
 8008b26:	edc3 7a00 	vstr	s15, [r3]
	gz = gyro_to_radps(data_raw_angular_rate[1]) + OFFSET_GYRO_Z;
 8008b2a:	4b46      	ldr	r3, [pc, #280]	@ (8008c44 <combine_imu+0x1b4>)
 8008b2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff feff 	bl	8008934 <gyro_to_radps>
 8008b36:	eef0 7a40 	vmov.f32	s15, s0
 8008b3a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8008c48 <combine_imu+0x1b8>
 8008b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b42:	4b44      	ldr	r3, [pc, #272]	@ (8008c54 <combine_imu+0x1c4>)
 8008b44:	edc3 7a00 	vstr	s15, [r3]

	//convert magn data
	mx =  data_raw_magn[1] * mgPerDigit;
 8008b48:	4b43      	ldr	r3, [pc, #268]	@ (8008c58 <combine_imu+0x1c8>)
 8008b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b56:	4b41      	ldr	r3, [pc, #260]	@ (8008c5c <combine_imu+0x1cc>)
 8008b58:	edd3 7a00 	vldr	s15, [r3]
 8008b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b60:	4b3f      	ldr	r3, [pc, #252]	@ (8008c60 <combine_imu+0x1d0>)
 8008b62:	edc3 7a00 	vstr	s15, [r3]
	mz = -data_raw_magn[0] * mgPerDigit;
 8008b66:	4b3c      	ldr	r3, [pc, #240]	@ (8008c58 <combine_imu+0x1c8>)
 8008b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b76:	4b39      	ldr	r3, [pc, #228]	@ (8008c5c <combine_imu+0x1cc>)
 8008b78:	edd3 7a00 	vldr	s15, [r3]
 8008b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b80:	4b38      	ldr	r3, [pc, #224]	@ (8008c64 <combine_imu+0x1d4>)
 8008b82:	edc3 7a00 	vstr	s15, [r3]
	my =  data_raw_magn[2] * mgPerDigit;
 8008b86:	4b34      	ldr	r3, [pc, #208]	@ (8008c58 <combine_imu+0x1c8>)
 8008b88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008b8c:	ee07 3a90 	vmov	s15, r3
 8008b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b94:	4b31      	ldr	r3, [pc, #196]	@ (8008c5c <combine_imu+0x1cc>)
 8008b96:	edd3 7a00 	vldr	s15, [r3]
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	4b32      	ldr	r3, [pc, #200]	@ (8008c68 <combine_imu+0x1d8>)
 8008ba0:	edc3 7a00 	vstr	s15, [r3]

	 MadgwickAHRSupdate(gx , gz , gy , ax , az , ay, mx , mz ,my);
 8008ba4:	4b29      	ldr	r3, [pc, #164]	@ (8008c4c <combine_imu+0x1bc>)
 8008ba6:	edd3 7a00 	vldr	s15, [r3]
 8008baa:	4b2a      	ldr	r3, [pc, #168]	@ (8008c54 <combine_imu+0x1c4>)
 8008bac:	ed93 7a00 	vldr	s14, [r3]
 8008bb0:	4b27      	ldr	r3, [pc, #156]	@ (8008c50 <combine_imu+0x1c0>)
 8008bb2:	edd3 6a00 	vldr	s13, [r3]
 8008bb6:	4b20      	ldr	r3, [pc, #128]	@ (8008c38 <combine_imu+0x1a8>)
 8008bb8:	ed93 6a00 	vldr	s12, [r3]
 8008bbc:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <combine_imu+0x1b0>)
 8008bbe:	edd3 5a00 	vldr	s11, [r3]
 8008bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c3c <combine_imu+0x1ac>)
 8008bc4:	ed93 5a00 	vldr	s10, [r3]
 8008bc8:	4b25      	ldr	r3, [pc, #148]	@ (8008c60 <combine_imu+0x1d0>)
 8008bca:	edd3 4a00 	vldr	s9, [r3]
 8008bce:	4b25      	ldr	r3, [pc, #148]	@ (8008c64 <combine_imu+0x1d4>)
 8008bd0:	edd3 3a00 	vldr	s7, [r3]
 8008bd4:	4b24      	ldr	r3, [pc, #144]	@ (8008c68 <combine_imu+0x1d8>)
 8008bd6:	ed93 4a00 	vldr	s8, [r3]
 8008bda:	eeb0 3a64 	vmov.f32	s6, s9
 8008bde:	eef0 2a45 	vmov.f32	s5, s10
 8008be2:	eeb0 2a65 	vmov.f32	s4, s11
 8008be6:	eef0 1a46 	vmov.f32	s3, s12
 8008bea:	eeb0 1a66 	vmov.f32	s2, s13
 8008bee:	eef0 0a47 	vmov.f32	s1, s14
 8008bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bf6:	f7f8 ff33 	bl	8001a60 <MadgwickAHRSupdate>
	 quaternion_to_euler(q0 , q1 ,q2 , q3 , &_Rz_comb , &_Rx_comb , &_Ry_comb);
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <combine_imu+0x1dc>)
 8008bfc:	edd3 7a00 	vldr	s15, [r3]
 8008c00:	4b1b      	ldr	r3, [pc, #108]	@ (8008c70 <combine_imu+0x1e0>)
 8008c02:	ed93 7a00 	vldr	s14, [r3]
 8008c06:	4b1b      	ldr	r3, [pc, #108]	@ (8008c74 <combine_imu+0x1e4>)
 8008c08:	edd3 6a00 	vldr	s13, [r3]
 8008c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c78 <combine_imu+0x1e8>)
 8008c0e:	ed93 6a00 	vldr	s12, [r3]
 8008c12:	4a1a      	ldr	r2, [pc, #104]	@ (8008c7c <combine_imu+0x1ec>)
 8008c14:	491a      	ldr	r1, [pc, #104]	@ (8008c80 <combine_imu+0x1f0>)
 8008c16:	481b      	ldr	r0, [pc, #108]	@ (8008c84 <combine_imu+0x1f4>)
 8008c18:	eef0 1a46 	vmov.f32	s3, s12
 8008c1c:	eeb0 1a66 	vmov.f32	s2, s13
 8008c20:	eef0 0a47 	vmov.f32	s1, s14
 8008c24:	eeb0 0a67 	vmov.f32	s0, s15
 8008c28:	f7fa f992 	bl	8002f50 <quaternion_to_euler>
}
 8008c2c:	bf00      	nop
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200019f4 	.word	0x200019f4
 8008c34:	3e2e147b 	.word	0x3e2e147b
 8008c38:	20001a04 	.word	0x20001a04
 8008c3c:	20001a0c 	.word	0x20001a0c
 8008c40:	20001a08 	.word	0x20001a08
 8008c44:	200019fc 	.word	0x200019fc
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	20001a10 	.word	0x20001a10
 8008c50:	20001a18 	.word	0x20001a18
 8008c54:	20001a14 	.word	0x20001a14
 8008c58:	20001a28 	.word	0x20001a28
 8008c5c:	20001a3c 	.word	0x20001a3c
 8008c60:	20001a30 	.word	0x20001a30
 8008c64:	20001a38 	.word	0x20001a38
 8008c68:	20001a34 	.word	0x20001a34
 8008c6c:	200000e8 	.word	0x200000e8
 8008c70:	20001a1c 	.word	0x20001a1c
 8008c74:	20001a20 	.word	0x20001a20
 8008c78:	20001a24 	.word	0x20001a24
 8008c7c:	20001a4c 	.word	0x20001a4c
 8008c80:	20001a48 	.word	0x20001a48
 8008c84:	20001a50 	.word	0x20001a50

08008c88 <PID_body>:

//PID for body orientations
void PID_body(float32_t roll , float32_t pitch , float32_t yaw){
 8008c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	ed87 0a03 	vstr	s0, [r7, #12]
 8008c94:	edc7 0a02 	vstr	s1, [r7, #8]
 8008c98:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t rx = 0.0f , rz = 0.0f , ry = 0.0f;
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]

	//compute PID output
	if(fabs(floorf(1e5*(_Rx_comb+roll))/1e5) > PID_RX_DB){
 8008cae:	4b6a      	ldr	r3, [pc, #424]	@ (8008e58 <PID_body+0x1d0>)
 8008cb0:	ed93 7a00 	vldr	s14, [r3]
 8008cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cbc:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8008e5c <PID_body+0x1d4>
 8008cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc8:	f011 ffd0 	bl	801ac6c <floorf>
 8008ccc:	ee10 3a10 	vmov	r3, s0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f7 fc39 	bl	8000548 <__aeabi_f2d>
 8008cd6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008e48 <PID_body+0x1c0>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fdb6 	bl	800084c <__aeabi_ddiv>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4690      	mov	r8, r2
 8008ce6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008cea:	a359      	add	r3, pc, #356	@ (adr r3, 8008e50 <PID_body+0x1c8>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 ff10 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00e      	beq.n	8008d1c <PID_body+0x94>
		rx = arm_pid_f32(&pid_BodyRx ,  -_Rx_comb+roll );
 8008cfe:	4b56      	ldr	r3, [pc, #344]	@ (8008e58 <PID_body+0x1d0>)
 8008d00:	edd3 7a00 	vldr	s15, [r3]
 8008d04:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d10:	4853      	ldr	r0, [pc, #332]	@ (8008e60 <PID_body+0x1d8>)
 8008d12:	f7fd fe0a 	bl	800692a <arm_pid_f32>
 8008d16:	ed87 0a07 	vstr	s0, [r7, #28]
 8008d1a:	e001      	b.n	8008d20 <PID_body+0x98>
	}
	else{
		rx = roll;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	61fb      	str	r3, [r7, #28]
	}
	//bound the values
	if(rx > MAX_ROLL/2.0f)rx = MAX_ROLL/2.0f;
 8008d20:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d24:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8008e64 <PID_body+0x1dc>
 8008d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	dd01      	ble.n	8008d36 <PID_body+0xae>
 8008d32:	4b4d      	ldr	r3, [pc, #308]	@ (8008e68 <PID_body+0x1e0>)
 8008d34:	61fb      	str	r3, [r7, #28]
	if(rx < MIN_ROLL/2.0f)rx = MIN_ROLL/2.0f;
 8008d36:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d3a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008e6c <PID_body+0x1e4>
 8008d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	d501      	bpl.n	8008d4c <PID_body+0xc4>
 8008d48:	4b49      	ldr	r3, [pc, #292]	@ (8008e70 <PID_body+0x1e8>)
 8008d4a:	61fb      	str	r3, [r7, #28]

	//compute PID output
	if(fabs(floorf(1e5*(-_Rz_comb+pitch))/1e5) > PID_RZ_DB){
 8008d4c:	4b49      	ldr	r3, [pc, #292]	@ (8008e74 <PID_body+0x1ec>)
 8008d4e:	edd3 7a00 	vldr	s15, [r3]
 8008d52:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d5a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8008e5c <PID_body+0x1d4>
 8008d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d62:	eeb0 0a67 	vmov.f32	s0, s15
 8008d66:	f011 ff81 	bl	801ac6c <floorf>
 8008d6a:	ee10 3a10 	vmov	r3, s0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7f7 fbea 	bl	8000548 <__aeabi_f2d>
 8008d74:	a334      	add	r3, pc, #208	@ (adr r3, 8008e48 <PID_body+0x1c0>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fd67 	bl	800084c <__aeabi_ddiv>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4614      	mov	r4, r2
 8008d84:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8008d88:	a331      	add	r3, pc, #196	@ (adr r3, 8008e50 <PID_body+0x1c8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 fec1 	bl	8000b18 <__aeabi_dcmpgt>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00e      	beq.n	8008dba <PID_body+0x132>
		rz = arm_pid_f32(&pid_BodyRz , +_Rz_comb-pitch);
 8008d9c:	4b35      	ldr	r3, [pc, #212]	@ (8008e74 <PID_body+0x1ec>)
 8008d9e:	ed93 7a00 	vldr	s14, [r3]
 8008da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008daa:	eeb0 0a67 	vmov.f32	s0, s15
 8008dae:	4832      	ldr	r0, [pc, #200]	@ (8008e78 <PID_body+0x1f0>)
 8008db0:	f7fd fdbb 	bl	800692a <arm_pid_f32>
 8008db4:	ed87 0a06 	vstr	s0, [r7, #24]
 8008db8:	e001      	b.n	8008dbe <PID_body+0x136>
	}
	else{
		rz = pitch;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	61bb      	str	r3, [r7, #24]
	}
	//bound the values
	if(rz > MAX_PITCH/2.0f)rz = MAX_PITCH/2.0f;
 8008dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8008dc2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008e64 <PID_body+0x1dc>
 8008dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dce:	dd01      	ble.n	8008dd4 <PID_body+0x14c>
 8008dd0:	4b25      	ldr	r3, [pc, #148]	@ (8008e68 <PID_body+0x1e0>)
 8008dd2:	61bb      	str	r3, [r7, #24]
	if(rz < MIN_PITCH/2.0f)rz = MIN_PITCH/2.0f;
 8008dd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8008dd8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8008e6c <PID_body+0x1e4>
 8008ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de4:	d501      	bpl.n	8008dea <PID_body+0x162>
 8008de6:	4b22      	ldr	r3, [pc, #136]	@ (8008e70 <PID_body+0x1e8>)
 8008de8:	61bb      	str	r3, [r7, #24]

	//compute PID output
	ry = arm_pid_f32(&pid_BodyRy , _Ry_comb+yaw);
 8008dea:	4b24      	ldr	r3, [pc, #144]	@ (8008e7c <PID_body+0x1f4>)
 8008dec:	ed93 7a00 	vldr	s14, [r3]
 8008df0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008df8:	eeb0 0a67 	vmov.f32	s0, s15
 8008dfc:	4820      	ldr	r0, [pc, #128]	@ (8008e80 <PID_body+0x1f8>)
 8008dfe:	f7fd fd94 	bl	800692a <arm_pid_f32>
 8008e02:	ed87 0a05 	vstr	s0, [r7, #20]
	//bound the values
	if(ry > MAX_YAW)ry = MAX_YAW;
 8008e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e0a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8008e84 <PID_body+0x1fc>
 8008e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	dd01      	ble.n	8008e1c <PID_body+0x194>
 8008e18:	4b1b      	ldr	r3, [pc, #108]	@ (8008e88 <PID_body+0x200>)
 8008e1a:	617b      	str	r3, [r7, #20]
	if(ry < MIN_YAW)ry = MIN_YAW;
 8008e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e20:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8008e8c <PID_body+0x204>
 8008e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2c:	d501      	bpl.n	8008e32 <PID_body+0x1aa>
 8008e2e:	4b18      	ldr	r3, [pc, #96]	@ (8008e90 <PID_body+0x208>)
 8008e30:	617b      	str	r3, [r7, #20]

	//correct the body orientation
	rodog.BodyPitch = rz;
 8008e32:	4a18      	ldr	r2, [pc, #96]	@ (8008e94 <PID_body+0x20c>)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	60d3      	str	r3, [r2, #12]
	rodog.BodyRoll = rx;
 8008e38:	4a16      	ldr	r2, [pc, #88]	@ (8008e94 <PID_body+0x20c>)
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	6113      	str	r3, [r2, #16]

	//help the body correct with some translations
	//rodog.BodyTx =   (rodog.BodyPitch) * MAX_TX;
	//rodog.BodyTz =   (rodog.BodyRoll)  * MAX_TZ;

}
 8008e3e:	bf00      	nop
 8008e40:	3720      	adds	r7, #32
 8008e42:	46bd      	mov	sp, r7
 8008e44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	40f86a00 	.word	0x40f86a00
 8008e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e54:	3f50624d 	.word	0x3f50624d
 8008e58:	20001a48 	.word	0x20001a48
 8008e5c:	47c35000 	.word	0x47c35000
 8008e60:	20001a78 	.word	0x20001a78
 8008e64:	3e060a92 	.word	0x3e060a92
 8008e68:	3e060a92 	.word	0x3e060a92
 8008e6c:	be060a92 	.word	0xbe060a92
 8008e70:	be060a92 	.word	0xbe060a92
 8008e74:	20001a50 	.word	0x20001a50
 8008e78:	20001a9c 	.word	0x20001a9c
 8008e7c:	20001a4c 	.word	0x20001a4c
 8008e80:	20001ac0 	.word	0x20001ac0
 8008e84:	3e860a92 	.word	0x3e860a92
 8008e88:	3e860a92 	.word	0x3e860a92
 8008e8c:	be860a92 	.word	0xbe860a92
 8008e90:	be860a92 	.word	0xbe860a92
 8008e94:	200018f8 	.word	0x200018f8

08008e98 <I2C1_ClearBusyFlagErratum>:
        asm("nop");
    }
    return ret;
}

uint8_t I2C1_ClearBusyFlagErratum(I2C_HandleTypeDef *instance){
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	@ 0x28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

uint8_t stat = instance->State;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

do{GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 8008eaa:	2364      	movs	r3, #100	@ 0x64
 8008eac:	61fb      	str	r3, [r7, #28]
    int timeout_cnt=0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	627b      	str	r3, [r7, #36]	@ 0x24

    // 1. Clear PE bit.
    instance->Instance->CR1 &= ~(0x0001);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0201 	bic.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 8008ec2:	2311      	movs	r3, #17
 8008ec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 8008ec6:	2304      	movs	r3, #4
 8008ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin          = I2C1_SCL_Pin;
 8008ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ed6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4619      	mov	r1, r3
 8008ede:	487e      	ldr	r0, [pc, #504]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008ee0:	f002 fef8 	bl	800bcd4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008eea:	487b      	ldr	r0, [pc, #492]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008eec:	f003 f8a6 	bl	800c03c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_Pin;
 8008ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ef4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	4876      	ldr	r0, [pc, #472]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008efe:	f002 fee9 	bl	800bcd4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8008f02:	2201      	movs	r2, #1
 8008f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f08:	4873      	ldr	r0, [pc, #460]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f0a:	f003 f897 	bl	800c03c <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008f0e:	e008      	b.n	8008f22 <I2C1_ClearBusyFlagErratum+0x8a>
    {
        timeout_cnt++;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	3301      	adds	r3, #1
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8008f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	dd01      	ble.n	8008f22 <I2C1_ClearBusyFlagErratum+0x8a>
            return 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e0d5      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f26:	486c      	ldr	r0, [pc, #432]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f28:	f003 f870 	bl	800c00c <HAL_GPIO_ReadPin>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d1ee      	bne.n	8008f10 <I2C1_ClearBusyFlagErratum+0x78>
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin))
 8008f32:	e015      	b.n	8008f60 <I2C1_ClearBusyFlagErratum+0xc8>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 8008f34:	2200      	movs	r2, #0
 8008f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f3a:	4867      	ldr	r0, [pc, #412]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f3c:	f003 f87e 	bl	800c03c <HAL_GPIO_WritePin>
        asm("nop");
 8008f40:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8008f42:	2201      	movs	r2, #1
 8008f44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f48:	4863      	ldr	r0, [pc, #396]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f4a:	f003 f877 	bl	800c03c <HAL_GPIO_WritePin>

        timeout_cnt++;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f50:	3301      	adds	r3, #1
 8008f52:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8008f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	dd01      	ble.n	8008f60 <I2C1_ClearBusyFlagErratum+0xc8>
            return 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e0b6      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin))
 8008f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f64:	485c      	ldr	r0, [pc, #368]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f66:	f003 f851 	bl	800c00c <HAL_GPIO_ReadPin>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d1e1      	bne.n	8008f34 <I2C1_ClearBusyFlagErratum+0x9c>
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8008f70:	2200      	movs	r2, #0
 8008f72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f76:	4858      	ldr	r0, [pc, #352]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f78:	f003 f860 	bl	800c03c <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port , I2C1_SDA_Pin))
 8008f7c:	e008      	b.n	8008f90 <I2C1_ClearBusyFlagErratum+0xf8>
    {
        timeout_cnt++;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	3301      	adds	r3, #1
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8008f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	dd01      	ble.n	8008f90 <I2C1_ClearBusyFlagErratum+0xf8>
            return 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e09e      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port , I2C1_SDA_Pin))
 8008f90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f94:	4850      	ldr	r0, [pc, #320]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008f96:	f003 f839 	bl	800c00c <HAL_GPIO_ReadPin>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ee      	bne.n	8008f7e <I2C1_ClearBusyFlagErratum+0xe6>
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fa6:	484c      	ldr	r0, [pc, #304]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008fa8:	f003 f848 	bl	800c03c <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008fac:	e008      	b.n	8008fc0 <I2C1_ClearBusyFlagErratum+0x128>
    {
        timeout_cnt++;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	dd01      	ble.n	8008fc0 <I2C1_ClearBusyFlagErratum+0x128>
            return 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e086      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fc4:	4844      	ldr	r0, [pc, #272]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008fc6:	f003 f821 	bl	800c00c <HAL_GPIO_ReadPin>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1ee      	bne.n	8008fae <I2C1_ClearBusyFlagErratum+0x116>
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fd6:	4840      	ldr	r0, [pc, #256]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008fd8:	f003 f830 	bl	800c03c <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008fdc:	e008      	b.n	8008ff0 <I2C1_ClearBusyFlagErratum+0x158>
    {
        timeout_cnt++;
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8008fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	dd01      	ble.n	8008ff0 <I2C1_ClearBusyFlagErratum+0x158>
            return 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e06e      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin))
 8008ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008ff4:	4838      	ldr	r0, [pc, #224]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8008ff6:	f003 f809 	bl	800c00c <HAL_GPIO_ReadPin>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d1ee      	bne.n	8008fde <I2C1_ClearBusyFlagErratum+0x146>
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8009000:	2201      	movs	r2, #1
 8009002:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009006:	4834      	ldr	r0, [pc, #208]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8009008:	f003 f818 	bl	800c03c <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin))
 800900c:	e008      	b.n	8009020 <I2C1_ClearBusyFlagErratum+0x188>
    {
        timeout_cnt++;
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	3301      	adds	r3, #1
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8009014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	429a      	cmp	r2, r3
 800901a:	dd01      	ble.n	8009020 <I2C1_ClearBusyFlagErratum+0x188>
            return 0;
 800901c:	2300      	movs	r3, #0
 800901e:	e056      	b.n	80090ce <I2C1_ClearBusyFlagErratum+0x236>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin))
 8009020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009024:	482c      	ldr	r0, [pc, #176]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8009026:	f002 fff1 	bl	800c00c <HAL_GPIO_ReadPin>
 800902a:	4603      	mov	r3, r0
 800902c:	2b01      	cmp	r3, #1
 800902e:	d1ee      	bne.n	800900e <I2C1_ClearBusyFlagErratum+0x176>
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009030:	2312      	movs	r3, #18
 8009032:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009034:	2301      	movs	r3, #1
 8009036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800903c:	2304      	movs	r3, #4
 800903e:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8009040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009044:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8009046:	f107 0308 	add.w	r3, r7, #8
 800904a:	4619      	mov	r1, r3
 800904c:	4822      	ldr	r0, [pc, #136]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 800904e:	f002 fe41 	bl	800bcd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8009052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009056:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8009058:	f107 0308 	add.w	r3, r7, #8
 800905c:	4619      	mov	r1, r3
 800905e:	481e      	ldr	r0, [pc, #120]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8009060:	f002 fe38 	bl	800bcd4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8009064:	2201      	movs	r2, #1
 8009066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800906a:	481b      	ldr	r0, [pc, #108]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 800906c:	f002 ffe6 	bl	800c03c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8009070:	2201      	movs	r2, #1
 8009072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009076:	4818      	ldr	r0, [pc, #96]	@ (80090d8 <I2C1_ClearBusyFlagErratum+0x240>)
 8009078:	f002 ffe0 	bl	800c03c <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 |= 0x8000;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800908a:	601a      	str	r2, [r3, #0]

    asm("nop");
 800908c:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 &= ~0x8000;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800909c:	601a      	str	r2, [r3, #0]

    asm("nop");
 800909e:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    instance->Instance->CR1 |= 0x0001;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(instance);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f003 f801 	bl	800c0b8 <HAL_I2C_Init>
    stat = instance->State;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	}while(stat == HAL_BUSY);
 80090c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	f43f aef0 	beq.w	8008eaa <I2C1_ClearBusyFlagErratum+0x12>

return stat;
 80090ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3728      	adds	r7, #40	@ 0x28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	40020400 	.word	0x40020400

080090dc <swap_ui16>:

void swap_ui16(uint16_t arr[], int a, int b) {
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
    int temp = arr[a];
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	617b      	str	r3, [r7, #20]
    arr[a] = arr[b];
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	441a      	add	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	68f9      	ldr	r1, [r7, #12]
 8009102:	440b      	add	r3, r1
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	801a      	strh	r2, [r3, #0]
    arr[b] = temp;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	b292      	uxth	r2, r2
 8009114:	801a      	strh	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <partition_ui16>:

int partition_ui16(uint16_t arr[], int low, int high) {
 8009122:	b580      	push	{r7, lr}
 8009124:	b088      	sub	sp, #32
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
    int pivot = arr[high];
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	617b      	str	r3, [r7, #20]
    int i = low - 1;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3b01      	subs	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j < high; j++) {
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	e013      	b.n	800916e <partition_ui16+0x4c>
        if (arr[j] < pivot) {
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4293      	cmp	r3, r2
 8009156:	dd07      	ble.n	8009168 <partition_ui16+0x46>
            i++;
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	3301      	adds	r3, #1
 800915c:	61fb      	str	r3, [r7, #28]
            swap_ui16(arr, i, j);
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	69f9      	ldr	r1, [r7, #28]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff ffba 	bl	80090dc <swap_ui16>
    for (int j = low; j < high; j++) {
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	3301      	adds	r3, #1
 800916c:	61bb      	str	r3, [r7, #24]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	dbe7      	blt.n	8009146 <partition_ui16+0x24>
        }
    }

    swap_ui16(arr, i + 1, high);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3301      	adds	r3, #1
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4619      	mov	r1, r3
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff ffac 	bl	80090dc <swap_ui16>
    return i + 1;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	3301      	adds	r3, #1
}
 8009188:	4618      	mov	r0, r3
 800918a:	3720      	adds	r7, #32
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <quickSelect_ui16>:

int quickSelect_ui16(uint16_t arr[], int low, int high, int k) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
    if (low < high) {
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	da25      	bge.n	80091f2 <quickSelect_ui16+0x62>
        int pivotIndex = partition_ui16(arr, low, high);
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff ffb9 	bl	8009122 <partition_ui16>
 80091b0:	6178      	str	r0, [r7, #20]

        if (pivotIndex == k) {
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d105      	bne.n	80091c6 <quickSelect_ui16+0x36>
            return arr[pivotIndex];
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	e01a      	b.n	80091fc <quickSelect_ui16+0x6c>
        } else if (pivotIndex > k) {
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	dd08      	ble.n	80091e0 <quickSelect_ui16+0x50>
            return quickSelect_ui16(arr, low, pivotIndex - 1, k);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	1e5a      	subs	r2, r3, #1
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff ffda 	bl	8009190 <quickSelect_ui16>
 80091dc:	4603      	mov	r3, r0
 80091de:	e00d      	b.n	80091fc <quickSelect_ui16+0x6c>
        } else {
            return quickSelect_ui16(arr, pivotIndex + 1, high, k);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff ffd1 	bl	8009190 <quickSelect_ui16>
 80091ee:	4603      	mov	r3, r0
 80091f0:	e004      	b.n	80091fc <quickSelect_ui16+0x6c>
        }
    }

    return arr[low];
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	881b      	ldrh	r3, [r3, #0]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <computeMedian_ui16>:

uint16_t computeMedian_ui16(uint16_t arr[] , uint16_t size) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
	if (size % 2 == 1) {
 8009210:	887b      	ldrh	r3, [r7, #2]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <computeMedian_ui16+0x30>
        return (uint16_t)quickSelect_ui16(arr, 0, size - 1, size / 2);
 800921c:	887b      	ldrh	r3, [r7, #2]
 800921e:	1e5a      	subs	r2, r3, #1
 8009220:	887b      	ldrh	r3, [r7, #2]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	b29b      	uxth	r3, r3
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ffb1 	bl	8009190 <quickSelect_ui16>
 800922e:	4603      	mov	r3, r0
 8009230:	b29b      	uxth	r3, r3
 8009232:	e02b      	b.n	800928c <computeMedian_ui16+0x88>
    } else {
       	uint16_t mid1 = quickSelect_ui16(arr, 0, size - 1, size / 2 - 1);
 8009234:	887b      	ldrh	r3, [r7, #2]
 8009236:	1e5a      	subs	r2, r3, #1
 8009238:	887b      	ldrh	r3, [r7, #2]
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	2100      	movs	r1, #0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ffa4 	bl	8009190 <quickSelect_ui16>
 8009248:	4603      	mov	r3, r0
 800924a:	81fb      	strh	r3, [r7, #14]
    	uint16_t mid2 = quickSelect_ui16(arr, 0, size - 1, size / 2);
 800924c:	887b      	ldrh	r3, [r7, #2]
 800924e:	1e5a      	subs	r2, r3, #1
 8009250:	887b      	ldrh	r3, [r7, #2]
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ff99 	bl	8009190 <quickSelect_ui16>
 800925e:	4603      	mov	r3, r0
 8009260:	81bb      	strh	r3, [r7, #12]
        return (uint16_t)(mid1 + mid2) / 2.0;
 8009262:	89fa      	ldrh	r2, [r7, #14]
 8009264:	89bb      	ldrh	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	b29b      	uxth	r3, r3
 800926a:	4618      	mov	r0, r3
 800926c:	f7f7 f95a 	bl	8000524 <__aeabi_i2d>
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009278:	f7f7 fae8 	bl	800084c <__aeabi_ddiv>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4610      	mov	r0, r2
 8009282:	4619      	mov	r1, r3
 8009284:	f7f7 fc90 	bl	8000ba8 <__aeabi_d2uiz>
 8009288:	4603      	mov	r3, r0
 800928a:	b29b      	uxth	r3, r3
    }
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	0000      	movs	r0, r0
	...

08009298 <adc_to_voltage>:
        return (mid1 + mid2) / 2.0;
    }
}


float32_t adc_to_voltage(uint16_t adc){
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	80fb      	strh	r3, [r7, #6]
	return ((float32_t) adc)*(3.3)/(4095);
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	ee17 0a90 	vmov	r0, s15
 80092b0:	f7f7 f94a 	bl	8000548 <__aeabi_f2d>
 80092b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80092f0 <adc_to_voltage+0x58>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4610      	mov	r0, r2
 80092c4:	4619      	mov	r1, r3
 80092c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80092f8 <adc_to_voltage+0x60>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f7 fabe 	bl	800084c <__aeabi_ddiv>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	f7f7 fc86 	bl	8000be8 <__aeabi_d2f>
 80092dc:	4603      	mov	r3, r0
 80092de:	ee07 3a90 	vmov	s15, r3
}
 80092e2:	eeb0 0a67 	vmov.f32	s0, s15
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	f3af 8000 	nop.w
 80092f0:	66666666 	.word	0x66666666
 80092f4:	400a6666 	.word	0x400a6666
 80092f8:	00000000 	.word	0x00000000
 80092fc:	40affe00 	.word	0x40affe00

08009300 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8009300:	b5b0      	push	{r4, r5, r7, lr}
 8009302:	b08e      	sub	sp, #56	@ 0x38
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
    static uint32_t cnt2=0,cnt3=0;

    if(hadc == &hadc1){
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a94      	ldr	r2, [pc, #592]	@ (800955c <HAL_ADC_ConvCpltCallback+0x25c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d146      	bne.n	800939e <HAL_ADC_ConvCpltCallback+0x9e>
    	if(rodog.MuxSelect < N_JOINTS){
 8009310:	4b93      	ldr	r3, [pc, #588]	@ (8009560 <HAL_ADC_ConvCpltCallback+0x260>)
 8009312:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009316:	2b0b      	cmp	r3, #11
 8009318:	d819      	bhi.n	800934e <HAL_ADC_ConvCpltCallback+0x4e>
    		Torque_fb[J[rodog.MuxSelect].index] = computeMedian_ui16(ADC_CurrFilterBuff , FILTER_WINDOW_SIZE);
 800931a:	217b      	movs	r1, #123	@ 0x7b
 800931c:	4891      	ldr	r0, [pc, #580]	@ (8009564 <HAL_ADC_ConvCpltCallback+0x264>)
 800931e:	f7ff ff71 	bl	8009204 <computeMedian_ui16>
 8009322:	4603      	mov	r3, r0
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	4b8d      	ldr	r3, [pc, #564]	@ (8009560 <HAL_ADC_ConvCpltCallback+0x260>)
 800932a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800932e:	4619      	mov	r1, r3
 8009330:	4a8d      	ldr	r2, [pc, #564]	@ (8009568 <HAL_ADC_ConvCpltCallback+0x268>)
 8009332:	232c      	movs	r3, #44	@ 0x2c
 8009334:	fb01 f303 	mul.w	r3, r1, r3
 8009338:	4413      	add	r3, r2
 800933a:	3329      	adds	r3, #41	@ 0x29
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009342:	4a8a      	ldr	r2, [pc, #552]	@ (800956c <HAL_ADC_ConvCpltCallback+0x26c>)
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	edc3 7a00 	vstr	s15, [r3]
 800934c:	e024      	b.n	8009398 <HAL_ADC_ConvCpltCallback+0x98>
    	}
    	else if(rodog.MuxSelect == 12){
 800934e:	4b84      	ldr	r3, [pc, #528]	@ (8009560 <HAL_ADC_ConvCpltCallback+0x260>)
 8009350:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009354:	2b0c      	cmp	r3, #12
 8009356:	d10d      	bne.n	8009374 <HAL_ADC_ConvCpltCallback+0x74>
    		battery_lvl = adc_to_voltage(computeMedian_ui16(ADC_CurrFilterBuff,FILTER_WINDOW_SIZE));
 8009358:	217b      	movs	r1, #123	@ 0x7b
 800935a:	4882      	ldr	r0, [pc, #520]	@ (8009564 <HAL_ADC_ConvCpltCallback+0x264>)
 800935c:	f7ff ff52 	bl	8009204 <computeMedian_ui16>
 8009360:	4603      	mov	r3, r0
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff ff98 	bl	8009298 <adc_to_voltage>
 8009368:	eef0 7a40 	vmov.f32	s15, s0
 800936c:	4b80      	ldr	r3, [pc, #512]	@ (8009570 <HAL_ADC_ConvCpltCallback+0x270>)
 800936e:	edc3 7a00 	vstr	s15, [r3]
 8009372:	e011      	b.n	8009398 <HAL_ADC_ConvCpltCallback+0x98>
    	}
    	else if(rodog.MuxSelect == 13){
 8009374:	4b7a      	ldr	r3, [pc, #488]	@ (8009560 <HAL_ADC_ConvCpltCallback+0x260>)
 8009376:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800937a:	2b0d      	cmp	r3, #13
 800937c:	d10c      	bne.n	8009398 <HAL_ADC_ConvCpltCallback+0x98>
    		main_current = adc_to_voltage(computeMedian_ui16(ADC_CurrFilterBuff,FILTER_WINDOW_SIZE));
 800937e:	217b      	movs	r1, #123	@ 0x7b
 8009380:	4878      	ldr	r0, [pc, #480]	@ (8009564 <HAL_ADC_ConvCpltCallback+0x264>)
 8009382:	f7ff ff3f 	bl	8009204 <computeMedian_ui16>
 8009386:	4603      	mov	r3, r0
 8009388:	4618      	mov	r0, r3
 800938a:	f7ff ff85 	bl	8009298 <adc_to_voltage>
 800938e:	eef0 7a40 	vmov.f32	s15, s0
 8009392:	4b78      	ldr	r3, [pc, #480]	@ (8009574 <HAL_ADC_ConvCpltCallback+0x274>)
 8009394:	edc3 7a00 	vstr	s15, [r3]
    	}

    	IncMux(&rodog);
 8009398:	4871      	ldr	r0, [pc, #452]	@ (8009560 <HAL_ADC_ConvCpltCallback+0x260>)
 800939a:	f7fe faa1 	bl	80078e0 <IncMux>
    }

    if (hadc == &hadc2) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a75      	ldr	r2, [pc, #468]	@ (8009578 <HAL_ADC_ConvCpltCallback+0x278>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d168      	bne.n	8009478 <HAL_ADC_ConvCpltCallback+0x178>
    	uint16_t adc2_joints[] = {2 , 4 , 5 , 7 , 8 , 11};
 80093a6:	4a75      	ldr	r2, [pc, #468]	@ (800957c <HAL_ADC_ConvCpltCallback+0x27c>)
 80093a8:	f107 0314 	add.w	r3, r7, #20
 80093ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80093ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	for(uint16_t i = 0 ; i < 6 ; i++){
 80093b2:	2300      	movs	r3, #0
 80093b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80093b6:	e030      	b.n	800941a <HAL_ADC_ConvCpltCallback+0x11a>
    		uint16_t j = adc2_joints[i];
 80093b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	3338      	adds	r3, #56	@ 0x38
 80093be:	443b      	add	r3, r7
 80093c0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80093c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    		ADC_PosFilterBuff[j][cnt2] = ADC_PosFeedbackRaw[J[j].ADCNum][J[j].ADCChannel];
 80093c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80093c8:	4a67      	ldr	r2, [pc, #412]	@ (8009568 <HAL_ADC_ConvCpltCallback+0x268>)
 80093ca:	212c      	movs	r1, #44	@ 0x2c
 80093cc:	fb01 f303 	mul.w	r3, r1, r3
 80093d0:	4413      	add	r3, r2
 80093d2:	330b      	adds	r3, #11
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461c      	mov	r4, r3
 80093d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80093da:	4a63      	ldr	r2, [pc, #396]	@ (8009568 <HAL_ADC_ConvCpltCallback+0x268>)
 80093dc:	212c      	movs	r1, #44	@ 0x2c
 80093de:	fb01 f303 	mul.w	r3, r1, r3
 80093e2:	4413      	add	r3, r2
 80093e4:	330a      	adds	r3, #10
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	461d      	mov	r5, r3
 80093ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80093ec:	4b64      	ldr	r3, [pc, #400]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 80093ee:	6819      	ldr	r1, [r3, #0]
 80093f0:	4864      	ldr	r0, [pc, #400]	@ (8009584 <HAL_ADC_ConvCpltCallback+0x284>)
 80093f2:	4623      	mov	r3, r4
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	4423      	add	r3, r4
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	442b      	add	r3, r5
 80093fc:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8009400:	4861      	ldr	r0, [pc, #388]	@ (8009588 <HAL_ADC_ConvCpltCallback+0x288>)
 8009402:	4613      	mov	r3, r2
 8009404:	015b      	lsls	r3, r3, #5
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	440b      	add	r3, r1
 800940e:	4622      	mov	r2, r4
 8009410:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    	for(uint16_t i = 0 ; i < 6 ; i++){
 8009414:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009416:	3301      	adds	r3, #1
 8009418:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800941a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800941c:	2b05      	cmp	r3, #5
 800941e:	d9cb      	bls.n	80093b8 <HAL_ADC_ConvCpltCallback+0xb8>
    	}
    	cnt2++;
 8009420:	4b57      	ldr	r3, [pc, #348]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	4a56      	ldr	r2, [pc, #344]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 8009428:	6013      	str	r3, [r2, #0]
    	if(cnt2 > FILTER_WINDOW_SIZE){
 800942a:	4b55      	ldr	r3, [pc, #340]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b7b      	cmp	r3, #123	@ 0x7b
 8009430:	d922      	bls.n	8009478 <HAL_ADC_ConvCpltCallback+0x178>
    		cnt2 = 0;
 8009432:	4b53      	ldr	r3, [pc, #332]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
    		for(int i = 0; i < 6 ; i++){
 8009438:	2300      	movs	r3, #0
 800943a:	633b      	str	r3, [r7, #48]	@ 0x30
 800943c:	e019      	b.n	8009472 <HAL_ADC_ConvCpltCallback+0x172>
    			uint16_t j = adc2_joints[i];
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	3338      	adds	r3, #56	@ 0x38
 8009444:	443b      	add	r3, r7
 8009446:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800944a:	84fb      	strh	r3, [r7, #38]	@ 0x26
				adc_pos_filtered[j] = computeMedian_ui16(ADC_PosFilterBuff[j] ,FILTER_WINDOW_SIZE);
 800944c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800944e:	22f6      	movs	r2, #246	@ 0xf6
 8009450:	fb02 f303 	mul.w	r3, r2, r3
 8009454:	4a4c      	ldr	r2, [pc, #304]	@ (8009588 <HAL_ADC_ConvCpltCallback+0x288>)
 8009456:	4413      	add	r3, r2
 8009458:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 800945a:	217b      	movs	r1, #123	@ 0x7b
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fed1 	bl	8009204 <computeMedian_ui16>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	4b49      	ldr	r3, [pc, #292]	@ (800958c <HAL_ADC_ConvCpltCallback+0x28c>)
 8009468:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    		for(int i = 0; i < 6 ; i++){
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	3301      	adds	r3, #1
 8009470:	633b      	str	r3, [r7, #48]	@ 0x30
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	2b05      	cmp	r3, #5
 8009476:	dde2      	ble.n	800943e <HAL_ADC_ConvCpltCallback+0x13e>
    		}
    	}
    }

    if (hadc == &hadc3) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a45      	ldr	r2, [pc, #276]	@ (8009590 <HAL_ADC_ConvCpltCallback+0x290>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d168      	bne.n	8009552 <HAL_ADC_ConvCpltCallback+0x252>
    	uint16_t adc3_joints[] = {0 , 1 , 3 , 6 , 9 , 10};
 8009480:	4a44      	ldr	r2, [pc, #272]	@ (8009594 <HAL_ADC_ConvCpltCallback+0x294>)
 8009482:	f107 0308 	add.w	r3, r7, #8
 8009486:	ca07      	ldmia	r2, {r0, r1, r2}
 8009488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	for(uint16_t i = 0 ; i < 6 ; i++){
 800948c:	2300      	movs	r3, #0
 800948e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009490:	e030      	b.n	80094f4 <HAL_ADC_ConvCpltCallback+0x1f4>
    		uint16_t j = adc3_joints[i];
 8009492:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	3338      	adds	r3, #56	@ 0x38
 8009498:	443b      	add	r3, r7
 800949a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800949e:	843b      	strh	r3, [r7, #32]
    		ADC_PosFilterBuff[j][cnt2] = ADC_PosFeedbackRaw[J[j].ADCNum][J[j].ADCChannel];
 80094a0:	8c3b      	ldrh	r3, [r7, #32]
 80094a2:	4a31      	ldr	r2, [pc, #196]	@ (8009568 <HAL_ADC_ConvCpltCallback+0x268>)
 80094a4:	212c      	movs	r1, #44	@ 0x2c
 80094a6:	fb01 f303 	mul.w	r3, r1, r3
 80094aa:	4413      	add	r3, r2
 80094ac:	330b      	adds	r3, #11
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	461c      	mov	r4, r3
 80094b2:	8c3b      	ldrh	r3, [r7, #32]
 80094b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009568 <HAL_ADC_ConvCpltCallback+0x268>)
 80094b6:	212c      	movs	r1, #44	@ 0x2c
 80094b8:	fb01 f303 	mul.w	r3, r1, r3
 80094bc:	4413      	add	r3, r2
 80094be:	330a      	adds	r3, #10
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461d      	mov	r5, r3
 80094c4:	8c3a      	ldrh	r2, [r7, #32]
 80094c6:	4b2e      	ldr	r3, [pc, #184]	@ (8009580 <HAL_ADC_ConvCpltCallback+0x280>)
 80094c8:	6819      	ldr	r1, [r3, #0]
 80094ca:	482e      	ldr	r0, [pc, #184]	@ (8009584 <HAL_ADC_ConvCpltCallback+0x284>)
 80094cc:	4623      	mov	r3, r4
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	4423      	add	r3, r4
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	442b      	add	r3, r5
 80094d6:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 80094da:	482b      	ldr	r0, [pc, #172]	@ (8009588 <HAL_ADC_ConvCpltCallback+0x288>)
 80094dc:	4613      	mov	r3, r2
 80094de:	015b      	lsls	r3, r3, #5
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	440b      	add	r3, r1
 80094e8:	4622      	mov	r2, r4
 80094ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    	for(uint16_t i = 0 ; i < 6 ; i++){
 80094ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80094f0:	3301      	adds	r3, #1
 80094f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80094f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d9cb      	bls.n	8009492 <HAL_ADC_ConvCpltCallback+0x192>
    	}
    	cnt3++;
 80094fa:	4b27      	ldr	r3, [pc, #156]	@ (8009598 <HAL_ADC_ConvCpltCallback+0x298>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	4a25      	ldr	r2, [pc, #148]	@ (8009598 <HAL_ADC_ConvCpltCallback+0x298>)
 8009502:	6013      	str	r3, [r2, #0]
    	if(cnt3 > FILTER_WINDOW_SIZE){
 8009504:	4b24      	ldr	r3, [pc, #144]	@ (8009598 <HAL_ADC_ConvCpltCallback+0x298>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b7b      	cmp	r3, #123	@ 0x7b
 800950a:	d922      	bls.n	8009552 <HAL_ADC_ConvCpltCallback+0x252>
    		cnt3 = 0;
 800950c:	4b22      	ldr	r3, [pc, #136]	@ (8009598 <HAL_ADC_ConvCpltCallback+0x298>)
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]

    		for(int i = 0 ; i < 6 ; i++){
 8009512:	2300      	movs	r3, #0
 8009514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009516:	e019      	b.n	800954c <HAL_ADC_ConvCpltCallback+0x24c>
        		uint16_t j = adc3_joints[i];
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	3338      	adds	r3, #56	@ 0x38
 800951e:	443b      	add	r3, r7
 8009520:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8009524:	847b      	strh	r3, [r7, #34]	@ 0x22
    			adc_pos_filtered[j] = computeMedian_ui16(ADC_PosFilterBuff[j] , FILTER_WINDOW_SIZE);
 8009526:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009528:	22f6      	movs	r2, #246	@ 0xf6
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	4a16      	ldr	r2, [pc, #88]	@ (8009588 <HAL_ADC_ConvCpltCallback+0x288>)
 8009530:	4413      	add	r3, r2
 8009532:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8009534:	217b      	movs	r1, #123	@ 0x7b
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fe64 	bl	8009204 <computeMedian_ui16>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	4b12      	ldr	r3, [pc, #72]	@ (800958c <HAL_ADC_ConvCpltCallback+0x28c>)
 8009542:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    		for(int i = 0 ; i < 6 ; i++){
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	3301      	adds	r3, #1
 800954a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	2b05      	cmp	r3, #5
 8009550:	dde2      	ble.n	8009518 <HAL_ADC_ConvCpltCallback+0x218>
    		}

    	}
    }

}
 8009552:	bf00      	nop
 8009554:	3738      	adds	r7, #56	@ 0x38
 8009556:	46bd      	mov	sp, r7
 8009558:	bdb0      	pop	{r4, r5, r7, pc}
 800955a:	bf00      	nop
 800955c:	200003d4 	.word	0x200003d4
 8009560:	200018f8 	.word	0x200018f8
 8009564:	200015d8 	.word	0x200015d8
 8009568:	200016e8 	.word	0x200016e8
 800956c:	200019ac 	.word	0x200019ac
 8009570:	200016d0 	.word	0x200016d0
 8009574:	200016d4 	.word	0x200016d4
 8009578:	2000041c 	.word	0x2000041c
 800957c:	0801d468 	.word	0x0801d468
 8009580:	20001af8 	.word	0x20001af8
 8009584:	20000a20 	.word	0x20000a20
 8009588:	20000a50 	.word	0x20000a50
 800958c:	20000a38 	.word	0x20000a38
 8009590:	20000464 	.word	0x20000464
 8009594:	0801d474 	.word	0x0801d474
 8009598:	20001afc 	.word	0x20001afc

0800959c <DIS_DMA_IT>:

void DIS_DMA_IT(){
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80095a0:	4805      	ldr	r0, [pc, #20]	@ (80095b8 <DIS_DMA_IT+0x1c>)
 80095a2:	f001 fa4f 	bl	800aa44 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 80095a6:	4805      	ldr	r0, [pc, #20]	@ (80095bc <DIS_DMA_IT+0x20>)
 80095a8:	f001 fa4c 	bl	800aa44 <HAL_ADC_Stop_DMA>
 	HAL_ADC_Stop_DMA(&hadc3);
 80095ac:	4804      	ldr	r0, [pc, #16]	@ (80095c0 <DIS_DMA_IT+0x24>)
 80095ae:	f001 fa49 	bl	800aa44 <HAL_ADC_Stop_DMA>
}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200003d4 	.word	0x200003d4
 80095bc:	2000041c 	.word	0x2000041c
 80095c0:	20000464 	.word	0x20000464

080095c4 <EN_DMA_IT>:

void EN_DMA_IT(){
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1 , (uint32_t*)ADC_CurrFilterBuff , FILTER_WINDOW_SIZE  );
 80095c8:	227b      	movs	r2, #123	@ 0x7b
 80095ca:	4908      	ldr	r1, [pc, #32]	@ (80095ec <EN_DMA_IT+0x28>)
 80095cc:	4808      	ldr	r0, [pc, #32]	@ (80095f0 <EN_DMA_IT+0x2c>)
 80095ce:	f001 f929 	bl	800a824 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2 , (uint32_t*)ADC_PosFeedbackRaw[0] , N_POT_BUF   );
 80095d2:	2206      	movs	r2, #6
 80095d4:	4907      	ldr	r1, [pc, #28]	@ (80095f4 <EN_DMA_IT+0x30>)
 80095d6:	4808      	ldr	r0, [pc, #32]	@ (80095f8 <EN_DMA_IT+0x34>)
 80095d8:	f001 f924 	bl	800a824 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3 , (uint32_t*)ADC_PosFeedbackRaw[1] , N_POT_BUF   );
 80095dc:	2206      	movs	r2, #6
 80095de:	4907      	ldr	r1, [pc, #28]	@ (80095fc <EN_DMA_IT+0x38>)
 80095e0:	4807      	ldr	r0, [pc, #28]	@ (8009600 <EN_DMA_IT+0x3c>)
 80095e2:	f001 f91f 	bl	800a824 <HAL_ADC_Start_DMA>
}
 80095e6:	bf00      	nop
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200015d8 	.word	0x200015d8
 80095f0:	200003d4 	.word	0x200003d4
 80095f4:	20000a20 	.word	0x20000a20
 80095f8:	2000041c 	.word	0x2000041c
 80095fc:	20000a2c 	.word	0x20000a2c
 8009600:	20000464 	.word	0x20000464

08009604 <I2C_ReadAvailableDevices>:

void I2C_ReadAvailableDevices(I2C_HandleTypeDef *hi2c, uint8_t *deviceAddresses, uint8_t *numDevices) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
    uint8_t address;
    *numDevices = 0;  // Initialize the count of devices
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]

    // Iterate through possible 7-bit I2C addresses (0x00 to 0x7F)
    for (address = 0; address <= 0x7F; address++) {
 8009616:	2300      	movs	r3, #0
 8009618:	75fb      	strb	r3, [r7, #23]
 800961a:	e020      	b.n	800965e <I2C_ReadAvailableDevices+0x5a>
        // Try to perform an I2C device read operation
        if (HAL_I2C_IsDeviceReady(hi2c, address << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	b29b      	uxth	r3, r3
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	b299      	uxth	r1, r3
 8009624:	f04f 33ff 	mov.w	r3, #4294967295
 8009628:	2201      	movs	r2, #1
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f003 fccc 	bl	800cfc8 <HAL_I2C_IsDeviceReady>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d110      	bne.n	8009658 <I2C_ReadAvailableDevices+0x54>
            // Device with this address is available
            if (*numDevices < MAX_DEVICES) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d114      	bne.n	8009668 <I2C_ReadAvailableDevices+0x64>
                deviceAddresses[*numDevices] = address;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4413      	add	r3, r2
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	701a      	strb	r2, [r3, #0]
                (*numDevices)++;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	701a      	strb	r2, [r3, #0]
    for (address = 0; address <= 0x7F; address++) {
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	3301      	adds	r3, #1
 800965c:	75fb      	strb	r3, [r7, #23]
 800965e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dada      	bge.n	800961c <I2C_ReadAvailableDevices+0x18>
                // Array size exceeded, break the loop
                break;
            }
        }
    }
}
 8009666:	e000      	b.n	800966a <I2C_ReadAvailableDevices+0x66>
                break;
 8009668:	bf00      	nop
}
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	DIS_motors();
 8009678:	f7fe fa28 	bl	8007acc <DIS_motors>
	swd_prints("\n ----------ERROR_HANDLER Infinite loop----------");
 800967c:	4805      	ldr	r0, [pc, #20]	@ (8009694 <Error_Handler+0x20>)
 800967e:	f00e ff57 	bl	8018530 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009682:	b672      	cpsid	i
}
 8009684:	bf00      	nop
  __disable_irq();
  HAL_GPIO_WritePin(LED_GPIO_Port , LED_Pin , GPIO_PIN_SET);
 8009686:	2201      	movs	r2, #1
 8009688:	2104      	movs	r1, #4
 800968a:	4803      	ldr	r0, [pc, #12]	@ (8009698 <Error_Handler+0x24>)
 800968c:	f002 fcd6 	bl	800c03c <HAL_GPIO_WritePin>
  while (1)
 8009690:	bf00      	nop
 8009692:	e7fd      	b.n	8009690 <Error_Handler+0x1c>
 8009694:	0801d480 	.word	0x0801d480
 8009698:	40021000 	.word	0x40021000

0800969c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
 80096a6:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	4a0f      	ldr	r2, [pc, #60]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80096b2:	4b0d      	ldr	r3, [pc, #52]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ba:	607b      	str	r3, [r7, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80096be:	2300      	movs	r3, #0
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	4b09      	ldr	r3, [pc, #36]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	4a08      	ldr	r2, [pc, #32]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80096ce:	4b06      	ldr	r3, [pc, #24]	@ (80096e8 <HAL_MspInit+0x4c>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80096da:	bf00      	nop
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40023800 	.word	0x40023800

080096ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b090      	sub	sp, #64	@ 0x40
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	605a      	str	r2, [r3, #4]
 80096fe:	609a      	str	r2, [r3, #8]
 8009700:	60da      	str	r2, [r3, #12]
 8009702:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a80      	ldr	r2, [pc, #512]	@ (800990c <HAL_ADC_MspInit+0x220>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d161      	bne.n	80097d2 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009712:	4b7f      	ldr	r3, [pc, #508]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009716:	4a7e      	ldr	r2, [pc, #504]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800971c:	6453      	str	r3, [r2, #68]	@ 0x44
 800971e:	4b7c      	ldr	r3, [pc, #496]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009728:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
 800972e:	4b78      	ldr	r3, [pc, #480]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009732:	4a77      	ldr	r2, [pc, #476]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009734:	f043 0301 	orr.w	r3, r3, #1
 8009738:	6313      	str	r3, [r2, #48]	@ 0x30
 800973a:	4b75      	ldr	r3, [pc, #468]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 800973c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CURR_FB_Pin;
 8009746:	2304      	movs	r3, #4
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800974a:	2303      	movs	r3, #3
 800974c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800974e:	2300      	movs	r3, #0
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(CURR_FB_GPIO_Port, &GPIO_InitStruct);
 8009752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009756:	4619      	mov	r1, r3
 8009758:	486e      	ldr	r0, [pc, #440]	@ (8009914 <HAL_ADC_MspInit+0x228>)
 800975a:	f002 fabb 	bl	800bcd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800975e:	4b6e      	ldr	r3, [pc, #440]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009760:	4a6e      	ldr	r2, [pc, #440]	@ (800991c <HAL_ADC_MspInit+0x230>)
 8009762:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009764:	4b6c      	ldr	r3, [pc, #432]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009766:	2200      	movs	r2, #0
 8009768:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800976a:	4b6b      	ldr	r3, [pc, #428]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009770:	4b69      	ldr	r3, [pc, #420]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009772:	2200      	movs	r2, #0
 8009774:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009776:	4b68      	ldr	r3, [pc, #416]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800977c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800977e:	4b66      	ldr	r3, [pc, #408]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009784:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009786:	4b64      	ldr	r3, [pc, #400]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009788:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800978c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800978e:	4b62      	ldr	r3, [pc, #392]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009794:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009796:	4b60      	ldr	r3, [pc, #384]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 8009798:	2200      	movs	r2, #0
 800979a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800979c:	4b5e      	ldr	r3, [pc, #376]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 800979e:	2204      	movs	r2, #4
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80097a2:	4b5d      	ldr	r3, [pc, #372]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097a4:	2203      	movs	r2, #3
 80097a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80097a8:	4b5b      	ldr	r3, [pc, #364]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80097ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80097b4:	4858      	ldr	r0, [pc, #352]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097b6:	f001 fe8b 	bl	800b4d0 <HAL_DMA_Init>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80097c0:	f7ff ff58 	bl	8009674 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a54      	ldr	r2, [pc, #336]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80097ca:	4a53      	ldr	r2, [pc, #332]	@ (8009918 <HAL_ADC_MspInit+0x22c>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80097d0:	e131      	b.n	8009a36 <HAL_ADC_MspInit+0x34a>
  else if(hadc->Instance==ADC2)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a52      	ldr	r2, [pc, #328]	@ (8009920 <HAL_ADC_MspInit+0x234>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	f040 80ab 	bne.w	8009934 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80097de:	2300      	movs	r3, #0
 80097e0:	623b      	str	r3, [r7, #32]
 80097e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 80097e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e6:	4a4a      	ldr	r2, [pc, #296]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 80097e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80097ee:	4b48      	ldr	r3, [pc, #288]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 80097f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097f6:	623b      	str	r3, [r7, #32]
 80097f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	4b44      	ldr	r3, [pc, #272]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009802:	4a43      	ldr	r2, [pc, #268]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009804:	f043 0301 	orr.w	r3, r3, #1
 8009808:	6313      	str	r3, [r2, #48]	@ 0x30
 800980a:	4b41      	ldr	r3, [pc, #260]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 800980c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009816:	2300      	movs	r3, #0
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	4b3d      	ldr	r3, [pc, #244]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981e:	4a3c      	ldr	r2, [pc, #240]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009820:	f043 0304 	orr.w	r3, r3, #4
 8009824:	6313      	str	r3, [r2, #48]	@ 0x30
 8009826:	4b3a      	ldr	r3, [pc, #232]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	4b36      	ldr	r3, [pc, #216]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800983a:	4a35      	ldr	r2, [pc, #212]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 800983c:	f043 0302 	orr.w	r3, r3, #2
 8009840:	6313      	str	r3, [r2, #48]	@ 0x30
 8009842:	4b33      	ldr	r3, [pc, #204]	@ (8009910 <HAL_ADC_MspInit+0x224>)
 8009844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = POT8_Pin|POT5_Pin;
 800984e:	23a0      	movs	r3, #160	@ 0xa0
 8009850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009852:	2303      	movs	r3, #3
 8009854:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009856:	2300      	movs	r3, #0
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800985a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800985e:	4619      	mov	r1, r3
 8009860:	482c      	ldr	r0, [pc, #176]	@ (8009914 <HAL_ADC_MspInit+0x228>)
 8009862:	f002 fa37 	bl	800bcd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT10_Pin|POT1_Pin;
 8009866:	2330      	movs	r3, #48	@ 0x30
 8009868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800986a:	2303      	movs	r3, #3
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009876:	4619      	mov	r1, r3
 8009878:	482a      	ldr	r0, [pc, #168]	@ (8009924 <HAL_ADC_MspInit+0x238>)
 800987a:	f002 fa2b 	bl	800bcd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT7_Pin|POT4_Pin;
 800987e:	2303      	movs	r3, #3
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009882:	2303      	movs	r3, #3
 8009884:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800988a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800988e:	4619      	mov	r1, r3
 8009890:	4825      	ldr	r0, [pc, #148]	@ (8009928 <HAL_ADC_MspInit+0x23c>)
 8009892:	f002 fa1f 	bl	800bcd4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8009896:	4b25      	ldr	r3, [pc, #148]	@ (800992c <HAL_ADC_MspInit+0x240>)
 8009898:	4a25      	ldr	r2, [pc, #148]	@ (8009930 <HAL_ADC_MspInit+0x244>)
 800989a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800989c:	4b23      	ldr	r3, [pc, #140]	@ (800992c <HAL_ADC_MspInit+0x240>)
 800989e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80098a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098a4:	4b21      	ldr	r3, [pc, #132]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80098aa:	4b20      	ldr	r3, [pc, #128]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80098b0:	4b1e      	ldr	r3, [pc, #120]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80098b8:	4b1c      	ldr	r3, [pc, #112]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80098c0:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80098c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80098c8:	4b18      	ldr	r3, [pc, #96]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80098d0:	4b16      	ldr	r3, [pc, #88]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80098d6:	4b15      	ldr	r3, [pc, #84]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098d8:	2204      	movs	r2, #4
 80098da:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80098dc:	4b13      	ldr	r3, [pc, #76]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098de:	2203      	movs	r2, #3
 80098e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80098e8:	4b10      	ldr	r3, [pc, #64]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80098ee:	480f      	ldr	r0, [pc, #60]	@ (800992c <HAL_ADC_MspInit+0x240>)
 80098f0:	f001 fdee 	bl	800b4d0 <HAL_DMA_Init>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_ADC_MspInit+0x212>
      Error_Handler();
 80098fa:	f7ff febb 	bl	8009674 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a0a      	ldr	r2, [pc, #40]	@ (800992c <HAL_ADC_MspInit+0x240>)
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38
 8009904:	4a09      	ldr	r2, [pc, #36]	@ (800992c <HAL_ADC_MspInit+0x240>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800990a:	e094      	b.n	8009a36 <HAL_ADC_MspInit+0x34a>
 800990c:	40012000 	.word	0x40012000
 8009910:	40023800 	.word	0x40023800
 8009914:	40020000 	.word	0x40020000
 8009918:	200004ac 	.word	0x200004ac
 800991c:	40026410 	.word	0x40026410
 8009920:	40012100 	.word	0x40012100
 8009924:	40020800 	.word	0x40020800
 8009928:	40020400 	.word	0x40020400
 800992c:	2000050c 	.word	0x2000050c
 8009930:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a41      	ldr	r2, [pc, #260]	@ (8009a40 <HAL_ADC_MspInit+0x354>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d17b      	bne.n	8009a36 <HAL_ADC_MspInit+0x34a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800993e:	2300      	movs	r3, #0
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	4b40      	ldr	r3, [pc, #256]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	4a3f      	ldr	r2, [pc, #252]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800994c:	6453      	str	r3, [r2, #68]	@ 0x44
 800994e:	4b3d      	ldr	r3, [pc, #244]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	4b39      	ldr	r3, [pc, #228]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009962:	4a38      	ldr	r2, [pc, #224]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009964:	f043 0304 	orr.w	r3, r3, #4
 8009968:	6313      	str	r3, [r2, #48]	@ 0x30
 800996a:	4b36      	ldr	r3, [pc, #216]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 800996c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	4b32      	ldr	r3, [pc, #200]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	4a31      	ldr	r2, [pc, #196]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	6313      	str	r3, [r2, #48]	@ 0x30
 8009986:	4b2f      	ldr	r3, [pc, #188]	@ (8009a44 <HAL_ADC_MspInit+0x358>)
 8009988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POT12_Pin|POT3_Pin|POT6_Pin|POT9_Pin;
 8009992:	230f      	movs	r3, #15
 8009994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009996:	2303      	movs	r3, #3
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800999a:	2300      	movs	r3, #0
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800999e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099a2:	4619      	mov	r1, r3
 80099a4:	4828      	ldr	r0, [pc, #160]	@ (8009a48 <HAL_ADC_MspInit+0x35c>)
 80099a6:	f002 f995 	bl	800bcd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT11_Pin|POT2_Pin;
 80099aa:	2309      	movs	r3, #9
 80099ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80099ae:	2303      	movs	r3, #3
 80099b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099ba:	4619      	mov	r1, r3
 80099bc:	4823      	ldr	r0, [pc, #140]	@ (8009a4c <HAL_ADC_MspInit+0x360>)
 80099be:	f002 f989 	bl	800bcd4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80099c2:	4b23      	ldr	r3, [pc, #140]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099c4:	4a23      	ldr	r2, [pc, #140]	@ (8009a54 <HAL_ADC_MspInit+0x368>)
 80099c6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80099c8:	4b21      	ldr	r3, [pc, #132]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80099ce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80099d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099d8:	2200      	movs	r2, #0
 80099da:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80099dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80099e2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80099e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099ea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80099ec:	4b18      	ldr	r3, [pc, #96]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80099f2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80099f4:	4b16      	ldr	r3, [pc, #88]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099fa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80099fc:	4b14      	ldr	r3, [pc, #80]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009a02:	4b13      	ldr	r3, [pc, #76]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a04:	2204      	movs	r2, #4
 8009a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009a08:	4b11      	ldr	r3, [pc, #68]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8009a0e:	4b10      	ldr	r3, [pc, #64]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8009a1a:	480d      	ldr	r0, [pc, #52]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a1c:	f001 fd58 	bl	800b4d0 <HAL_DMA_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <HAL_ADC_MspInit+0x33e>
      Error_Handler();
 8009a26:	f7ff fe25 	bl	8009674 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a08      	ldr	r2, [pc, #32]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a30:	4a07      	ldr	r2, [pc, #28]	@ (8009a50 <HAL_ADC_MspInit+0x364>)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8009a36:	bf00      	nop
 8009a38:	3740      	adds	r7, #64	@ 0x40
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40012200 	.word	0x40012200
 8009a44:	40023800 	.word	0x40023800
 8009a48:	40020800 	.word	0x40020800
 8009a4c:	40020000 	.word	0x40020000
 8009a50:	2000056c 	.word	0x2000056c
 8009a54:	40026428 	.word	0x40026428

08009a58 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08c      	sub	sp, #48	@ 0x30
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a60:	f107 031c 	add.w	r3, r7, #28
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	609a      	str	r2, [r3, #8]
 8009a6c:	60da      	str	r2, [r3, #12]
 8009a6e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a59      	ldr	r2, [pc, #356]	@ (8009bdc <HAL_DCMI_MspInit+0x184>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	f040 80ac 	bne.w	8009bd4 <HAL_DCMI_MspInit+0x17c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	4b57      	ldr	r3, [pc, #348]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a84:	4a56      	ldr	r2, [pc, #344]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a8c:	4b54      	ldr	r3, [pc, #336]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	61bb      	str	r3, [r7, #24]
 8009a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	4b50      	ldr	r3, [pc, #320]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009aa2:	f043 0310 	orr.w	r3, r3, #16
 8009aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	617b      	str	r3, [r7, #20]
 8009ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	4b49      	ldr	r3, [pc, #292]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	4a48      	ldr	r2, [pc, #288]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ac4:	4b46      	ldr	r3, [pc, #280]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	4b42      	ldr	r3, [pc, #264]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad8:	4a41      	ldr	r2, [pc, #260]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009ada:	f043 0302 	orr.w	r3, r3, #2
 8009ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8009be0 <HAL_DCMI_MspInit+0x188>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8009aec:	2373      	movs	r3, #115	@ 0x73
 8009aee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af0:	2302      	movs	r3, #2
 8009af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af8:	2300      	movs	r3, #0
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009afc:	230d      	movs	r3, #13
 8009afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b00:	f107 031c 	add.w	r3, r7, #28
 8009b04:	4619      	mov	r1, r3
 8009b06:	4837      	ldr	r0, [pc, #220]	@ (8009be4 <HAL_DCMI_MspInit+0x18c>)
 8009b08:	f002 f8e4 	bl	800bcd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8009b0c:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8009b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b12:	2302      	movs	r3, #2
 8009b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009b1e:	230d      	movs	r3, #13
 8009b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b22:	f107 031c 	add.w	r3, r7, #28
 8009b26:	4619      	mov	r1, r3
 8009b28:	482f      	ldr	r0, [pc, #188]	@ (8009be8 <HAL_DCMI_MspInit+0x190>)
 8009b2a:	f002 f8d3 	bl	800bcd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009b2e:	23c0      	movs	r3, #192	@ 0xc0
 8009b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b32:	2302      	movs	r3, #2
 8009b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009b3e:	230d      	movs	r3, #13
 8009b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b42:	f107 031c 	add.w	r3, r7, #28
 8009b46:	4619      	mov	r1, r3
 8009b48:	4828      	ldr	r0, [pc, #160]	@ (8009bec <HAL_DCMI_MspInit+0x194>)
 8009b4a:	f002 f8c3 	bl	800bcd4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream7;
 8009b4e:	4b28      	ldr	r3, [pc, #160]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b50:	4a28      	ldr	r2, [pc, #160]	@ (8009bf4 <HAL_DCMI_MspInit+0x19c>)
 8009b52:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8009b54:	4b26      	ldr	r3, [pc, #152]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009b5a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b5c:	4b24      	ldr	r3, [pc, #144]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b62:	4b23      	ldr	r3, [pc, #140]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8009b68:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b6e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009b70:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009b76:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009b78:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009b7e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8009b80:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b86:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009b88:	4b19      	ldr	r3, [pc, #100]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009b8e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009b90:	4b17      	ldr	r3, [pc, #92]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b92:	2204      	movs	r2, #4
 8009b94:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009b96:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b98:	2203      	movs	r2, #3
 8009b9a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8009b9c:	4b14      	ldr	r3, [pc, #80]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009ba2:	4b13      	ldr	r3, [pc, #76]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8009ba8:	4811      	ldr	r0, [pc, #68]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009baa:	f001 fc91 	bl	800b4d0 <HAL_DMA_Init>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <HAL_DCMI_MspInit+0x160>
    {
      Error_Handler();
 8009bb4:	f7ff fd5e 	bl	8009674 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a0d      	ldr	r2, [pc, #52]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009bbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8009bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf0 <HAL_DCMI_MspInit+0x198>)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	204e      	movs	r0, #78	@ 0x4e
 8009bca:	f001 fb20 	bl	800b20e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8009bce:	204e      	movs	r0, #78	@ 0x4e
 8009bd0:	f001 fb39 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8009bd4:	bf00      	nop
 8009bd6:	3730      	adds	r7, #48	@ 0x30
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	50050000 	.word	0x50050000
 8009be0:	40023800 	.word	0x40023800
 8009be4:	40021000 	.word	0x40021000
 8009be8:	40020000 	.word	0x40020000
 8009bec:	40020400 	.word	0x40020400
 8009bf0:	2000060c 	.word	0x2000060c
 8009bf4:	400264b8 	.word	0x400264b8

08009bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	@ 0x30
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c00:	f107 031c 	add.w	r3, r7, #28
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
 8009c0c:	60da      	str	r2, [r3, #12]
 8009c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a33      	ldr	r2, [pc, #204]	@ (8009ce4 <HAL_I2C_MspInit+0xec>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d12d      	bne.n	8009c76 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	4b32      	ldr	r3, [pc, #200]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c22:	4a31      	ldr	r2, [pc, #196]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c24:	f043 0302 	orr.w	r3, r3, #2
 8009c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009c36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009c3c:	2312      	movs	r3, #18
 8009c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c40:	2301      	movs	r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c44:	2303      	movs	r3, #3
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009c48:	2304      	movs	r3, #4
 8009c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c4c:	f107 031c 	add.w	r3, r7, #28
 8009c50:	4619      	mov	r1, r3
 8009c52:	4826      	ldr	r0, [pc, #152]	@ (8009cec <HAL_I2C_MspInit+0xf4>)
 8009c54:	f002 f83e 	bl	800bcd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	4b22      	ldr	r3, [pc, #136]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c60:	4a21      	ldr	r2, [pc, #132]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c68:	4b1f      	ldr	r3, [pc, #124]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009c74:	e031      	b.n	8009cda <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf0 <HAL_I2C_MspInit+0xf8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d12c      	bne.n	8009cda <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]
 8009c84:	4b18      	ldr	r3, [pc, #96]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c88:	4a17      	ldr	r2, [pc, #92]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c8a:	f043 0302 	orr.w	r3, r3, #2
 8009c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c90:	4b15      	ldr	r3, [pc, #84]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009c9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ca2:	2312      	movs	r3, #18
 8009ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009caa:	2303      	movs	r3, #3
 8009cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009cae:	2304      	movs	r3, #4
 8009cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb2:	f107 031c 	add.w	r3, r7, #28
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	480c      	ldr	r0, [pc, #48]	@ (8009cec <HAL_I2C_MspInit+0xf4>)
 8009cba:	f002 f80b 	bl	800bcd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	4b09      	ldr	r3, [pc, #36]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	4a08      	ldr	r2, [pc, #32]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cce:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <HAL_I2C_MspInit+0xf0>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	bf00      	nop
 8009cdc:	3730      	adds	r7, #48	@ 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40005400 	.word	0x40005400
 8009ce8:	40023800 	.word	0x40023800
 8009cec:	40020400 	.word	0x40020400
 8009cf0:	40005800 	.word	0x40005800

08009cf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	@ 0x28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	609a      	str	r2, [r3, #8]
 8009d08:	60da      	str	r2, [r3, #12]
 8009d0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a28      	ldr	r2, [pc, #160]	@ (8009db4 <HAL_SD_MspInit+0xc0>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d14a      	bne.n	8009dac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	4b27      	ldr	r3, [pc, #156]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	4a26      	ldr	r2, [pc, #152]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d26:	4b24      	ldr	r3, [pc, #144]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	4b20      	ldr	r3, [pc, #128]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d3c:	f043 0304 	orr.w	r3, r3, #4
 8009d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d42:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60bb      	str	r3, [r7, #8]
 8009d52:	4b19      	ldr	r3, [pc, #100]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d56:	4a18      	ldr	r2, [pc, #96]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d58:	f043 0308 	orr.w	r3, r3, #8
 8009d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d5e:	4b16      	ldr	r3, [pc, #88]	@ (8009db8 <HAL_SD_MspInit+0xc4>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d62:	f003 0308 	and.w	r3, r3, #8
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8009d6a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8009d6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d70:	2302      	movs	r3, #2
 8009d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d80:	f107 0314 	add.w	r3, r7, #20
 8009d84:	4619      	mov	r1, r3
 8009d86:	480d      	ldr	r0, [pc, #52]	@ (8009dbc <HAL_SD_MspInit+0xc8>)
 8009d88:	f001 ffa4 	bl	800bcd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d90:	2302      	movs	r3, #2
 8009d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d94:	2300      	movs	r3, #0
 8009d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009da0:	f107 0314 	add.w	r3, r7, #20
 8009da4:	4619      	mov	r1, r3
 8009da6:	4806      	ldr	r0, [pc, #24]	@ (8009dc0 <HAL_SD_MspInit+0xcc>)
 8009da8:	f001 ff94 	bl	800bcd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009dac:	bf00      	nop
 8009dae:	3728      	adds	r7, #40	@ 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	40012c00 	.word	0x40012c00
 8009db8:	40023800 	.word	0x40023800
 8009dbc:	40020800 	.word	0x40020800
 8009dc0:	40020c00 	.word	0x40020c00

08009dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a48      	ldr	r2, [pc, #288]	@ (8009ef4 <HAL_TIM_Base_MspInit+0x130>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d116      	bne.n	8009e04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	4b47      	ldr	r3, [pc, #284]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dde:	4a46      	ldr	r2, [pc, #280]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009de0:	f043 0301 	orr.w	r3, r3, #1
 8009de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009de6:	4b44      	ldr	r3, [pc, #272]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	61fb      	str	r3, [r7, #28]
 8009df0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	201a      	movs	r0, #26
 8009df8:	f001 fa09 	bl	800b20e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009dfc:	201a      	movs	r0, #26
 8009dfe:	f001 fa22 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8009e02:	e072      	b.n	8009eea <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e0c:	d10e      	bne.n	8009e2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	4b39      	ldr	r3, [pc, #228]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e16:	4a38      	ldr	r2, [pc, #224]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e1e:	4b36      	ldr	r3, [pc, #216]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	61bb      	str	r3, [r7, #24]
 8009e28:	69bb      	ldr	r3, [r7, #24]
}
 8009e2a:	e05e      	b.n	8009eea <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a32      	ldr	r2, [pc, #200]	@ (8009efc <HAL_TIM_Base_MspInit+0x138>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d10e      	bne.n	8009e54 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e40:	f043 0304 	orr.w	r3, r3, #4
 8009e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e46:	4b2c      	ldr	r3, [pc, #176]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4a:	f003 0304 	and.w	r3, r3, #4
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	697b      	ldr	r3, [r7, #20]
}
 8009e52:	e04a      	b.n	8009eea <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a29      	ldr	r2, [pc, #164]	@ (8009f00 <HAL_TIM_Base_MspInit+0x13c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d116      	bne.n	8009e8c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009e5e:	2300      	movs	r3, #0
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	4b25      	ldr	r3, [pc, #148]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	4a24      	ldr	r2, [pc, #144]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e68:	f043 0320 	orr.w	r3, r3, #32
 8009e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e6e:	4b22      	ldr	r3, [pc, #136]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	613b      	str	r3, [r7, #16]
 8009e78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	2037      	movs	r0, #55	@ 0x37
 8009e80:	f001 f9c5 	bl	800b20e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009e84:	2037      	movs	r0, #55	@ 0x37
 8009e86:	f001 f9de 	bl	800b246 <HAL_NVIC_EnableIRQ>
}
 8009e8a:	e02e      	b.n	8009eea <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a1c      	ldr	r2, [pc, #112]	@ (8009f04 <HAL_TIM_Base_MspInit+0x140>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d10e      	bne.n	8009eb4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	4b17      	ldr	r3, [pc, #92]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e9e:	4a16      	ldr	r2, [pc, #88]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ea6:	4b14      	ldr	r3, [pc, #80]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
}
 8009eb2:	e01a      	b.n	8009eea <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM11)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a13      	ldr	r2, [pc, #76]	@ (8009f08 <HAL_TIM_Base_MspInit+0x144>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d115      	bne.n	8009eea <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ece:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef8 <HAL_TIM_Base_MspInit+0x134>)
 8009ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ed6:	60bb      	str	r3, [r7, #8]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009eda:	2200      	movs	r2, #0
 8009edc:	2100      	movs	r1, #0
 8009ede:	201a      	movs	r0, #26
 8009ee0:	f001 f995 	bl	800b20e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009ee4:	201a      	movs	r0, #26
 8009ee6:	f001 f9ae 	bl	800b246 <HAL_NVIC_EnableIRQ>
}
 8009eea:	bf00      	nop
 8009eec:	3720      	adds	r7, #32
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40023800 	.word	0x40023800
 8009efc:	40000800 	.word	0x40000800
 8009f00:	40001400 	.word	0x40001400
 8009f04:	40014400 	.word	0x40014400
 8009f08:	40014800 	.word	0x40014800

08009f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a0b      	ldr	r2, [pc, #44]	@ (8009f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d10d      	bne.n	8009f3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <HAL_TIM_PWM_MspInit+0x40>)
 8009f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f26:	4a09      	ldr	r2, [pc, #36]	@ (8009f4c <HAL_TIM_PWM_MspInit+0x40>)
 8009f28:	f043 0302 	orr.w	r3, r3, #2
 8009f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f2e:	4b07      	ldr	r3, [pc, #28]	@ (8009f4c <HAL_TIM_PWM_MspInit+0x40>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40000400 	.word	0x40000400
 8009f4c:	40023800 	.word	0x40023800

08009f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08c      	sub	sp, #48	@ 0x30
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f58:	f107 031c 	add.w	r3, r7, #28
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	605a      	str	r2, [r3, #4]
 8009f62:	609a      	str	r2, [r3, #8]
 8009f64:	60da      	str	r2, [r3, #12]
 8009f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a49      	ldr	r2, [pc, #292]	@ (800a094 <HAL_TIM_MspPostInit+0x144>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d11f      	bne.n	8009fb2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009f72:	2300      	movs	r3, #0
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	4b48      	ldr	r3, [pc, #288]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f7a:	4a47      	ldr	r2, [pc, #284]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009f7c:	f043 0310 	orr.w	r3, r3, #16
 8009f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f82:	4b45      	ldr	r3, [pc, #276]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM10_Pin|PWM9_Pin|PWM8_Pin|PWM11_Pin;
 8009f8e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8009f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f94:	2302      	movs	r3, #2
 8009f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009fa4:	f107 031c 	add.w	r3, r7, #28
 8009fa8:	4619      	mov	r1, r3
 8009faa:	483c      	ldr	r0, [pc, #240]	@ (800a09c <HAL_TIM_MspPostInit+0x14c>)
 8009fac:	f001 fe92 	bl	800bcd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8009fb0:	e06c      	b.n	800a08c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fba:	d11f      	bne.n	8009ffc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	4b35      	ldr	r3, [pc, #212]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc4:	4a34      	ldr	r2, [pc, #208]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fcc:	4b32      	ldr	r3, [pc, #200]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 8009fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM12_Pin|PWM2_Pin;
 8009fd8:	f248 0302 	movw	r3, #32770	@ 0x8002
 8009fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009fea:	2301      	movs	r3, #1
 8009fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fee:	f107 031c 	add.w	r3, r7, #28
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	482a      	ldr	r0, [pc, #168]	@ (800a0a0 <HAL_TIM_MspPostInit+0x150>)
 8009ff6:	f001 fe6d 	bl	800bcd4 <HAL_GPIO_Init>
}
 8009ffa:	e047      	b.n	800a08c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a28      	ldr	r2, [pc, #160]	@ (800a0a4 <HAL_TIM_MspPostInit+0x154>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d11e      	bne.n	800a044 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a006:	2300      	movs	r3, #0
 800a008:	613b      	str	r3, [r7, #16]
 800a00a:	4b23      	ldr	r3, [pc, #140]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00e:	4a22      	ldr	r2, [pc, #136]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a010:	f043 0304 	orr.w	r3, r3, #4
 800a014:	6313      	str	r3, [r2, #48]	@ 0x30
 800a016:	4b20      	ldr	r3, [pc, #128]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	613b      	str	r3, [r7, #16]
 800a020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM5_Pin;
 800a022:	23c0      	movs	r3, #192	@ 0xc0
 800a024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a026:	2302      	movs	r3, #2
 800a028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a02e:	2300      	movs	r3, #0
 800a030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a032:	2302      	movs	r3, #2
 800a034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a036:	f107 031c 	add.w	r3, r7, #28
 800a03a:	4619      	mov	r1, r3
 800a03c:	481a      	ldr	r0, [pc, #104]	@ (800a0a8 <HAL_TIM_MspPostInit+0x158>)
 800a03e:	f001 fe49 	bl	800bcd4 <HAL_GPIO_Init>
}
 800a042:	e023      	b.n	800a08c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a18      	ldr	r2, [pc, #96]	@ (800a0ac <HAL_TIM_MspPostInit+0x15c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d11e      	bne.n	800a08c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	4b11      	ldr	r3, [pc, #68]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a056:	4a10      	ldr	r2, [pc, #64]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a058:	f043 0308 	orr.w	r3, r3, #8
 800a05c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a05e:	4b0e      	ldr	r3, [pc, #56]	@ (800a098 <HAL_TIM_MspPostInit+0x148>)
 800a060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM4_Pin|PWM7_Pin|PWM3_Pin;
 800a06a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a06e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a070:	2302      	movs	r3, #2
 800a072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a074:	2300      	movs	r3, #0
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a078:	2300      	movs	r3, #0
 800a07a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a07c:	2302      	movs	r3, #2
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a080:	f107 031c 	add.w	r3, r7, #28
 800a084:	4619      	mov	r1, r3
 800a086:	480a      	ldr	r0, [pc, #40]	@ (800a0b0 <HAL_TIM_MspPostInit+0x160>)
 800a088:	f001 fe24 	bl	800bcd4 <HAL_GPIO_Init>
}
 800a08c:	bf00      	nop
 800a08e:	3730      	adds	r7, #48	@ 0x30
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40010000 	.word	0x40010000
 800a098:	40023800 	.word	0x40023800
 800a09c:	40021000 	.word	0x40021000
 800a0a0:	40020000 	.word	0x40020000
 800a0a4:	40000400 	.word	0x40000400
 800a0a8:	40020800 	.word	0x40020800
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40020c00 	.word	0x40020c00

0800a0b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08c      	sub	sp, #48	@ 0x30
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0bc:	f107 031c 	add.w	r3, r7, #28
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	605a      	str	r2, [r3, #4]
 800a0c6:	609a      	str	r2, [r3, #8]
 800a0c8:	60da      	str	r2, [r3, #12]
 800a0ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a32      	ldr	r2, [pc, #200]	@ (800a19c <HAL_UART_MspInit+0xe8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d12c      	bne.n	800a130 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	4b31      	ldr	r3, [pc, #196]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0de:	4a30      	ldr	r2, [pc, #192]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a0e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0e4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a0e6:	4b2e      	ldr	r3, [pc, #184]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ee:	61bb      	str	r3, [r7, #24]
 800a0f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0fa:	4a29      	ldr	r2, [pc, #164]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a0fc:	f043 0308 	orr.w	r3, r3, #8
 800a100:	6313      	str	r3, [r2, #48]	@ 0x30
 800a102:	4b27      	ldr	r3, [pc, #156]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 800a10e:	2360      	movs	r3, #96	@ 0x60
 800a110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a112:	2302      	movs	r3, #2
 800a114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a116:	2300      	movs	r3, #0
 800a118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a11a:	2303      	movs	r3, #3
 800a11c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a11e:	2307      	movs	r3, #7
 800a120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a122:	f107 031c 	add.w	r3, r7, #28
 800a126:	4619      	mov	r1, r3
 800a128:	481e      	ldr	r0, [pc, #120]	@ (800a1a4 <HAL_UART_MspInit+0xf0>)
 800a12a:	f001 fdd3 	bl	800bcd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a12e:	e031      	b.n	800a194 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1c      	ldr	r2, [pc, #112]	@ (800a1a8 <HAL_UART_MspInit+0xf4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d12c      	bne.n	800a194 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	4b18      	ldr	r3, [pc, #96]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a142:	4a17      	ldr	r2, [pc, #92]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a148:	6413      	str	r3, [r2, #64]	@ 0x40
 800a14a:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	4b11      	ldr	r3, [pc, #68]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15e:	4a10      	ldr	r2, [pc, #64]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a160:	f043 0308 	orr.w	r3, r3, #8
 800a164:	6313      	str	r3, [r2, #48]	@ 0x30
 800a166:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a0 <HAL_UART_MspInit+0xec>)
 800a168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a172:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a178:	2302      	movs	r3, #2
 800a17a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a180:	2303      	movs	r3, #3
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a184:	2307      	movs	r3, #7
 800a186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a188:	f107 031c 	add.w	r3, r7, #28
 800a18c:	4619      	mov	r1, r3
 800a18e:	4805      	ldr	r0, [pc, #20]	@ (800a1a4 <HAL_UART_MspInit+0xf0>)
 800a190:	f001 fda0 	bl	800bcd4 <HAL_GPIO_Init>
}
 800a194:	bf00      	nop
 800a196:	3730      	adds	r7, #48	@ 0x30
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40004400 	.word	0x40004400
 800a1a0:	40023800 	.word	0x40023800
 800a1a4:	40020c00 	.word	0x40020c00
 800a1a8:	40004800 	.word	0x40004800

0800a1ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <NMI_Handler+0x4>

0800a1b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DIS_motors();
 800a1b8:	f7fd fc88 	bl	8007acc <DIS_motors>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a1bc:	bf00      	nop
 800a1be:	e7fd      	b.n	800a1bc <HardFault_Handler+0x8>

0800a1c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <MemManage_Handler+0x4>

0800a1c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a1cc:	bf00      	nop
 800a1ce:	e7fd      	b.n	800a1cc <BusFault_Handler+0x4>

0800a1d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a1d4:	bf00      	nop
 800a1d6:	e7fd      	b.n	800a1d4 <UsageFault_Handler+0x4>

0800a1d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a1dc:	bf00      	nop
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a1ea:	bf00      	nop
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a1f8:	bf00      	nop
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a206:	f000 fa85 	bl	800a714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	 if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_4)){
 800a214:	4b10      	ldr	r3, [pc, #64]	@ (800a258 <EXTI4_IRQHandler+0x48>)
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	f003 0310 	and.w	r3, r3, #16
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d015      	beq.n	800a24c <EXTI4_IRQHandler+0x3c>
		 if(HAL_GPIO_ReadPin(VBUS_DET_GPIO_Port , VBUS_DET_Pin) == GPIO_PIN_SET){
 800a220:	2110      	movs	r1, #16
 800a222:	480e      	ldr	r0, [pc, #56]	@ (800a25c <EXTI4_IRQHandler+0x4c>)
 800a224:	f001 fef2 	bl	800c00c <HAL_GPIO_ReadPin>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d103      	bne.n	800a236 <EXTI4_IRQHandler+0x26>
			rodog.IsEnabled = FALSE;
 800a22e:	4b0c      	ldr	r3, [pc, #48]	@ (800a260 <EXTI4_IRQHandler+0x50>)
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
		 }

		 if(HAL_GPIO_ReadPin(VBUS_DET_GPIO_Port , VBUS_DET_Pin) == GPIO_PIN_RESET){
 800a236:	2110      	movs	r1, #16
 800a238:	4808      	ldr	r0, [pc, #32]	@ (800a25c <EXTI4_IRQHandler+0x4c>)
 800a23a:	f001 fee7 	bl	800c00c <HAL_GPIO_ReadPin>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d103      	bne.n	800a24c <EXTI4_IRQHandler+0x3c>
			 rodog.IsEnabled = TRUE;
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <EXTI4_IRQHandler+0x50>)
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
		 }

	 }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VBUS_DET_Pin);
 800a24c:	2010      	movs	r0, #16
 800a24e:	f001 ff0f 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	40013c00 	.word	0x40013c00
 800a25c:	40020c00 	.word	0x40020c00
 800a260:	200018f8 	.word	0x200018f8

0800a264 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){
 800a268:	4b24      	ldr	r3, [pc, #144]	@ (800a2fc <EXTI9_5_IRQHandler+0x98>)
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d038      	beq.n	800a2e6 <EXTI9_5_IRQHandler+0x82>
		if((HAL_GPIO_ReadPin(VBUS_DET_GPIO_Port , VBUS_DET_Pin) == GPIO_PIN_RESET)){
 800a274:	2110      	movs	r1, #16
 800a276:	4822      	ldr	r0, [pc, #136]	@ (800a300 <EXTI9_5_IRQHandler+0x9c>)
 800a278:	f001 fec8 	bl	800c00c <HAL_GPIO_ReadPin>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d133      	bne.n	800a2ea <EXTI9_5_IRQHandler+0x86>
			if(imu.tap_z){
 800a282:	4b20      	ldr	r3, [pc, #128]	@ (800a304 <EXTI9_5_IRQHandler+0xa0>)
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	f003 0310 	and.w	r3, r3, #16
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02c      	beq.n	800a2ea <EXTI9_5_IRQHandler+0x86>
				static uint8_t last_call_TRUE = 0.0f;
				if(rodog.gait == STOP){
 800a290:	4b1d      	ldr	r3, [pc, #116]	@ (800a308 <EXTI9_5_IRQHandler+0xa4>)
 800a292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a296:	2b00      	cmp	r3, #0
 800a298:	d127      	bne.n	800a2ea <EXTI9_5_IRQHandler+0x86>
					if(rodog.IsEnabled == TRUE && HAL_GetTick() - last_call_TRUE > 10000.0f){
 800a29a:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <EXTI9_5_IRQHandler+0xa4>)
 800a29c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d115      	bne.n	800a2d0 <EXTI9_5_IRQHandler+0x6c>
 800a2a4:	f000 fa4a 	bl	800a73c <HAL_GetTick>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4a18      	ldr	r2, [pc, #96]	@ (800a30c <EXTI9_5_IRQHandler+0xa8>)
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	1a9b      	subs	r3, r3, r2
 800a2b0:	ee07 3a90 	vmov	s15, r3
 800a2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800a310 <EXTI9_5_IRQHandler+0xac>
 800a2bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c4:	dd04      	ble.n	800a2d0 <EXTI9_5_IRQHandler+0x6c>
						rodog.IsEnabled = FALSE;
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <EXTI9_5_IRQHandler+0xa4>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a2ce:	e00c      	b.n	800a2ea <EXTI9_5_IRQHandler+0x86>

					}
					else{
						last_call_TRUE = HAL_GetTick();
 800a2d0:	f000 fa34 	bl	800a73c <HAL_GetTick>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a30c <EXTI9_5_IRQHandler+0xa8>)
 800a2da:	701a      	strb	r2, [r3, #0]
						rodog.IsEnabled = TRUE;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a308 <EXTI9_5_IRQHandler+0xa4>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a2e4:	e001      	b.n	800a2ea <EXTI9_5_IRQHandler+0x86>
					}
				}
			}
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){}
 800a2e6:	4b05      	ldr	r3, [pc, #20]	@ (800a2fc <EXTI9_5_IRQHandler+0x98>)
 800a2e8:	695b      	ldr	r3, [r3, #20]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM_IT1_Pin);
 800a2ea:	2020      	movs	r0, #32
 800a2ec:	f001 fec0 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MAGN_INT_Pin);
 800a2f0:	2080      	movs	r0, #128	@ 0x80
 800a2f2:	f001 febd 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a2f6:	bf00      	nop
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40013c00 	.word	0x40013c00
 800a300:	40020c00 	.word	0x40020c00
 800a304:	20001a6c 	.word	0x20001a6c
 800a308:	200018f8 	.word	0x200018f8
 800a30c:	20001b00 	.word	0x20001b00
 800a310:	461c4000 	.word	0x461c4000

0800a314 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a318:	4803      	ldr	r0, [pc, #12]	@ (800a328 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800a31a:	f006 fed1 	bl	80110c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800a31e:	4803      	ldr	r0, [pc, #12]	@ (800a32c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800a320:	f006 fece 	bl	80110c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a324:	bf00      	nop
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000798 	.word	0x20000798
 800a32c:	20000948 	.word	0x20000948

0800a330 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){UltraSound_front = (V_SOUND*(HAL_GetTick() - UltraSound_t0))/2 ;}
 800a334:	4b22      	ldr	r3, [pc, #136]	@ (800a3c0 <EXTI15_10_IRQHandler+0x90>)
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00c      	beq.n	800a35a <EXTI15_10_IRQHandler+0x2a>
 800a340:	f000 f9fc 	bl	800a73c <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	4b1f      	ldr	r3, [pc, #124]	@ (800a3c4 <EXTI15_10_IRQHandler+0x94>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	4a1e      	ldr	r2, [pc, #120]	@ (800a3c8 <EXTI15_10_IRQHandler+0x98>)
 800a34e:	fb02 f303 	mul.w	r3, r2, r3
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	4a1d      	ldr	r2, [pc, #116]	@ (800a3cc <EXTI15_10_IRQHandler+0x9c>)
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e024      	b.n	800a3a4 <EXTI15_10_IRQHandler+0x74>
  else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14)){UltraSound_right = (V_SOUND*(HAL_GetTick() - UltraSound_t0))/2 ;}
 800a35a:	4b19      	ldr	r3, [pc, #100]	@ (800a3c0 <EXTI15_10_IRQHandler+0x90>)
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00c      	beq.n	800a380 <EXTI15_10_IRQHandler+0x50>
 800a366:	f000 f9e9 	bl	800a73c <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b15      	ldr	r3, [pc, #84]	@ (800a3c4 <EXTI15_10_IRQHandler+0x94>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	4a15      	ldr	r2, [pc, #84]	@ (800a3c8 <EXTI15_10_IRQHandler+0x98>)
 800a374:	fb02 f303 	mul.w	r3, r2, r3
 800a378:	085b      	lsrs	r3, r3, #1
 800a37a:	4a15      	ldr	r2, [pc, #84]	@ (800a3d0 <EXTI15_10_IRQHandler+0xa0>)
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	e011      	b.n	800a3a4 <EXTI15_10_IRQHandler+0x74>
  else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){UltraSound_left  = (V_SOUND*(HAL_GetTick() - UltraSound_t0))/2 ;}
 800a380:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c0 <EXTI15_10_IRQHandler+0x90>)
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <EXTI15_10_IRQHandler+0x74>
 800a38c:	f000 f9d6 	bl	800a73c <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <EXTI15_10_IRQHandler+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	4a0b      	ldr	r2, [pc, #44]	@ (800a3c8 <EXTI15_10_IRQHandler+0x98>)
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	085b      	lsrs	r3, r3, #1
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d4 <EXTI15_10_IRQHandler+0xa4>)
 800a3a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(US_ECHO3_Pin);
 800a3a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a3a8:	f001 fe62 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(US_ECHO2_Pin);
 800a3ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a3b0:	f001 fe5e 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(US_ECHO1_Pin);
 800a3b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a3b8:	f001 fe5a 	bl	800c070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a3bc:	bf00      	nop
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	40013c00 	.word	0x40013c00
 800a3c4:	200016d8 	.word	0x200016d8
 800a3c8:	00053020 	.word	0x00053020
 800a3cc:	200016e4 	.word	0x200016e4
 800a3d0:	200016e0 	.word	0x200016e0
 800a3d4:	200016dc 	.word	0x200016dc

0800a3d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a3dc:	4802      	ldr	r0, [pc, #8]	@ (800a3e8 <TIM7_IRQHandler+0x10>)
 800a3de:	f006 fe6f 	bl	80110c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a3e2:	bf00      	nop
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200008b8 	.word	0x200008b8

0800a3ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a3f0:	4802      	ldr	r0, [pc, #8]	@ (800a3fc <DMA2_Stream0_IRQHandler+0x10>)
 800a3f2:	f001 fa05 	bl	800b800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a3f6:	bf00      	nop
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200004ac 	.word	0x200004ac

0800a400 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800a404:	4802      	ldr	r0, [pc, #8]	@ (800a410 <DMA2_Stream1_IRQHandler+0x10>)
 800a406:	f001 f9fb 	bl	800b800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800a40a:	bf00      	nop
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000056c 	.word	0x2000056c

0800a414 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a418:	4802      	ldr	r0, [pc, #8]	@ (800a424 <DMA2_Stream2_IRQHandler+0x10>)
 800a41a:	f001 f9f1 	bl	800b800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2000050c 	.word	0x2000050c

0800a428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a42c:	4802      	ldr	r0, [pc, #8]	@ (800a438 <OTG_FS_IRQHandler+0x10>)
 800a42e:	f003 fcf4 	bl	800de1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a432:	bf00      	nop
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20003000 	.word	0x20003000

0800a43c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800a440:	4802      	ldr	r0, [pc, #8]	@ (800a44c <DMA2_Stream7_IRQHandler+0x10>)
 800a442:	f001 f9dd 	bl	800b800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a446:	bf00      	nop
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	2000060c 	.word	0x2000060c

0800a450 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800a454:	4802      	ldr	r0, [pc, #8]	@ (800a460 <DCMI_IRQHandler+0x10>)
 800a456:	f000 ff11 	bl	800b27c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800a45a:	bf00      	nop
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	200005cc 	.word	0x200005cc

0800a464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
	return 1;
 800a468:	2301      	movs	r3, #1
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <_kill>:

int _kill(int pid, int sig)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a47e:	f00e fa01 	bl	8018884 <__errno>
 800a482:	4603      	mov	r3, r0
 800a484:	2216      	movs	r2, #22
 800a486:	601a      	str	r2, [r3, #0]
	return -1;
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_exit>:

void _exit (int status)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a49c:	f04f 31ff 	mov.w	r1, #4294967295
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ffe7 	bl	800a474 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a4a6:	bf00      	nop
 800a4a8:	e7fd      	b.n	800a4a6 <_exit+0x12>

0800a4aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b086      	sub	sp, #24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e00a      	b.n	800a4d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	4601      	mov	r1, r0
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	60ba      	str	r2, [r7, #8]
 800a4c8:	b2ca      	uxtb	r2, r1
 800a4ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	dbf0      	blt.n	800a4bc <_read+0x12>
	}

return len;
 800a4da:	687b      	ldr	r3, [r7, #4]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e009      	b.n	800a50a <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	60ba      	str	r2, [r7, #8]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3301      	adds	r3, #1
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	dbf1      	blt.n	800a4f6 <_write+0x12>
	}
	return len;
 800a512:	687b      	ldr	r3, [r7, #4]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <_close>:

int _close(int file)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	return -1;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a544:	605a      	str	r2, [r3, #4]
	return 0;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <_isatty>:

int _isatty(int file)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
	return 1;
 800a55c:	2301      	movs	r3, #1
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	607a      	str	r2, [r7, #4]
	return 0;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a58c:	4a14      	ldr	r2, [pc, #80]	@ (800a5e0 <_sbrk+0x5c>)
 800a58e:	4b15      	ldr	r3, [pc, #84]	@ (800a5e4 <_sbrk+0x60>)
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a598:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <_sbrk+0x64>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d102      	bne.n	800a5a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a5a0:	4b11      	ldr	r3, [pc, #68]	@ (800a5e8 <_sbrk+0x64>)
 800a5a2:	4a12      	ldr	r2, [pc, #72]	@ (800a5ec <_sbrk+0x68>)
 800a5a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a5a6:	4b10      	ldr	r3, [pc, #64]	@ (800a5e8 <_sbrk+0x64>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d207      	bcs.n	800a5c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a5b4:	f00e f966 	bl	8018884 <__errno>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	220c      	movs	r2, #12
 800a5bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	e009      	b.n	800a5d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a5c4:	4b08      	ldr	r3, [pc, #32]	@ (800a5e8 <_sbrk+0x64>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a5ca:	4b07      	ldr	r3, [pc, #28]	@ (800a5e8 <_sbrk+0x64>)
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	4a05      	ldr	r2, [pc, #20]	@ (800a5e8 <_sbrk+0x64>)
 800a5d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20020000 	.word	0x20020000
 800a5e4:	00000400 	.word	0x00000400
 800a5e8:	20001b04 	.word	0x20001b04
 800a5ec:	20003878 	.word	0x20003878

0800a5f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a5f4:	4b08      	ldr	r3, [pc, #32]	@ (800a618 <SystemInit+0x28>)
 800a5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fa:	4a07      	ldr	r2, [pc, #28]	@ (800a618 <SystemInit+0x28>)
 800a5fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a604:	4b04      	ldr	r3, [pc, #16]	@ (800a618 <SystemInit+0x28>)
 800a606:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a60a:	609a      	str	r2, [r3, #8]
#endif
}
 800a60c:	bf00      	nop
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	e000ed00 	.word	0xe000ed00

0800a61c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a61c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a620:	480d      	ldr	r0, [pc, #52]	@ (800a658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a622:	490e      	ldr	r1, [pc, #56]	@ (800a65c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a624:	4a0e      	ldr	r2, [pc, #56]	@ (800a660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a628:	e002      	b.n	800a630 <LoopCopyDataInit>

0800a62a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a62a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a62c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a62e:	3304      	adds	r3, #4

0800a630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a634:	d3f9      	bcc.n	800a62a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a636:	4a0b      	ldr	r2, [pc, #44]	@ (800a664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a638:	4c0b      	ldr	r4, [pc, #44]	@ (800a668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a63a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a63c:	e001      	b.n	800a642 <LoopFillZerobss>

0800a63e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a63e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a640:	3204      	adds	r2, #4

0800a642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a644:	d3fb      	bcc.n	800a63e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a646:	f7ff ffd3 	bl	800a5f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a64a:	f00e f921 	bl	8018890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a64e:	f7fc f9a9 	bl	80069a4 <main>
  bx  lr    
 800a652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a65c:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 800a660:	0801dba8 	.word	0x0801dba8
  ldr r2, =_sbss
 800a664:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800a668:	20003878 	.word	0x20003878

0800a66c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a66c:	e7fe      	b.n	800a66c <ADC_IRQHandler>
	...

0800a670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a674:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b0 <HAL_Init+0x40>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a0d      	ldr	r2, [pc, #52]	@ (800a6b0 <HAL_Init+0x40>)
 800a67a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a67e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a680:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b0 <HAL_Init+0x40>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b0 <HAL_Init+0x40>)
 800a686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a68a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a68c:	4b08      	ldr	r3, [pc, #32]	@ (800a6b0 <HAL_Init+0x40>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a07      	ldr	r2, [pc, #28]	@ (800a6b0 <HAL_Init+0x40>)
 800a692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a698:	2003      	movs	r0, #3
 800a69a:	f000 fdad 	bl	800b1f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a69e:	2000      	movs	r0, #0
 800a6a0:	f000 f808 	bl	800a6b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a6a4:	f7fe fffa 	bl	800969c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	40023c00 	.word	0x40023c00

0800a6b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a6bc:	4b12      	ldr	r3, [pc, #72]	@ (800a708 <HAL_InitTick+0x54>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4b12      	ldr	r3, [pc, #72]	@ (800a70c <HAL_InitTick+0x58>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fdc5 	bl	800b262 <HAL_SYSTICK_Config>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e00e      	b.n	800a700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b0f      	cmp	r3, #15
 800a6e6:	d80a      	bhi.n	800a6fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	f000 fd8d 	bl	800b20e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a6f4:	4a06      	ldr	r2, [pc, #24]	@ (800a710 <HAL_InitTick+0x5c>)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e000      	b.n	800a700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	200000f4 	.word	0x200000f4
 800a70c:	200000fc 	.word	0x200000fc
 800a710:	200000f8 	.word	0x200000f8

0800a714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a718:	4b06      	ldr	r3, [pc, #24]	@ (800a734 <HAL_IncTick+0x20>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b06      	ldr	r3, [pc, #24]	@ (800a738 <HAL_IncTick+0x24>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4413      	add	r3, r2
 800a724:	4a04      	ldr	r2, [pc, #16]	@ (800a738 <HAL_IncTick+0x24>)
 800a726:	6013      	str	r3, [r2, #0]
}
 800a728:	bf00      	nop
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	200000fc 	.word	0x200000fc
 800a738:	20001b08 	.word	0x20001b08

0800a73c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
  return uwTick;
 800a740:	4b03      	ldr	r3, [pc, #12]	@ (800a750 <HAL_GetTick+0x14>)
 800a742:	681b      	ldr	r3, [r3, #0]
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20001b08 	.word	0x20001b08

0800a754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a75c:	f7ff ffee 	bl	800a73c <HAL_GetTick>
 800a760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d005      	beq.n	800a77a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a76e:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <HAL_Delay+0x44>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a77a:	bf00      	nop
 800a77c:	f7ff ffde 	bl	800a73c <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d8f7      	bhi.n	800a77c <HAL_Delay+0x28>
  {
  }
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200000fc 	.word	0x200000fc

0800a79c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e033      	b.n	800a81a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fe ff96 	bl	80096ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d2:	f003 0310 	and.w	r3, r3, #16
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d118      	bne.n	800a80c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a7e2:	f023 0302 	bic.w	r3, r3, #2
 800a7e6:	f043 0202 	orr.w	r2, r3, #2
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fab8 	bl	800ad64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fe:	f023 0303 	bic.w	r3, r3, #3
 800a802:	f043 0201 	orr.w	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	641a      	str	r2, [r3, #64]	@ 0x40
 800a80a:	e001      	b.n	800a810 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <HAL_ADC_Start_DMA+0x1e>
 800a83e:	2302      	movs	r3, #2
 800a840:	e0e9      	b.n	800aa16 <HAL_ADC_Start_DMA+0x1f2>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b01      	cmp	r3, #1
 800a856:	d018      	beq.n	800a88a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0201 	orr.w	r2, r2, #1
 800a866:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a868:	4b6d      	ldr	r3, [pc, #436]	@ (800aa20 <HAL_ADC_Start_DMA+0x1fc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a6d      	ldr	r2, [pc, #436]	@ (800aa24 <HAL_ADC_Start_DMA+0x200>)
 800a86e:	fba2 2303 	umull	r2, r3, r2, r3
 800a872:	0c9a      	lsrs	r2, r3, #18
 800a874:	4613      	mov	r3, r2
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	4413      	add	r3, r2
 800a87a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a87c:	e002      	b.n	800a884 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	3b01      	subs	r3, #1
 800a882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1f9      	bne.n	800a87e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a898:	d107      	bne.n	800a8aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	f040 80a1 	bne.w	800a9fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a8c2:	f023 0301 	bic.w	r3, r3, #1
 800a8c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a8e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f8:	d106      	bne.n	800a908 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8fe:	f023 0206 	bic.w	r2, r3, #6
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	645a      	str	r2, [r3, #68]	@ 0x44
 800a906:	e002      	b.n	800a90e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a916:	4b44      	ldr	r3, [pc, #272]	@ (800aa28 <HAL_ADC_Start_DMA+0x204>)
 800a918:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91e:	4a43      	ldr	r2, [pc, #268]	@ (800aa2c <HAL_ADC_Start_DMA+0x208>)
 800a920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	4a42      	ldr	r2, [pc, #264]	@ (800aa30 <HAL_ADC_Start_DMA+0x20c>)
 800a928:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92e:	4a41      	ldr	r2, [pc, #260]	@ (800aa34 <HAL_ADC_Start_DMA+0x210>)
 800a930:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a93a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800a94a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a95a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	334c      	adds	r3, #76	@ 0x4c
 800a966:	4619      	mov	r1, r3
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f000 fe5e 	bl	800b62c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f003 031f 	and.w	r3, r3, #31
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d12a      	bne.n	800a9d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a2d      	ldr	r2, [pc, #180]	@ (800aa38 <HAL_ADC_Start_DMA+0x214>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d015      	beq.n	800a9b2 <HAL_ADC_Start_DMA+0x18e>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a2c      	ldr	r2, [pc, #176]	@ (800aa3c <HAL_ADC_Start_DMA+0x218>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d105      	bne.n	800a99c <HAL_ADC_Start_DMA+0x178>
 800a990:	4b25      	ldr	r3, [pc, #148]	@ (800aa28 <HAL_ADC_Start_DMA+0x204>)
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f003 031f 	and.w	r3, r3, #31
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a27      	ldr	r2, [pc, #156]	@ (800aa40 <HAL_ADC_Start_DMA+0x21c>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d136      	bne.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
 800a9a6:	4b20      	ldr	r3, [pc, #128]	@ (800aa28 <HAL_ADC_Start_DMA+0x204>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d130      	bne.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d129      	bne.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	689a      	ldr	r2, [r3, #8]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	e020      	b.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a18      	ldr	r2, [pc, #96]	@ (800aa38 <HAL_ADC_Start_DMA+0x214>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d11b      	bne.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d114      	bne.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9f8:	609a      	str	r2, [r3, #8]
 800a9fa:	e00b      	b.n	800aa14 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa00:	f043 0210 	orr.w	r2, r3, #16
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa0c:	f043 0201 	orr.w	r2, r3, #1
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200000f4 	.word	0x200000f4
 800aa24:	431bde83 	.word	0x431bde83
 800aa28:	40012300 	.word	0x40012300
 800aa2c:	0800af5d 	.word	0x0800af5d
 800aa30:	0800b017 	.word	0x0800b017
 800aa34:	0800b033 	.word	0x0800b033
 800aa38:	40012000 	.word	0x40012000
 800aa3c:	40012100 	.word	0x40012100
 800aa40:	40012200 	.word	0x40012200

0800aa44 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_ADC_Stop_DMA+0x1a>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e048      	b.n	800aaf0 <HAL_ADC_Stop_DMA+0xac>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0201 	bic.w	r2, r2, #1
 800aa74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d130      	bne.n	800aae6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa92:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d10f      	bne.n	800aac2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fe18 	bl	800b6dc <HAL_DMA_Abort>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800aad0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	f043 0201 	orr.w	r2, r3, #1
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d101      	bne.n	800ab3c <HAL_ADC_ConfigChannel+0x1c>
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e105      	b.n	800ad48 <HAL_ADC_ConfigChannel+0x228>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d925      	bls.n	800ab98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68d9      	ldr	r1, [r3, #12]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	4413      	add	r3, r2
 800ab60:	3b1e      	subs	r3, #30
 800ab62:	2207      	movs	r2, #7
 800ab64:	fa02 f303 	lsl.w	r3, r2, r3
 800ab68:	43da      	mvns	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	400a      	ands	r2, r1
 800ab70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68d9      	ldr	r1, [r3, #12]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	4618      	mov	r0, r3
 800ab84:	4603      	mov	r3, r0
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	4403      	add	r3, r0
 800ab8a:	3b1e      	subs	r3, #30
 800ab8c:	409a      	lsls	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	60da      	str	r2, [r3, #12]
 800ab96:	e022      	b.n	800abde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6919      	ldr	r1, [r3, #16]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	461a      	mov	r2, r3
 800aba6:	4613      	mov	r3, r2
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	4413      	add	r3, r2
 800abac:	2207      	movs	r2, #7
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	43da      	mvns	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	400a      	ands	r2, r1
 800abba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6919      	ldr	r1, [r3, #16]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4618      	mov	r0, r3
 800abce:	4603      	mov	r3, r0
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	4403      	add	r3, r0
 800abd4:	409a      	lsls	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b06      	cmp	r3, #6
 800abe4:	d824      	bhi.n	800ac30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	3b05      	subs	r3, #5
 800abf8:	221f      	movs	r2, #31
 800abfa:	fa02 f303 	lsl.w	r3, r2, r3
 800abfe:	43da      	mvns	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	400a      	ands	r2, r1
 800ac06:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	4618      	mov	r0, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	3b05      	subs	r3, #5
 800ac22:	fa00 f203 	lsl.w	r2, r0, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ac2e:	e04c      	b.n	800acca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b0c      	cmp	r3, #12
 800ac36:	d824      	bhi.n	800ac82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	3b23      	subs	r3, #35	@ 0x23
 800ac4a:	221f      	movs	r2, #31
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	43da      	mvns	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	400a      	ands	r2, r1
 800ac58:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	4618      	mov	r0, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	3b23      	subs	r3, #35	@ 0x23
 800ac74:	fa00 f203 	lsl.w	r2, r0, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac80:	e023      	b.n	800acca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	3b41      	subs	r3, #65	@ 0x41
 800ac94:	221f      	movs	r2, #31
 800ac96:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9a:	43da      	mvns	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	400a      	ands	r2, r1
 800aca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	4618      	mov	r0, r3
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	3b41      	subs	r3, #65	@ 0x41
 800acbe:	fa00 f203 	lsl.w	r2, r0, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	430a      	orrs	r2, r1
 800acc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800acca:	4b22      	ldr	r3, [pc, #136]	@ (800ad54 <HAL_ADC_ConfigChannel+0x234>)
 800accc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a21      	ldr	r2, [pc, #132]	@ (800ad58 <HAL_ADC_ConfigChannel+0x238>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d109      	bne.n	800acec <HAL_ADC_ConfigChannel+0x1cc>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b12      	cmp	r3, #18
 800acde:	d105      	bne.n	800acec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a19      	ldr	r2, [pc, #100]	@ (800ad58 <HAL_ADC_ConfigChannel+0x238>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d123      	bne.n	800ad3e <HAL_ADC_ConfigChannel+0x21e>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d003      	beq.n	800ad06 <HAL_ADC_ConfigChannel+0x1e6>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b11      	cmp	r3, #17
 800ad04:	d11b      	bne.n	800ad3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d111      	bne.n	800ad3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ad1a:	4b10      	ldr	r3, [pc, #64]	@ (800ad5c <HAL_ADC_ConfigChannel+0x23c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a10      	ldr	r2, [pc, #64]	@ (800ad60 <HAL_ADC_ConfigChannel+0x240>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	0c9a      	lsrs	r2, r3, #18
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad30:	e002      	b.n	800ad38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1f9      	bne.n	800ad32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	40012300 	.word	0x40012300
 800ad58:	40012000 	.word	0x40012000
 800ad5c:	200000f4 	.word	0x200000f4
 800ad60:	431bde83 	.word	0x431bde83

0800ad64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ad6c:	4b79      	ldr	r3, [pc, #484]	@ (800af54 <ADC_Init+0x1f0>)
 800ad6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	431a      	orrs	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6859      	ldr	r1, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	021a      	lsls	r2, r3, #8
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800adbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6859      	ldr	r1, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689a      	ldr	r2, [r3, #8]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6899      	ldr	r1, [r3, #8]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf6:	4a58      	ldr	r2, [pc, #352]	@ (800af58 <ADC_Init+0x1f4>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d022      	beq.n	800ae42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689a      	ldr	r2, [r3, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6899      	ldr	r1, [r3, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	689a      	ldr	r2, [r3, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6899      	ldr	r1, [r3, #8]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]
 800ae40:	e00f      	b.n	800ae62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0202 	bic.w	r2, r2, #2
 800ae70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6899      	ldr	r1, [r3, #8]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	7e1b      	ldrb	r3, [r3, #24]
 800ae7c:	005a      	lsls	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01b      	beq.n	800aec8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800aeae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6859      	ldr	r1, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeba:	3b01      	subs	r3, #1
 800aebc:	035a      	lsls	r2, r3, #13
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	605a      	str	r2, [r3, #4]
 800aec6:	e007      	b.n	800aed8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800aee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	051a      	lsls	r2, r3, #20
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	430a      	orrs	r2, r1
 800aefc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800af0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6899      	ldr	r1, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af1a:	025a      	lsls	r2, r3, #9
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	430a      	orrs	r2, r1
 800af22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6899      	ldr	r1, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	029a      	lsls	r2, r3, #10
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	609a      	str	r2, [r3, #8]
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	40012300 	.word	0x40012300
 800af58:	0f000001 	.word	0x0f000001

0800af5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af72:	2b00      	cmp	r3, #0
 800af74:	d13c      	bne.n	800aff0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d12b      	bne.n	800afe8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800af94:	2b00      	cmp	r3, #0
 800af96:	d127      	bne.n	800afe8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d006      	beq.n	800afb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d119      	bne.n	800afe8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0220 	bic.w	r2, r2, #32
 800afc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d105      	bne.n	800afe8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe0:	f043 0201 	orr.w	r2, r3, #1
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7fe f989 	bl	8009300 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800afee:	e00e      	b.n	800b00e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fd85 	bl	800ab0c <HAL_ADC_ErrorCallback>
}
 800b002:	e004      	b.n	800b00e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b022:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff fd67 	bl	800aaf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2240      	movs	r2, #64	@ 0x40
 800b044:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b04a:	f043 0204 	orr.w	r2, r3, #4
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff fd5a 	bl	800ab0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b058:	bf00      	nop
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b070:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a4 <NVIC_SetPriorityGrouping+0x44>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b07c:	4013      	ands	r3, r2
 800b07e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b08c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b092:	4a04      	ldr	r2, [pc, #16]	@ (800b0a4 <NVIC_SetPriorityGrouping+0x44>)
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	60d3      	str	r3, [r2, #12]
}
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	e000ed00 	.word	0xe000ed00

0800b0a8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0ac:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <NVIC_GetPriorityGrouping+0x18>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	0a1b      	lsrs	r3, r3, #8
 800b0b2:	f003 0307 	and.w	r3, r3, #7
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	e000ed00 	.word	0xe000ed00

0800b0c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	f003 021f 	and.w	r2, r3, #31
 800b0d4:	4907      	ldr	r1, [pc, #28]	@ (800b0f4 <NVIC_EnableIRQ+0x30>)
 800b0d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0da:	095b      	lsrs	r3, r3, #5
 800b0dc:	2001      	movs	r0, #1
 800b0de:	fa00 f202 	lsl.w	r2, r0, r2
 800b0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	e000e100 	.word	0xe000e100

0800b0f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800b104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da0b      	bge.n	800b124 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	490c      	ldr	r1, [pc, #48]	@ (800b144 <NVIC_SetPriority+0x4c>)
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	f003 030f 	and.w	r3, r3, #15
 800b118:	3b04      	subs	r3, #4
 800b11a:	0112      	lsls	r2, r2, #4
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	440b      	add	r3, r1
 800b120:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b122:	e009      	b.n	800b138 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	4907      	ldr	r1, [pc, #28]	@ (800b148 <NVIC_SetPriority+0x50>)
 800b12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12e:	0112      	lsls	r2, r2, #4
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	440b      	add	r3, r1
 800b134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	e000ed00 	.word	0xe000ed00
 800b148:	e000e100 	.word	0xe000e100

0800b14c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b089      	sub	sp, #36	@ 0x24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f1c3 0307 	rsb	r3, r3, #7
 800b166:	2b04      	cmp	r3, #4
 800b168:	bf28      	it	cs
 800b16a:	2304      	movcs	r3, #4
 800b16c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3304      	adds	r3, #4
 800b172:	2b06      	cmp	r3, #6
 800b174:	d902      	bls.n	800b17c <NVIC_EncodePriority+0x30>
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	3b03      	subs	r3, #3
 800b17a:	e000      	b.n	800b17e <NVIC_EncodePriority+0x32>
 800b17c:	2300      	movs	r3, #0
 800b17e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	43da      	mvns	r2, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	401a      	ands	r2, r3
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b194:	f04f 31ff 	mov.w	r1, #4294967295
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	fa01 f303 	lsl.w	r3, r1, r3
 800b19e:	43d9      	mvns	r1, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1a4:	4313      	orrs	r3, r2
         );
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3724      	adds	r7, #36	@ 0x24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
	...

0800b1b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1c4:	d301      	bcc.n	800b1ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e00f      	b.n	800b1ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b1f4 <SysTick_Config+0x40>)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1d2:	210f      	movs	r1, #15
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	f7ff ff8e 	bl	800b0f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1dc:	4b05      	ldr	r3, [pc, #20]	@ (800b1f4 <SysTick_Config+0x40>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1e2:	4b04      	ldr	r3, [pc, #16]	@ (800b1f4 <SysTick_Config+0x40>)
 800b1e4:	2207      	movs	r2, #7
 800b1e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	e000e010 	.word	0xe000e010

0800b1f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff ff2d 	bl	800b060 <NVIC_SetPriorityGrouping>
}
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	4603      	mov	r3, r0
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b220:	f7ff ff42 	bl	800b0a8 <NVIC_GetPriorityGrouping>
 800b224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	68b9      	ldr	r1, [r7, #8]
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f7ff ff8e 	bl	800b14c <NVIC_EncodePriority>
 800b230:	4602      	mov	r2, r0
 800b232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff ff5d 	bl	800b0f8 <NVIC_SetPriority>
}
 800b23e:	bf00      	nop
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	4603      	mov	r3, r0
 800b24e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff ff35 	bl	800b0c4 <NVIC_EnableIRQ>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff ffa2 	bl	800b1b4 <SysTick_Config>
 800b270:	4603      	mov	r3, r0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d016      	beq.n	800b2c4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2204      	movs	r2, #4
 800b29c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2a2:	f043 0202 	orr.w	r2, r3, #2
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2204      	movs	r2, #4
 800b2ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b374 <HAL_DCMI_IRQHandler+0xf8>)
 800b2b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fa7c 	bl	800b7bc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d016      	beq.n	800b2fc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2da:	f043 0201 	orr.w	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ee:	4a21      	ldr	r2, [pc, #132]	@ (800b374 <HAL_DCMI_IRQHandler+0xf8>)
 800b2f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fa60 	bl	800b7bc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f003 0310 	and.w	r3, r3, #16
 800b302:	2b00      	cmp	r3, #0
 800b304:	d006      	beq.n	800b314 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2210      	movs	r2, #16
 800b30c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f83c 	bl	800b38c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d006      	beq.n	800b32c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2208      	movs	r2, #8
 800b324:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f83a 	bl	800b3a0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d019      	beq.n	800b36a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b02      	cmp	r3, #2
 800b342:	d107      	bne.n	800b354 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f022 021e 	bic.w	r2, r2, #30
 800b352:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68da      	ldr	r2, [r3, #12]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f022 0201 	bic.w	r2, r2, #1
 800b362:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f825 	bl	800b3b4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	0800b3c9 	.word	0x0800b3c9

0800b378 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d4:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d003      	beq.n	800b3e8 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff ffc5 	bl	800b378 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e05f      	b.n	800b4c8 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d109      	bne.n	800b428 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe fb1b 	bl	8009a58 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fe fb18 	bl	8009a58 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6812      	ldr	r2, [r2, #0]
 800b43a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b43e:	f023 0308 	bic.w	r3, r3, #8
 800b442:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6819      	ldr	r1, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800b458:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800b464:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800b470:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b10      	cmp	r3, #16
 800b480:	d112      	bne.n	800b4a8 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7f1b      	ldrb	r3, [r3, #28]
 800b486:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7f5b      	ldrb	r3, [r3, #29]
 800b48c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800b48e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7f9b      	ldrb	r3, [r3, #30]
 800b494:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800b496:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7fdb      	ldrb	r3, [r3, #31]
 800b49e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800b4a4:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800b4a6:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f042 021e 	orr.w	r2, r2, #30
 800b4b6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4dc:	f7ff f92e 	bl	800a73c <HAL_GetTick>
 800b4e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e099      	b.n	800b620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b50c:	e00f      	b.n	800b52e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b50e:	f7ff f915 	bl	800a73c <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b05      	cmp	r3, #5
 800b51a:	d908      	bls.n	800b52e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2220      	movs	r2, #32
 800b520:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2203      	movs	r2, #3
 800b526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e078      	b.n	800b620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e8      	bne.n	800b50e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	4b38      	ldr	r3, [pc, #224]	@ (800b628 <HAL_DMA_Init+0x158>)
 800b548:	4013      	ands	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b55a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b584:	2b04      	cmp	r3, #4
 800b586:	d107      	bne.n	800b598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b590:	4313      	orrs	r3, r2
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f023 0307 	bic.w	r3, r3, #7
 800b5ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d117      	bne.n	800b5f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fb01 	bl	800bbdc <DMA_CheckFifoParam>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	@ 0x40
 800b5e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e016      	b.n	800b620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fab8 	bl	800bb70 <DMA_CalcBaseAndBitshift>
 800b600:	4603      	mov	r3, r0
 800b602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b608:	223f      	movs	r2, #63	@ 0x3f
 800b60a:	409a      	lsls	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	f010803f 	.word	0xf010803f

0800b62c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d101      	bne.n	800b652 <HAL_DMA_Start_IT+0x26>
 800b64e:	2302      	movs	r3, #2
 800b650:	e040      	b.n	800b6d4 <HAL_DMA_Start_IT+0xa8>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b01      	cmp	r3, #1
 800b664:	d12f      	bne.n	800b6c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fa4a 	bl	800bb14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b684:	223f      	movs	r2, #63	@ 0x3f
 800b686:	409a      	lsls	r2, r3
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0216 	orr.w	r2, r2, #22
 800b69a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d007      	beq.n	800b6b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0208 	orr.w	r2, r2, #8
 800b6b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0201 	orr.w	r2, r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	e005      	b.n	800b6d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b6ea:	f7ff f827 	bl	800a73c <HAL_GetTick>
 800b6ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d008      	beq.n	800b70e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2280      	movs	r2, #128	@ 0x80
 800b700:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e052      	b.n	800b7b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f022 0216 	bic.w	r2, r2, #22
 800b71c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	695a      	ldr	r2, [r3, #20]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b72c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	d103      	bne.n	800b73e <HAL_DMA_Abort+0x62>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d007      	beq.n	800b74e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f022 0208 	bic.w	r2, r2, #8
 800b74c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f022 0201 	bic.w	r2, r2, #1
 800b75c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b75e:	e013      	b.n	800b788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b760:	f7fe ffec 	bl	800a73c <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d90c      	bls.n	800b788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2203      	movs	r2, #3
 800b778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e015      	b.n	800b7b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e4      	bne.n	800b760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b79a:	223f      	movs	r2, #63	@ 0x3f
 800b79c:	409a      	lsls	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d004      	beq.n	800b7da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2280      	movs	r2, #128	@ 0x80
 800b7d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e00c      	b.n	800b7f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2205      	movs	r2, #5
 800b7de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f022 0201 	bic.w	r2, r2, #1
 800b7f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b808:	2300      	movs	r3, #0
 800b80a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b80c:	4b8e      	ldr	r3, [pc, #568]	@ (800ba48 <HAL_DMA_IRQHandler+0x248>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a8e      	ldr	r2, [pc, #568]	@ (800ba4c <HAL_DMA_IRQHandler+0x24c>)
 800b812:	fba2 2303 	umull	r2, r3, r2, r3
 800b816:	0a9b      	lsrs	r3, r3, #10
 800b818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b81e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b82a:	2208      	movs	r2, #8
 800b82c:	409a      	lsls	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d01a      	beq.n	800b86c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0304 	and.w	r3, r3, #4
 800b840:	2b00      	cmp	r3, #0
 800b842:	d013      	beq.n	800b86c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f022 0204 	bic.w	r2, r2, #4
 800b852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b858:	2208      	movs	r2, #8
 800b85a:	409a      	lsls	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b864:	f043 0201 	orr.w	r2, r3, #1
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b870:	2201      	movs	r2, #1
 800b872:	409a      	lsls	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4013      	ands	r3, r2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d012      	beq.n	800b8a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00b      	beq.n	800b8a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b88e:	2201      	movs	r2, #1
 800b890:	409a      	lsls	r2, r3
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b89a:	f043 0202 	orr.w	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	409a      	lsls	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d012      	beq.n	800b8d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	409a      	lsls	r2, r3
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d0:	f043 0204 	orr.w	r2, r3, #4
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8dc:	2210      	movs	r2, #16
 800b8de:	409a      	lsls	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d043      	beq.n	800b970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d03c      	beq.n	800b970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	409a      	lsls	r2, r3
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d018      	beq.n	800b942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d108      	bne.n	800b930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d024      	beq.n	800b970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
 800b92e:	e01f      	b.n	800b970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01b      	beq.n	800b970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
 800b940:	e016      	b.n	800b970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d107      	bne.n	800b960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f022 0208 	bic.w	r2, r2, #8
 800b95e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b974:	2220      	movs	r2, #32
 800b976:	409a      	lsls	r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 808f 	beq.w	800baa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 8087 	beq.w	800baa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b996:	2220      	movs	r2, #32
 800b998:	409a      	lsls	r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	d136      	bne.n	800ba18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 0216 	bic.w	r2, r2, #22
 800b9b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d103      	bne.n	800b9da <HAL_DMA_IRQHandler+0x1da>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0208 	bic.w	r2, r2, #8
 800b9e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ee:	223f      	movs	r2, #63	@ 0x3f
 800b9f0:	409a      	lsls	r2, r3
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d07e      	beq.n	800bb0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	4798      	blx	r3
        }
        return;
 800ba16:	e079      	b.n	800bb0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d01d      	beq.n	800ba62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10d      	bne.n	800ba50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d031      	beq.n	800baa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	4798      	blx	r3
 800ba44:	e02c      	b.n	800baa0 <HAL_DMA_IRQHandler+0x2a0>
 800ba46:	bf00      	nop
 800ba48:	200000f4 	.word	0x200000f4
 800ba4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d023      	beq.n	800baa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4798      	blx	r3
 800ba60:	e01e      	b.n	800baa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10f      	bne.n	800ba90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0210 	bic.w	r2, r2, #16
 800ba7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d032      	beq.n	800bb0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d022      	beq.n	800bafa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2205      	movs	r2, #5
 800bab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0201 	bic.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	3301      	adds	r3, #1
 800bad0:	60bb      	str	r3, [r7, #8]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d307      	bcc.n	800bae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f2      	bne.n	800bacc <HAL_DMA_IRQHandler+0x2cc>
 800bae6:	e000      	b.n	800baea <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	4798      	blx	r3
 800bb0a:	e000      	b.n	800bb0e <HAL_DMA_IRQHandler+0x30e>
        return;
 800bb0c:	bf00      	nop
    }
  }
}
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bb30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	2b40      	cmp	r3, #64	@ 0x40
 800bb40:	d108      	bne.n	800bb54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb52:	e007      	b.n	800bb64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	60da      	str	r2, [r3, #12]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	3b10      	subs	r3, #16
 800bb80:	4a14      	ldr	r2, [pc, #80]	@ (800bbd4 <DMA_CalcBaseAndBitshift+0x64>)
 800bb82:	fba2 2303 	umull	r2, r3, r2, r3
 800bb86:	091b      	lsrs	r3, r3, #4
 800bb88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bb8a:	4a13      	ldr	r2, [pc, #76]	@ (800bbd8 <DMA_CalcBaseAndBitshift+0x68>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d909      	bls.n	800bbb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800bba6:	f023 0303 	bic.w	r3, r3, #3
 800bbaa:	1d1a      	adds	r2, r3, #4
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	659a      	str	r2, [r3, #88]	@ 0x58
 800bbb0:	e007      	b.n	800bbc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	aaaaaaab 	.word	0xaaaaaaab
 800bbd8:	0801d578 	.word	0x0801d578

0800bbdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d11f      	bne.n	800bc36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d856      	bhi.n	800bcaa <DMA_CheckFifoParam+0xce>
 800bbfc:	a201      	add	r2, pc, #4	@ (adr r2, 800bc04 <DMA_CheckFifoParam+0x28>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc15 	.word	0x0800bc15
 800bc08:	0800bc27 	.word	0x0800bc27
 800bc0c:	0800bc15 	.word	0x0800bc15
 800bc10:	0800bcab 	.word	0x0800bcab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d046      	beq.n	800bcae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc24:	e043      	b.n	800bcae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bc2e:	d140      	bne.n	800bcb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc34:	e03d      	b.n	800bcb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc3e:	d121      	bne.n	800bc84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d837      	bhi.n	800bcb6 <DMA_CheckFifoParam+0xda>
 800bc46:	a201      	add	r2, pc, #4	@ (adr r2, 800bc4c <DMA_CheckFifoParam+0x70>)
 800bc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bc63 	.word	0x0800bc63
 800bc54:	0800bc5d 	.word	0x0800bc5d
 800bc58:	0800bc75 	.word	0x0800bc75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc60:	e030      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d025      	beq.n	800bcba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc72:	e022      	b.n	800bcba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bc7c:	d11f      	bne.n	800bcbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bc82:	e01c      	b.n	800bcbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d903      	bls.n	800bc92 <DMA_CheckFifoParam+0xb6>
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d003      	beq.n	800bc98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bc90:	e018      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	73fb      	strb	r3, [r7, #15]
      break;
 800bc96:	e015      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00e      	beq.n	800bcc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
      break;
 800bca8:	e00b      	b.n	800bcc2 <DMA_CheckFifoParam+0xe6>
      break;
 800bcaa:	bf00      	nop
 800bcac:	e00a      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcae:	bf00      	nop
 800bcb0:	e008      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcb2:	bf00      	nop
 800bcb4:	e006      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcb6:	bf00      	nop
 800bcb8:	e004      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcba:	bf00      	nop
 800bcbc:	e002      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;   
 800bcbe:	bf00      	nop
 800bcc0:	e000      	b.n	800bcc4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcc2:	bf00      	nop
    }
  } 
  
  return status; 
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop

0800bcd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b089      	sub	sp, #36	@ 0x24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e16b      	b.n	800bfc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4013      	ands	r3, r2
 800bd02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	f040 815a 	bne.w	800bfc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d005      	beq.n	800bd26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d130      	bne.n	800bd88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	2203      	movs	r2, #3
 800bd32:	fa02 f303 	lsl.w	r3, r2, r3
 800bd36:	43db      	mvns	r3, r3
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	68da      	ldr	r2, [r3, #12]
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4a:	69ba      	ldr	r2, [r7, #24]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	69ba      	ldr	r2, [r7, #24]
 800bd54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	fa02 f303 	lsl.w	r3, r2, r3
 800bd64:	43db      	mvns	r3, r3
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	091b      	lsrs	r3, r3, #4
 800bd72:	f003 0201 	and.w	r2, r3, #1
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7c:	69ba      	ldr	r2, [r7, #24]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	69ba      	ldr	r2, [r7, #24]
 800bd86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	f003 0303 	and.w	r3, r3, #3
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d017      	beq.n	800bdc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	2203      	movs	r2, #3
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	43db      	mvns	r3, r3
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f003 0303 	and.w	r3, r3, #3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d123      	bne.n	800be18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	08da      	lsrs	r2, r3, #3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3208      	adds	r2, #8
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	f003 0307 	and.w	r3, r3, #7
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	220f      	movs	r2, #15
 800bde8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdec:	43db      	mvns	r3, r3
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	691a      	ldr	r2, [r3, #16]
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	69ba      	ldr	r2, [r7, #24]
 800be06:	4313      	orrs	r3, r2
 800be08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	08da      	lsrs	r2, r3, #3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	3208      	adds	r2, #8
 800be12:	69b9      	ldr	r1, [r7, #24]
 800be14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	2203      	movs	r2, #3
 800be24:	fa02 f303 	lsl.w	r3, r2, r3
 800be28:	43db      	mvns	r3, r3
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	4013      	ands	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f003 0203 	and.w	r2, r3, #3
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	fa02 f303 	lsl.w	r3, r2, r3
 800be40:	69ba      	ldr	r2, [r7, #24]
 800be42:	4313      	orrs	r3, r2
 800be44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 80b4 	beq.w	800bfc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	4b60      	ldr	r3, [pc, #384]	@ (800bfe0 <HAL_GPIO_Init+0x30c>)
 800be60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be62:	4a5f      	ldr	r2, [pc, #380]	@ (800bfe0 <HAL_GPIO_Init+0x30c>)
 800be64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800be68:	6453      	str	r3, [r2, #68]	@ 0x44
 800be6a:	4b5d      	ldr	r3, [pc, #372]	@ (800bfe0 <HAL_GPIO_Init+0x30c>)
 800be6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be76:	4a5b      	ldr	r2, [pc, #364]	@ (800bfe4 <HAL_GPIO_Init+0x310>)
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	089b      	lsrs	r3, r3, #2
 800be7c:	3302      	adds	r3, #2
 800be7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	220f      	movs	r2, #15
 800be8e:	fa02 f303 	lsl.w	r3, r2, r3
 800be92:	43db      	mvns	r3, r3
 800be94:	69ba      	ldr	r2, [r7, #24]
 800be96:	4013      	ands	r3, r2
 800be98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a52      	ldr	r2, [pc, #328]	@ (800bfe8 <HAL_GPIO_Init+0x314>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d02b      	beq.n	800befa <HAL_GPIO_Init+0x226>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a51      	ldr	r2, [pc, #324]	@ (800bfec <HAL_GPIO_Init+0x318>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d025      	beq.n	800bef6 <HAL_GPIO_Init+0x222>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a50      	ldr	r2, [pc, #320]	@ (800bff0 <HAL_GPIO_Init+0x31c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d01f      	beq.n	800bef2 <HAL_GPIO_Init+0x21e>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a4f      	ldr	r2, [pc, #316]	@ (800bff4 <HAL_GPIO_Init+0x320>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d019      	beq.n	800beee <HAL_GPIO_Init+0x21a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a4e      	ldr	r2, [pc, #312]	@ (800bff8 <HAL_GPIO_Init+0x324>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d013      	beq.n	800beea <HAL_GPIO_Init+0x216>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a4d      	ldr	r2, [pc, #308]	@ (800bffc <HAL_GPIO_Init+0x328>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d00d      	beq.n	800bee6 <HAL_GPIO_Init+0x212>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a4c      	ldr	r2, [pc, #304]	@ (800c000 <HAL_GPIO_Init+0x32c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d007      	beq.n	800bee2 <HAL_GPIO_Init+0x20e>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a4b      	ldr	r2, [pc, #300]	@ (800c004 <HAL_GPIO_Init+0x330>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d101      	bne.n	800bede <HAL_GPIO_Init+0x20a>
 800beda:	2307      	movs	r3, #7
 800bedc:	e00e      	b.n	800befc <HAL_GPIO_Init+0x228>
 800bede:	2308      	movs	r3, #8
 800bee0:	e00c      	b.n	800befc <HAL_GPIO_Init+0x228>
 800bee2:	2306      	movs	r3, #6
 800bee4:	e00a      	b.n	800befc <HAL_GPIO_Init+0x228>
 800bee6:	2305      	movs	r3, #5
 800bee8:	e008      	b.n	800befc <HAL_GPIO_Init+0x228>
 800beea:	2304      	movs	r3, #4
 800beec:	e006      	b.n	800befc <HAL_GPIO_Init+0x228>
 800beee:	2303      	movs	r3, #3
 800bef0:	e004      	b.n	800befc <HAL_GPIO_Init+0x228>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e002      	b.n	800befc <HAL_GPIO_Init+0x228>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_GPIO_Init+0x228>
 800befa:	2300      	movs	r3, #0
 800befc:	69fa      	ldr	r2, [r7, #28]
 800befe:	f002 0203 	and.w	r2, r2, #3
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	4093      	lsls	r3, r2
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf0c:	4935      	ldr	r1, [pc, #212]	@ (800bfe4 <HAL_GPIO_Init+0x310>)
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	089b      	lsrs	r3, r3, #2
 800bf12:	3302      	adds	r3, #2
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf1a:	4b3b      	ldr	r3, [pc, #236]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	4013      	ands	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf3e:	4a32      	ldr	r2, [pc, #200]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf44:	4b30      	ldr	r3, [pc, #192]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	4013      	ands	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf68:	4a27      	ldr	r2, [pc, #156]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bf6e:	4b26      	ldr	r3, [pc, #152]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	43db      	mvns	r3, r3
 800bf78:	69ba      	ldr	r2, [r7, #24]
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf92:	4a1d      	ldr	r2, [pc, #116]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf98:	4b1b      	ldr	r3, [pc, #108]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	43db      	mvns	r3, r3
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d003      	beq.n	800bfbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bfbc:	4a12      	ldr	r2, [pc, #72]	@ (800c008 <HAL_GPIO_Init+0x334>)
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	61fb      	str	r3, [r7, #28]
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	2b0f      	cmp	r3, #15
 800bfcc:	f67f ae90 	bls.w	800bcf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3724      	adds	r7, #36	@ 0x24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	40023800 	.word	0x40023800
 800bfe4:	40013800 	.word	0x40013800
 800bfe8:	40020000 	.word	0x40020000
 800bfec:	40020400 	.word	0x40020400
 800bff0:	40020800 	.word	0x40020800
 800bff4:	40020c00 	.word	0x40020c00
 800bff8:	40021000 	.word	0x40021000
 800bffc:	40021400 	.word	0x40021400
 800c000:	40021800 	.word	0x40021800
 800c004:	40021c00 	.word	0x40021c00
 800c008:	40013c00 	.word	0x40013c00

0800c00c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	691a      	ldr	r2, [r3, #16]
 800c01c:	887b      	ldrh	r3, [r7, #2]
 800c01e:	4013      	ands	r3, r2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c024:	2301      	movs	r3, #1
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e001      	b.n	800c02e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
 800c048:	4613      	mov	r3, r2
 800c04a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c04c:	787b      	ldrb	r3, [r7, #1]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c052:	887a      	ldrh	r2, [r7, #2]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c058:	e003      	b.n	800c062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c05a:	887b      	ldrh	r3, [r7, #2]
 800c05c:	041a      	lsls	r2, r3, #16
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	619a      	str	r2, [r3, #24]
}
 800c062:	bf00      	nop
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
	...

0800c070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c07a:	4b08      	ldr	r3, [pc, #32]	@ (800c09c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c07c:	695a      	ldr	r2, [r3, #20]
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	4013      	ands	r3, r2
 800c082:	2b00      	cmp	r3, #0
 800c084:	d006      	beq.n	800c094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c086:	4a05      	ldr	r2, [pc, #20]	@ (800c09c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c088:	88fb      	ldrh	r3, [r7, #6]
 800c08a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c08c:	88fb      	ldrh	r3, [r7, #6]
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f806 	bl	800c0a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	40013c00 	.word	0x40013c00

0800c0a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e12b      	b.n	800c322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7fd fd8a 	bl	8009bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2224      	movs	r2, #36	@ 0x24
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f022 0201 	bic.w	r2, r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c10a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c11a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c11c:	f003 fc18 	bl	800f950 <HAL_RCC_GetPCLK1Freq>
 800c120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	4a81      	ldr	r2, [pc, #516]	@ (800c32c <HAL_I2C_Init+0x274>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d807      	bhi.n	800c13c <HAL_I2C_Init+0x84>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4a80      	ldr	r2, [pc, #512]	@ (800c330 <HAL_I2C_Init+0x278>)
 800c130:	4293      	cmp	r3, r2
 800c132:	bf94      	ite	ls
 800c134:	2301      	movls	r3, #1
 800c136:	2300      	movhi	r3, #0
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	e006      	b.n	800c14a <HAL_I2C_Init+0x92>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4a7d      	ldr	r2, [pc, #500]	@ (800c334 <HAL_I2C_Init+0x27c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	bf94      	ite	ls
 800c144:	2301      	movls	r3, #1
 800c146:	2300      	movhi	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e0e7      	b.n	800c322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	4a78      	ldr	r2, [pc, #480]	@ (800c338 <HAL_I2C_Init+0x280>)
 800c156:	fba2 2303 	umull	r2, r3, r2, r3
 800c15a:	0c9b      	lsrs	r3, r3, #18
 800c15c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	430a      	orrs	r2, r1
 800c170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	4a6a      	ldr	r2, [pc, #424]	@ (800c32c <HAL_I2C_Init+0x274>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d802      	bhi.n	800c18c <HAL_I2C_Init+0xd4>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	3301      	adds	r3, #1
 800c18a:	e009      	b.n	800c1a0 <HAL_I2C_Init+0xe8>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c192:	fb02 f303 	mul.w	r3, r2, r3
 800c196:	4a69      	ldr	r2, [pc, #420]	@ (800c33c <HAL_I2C_Init+0x284>)
 800c198:	fba2 2303 	umull	r2, r3, r2, r3
 800c19c:	099b      	lsrs	r3, r3, #6
 800c19e:	3301      	adds	r3, #1
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6812      	ldr	r2, [r2, #0]
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800c1b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	495c      	ldr	r1, [pc, #368]	@ (800c32c <HAL_I2C_Init+0x274>)
 800c1bc:	428b      	cmp	r3, r1
 800c1be:	d819      	bhi.n	800c1f4 <HAL_I2C_Init+0x13c>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	1e59      	subs	r1, r3, #1
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800c1ce:	1c59      	adds	r1, r3, #1
 800c1d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c1d4:	400b      	ands	r3, r1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <HAL_I2C_Init+0x138>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	1e59      	subs	r1, r3, #1
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1ee:	e051      	b.n	800c294 <HAL_I2C_Init+0x1dc>
 800c1f0:	2304      	movs	r3, #4
 800c1f2:	e04f      	b.n	800c294 <HAL_I2C_Init+0x1dc>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d111      	bne.n	800c220 <HAL_I2C_Init+0x168>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	1e58      	subs	r0, r3, #1
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6859      	ldr	r1, [r3, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	440b      	add	r3, r1
 800c20a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c20e:	3301      	adds	r3, #1
 800c210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c214:	2b00      	cmp	r3, #0
 800c216:	bf0c      	ite	eq
 800c218:	2301      	moveq	r3, #1
 800c21a:	2300      	movne	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	e012      	b.n	800c246 <HAL_I2C_Init+0x18e>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	1e58      	subs	r0, r3, #1
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6859      	ldr	r1, [r3, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	0099      	lsls	r1, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	fbb0 f3f3 	udiv	r3, r0, r3
 800c236:	3301      	adds	r3, #1
 800c238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <HAL_I2C_Init+0x196>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e022      	b.n	800c294 <HAL_I2C_Init+0x1dc>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10e      	bne.n	800c274 <HAL_I2C_Init+0x1bc>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	1e58      	subs	r0, r3, #1
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6859      	ldr	r1, [r3, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	440b      	add	r3, r1
 800c264:	fbb0 f3f3 	udiv	r3, r0, r3
 800c268:	3301      	adds	r3, #1
 800c26a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c26e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c272:	e00f      	b.n	800c294 <HAL_I2C_Init+0x1dc>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	1e58      	subs	r0, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6859      	ldr	r1, [r3, #4]
 800c27c:	460b      	mov	r3, r1
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	440b      	add	r3, r1
 800c282:	0099      	lsls	r1, r3, #2
 800c284:	440b      	add	r3, r1
 800c286:	fbb0 f3f3 	udiv	r3, r0, r3
 800c28a:	3301      	adds	r3, #1
 800c28c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c290:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c294:	6879      	ldr	r1, [r7, #4]
 800c296:	6809      	ldr	r1, [r1, #0]
 800c298:	4313      	orrs	r3, r2
 800c29a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	69da      	ldr	r2, [r3, #28]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800c2c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	6911      	ldr	r1, [r2, #16]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	68d2      	ldr	r2, [r2, #12]
 800c2ce:	4311      	orrs	r1, r2
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	6812      	ldr	r2, [r2, #0]
 800c2d4:	430b      	orrs	r3, r1
 800c2d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	695a      	ldr	r2, [r3, #20]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f042 0201 	orr.w	r2, r2, #1
 800c302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	000186a0 	.word	0x000186a0
 800c330:	001e847f 	.word	0x001e847f
 800c334:	003d08ff 	.word	0x003d08ff
 800c338:	431bde83 	.word	0x431bde83
 800c33c:	10624dd3 	.word	0x10624dd3

0800c340 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af02      	add	r7, sp, #8
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	461a      	mov	r2, r3
 800c34c:	460b      	mov	r3, r1
 800c34e:	817b      	strh	r3, [r7, #10]
 800c350:	4613      	mov	r3, r2
 800c352:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c354:	f7fe f9f2 	bl	800a73c <HAL_GetTick>
 800c358:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b20      	cmp	r3, #32
 800c364:	f040 80e0 	bne.w	800c528 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	2319      	movs	r3, #25
 800c36e:	2201      	movs	r2, #1
 800c370:	4970      	ldr	r1, [pc, #448]	@ (800c534 <HAL_I2C_Master_Transmit+0x1f4>)
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f001 fa24 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c37e:	2302      	movs	r3, #2
 800c380:	e0d3      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d101      	bne.n	800c390 <HAL_I2C_Master_Transmit+0x50>
 800c38c:	2302      	movs	r3, #2
 800c38e:	e0cc      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d007      	beq.n	800c3b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f042 0201 	orr.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c3c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2221      	movs	r2, #33	@ 0x21
 800c3ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2210      	movs	r2, #16
 800c3d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	893a      	ldrh	r2, [r7, #8]
 800c3e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4a50      	ldr	r2, [pc, #320]	@ (800c538 <HAL_I2C_Master_Transmit+0x1f8>)
 800c3f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c3f8:	8979      	ldrh	r1, [r7, #10]
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	6a3a      	ldr	r2, [r7, #32]
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 ff10 	bl	800d224 <I2C_MasterRequestWrite>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e08d      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c40e:	2300      	movs	r3, #0
 800c410:	613b      	str	r3, [r7, #16]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	613b      	str	r3, [r7, #16]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	613b      	str	r3, [r7, #16]
 800c422:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c424:	e066      	b.n	800c4f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	6a39      	ldr	r1, [r7, #32]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f001 fa9e 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d107      	bne.n	800c44e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c44c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e06b      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c456:	781a      	ldrb	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c462:	1c5a      	adds	r2, r3, #1
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	3b01      	subs	r3, #1
 800c470:	b29a      	uxth	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c47a:	3b01      	subs	r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d11b      	bne.n	800c4c8 <HAL_I2C_Master_Transmit+0x188>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c494:	2b00      	cmp	r3, #0
 800c496:	d017      	beq.n	800c4c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49c:	781a      	ldrb	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	6a39      	ldr	r1, [r7, #32]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f001 fa8e 	bl	800d9ee <I2C_WaitOnBTFFlagUntilTimeout>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00d      	beq.n	800c4f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d107      	bne.n	800c4f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e01a      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d194      	bne.n	800c426 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c50a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	e000      	b.n	800c52a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c528:	2302      	movs	r3, #2
  }
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	00100002 	.word	0x00100002
 800c538:	ffff0000 	.word	0xffff0000

0800c53c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08c      	sub	sp, #48	@ 0x30
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	607a      	str	r2, [r7, #4]
 800c546:	461a      	mov	r2, r3
 800c548:	460b      	mov	r3, r1
 800c54a:	817b      	strh	r3, [r7, #10]
 800c54c:	4613      	mov	r3, r2
 800c54e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c550:	f7fe f8f4 	bl	800a73c <HAL_GetTick>
 800c554:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b20      	cmp	r3, #32
 800c560:	f040 820b 	bne.w	800c97a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2319      	movs	r3, #25
 800c56a:	2201      	movs	r2, #1
 800c56c:	497c      	ldr	r1, [pc, #496]	@ (800c760 <HAL_I2C_Master_Receive+0x224>)
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f001 f926 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c57a:	2302      	movs	r3, #2
 800c57c:	e1fe      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c584:	2b01      	cmp	r3, #1
 800c586:	d101      	bne.n	800c58c <HAL_I2C_Master_Receive+0x50>
 800c588:	2302      	movs	r3, #2
 800c58a:	e1f7      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d007      	beq.n	800c5b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f042 0201 	orr.w	r2, r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c5c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2222      	movs	r2, #34	@ 0x22
 800c5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2210      	movs	r2, #16
 800c5ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	893a      	ldrh	r2, [r7, #8]
 800c5e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4a5c      	ldr	r2, [pc, #368]	@ (800c764 <HAL_I2C_Master_Receive+0x228>)
 800c5f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c5f4:	8979      	ldrh	r1, [r7, #10]
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 fe94 	bl	800d328 <I2C_MasterRequestRead>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e1b8      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d113      	bne.n	800c63a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c612:	2300      	movs	r3, #0
 800c614:	623b      	str	r3, [r7, #32]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	623b      	str	r3, [r7, #32]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	623b      	str	r3, [r7, #32]
 800c626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	e18c      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d11b      	bne.n	800c67a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	61fb      	str	r3, [r7, #28]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e16c      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d11b      	bne.n	800c6ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	695b      	ldr	r3, [r3, #20]
 800c6ac:	61bb      	str	r3, [r7, #24]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	61bb      	str	r3, [r7, #24]
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	e14c      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c6c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c6e0:	e138      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	f200 80f1 	bhi.w	800c8ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d123      	bne.n	800c73c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f001 f9b9 	bl	800da70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e139      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	691a      	ldr	r2, [r3, #16]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c724:	3b01      	subs	r3, #1
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c730:	b29b      	uxth	r3, r3
 800c732:	3b01      	subs	r3, #1
 800c734:	b29a      	uxth	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c73a:	e10b      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c740:	2b02      	cmp	r3, #2
 800c742:	d14e      	bne.n	800c7e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74a:	2200      	movs	r2, #0
 800c74c:	4906      	ldr	r1, [pc, #24]	@ (800c768 <HAL_I2C_Master_Receive+0x22c>)
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f001 f836 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d008      	beq.n	800c76c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e10e      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
 800c75e:	bf00      	nop
 800c760:	00100002 	.word	0x00100002
 800c764:	ffff0000 	.word	0xffff0000
 800c768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c77a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	691a      	ldr	r2, [r3, #16]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c798:	3b01      	subs	r3, #1
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	691a      	ldr	r2, [r3, #16]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c7e0:	e0b8      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4966      	ldr	r1, [pc, #408]	@ (800c984 <HAL_I2C_Master_Receive+0x448>)
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 ffe7 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e0bf      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c80a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691a      	ldr	r2, [r3, #16]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c828:	3b01      	subs	r3, #1
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c834:	b29b      	uxth	r3, r3
 800c836:	3b01      	subs	r3, #1
 800c838:	b29a      	uxth	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c844:	2200      	movs	r2, #0
 800c846:	494f      	ldr	r1, [pc, #316]	@ (800c984 <HAL_I2C_Master_Receive+0x448>)
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 ffb9 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e091      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	691a      	ldr	r2, [r3, #16]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c872:	b2d2      	uxtb	r2, r2
 800c874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c884:	3b01      	subs	r3, #1
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c890:	b29b      	uxth	r3, r3
 800c892:	3b01      	subs	r3, #1
 800c894:	b29a      	uxth	r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c8cc:	e042      	b.n	800c954 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f001 f8cc 	bl	800da70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e04c      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8fe:	3b01      	subs	r3, #1
 800c900:	b29a      	uxth	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	3b01      	subs	r3, #1
 800c90e:	b29a      	uxth	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	f003 0304 	and.w	r3, r3, #4
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d118      	bne.n	800c954 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c92c:	b2d2      	uxtb	r2, r2
 800c92e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c93e:	3b01      	subs	r3, #1
 800c940:	b29a      	uxth	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	3b01      	subs	r3, #1
 800c94e:	b29a      	uxth	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f47f aec2 	bne.w	800c6e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2220      	movs	r2, #32
 800c962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	e000      	b.n	800c97c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c97a:	2302      	movs	r3, #2
  }
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3728      	adds	r7, #40	@ 0x28
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	00010004 	.word	0x00010004

0800c988 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	4608      	mov	r0, r1
 800c992:	4611      	mov	r1, r2
 800c994:	461a      	mov	r2, r3
 800c996:	4603      	mov	r3, r0
 800c998:	817b      	strh	r3, [r7, #10]
 800c99a:	460b      	mov	r3, r1
 800c99c:	813b      	strh	r3, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c9a2:	f7fd fecb 	bl	800a73c <HAL_GetTick>
 800c9a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	f040 80d9 	bne.w	800cb68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	2319      	movs	r3, #25
 800c9bc:	2201      	movs	r2, #1
 800c9be:	496d      	ldr	r1, [pc, #436]	@ (800cb74 <HAL_I2C_Mem_Write+0x1ec>)
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 fefd 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e0cc      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <HAL_I2C_Mem_Write+0x56>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	e0c5      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d007      	beq.n	800ca04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f042 0201 	orr.w	r2, r2, #1
 800ca02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2221      	movs	r2, #33	@ 0x21
 800ca18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2240      	movs	r2, #64	@ 0x40
 800ca20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6a3a      	ldr	r2, [r7, #32]
 800ca2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ca34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4a4d      	ldr	r2, [pc, #308]	@ (800cb78 <HAL_I2C_Mem_Write+0x1f0>)
 800ca44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ca46:	88f8      	ldrh	r0, [r7, #6]
 800ca48:	893a      	ldrh	r2, [r7, #8]
 800ca4a:	8979      	ldrh	r1, [r7, #10]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	9301      	str	r3, [sp, #4]
 800ca50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	4603      	mov	r3, r0
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f000 fd34 	bl	800d4c4 <I2C_RequestMemoryWrite>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d052      	beq.n	800cb08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e081      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f000 ff7e 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00d      	beq.n	800ca92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d107      	bne.n	800ca8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e06b      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	781a      	ldrb	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800caac:	3b01      	subs	r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d11b      	bne.n	800cb08 <HAL_I2C_Mem_Write+0x180>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d017      	beq.n	800cb08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cadc:	781a      	ldrb	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800caf2:	3b01      	subs	r3, #1
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1aa      	bne.n	800ca66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 ff6a 	bl	800d9ee <I2C_WaitOnBTFFlagUntilTimeout>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00d      	beq.n	800cb3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb24:	2b04      	cmp	r3, #4
 800cb26:	d107      	bne.n	800cb38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e016      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2220      	movs	r2, #32
 800cb50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	e000      	b.n	800cb6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cb68:	2302      	movs	r3, #2
  }
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	00100002 	.word	0x00100002
 800cb78:	ffff0000 	.word	0xffff0000

0800cb7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08c      	sub	sp, #48	@ 0x30
 800cb80:	af02      	add	r7, sp, #8
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	817b      	strh	r3, [r7, #10]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	813b      	strh	r3, [r7, #8]
 800cb92:	4613      	mov	r3, r2
 800cb94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb96:	f7fd fdd1 	bl	800a73c <HAL_GetTick>
 800cb9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	f040 8208 	bne.w	800cfba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	2319      	movs	r3, #25
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	497b      	ldr	r1, [pc, #492]	@ (800cda0 <HAL_I2C_Mem_Read+0x224>)
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f000 fe03 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e1fb      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d101      	bne.n	800cbd2 <HAL_I2C_Mem_Read+0x56>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	e1f4      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d007      	beq.n	800cbf8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f042 0201 	orr.w	r2, r2, #1
 800cbf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cc06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2222      	movs	r2, #34	@ 0x22
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2240      	movs	r2, #64	@ 0x40
 800cc14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800cc28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	4a5b      	ldr	r2, [pc, #364]	@ (800cda4 <HAL_I2C_Mem_Read+0x228>)
 800cc38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cc3a:	88f8      	ldrh	r0, [r7, #6]
 800cc3c:	893a      	ldrh	r2, [r7, #8]
 800cc3e:	8979      	ldrh	r1, [r7, #10]
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	4603      	mov	r3, r0
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 fcd0 	bl	800d5f0 <I2C_RequestMemoryRead>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e1b0      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d113      	bne.n	800cc8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc62:	2300      	movs	r3, #0
 800cc64:	623b      	str	r3, [r7, #32]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	623b      	str	r3, [r7, #32]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	623b      	str	r3, [r7, #32]
 800cc76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	e184      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d11b      	bne.n	800ccca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cca2:	2300      	movs	r3, #0
 800cca4:	61fb      	str	r3, [r7, #28]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	61fb      	str	r3, [r7, #28]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	e164      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d11b      	bne.n	800cd0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cce0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ccf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	61bb      	str	r3, [r7, #24]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	61bb      	str	r3, [r7, #24]
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	e144      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	699b      	ldr	r3, [r3, #24]
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cd20:	e138      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	f200 80f1 	bhi.w	800cf0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d123      	bne.n	800cd7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 fe99 	bl	800da70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e139      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd52:	b2d2      	uxtb	r2, r2
 800cd54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd64:	3b01      	subs	r3, #1
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	3b01      	subs	r3, #1
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cd7a:	e10b      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d14e      	bne.n	800ce22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4906      	ldr	r1, [pc, #24]	@ (800cda8 <HAL_I2C_Mem_Read+0x22c>)
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f000 fd16 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d008      	beq.n	800cdac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e10e      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
 800cd9e:	bf00      	nop
 800cda0:	00100002 	.word	0x00100002
 800cda4:	ffff0000 	.word	0xffff0000
 800cda8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cdba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	691a      	ldr	r2, [r3, #16]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc6:	b2d2      	uxtb	r2, r2
 800cdc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	3b01      	subs	r3, #1
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	691a      	ldr	r2, [r3, #16]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf8:	b2d2      	uxtb	r2, r2
 800cdfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ce20:	e0b8      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4966      	ldr	r1, [pc, #408]	@ (800cfc4 <HAL_I2C_Mem_Read+0x448>)
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f000 fcc7 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e0bf      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	691a      	ldr	r2, [r3, #16]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3b01      	subs	r3, #1
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	2200      	movs	r2, #0
 800ce86:	494f      	ldr	r1, [pc, #316]	@ (800cfc4 <HAL_I2C_Mem_Read+0x448>)
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f000 fc99 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e091      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	691a      	ldr	r2, [r3, #16]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb2:	b2d2      	uxtb	r2, r2
 800ceb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cec4:	3b01      	subs	r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	3b01      	subs	r3, #1
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceec:	1c5a      	adds	r2, r3, #1
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cef6:	3b01      	subs	r3, #1
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cf0c:	e042      	b.n	800cf94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 fdac 	bl	800da70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d001      	beq.n	800cf22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e04c      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	691a      	ldr	r2, [r3, #16]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2c:	b2d2      	uxtb	r2, r2
 800cf2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf34:	1c5a      	adds	r2, r3, #1
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	695b      	ldr	r3, [r3, #20]
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	d118      	bne.n	800cf94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	691a      	ldr	r2, [r3, #16]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf6c:	b2d2      	uxtb	r2, r2
 800cf6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f47f aec2 	bne.w	800cd22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e000      	b.n	800cfbc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cfba:	2302      	movs	r3, #2
  }
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3728      	adds	r7, #40	@ 0x28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	00010004 	.word	0x00010004

0800cfc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	@ 0x28
 800cfcc:	af02      	add	r7, sp, #8
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	607a      	str	r2, [r7, #4]
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800cfd8:	f7fd fbb0 	bl	800a73c <HAL_GetTick>
 800cfdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	f040 8111 	bne.w	800d212 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	2319      	movs	r3, #25
 800cff6:	2201      	movs	r2, #1
 800cff8:	4988      	ldr	r1, [pc, #544]	@ (800d21c <HAL_I2C_IsDeviceReady+0x254>)
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 fbe0 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d006:	2302      	movs	r3, #2
 800d008:	e104      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d010:	2b01      	cmp	r3, #1
 800d012:	d101      	bne.n	800d018 <HAL_I2C_IsDeviceReady+0x50>
 800d014:	2302      	movs	r3, #2
 800d016:	e0fd      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d007      	beq.n	800d03e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f042 0201 	orr.w	r2, r2, #1
 800d03c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d04c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2224      	movs	r2, #36	@ 0x24
 800d052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4a70      	ldr	r2, [pc, #448]	@ (800d220 <HAL_I2C_IsDeviceReady+0x258>)
 800d060:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d070:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f000 fb9e 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00d      	beq.n	800d0a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d098:	d103      	bne.n	800d0a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e0b6      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d0a6:	897b      	ldrh	r3, [r7, #10]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d0b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800d0b6:	f7fd fb41 	bl	800a73c <HAL_GetTick>
 800d0ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	bf0c      	ite	eq
 800d0ca:	2301      	moveq	r3, #1
 800d0cc:	2300      	movne	r3, #0
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0e0:	bf0c      	ite	eq
 800d0e2:	2301      	moveq	r3, #1
 800d0e4:	2300      	movne	r3, #0
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d0ea:	e025      	b.n	800d138 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0ec:	f7fd fb26 	bl	800a73c <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d302      	bcc.n	800d102 <HAL_I2C_IsDeviceReady+0x13a>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d103      	bne.n	800d10a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	22a0      	movs	r2, #160	@ 0xa0
 800d106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b02      	cmp	r3, #2
 800d116:	bf0c      	ite	eq
 800d118:	2301      	moveq	r3, #1
 800d11a:	2300      	movne	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d12a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d12e:	bf0c      	ite	eq
 800d130:	2301      	moveq	r3, #1
 800d132:	2300      	movne	r3, #0
 800d134:	b2db      	uxtb	r3, r3
 800d136:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2ba0      	cmp	r3, #160	@ 0xa0
 800d142:	d005      	beq.n	800d150 <HAL_I2C_IsDeviceReady+0x188>
 800d144:	7dfb      	ldrb	r3, [r7, #23]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <HAL_I2C_IsDeviceReady+0x188>
 800d14a:	7dbb      	ldrb	r3, [r7, #22]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0cd      	beq.n	800d0ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2220      	movs	r2, #32
 800d154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b02      	cmp	r3, #2
 800d164:	d129      	bne.n	800d1ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d174:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	613b      	str	r3, [r7, #16]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	613b      	str	r3, [r7, #16]
 800d18a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	2319      	movs	r3, #25
 800d192:	2201      	movs	r2, #1
 800d194:	4921      	ldr	r1, [pc, #132]	@ (800d21c <HAL_I2C_IsDeviceReady+0x254>)
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fb12 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e036      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2220      	movs	r2, #32
 800d1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e02c      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d1c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d1d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	2319      	movs	r3, #25
 800d1da:	2201      	movs	r2, #1
 800d1dc:	490f      	ldr	r1, [pc, #60]	@ (800d21c <HAL_I2C_IsDeviceReady+0x254>)
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f000 faee 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e012      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800d1f4:	69ba      	ldr	r2, [r7, #24]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	f4ff af32 	bcc.w	800d062 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2220      	movs	r2, #32
 800d202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e000      	b.n	800d214 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800d212:	2302      	movs	r3, #2
  }
}
 800d214:	4618      	mov	r0, r3
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	00100002 	.word	0x00100002
 800d220:	ffff0000 	.word	0xffff0000

0800d224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af02      	add	r7, sp, #8
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	607a      	str	r2, [r7, #4]
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	460b      	mov	r3, r1
 800d232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b08      	cmp	r3, #8
 800d23e:	d006      	beq.n	800d24e <I2C_MasterRequestWrite+0x2a>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d003      	beq.n	800d24e <I2C_MasterRequestWrite+0x2a>
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d24c:	d108      	bne.n	800d260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	e00b      	b.n	800d278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d264:	2b12      	cmp	r3, #18
 800d266:	d107      	bne.n	800d278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 fa9b 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00d      	beq.n	800d2ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d29e:	d103      	bne.n	800d2a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e035      	b.n	800d318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2b4:	d108      	bne.n	800d2c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d2b6:	897b      	ldrh	r3, [r7, #10]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d2c4:	611a      	str	r2, [r3, #16]
 800d2c6:	e01b      	b.n	800d300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d2c8:	897b      	ldrh	r3, [r7, #10]
 800d2ca:	11db      	asrs	r3, r3, #7
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0306 	and.w	r3, r3, #6
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	f063 030f 	orn	r3, r3, #15
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	490e      	ldr	r1, [pc, #56]	@ (800d320 <I2C_MasterRequestWrite+0xfc>)
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f000 fac1 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e010      	b.n	800d318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d2f6:	897b      	ldrh	r3, [r7, #10]
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	4907      	ldr	r1, [pc, #28]	@ (800d324 <I2C_MasterRequestWrite+0x100>)
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 fab1 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	00010008 	.word	0x00010008
 800d324:	00010002 	.word	0x00010002

0800d328 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	607a      	str	r2, [r7, #4]
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	460b      	mov	r3, r1
 800d336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d34c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b08      	cmp	r3, #8
 800d352:	d006      	beq.n	800d362 <I2C_MasterRequestRead+0x3a>
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d003      	beq.n	800d362 <I2C_MasterRequestRead+0x3a>
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d360:	d108      	bne.n	800d374 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	e00b      	b.n	800d38c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d378:	2b11      	cmp	r3, #17
 800d37a:	d107      	bne.n	800d38c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d38a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f000 fa11 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00d      	beq.n	800d3c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3b2:	d103      	bne.n	800d3bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e079      	b.n	800d4b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d3c8:	d108      	bne.n	800d3dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d3ca:	897b      	ldrh	r3, [r7, #10]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	611a      	str	r2, [r3, #16]
 800d3da:	e05f      	b.n	800d49c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d3dc:	897b      	ldrh	r3, [r7, #10]
 800d3de:	11db      	asrs	r3, r3, #7
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	f003 0306 	and.w	r3, r3, #6
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f063 030f 	orn	r3, r3, #15
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4930      	ldr	r1, [pc, #192]	@ (800d4bc <I2C_MasterRequestRead+0x194>)
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 fa37 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e054      	b.n	800d4b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d40a:	897b      	ldrh	r3, [r7, #10]
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4929      	ldr	r1, [pc, #164]	@ (800d4c0 <I2C_MasterRequestRead+0x198>)
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 fa27 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e044      	b.n	800d4b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d42a:	2300      	movs	r3, #0
 800d42c:	613b      	str	r3, [r7, #16]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	613b      	str	r3, [r7, #16]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	613b      	str	r3, [r7, #16]
 800d43e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d44e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f000 f9af 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00d      	beq.n	800d484 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d476:	d103      	bne.n	800d480 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d47e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800d480:	2303      	movs	r3, #3
 800d482:	e017      	b.n	800d4b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d484:	897b      	ldrh	r3, [r7, #10]
 800d486:	11db      	asrs	r3, r3, #7
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f003 0306 	and.w	r3, r3, #6
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	f063 030e 	orn	r3, r3, #14
 800d494:	b2da      	uxtb	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	4907      	ldr	r1, [pc, #28]	@ (800d4c0 <I2C_MasterRequestRead+0x198>)
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 f9e3 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	00010008 	.word	0x00010008
 800d4c0:	00010002 	.word	0x00010002

0800d4c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af02      	add	r7, sp, #8
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	817b      	strh	r3, [r7, #10]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	813b      	strh	r3, [r7, #8]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f000 f960 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00d      	beq.n	800d522 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d514:	d103      	bne.n	800d51e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d51c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e05f      	b.n	800d5e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d522:	897b      	ldrh	r3, [r7, #10]
 800d524:	b2db      	uxtb	r3, r3
 800d526:	461a      	mov	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	6a3a      	ldr	r2, [r7, #32]
 800d536:	492d      	ldr	r1, [pc, #180]	@ (800d5ec <I2C_RequestMemoryWrite+0x128>)
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 f998 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d001      	beq.n	800d548 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	e04c      	b.n	800d5e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	699b      	ldr	r3, [r3, #24]
 800d55a:	617b      	str	r3, [r7, #20]
 800d55c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d560:	6a39      	ldr	r1, [r7, #32]
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f000 fa02 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00d      	beq.n	800d58a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d572:	2b04      	cmp	r3, #4
 800d574:	d107      	bne.n	800d586 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e02b      	b.n	800d5e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d105      	bne.n	800d59c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d590:	893b      	ldrh	r3, [r7, #8]
 800d592:	b2da      	uxtb	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	611a      	str	r2, [r3, #16]
 800d59a:	e021      	b.n	800d5e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d59c:	893b      	ldrh	r3, [r7, #8]
 800d59e:	0a1b      	lsrs	r3, r3, #8
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ac:	6a39      	ldr	r1, [r7, #32]
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f000 f9dc 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00d      	beq.n	800d5d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d107      	bne.n	800d5d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e005      	b.n	800d5e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d5d6:	893b      	ldrh	r3, [r7, #8]
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	00010002 	.word	0x00010002

0800d5f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	4608      	mov	r0, r1
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4603      	mov	r3, r0
 800d600:	817b      	strh	r3, [r7, #10]
 800d602:	460b      	mov	r3, r1
 800d604:	813b      	strh	r3, [r7, #8]
 800d606:	4613      	mov	r3, r2
 800d608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	2200      	movs	r2, #0
 800d632:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f000 f8c2 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00d      	beq.n	800d65e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d64c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d650:	d103      	bne.n	800d65a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d658:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d65a:	2303      	movs	r3, #3
 800d65c:	e0aa      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d65e:	897b      	ldrh	r3, [r7, #10]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	461a      	mov	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d66c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	6a3a      	ldr	r2, [r7, #32]
 800d672:	4952      	ldr	r1, [pc, #328]	@ (800d7bc <I2C_RequestMemoryRead+0x1cc>)
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 f8fa 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e097      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	617b      	str	r3, [r7, #20]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	617b      	str	r3, [r7, #20]
 800d698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d69a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d69c:	6a39      	ldr	r1, [r7, #32]
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f964 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00d      	beq.n	800d6c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d107      	bne.n	800d6c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e076      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d6c6:	88fb      	ldrh	r3, [r7, #6]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d105      	bne.n	800d6d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d6cc:	893b      	ldrh	r3, [r7, #8]
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	611a      	str	r2, [r3, #16]
 800d6d6:	e021      	b.n	800d71c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d6d8:	893b      	ldrh	r3, [r7, #8]
 800d6da:	0a1b      	lsrs	r3, r3, #8
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6e8:	6a39      	ldr	r1, [r7, #32]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 f93e 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00d      	beq.n	800d712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	d107      	bne.n	800d70e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d70c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e050      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d712:	893b      	ldrh	r3, [r7, #8]
 800d714:	b2da      	uxtb	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d71c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d71e:	6a39      	ldr	r1, [r7, #32]
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 f923 	bl	800d96c <I2C_WaitOnTXEFlagUntilTimeout>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00d      	beq.n	800d748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d730:	2b04      	cmp	r3, #4
 800d732:	d107      	bne.n	800d744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e035      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	2200      	movs	r2, #0
 800d760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 f82b 	bl	800d7c0 <I2C_WaitOnFlagUntilTimeout>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00d      	beq.n	800d78c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d77e:	d103      	bne.n	800d788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d788:	2303      	movs	r3, #3
 800d78a:	e013      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d78c:	897b      	ldrh	r3, [r7, #10]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f043 0301 	orr.w	r3, r3, #1
 800d794:	b2da      	uxtb	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	6a3a      	ldr	r2, [r7, #32]
 800d7a0:	4906      	ldr	r1, [pc, #24]	@ (800d7bc <I2C_RequestMemoryRead+0x1cc>)
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f000 f863 	bl	800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e000      	b.n	800d7b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	00010002 	.word	0x00010002

0800d7c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	603b      	str	r3, [r7, #0]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7d0:	e025      	b.n	800d81e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d021      	beq.n	800d81e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7da:	f7fc ffaf 	bl	800a73c <HAL_GetTick>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d302      	bcc.n	800d7f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d116      	bne.n	800d81e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80a:	f043 0220 	orr.w	r2, r3, #32
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e023      	b.n	800d866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	0c1b      	lsrs	r3, r3, #16
 800d822:	b2db      	uxtb	r3, r3
 800d824:	2b01      	cmp	r3, #1
 800d826:	d10d      	bne.n	800d844 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	43da      	mvns	r2, r3
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	4013      	ands	r3, r2
 800d834:	b29b      	uxth	r3, r3
 800d836:	2b00      	cmp	r3, #0
 800d838:	bf0c      	ite	eq
 800d83a:	2301      	moveq	r3, #1
 800d83c:	2300      	movne	r3, #0
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	461a      	mov	r2, r3
 800d842:	e00c      	b.n	800d85e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	43da      	mvns	r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4013      	ands	r3, r2
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	bf0c      	ite	eq
 800d856:	2301      	moveq	r3, #1
 800d858:	2300      	movne	r3, #0
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	461a      	mov	r2, r3
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	429a      	cmp	r2, r3
 800d862:	d0b6      	beq.n	800d7d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
 800d87a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d87c:	e051      	b.n	800d922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	695b      	ldr	r3, [r3, #20]
 800d884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d88c:	d123      	bne.n	800d8d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d89c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d8a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c2:	f043 0204 	orr.w	r2, r3, #4
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e046      	b.n	800d964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8dc:	d021      	beq.n	800d922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8de:	f7fc ff2d 	bl	800a73c <HAL_GetTick>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d302      	bcc.n	800d8f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d116      	bne.n	800d922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d90e:	f043 0220 	orr.w	r2, r3, #32
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e020      	b.n	800d964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	0c1b      	lsrs	r3, r3, #16
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d10c      	bne.n	800d946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	43da      	mvns	r2, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	4013      	ands	r3, r2
 800d938:	b29b      	uxth	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	bf14      	ite	ne
 800d93e:	2301      	movne	r3, #1
 800d940:	2300      	moveq	r3, #0
 800d942:	b2db      	uxtb	r3, r3
 800d944:	e00b      	b.n	800d95e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	43da      	mvns	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	4013      	ands	r3, r2
 800d952:	b29b      	uxth	r3, r3
 800d954:	2b00      	cmp	r3, #0
 800d956:	bf14      	ite	ne
 800d958:	2301      	movne	r3, #1
 800d95a:	2300      	moveq	r3, #0
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d18d      	bne.n	800d87e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d978:	e02d      	b.n	800d9d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f000 f8ce 	bl	800db1c <I2C_IsAcknowledgeFailed>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e02d      	b.n	800d9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d990:	d021      	beq.n	800d9d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d992:	f7fc fed3 	bl	800a73c <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d302      	bcc.n	800d9a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d116      	bne.n	800d9d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c2:	f043 0220 	orr.w	r2, r3, #32
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e007      	b.n	800d9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9e0:	2b80      	cmp	r3, #128	@ 0x80
 800d9e2:	d1ca      	bne.n	800d97a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d9fa:	e02d      	b.n	800da58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f000 f88d 	bl	800db1c <I2C_IsAcknowledgeFailed>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	e02d      	b.n	800da68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da12:	d021      	beq.n	800da58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da14:	f7fc fe92 	bl	800a73c <HAL_GetTick>
 800da18:	4602      	mov	r2, r0
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	429a      	cmp	r2, r3
 800da22:	d302      	bcc.n	800da2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d116      	bne.n	800da58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2220      	movs	r2, #32
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da44:	f043 0220 	orr.w	r2, r3, #32
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e007      	b.n	800da68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	f003 0304 	and.w	r3, r3, #4
 800da62:	2b04      	cmp	r3, #4
 800da64:	d1ca      	bne.n	800d9fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800da7c:	e042      	b.n	800db04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	695b      	ldr	r3, [r3, #20]
 800da84:	f003 0310 	and.w	r3, r3, #16
 800da88:	2b10      	cmp	r3, #16
 800da8a:	d119      	bne.n	800dac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f06f 0210 	mvn.w	r2, #16
 800da94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2220      	movs	r2, #32
 800daa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e029      	b.n	800db14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dac0:	f7fc fe3c 	bl	800a73c <HAL_GetTick>
 800dac4:	4602      	mov	r2, r0
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d302      	bcc.n	800dad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d116      	bne.n	800db04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2200      	movs	r2, #0
 800dada:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2220      	movs	r2, #32
 800dae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf0:	f043 0220 	orr.w	r2, r3, #32
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e007      	b.n	800db14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db0e:	2b40      	cmp	r3, #64	@ 0x40
 800db10:	d1b5      	bne.n	800da7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db32:	d11b      	bne.n	800db6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2220      	movs	r2, #32
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db58:	f043 0204 	orr.w	r2, r3, #4
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e000      	b.n	800db6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7c:	b08f      	sub	sp, #60	@ 0x3c
 800db7e:	af0a      	add	r7, sp, #40	@ 0x28
 800db80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d101      	bne.n	800db8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800db88:	2301      	movs	r3, #1
 800db8a:	e10f      	b.n	800ddac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d106      	bne.n	800dbac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f009 f91c 	bl	8016de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2203      	movs	r2, #3
 800dbb0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f005 fa6f 	bl	80130ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	603b      	str	r3, [r7, #0]
 800dbd6:	687e      	ldr	r6, [r7, #4]
 800dbd8:	466d      	mov	r5, sp
 800dbda:	f106 0410 	add.w	r4, r6, #16
 800dbde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dbea:	e885 0003 	stmia.w	r5, {r0, r1}
 800dbee:	1d33      	adds	r3, r6, #4
 800dbf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbf2:	6838      	ldr	r0, [r7, #0]
 800dbf4:	f005 f946 	bl	8012e84 <USB_CoreInit>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d005      	beq.n	800dc0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2202      	movs	r2, #2
 800dc02:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e0d0      	b.n	800ddac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f005 fa5d 	bl	80130d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc16:	2300      	movs	r3, #0
 800dc18:	73fb      	strb	r3, [r7, #15]
 800dc1a:	e04a      	b.n	800dcb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dc1c:	7bfa      	ldrb	r2, [r7, #15]
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	4613      	mov	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	440b      	add	r3, r1
 800dc2a:	333d      	adds	r3, #61	@ 0x3d
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dc30:	7bfa      	ldrb	r2, [r7, #15]
 800dc32:	6879      	ldr	r1, [r7, #4]
 800dc34:	4613      	mov	r3, r2
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	440b      	add	r3, r1
 800dc3e:	333c      	adds	r3, #60	@ 0x3c
 800dc40:	7bfa      	ldrb	r2, [r7, #15]
 800dc42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dc44:	7bfa      	ldrb	r2, [r7, #15]
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	b298      	uxth	r0, r3
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	440b      	add	r3, r1
 800dc56:	3344      	adds	r3, #68	@ 0x44
 800dc58:	4602      	mov	r2, r0
 800dc5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc5c:	7bfa      	ldrb	r2, [r7, #15]
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	4613      	mov	r3, r2
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	4413      	add	r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	440b      	add	r3, r1
 800dc6a:	3340      	adds	r3, #64	@ 0x40
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dc70:	7bfa      	ldrb	r2, [r7, #15]
 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	4613      	mov	r3, r2
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	4413      	add	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	440b      	add	r3, r1
 800dc7e:	3348      	adds	r3, #72	@ 0x48
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc84:	7bfa      	ldrb	r2, [r7, #15]
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	440b      	add	r3, r1
 800dc92:	334c      	adds	r3, #76	@ 0x4c
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc98:	7bfa      	ldrb	r2, [r7, #15]
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	440b      	add	r3, r1
 800dca6:	3354      	adds	r3, #84	@ 0x54
 800dca8:	2200      	movs	r2, #0
 800dcaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	73fb      	strb	r3, [r7, #15]
 800dcb2:	7bfa      	ldrb	r2, [r7, #15]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d3af      	bcc.n	800dc1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73fb      	strb	r3, [r7, #15]
 800dcc0:	e044      	b.n	800dd4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dcc2:	7bfa      	ldrb	r2, [r7, #15]
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	440b      	add	r3, r1
 800dcd0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dcd8:	7bfa      	ldrb	r2, [r7, #15]
 800dcda:	6879      	ldr	r1, [r7, #4]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	4413      	add	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	440b      	add	r3, r1
 800dce6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800dcea:	7bfa      	ldrb	r2, [r7, #15]
 800dcec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dcee:	7bfa      	ldrb	r2, [r7, #15]
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	00db      	lsls	r3, r3, #3
 800dcf6:	4413      	add	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800dd00:	2200      	movs	r2, #0
 800dd02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dd04:	7bfa      	ldrb	r2, [r7, #15]
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	440b      	add	r3, r1
 800dd12:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800dd16:	2200      	movs	r2, #0
 800dd18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dd1a:	7bfa      	ldrb	r2, [r7, #15]
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	440b      	add	r3, r1
 800dd28:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dd30:	7bfa      	ldrb	r2, [r7, #15]
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	4613      	mov	r3, r2
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	4413      	add	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	440b      	add	r3, r1
 800dd3e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	73fb      	strb	r3, [r7, #15]
 800dd4c:	7bfa      	ldrb	r2, [r7, #15]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d3b5      	bcc.n	800dcc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	687e      	ldr	r6, [r7, #4]
 800dd5e:	466d      	mov	r5, sp
 800dd60:	f106 0410 	add.w	r4, r6, #16
 800dd64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd70:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd74:	1d33      	adds	r3, r6, #4
 800dd76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd78:	6838      	ldr	r0, [r7, #0]
 800dd7a:	f005 f9f5 	bl	8013168 <USB_DevInit>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2202      	movs	r2, #2
 800dd88:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e00d      	b.n	800ddac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f006 fb44 	bl	8014432 <USB_DevDisconnect>

  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d101      	bne.n	800ddd0 <HAL_PCD_Start+0x1c>
 800ddcc:	2302      	movs	r3, #2
 800ddce:	e020      	b.n	800de12 <HAL_PCD_Start+0x5e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d109      	bne.n	800ddf4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d005      	beq.n	800ddf4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f005 f947 	bl	801308c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4618      	mov	r0, r3
 800de04:	f006 faf4 	bl	80143f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800de1a:	b590      	push	{r4, r7, lr}
 800de1c:	b08d      	sub	sp, #52	@ 0x34
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de28:	6a3b      	ldr	r3, [r7, #32]
 800de2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4618      	mov	r0, r3
 800de32:	f006 fbb2 	bl	801459a <USB_GetMode>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f040 848a 	bne.w	800e752 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4618      	mov	r0, r3
 800de44:	f006 fb16 	bl	8014474 <USB_ReadInterrupts>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 8480 	beq.w	800e750 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	0a1b      	lsrs	r3, r3, #8
 800de5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f006 fb03 	bl	8014474 <USB_ReadInterrupts>
 800de6e:	4603      	mov	r3, r0
 800de70:	f003 0302 	and.w	r3, r3, #2
 800de74:	2b02      	cmp	r3, #2
 800de76:	d107      	bne.n	800de88 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	695a      	ldr	r2, [r3, #20]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f002 0202 	and.w	r2, r2, #2
 800de86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f006 faf1 	bl	8014474 <USB_ReadInterrupts>
 800de92:	4603      	mov	r3, r0
 800de94:	f003 0310 	and.w	r3, r3, #16
 800de98:	2b10      	cmp	r3, #16
 800de9a:	d161      	bne.n	800df60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0210 	bic.w	r2, r2, #16
 800deaa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	6a1b      	ldr	r3, [r3, #32]
 800deb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	f003 020f 	and.w	r2, r3, #15
 800deb8:	4613      	mov	r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	4413      	add	r3, r2
 800dec8:	3304      	adds	r3, #4
 800deca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ded2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ded6:	d124      	bne.n	800df22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800dede:	4013      	ands	r3, r2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d035      	beq.n	800df50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800deee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800def2:	b29b      	uxth	r3, r3
 800def4:	461a      	mov	r2, r3
 800def6:	6a38      	ldr	r0, [r7, #32]
 800def8:	f006 f928 	bl	801414c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	691a      	ldr	r2, [r3, #16]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	091b      	lsrs	r3, r3, #4
 800df04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df08:	441a      	add	r2, r3
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	6a1a      	ldr	r2, [r3, #32]
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	091b      	lsrs	r3, r3, #4
 800df16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df1a:	441a      	add	r2, r3
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	621a      	str	r2, [r3, #32]
 800df20:	e016      	b.n	800df50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800df28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800df2c:	d110      	bne.n	800df50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800df34:	2208      	movs	r2, #8
 800df36:	4619      	mov	r1, r3
 800df38:	6a38      	ldr	r0, [r7, #32]
 800df3a:	f006 f907 	bl	801414c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	6a1a      	ldr	r2, [r3, #32]
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	091b      	lsrs	r3, r3, #4
 800df46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df4a:	441a      	add	r2, r3
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	699a      	ldr	r2, [r3, #24]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f042 0210 	orr.w	r2, r2, #16
 800df5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4618      	mov	r0, r3
 800df66:	f006 fa85 	bl	8014474 <USB_ReadInterrupts>
 800df6a:	4603      	mov	r3, r0
 800df6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800df70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800df74:	f040 80a7 	bne.w	800e0c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800df78:	2300      	movs	r3, #0
 800df7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4618      	mov	r0, r3
 800df82:	f006 fa8a 	bl	801449a <USB_ReadDevAllOutEpInterrupt>
 800df86:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800df88:	e099      	b.n	800e0be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800df8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8c:	f003 0301 	and.w	r3, r3, #1
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 808e 	beq.w	800e0b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df9c:	b2d2      	uxtb	r2, r2
 800df9e:	4611      	mov	r1, r2
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f006 faae 	bl	8014502 <USB_ReadDevOutEPInterrupt>
 800dfa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f003 0301 	and.w	r3, r3, #1
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00c      	beq.n	800dfcc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb4:	015a      	lsls	r2, r3, #5
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800dfc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fec2 	bl	800ed50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	f003 0308 	and.w	r3, r3, #8
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00c      	beq.n	800dff0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd8:	015a      	lsls	r2, r3, #5
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	4413      	add	r3, r2
 800dfde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800dfe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 ff98 	bl	800ef20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f003 0310 	and.w	r3, r3, #16
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d008      	beq.n	800e00c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800dffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffc:	015a      	lsls	r2, r3, #5
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	4413      	add	r3, r2
 800e002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e006:	461a      	mov	r2, r3
 800e008:	2310      	movs	r3, #16
 800e00a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	f003 0302 	and.w	r3, r3, #2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d030      	beq.n	800e078 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e01e:	2b80      	cmp	r3, #128	@ 0x80
 800e020:	d109      	bne.n	800e036 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	69fa      	ldr	r2, [r7, #28]
 800e02c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e034:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e038:	4613      	mov	r3, r2
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	4413      	add	r3, r2
 800e048:	3304      	adds	r3, #4
 800e04a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	78db      	ldrb	r3, [r3, #3]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d108      	bne.n	800e066 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2200      	movs	r2, #0
 800e058:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f008 ffc5 	bl	8016ff0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e072:	461a      	mov	r2, r3
 800e074:	2302      	movs	r3, #2
 800e076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	f003 0320 	and.w	r3, r3, #32
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d008      	beq.n	800e094 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e08e:	461a      	mov	r2, r3
 800e090:	2320      	movs	r3, #32
 800e092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d009      	beq.n	800e0b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a0:	015a      	lsls	r2, r3, #5
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e0b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800e0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800e0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f47f af62 	bne.w	800df8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f006 f9d2 	bl	8014474 <USB_ReadInterrupts>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e0d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e0da:	f040 80db 	bne.w	800e294 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f006 f9f3 	bl	80144ce <USB_ReadDevAllInEpInterrupt>
 800e0e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800e0ee:	e0cd      	b.n	800e28c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f2:	f003 0301 	and.w	r3, r3, #1
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f000 80c2 	beq.w	800e280 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e102:	b2d2      	uxtb	r2, r2
 800e104:	4611      	mov	r1, r2
 800e106:	4618      	mov	r0, r3
 800e108:	f006 fa19 	bl	801453e <USB_ReadDevInEPInterrupt>
 800e10c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	f003 0301 	and.w	r3, r3, #1
 800e114:	2b00      	cmp	r3, #0
 800e116:	d057      	beq.n	800e1c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11a:	f003 030f 	and.w	r3, r3, #15
 800e11e:	2201      	movs	r2, #1
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e12c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	43db      	mvns	r3, r3
 800e132:	69f9      	ldr	r1, [r7, #28]
 800e134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e138:	4013      	ands	r3, r2
 800e13a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	4413      	add	r3, r2
 800e144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e148:	461a      	mov	r2, r3
 800e14a:	2301      	movs	r3, #1
 800e14c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d132      	bne.n	800e1bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e15a:	4613      	mov	r3, r2
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	4413      	add	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	440b      	add	r3, r1
 800e164:	334c      	adds	r3, #76	@ 0x4c
 800e166:	6819      	ldr	r1, [r3, #0]
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e16c:	4613      	mov	r3, r2
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	4413      	add	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4403      	add	r3, r0
 800e176:	3348      	adds	r3, #72	@ 0x48
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4419      	add	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e180:	4613      	mov	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4403      	add	r3, r0
 800e18a:	334c      	adds	r3, #76	@ 0x4c
 800e18c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e190:	2b00      	cmp	r3, #0
 800e192:	d113      	bne.n	800e1bc <HAL_PCD_IRQHandler+0x3a2>
 800e194:	6879      	ldr	r1, [r7, #4]
 800e196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e198:	4613      	mov	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	4413      	add	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	440b      	add	r3, r1
 800e1a2:	3354      	adds	r3, #84	@ 0x54
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d108      	bne.n	800e1bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	f006 fa20 	bl	80145fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f008 fe8f 	bl	8016ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	f003 0308 	and.w	r3, r3, #8
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d008      	beq.n	800e1e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1de:	461a      	mov	r2, r3
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f003 0310 	and.w	r3, r3, #16
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d008      	beq.n	800e200 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f0:	015a      	lsls	r2, r3, #5
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	2310      	movs	r3, #16
 800e1fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e206:	2b00      	cmp	r3, #0
 800e208:	d008      	beq.n	800e21c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	015a      	lsls	r2, r3, #5
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	4413      	add	r3, r2
 800e212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e216:	461a      	mov	r2, r3
 800e218:	2340      	movs	r3, #64	@ 0x40
 800e21a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	f003 0302 	and.w	r3, r3, #2
 800e222:	2b00      	cmp	r3, #0
 800e224:	d023      	beq.n	800e26e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e228:	6a38      	ldr	r0, [r7, #32]
 800e22a:	f005 f901 	bl	8013430 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e230:	4613      	mov	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	4413      	add	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	3338      	adds	r3, #56	@ 0x38
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	3304      	adds	r3, #4
 800e240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	78db      	ldrb	r3, [r3, #3]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d108      	bne.n	800e25c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2200      	movs	r2, #0
 800e24e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	b2db      	uxtb	r3, r3
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f008 fedc 	bl	8017014 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	4413      	add	r3, r2
 800e264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e268:	461a      	mov	r2, r3
 800e26a:	2302      	movs	r3, #2
 800e26c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e274:	2b00      	cmp	r3, #0
 800e276:	d003      	beq.n	800e280 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fcdb 	bl	800ec36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e282:	3301      	adds	r3, #1
 800e284:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800e286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e288:	085b      	lsrs	r3, r3, #1
 800e28a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800e28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f47f af2e 	bne.w	800e0f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4618      	mov	r0, r3
 800e29a:	f006 f8eb 	bl	8014474 <USB_ReadInterrupts>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2a8:	d122      	bne.n	800e2f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	69fa      	ldr	r2, [r7, #28]
 800e2b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e2b8:	f023 0301 	bic.w	r3, r3, #1
 800e2bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d108      	bne.n	800e2da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fec2 	bl	800f05c <HAL_PCDEx_LPM_Callback>
 800e2d8:	e002      	b.n	800e2e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f008 fe7a 	bl	8016fd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	695a      	ldr	r2, [r3, #20]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800e2ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f006 f8bd 	bl	8014474 <USB_ReadInterrupts>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e304:	d112      	bne.n	800e32c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b01      	cmp	r3, #1
 800e314:	d102      	bne.n	800e31c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f008 fe36 	bl	8016f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	695a      	ldr	r2, [r3, #20]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800e32a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4618      	mov	r0, r3
 800e332:	f006 f89f 	bl	8014474 <USB_ReadInterrupts>
 800e336:	4603      	mov	r3, r0
 800e338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e340:	f040 80b7 	bne.w	800e4b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e352:	f023 0301 	bic.w	r3, r3, #1
 800e356:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2110      	movs	r1, #16
 800e35e:	4618      	mov	r0, r3
 800e360:	f005 f866 	bl	8013430 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e364:	2300      	movs	r3, #0
 800e366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e368:	e046      	b.n	800e3f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36c:	015a      	lsls	r2, r3, #5
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e376:	461a      	mov	r2, r3
 800e378:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e37c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e380:	015a      	lsls	r2, r3, #5
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4413      	add	r3, r2
 800e386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e38e:	0151      	lsls	r1, r2, #5
 800e390:	69fa      	ldr	r2, [r7, #28]
 800e392:	440a      	add	r2, r1
 800e394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e398:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e39c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a0:	015a      	lsls	r2, r3, #5
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e3b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b4:	015a      	lsls	r2, r3, #5
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3c2:	0151      	lsls	r1, r2, #5
 800e3c4:	69fa      	ldr	r2, [r7, #28]
 800e3c6:	440a      	add	r2, r1
 800e3c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e3d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d4:	015a      	lsls	r2, r3, #5
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	4413      	add	r3, r2
 800e3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3e2:	0151      	lsls	r1, r2, #5
 800e3e4:	69fa      	ldr	r2, [r7, #28]
 800e3e6:	440a      	add	r2, r1
 800e3e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e3f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d3b3      	bcc.n	800e36a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e408:	69db      	ldr	r3, [r3, #28]
 800e40a:	69fa      	ldr	r2, [r7, #28]
 800e40c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e410:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800e414:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d016      	beq.n	800e44c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e42e:	f043 030b 	orr.w	r3, r3, #11
 800e432:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e43e:	69fa      	ldr	r2, [r7, #28]
 800e440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e444:	f043 030b 	orr.w	r3, r3, #11
 800e448:	6453      	str	r3, [r2, #68]	@ 0x44
 800e44a:	e015      	b.n	800e478 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e45a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e45e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800e462:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	69fa      	ldr	r2, [r7, #28]
 800e46e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e472:	f043 030b 	orr.w	r3, r3, #11
 800e476:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	69fa      	ldr	r2, [r7, #28]
 800e482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e486:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e48a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6818      	ldr	r0, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e49c:	461a      	mov	r2, r3
 800e49e:	f006 f8ad 	bl	80145fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	695a      	ldr	r2, [r3, #20]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800e4b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f005 ffdc 	bl	8014474 <USB_ReadInterrupts>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e4c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4c6:	d124      	bne.n	800e512 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f006 f872 	bl	80145b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f005 f827 	bl	801352a <USB_GetDevSpeed>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	461a      	mov	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681c      	ldr	r4, [r3, #0]
 800e4e8:	f001 fa26 	bl	800f938 <HAL_RCC_GetHCLKFreq>
 800e4ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f004 fd26 	bl	8012f48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f008 fd1a 	bl	8016f36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	695a      	ldr	r2, [r3, #20]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800e510:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4618      	mov	r0, r3
 800e518:	f005 ffac 	bl	8014474 <USB_ReadInterrupts>
 800e51c:	4603      	mov	r3, r0
 800e51e:	f003 0308 	and.w	r3, r3, #8
 800e522:	2b08      	cmp	r3, #8
 800e524:	d10a      	bne.n	800e53c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f008 fcf7 	bl	8016f1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	695a      	ldr	r2, [r3, #20]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f002 0208 	and.w	r2, r2, #8
 800e53a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4618      	mov	r0, r3
 800e542:	f005 ff97 	bl	8014474 <USB_ReadInterrupts>
 800e546:	4603      	mov	r3, r0
 800e548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e54c:	2b80      	cmp	r3, #128	@ 0x80
 800e54e:	d122      	bne.n	800e596 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e55c:	2301      	movs	r3, #1
 800e55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e560:	e014      	b.n	800e58c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e562:	6879      	ldr	r1, [r7, #4]
 800e564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e566:	4613      	mov	r3, r2
 800e568:	00db      	lsls	r3, r3, #3
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	440b      	add	r3, r1
 800e570:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d105      	bne.n	800e586 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fb27 	bl	800ebd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e588:	3301      	adds	r3, #1
 800e58a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e592:	429a      	cmp	r2, r3
 800e594:	d3e5      	bcc.n	800e562 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f005 ff6a 	bl	8014474 <USB_ReadInterrupts>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5aa:	d13b      	bne.n	800e624 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5b0:	e02b      	b.n	800e60a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	4413      	add	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	440b      	add	r3, r1
 800e5d0:	3340      	adds	r3, #64	@ 0x40
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d115      	bne.n	800e604 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e5d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	da12      	bge.n	800e604 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	4413      	add	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	440b      	add	r3, r1
 800e5ec:	333f      	adds	r3, #63	@ 0x3f
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 fae8 	bl	800ebd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	3301      	adds	r3, #1
 800e608:	627b      	str	r3, [r7, #36]	@ 0x24
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e610:	429a      	cmp	r2, r3
 800e612:	d3ce      	bcc.n	800e5b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	695a      	ldr	r2, [r3, #20]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800e622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4618      	mov	r0, r3
 800e62a:	f005 ff23 	bl	8014474 <USB_ReadInterrupts>
 800e62e:	4603      	mov	r3, r0
 800e630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e638:	d155      	bne.n	800e6e6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e63a:	2301      	movs	r3, #1
 800e63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e63e:	e045      	b.n	800e6cc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e654:	4613      	mov	r3, r2
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	440b      	add	r3, r1
 800e65e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d12e      	bne.n	800e6c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da2b      	bge.n	800e6c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800e67a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e67e:	429a      	cmp	r2, r3
 800e680:	d121      	bne.n	800e6c6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e686:	4613      	mov	r3, r2
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	4413      	add	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	440b      	add	r3, r1
 800e690:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800e694:	2201      	movs	r2, #1
 800e696:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	699b      	ldr	r3, [r3, #24]
 800e69c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	695b      	ldr	r3, [r3, #20]
 800e6a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10a      	bne.n	800e6c6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e6c2:	6053      	str	r3, [r2, #4]
            break;
 800e6c4:	e007      	b.n	800e6d6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d3b4      	bcc.n	800e640 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	695a      	ldr	r2, [r3, #20]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800e6e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f005 fec2 	bl	8014474 <USB_ReadInterrupts>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6fa:	d10a      	bne.n	800e712 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f008 fc9b 	bl	8017038 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	695a      	ldr	r2, [r3, #20]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800e710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4618      	mov	r0, r3
 800e718:	f005 feac 	bl	8014474 <USB_ReadInterrupts>
 800e71c:	4603      	mov	r3, r0
 800e71e:	f003 0304 	and.w	r3, r3, #4
 800e722:	2b04      	cmp	r3, #4
 800e724:	d115      	bne.n	800e752 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	f003 0304 	and.w	r3, r3, #4
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f008 fc8b 	bl	8017054 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	6859      	ldr	r1, [r3, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	430a      	orrs	r2, r1
 800e74c:	605a      	str	r2, [r3, #4]
 800e74e:	e000      	b.n	800e752 <HAL_PCD_IRQHandler+0x938>
      return;
 800e750:	bf00      	nop
    }
  }
}
 800e752:	3734      	adds	r7, #52	@ 0x34
 800e754:	46bd      	mov	sp, r7
 800e756:	bd90      	pop	{r4, r7, pc}

0800e758 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	460b      	mov	r3, r1
 800e762:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d101      	bne.n	800e772 <HAL_PCD_SetAddress+0x1a>
 800e76e:	2302      	movs	r3, #2
 800e770:	e013      	b.n	800e79a <HAL_PCD_SetAddress+0x42>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2201      	movs	r2, #1
 800e776:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	78fa      	ldrb	r2, [r7, #3]
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f005 fe0a 	bl	80143a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b084      	sub	sp, #16
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	4608      	mov	r0, r1
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	70fb      	strb	r3, [r7, #3]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	803b      	strh	r3, [r7, #0]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	da0f      	bge.n	800e7e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e7c8:	78fb      	ldrb	r3, [r7, #3]
 800e7ca:	f003 020f 	and.w	r2, r3, #15
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	00db      	lsls	r3, r3, #3
 800e7d2:	4413      	add	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	3338      	adds	r3, #56	@ 0x38
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	4413      	add	r3, r2
 800e7dc:	3304      	adds	r3, #4
 800e7de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	705a      	strb	r2, [r3, #1]
 800e7e6:	e00f      	b.n	800e808 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e7e8:	78fb      	ldrb	r3, [r7, #3]
 800e7ea:	f003 020f 	and.w	r2, r3, #15
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	4413      	add	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	3304      	adds	r3, #4
 800e800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e808:	78fb      	ldrb	r3, [r7, #3]
 800e80a:	f003 030f 	and.w	r3, r3, #15
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e814:	883a      	ldrh	r2, [r7, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	78ba      	ldrb	r2, [r7, #2]
 800e81e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	785b      	ldrb	r3, [r3, #1]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d004      	beq.n	800e832 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	461a      	mov	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e832:	78bb      	ldrb	r3, [r7, #2]
 800e834:	2b02      	cmp	r3, #2
 800e836:	d102      	bne.n	800e83e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e844:	2b01      	cmp	r3, #1
 800e846:	d101      	bne.n	800e84c <HAL_PCD_EP_Open+0xaa>
 800e848:	2302      	movs	r3, #2
 800e84a:	e00e      	b.n	800e86a <HAL_PCD_EP_Open+0xc8>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68f9      	ldr	r1, [r7, #12]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f004 fe8a 	bl	8013574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800e868:	7afb      	ldrb	r3, [r7, #11]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	460b      	mov	r3, r1
 800e87c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e87e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e882:	2b00      	cmp	r3, #0
 800e884:	da0f      	bge.n	800e8a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e886:	78fb      	ldrb	r3, [r7, #3]
 800e888:	f003 020f 	and.w	r2, r3, #15
 800e88c:	4613      	mov	r3, r2
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	4413      	add	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	3338      	adds	r3, #56	@ 0x38
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	3304      	adds	r3, #4
 800e89c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	705a      	strb	r2, [r3, #1]
 800e8a4:	e00f      	b.n	800e8c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e8a6:	78fb      	ldrb	r3, [r7, #3]
 800e8a8:	f003 020f 	and.w	r2, r3, #15
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	4413      	add	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	3304      	adds	r3, #4
 800e8be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e8c6:	78fb      	ldrb	r3, [r7, #3]
 800e8c8:	f003 030f 	and.w	r3, r3, #15
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d101      	bne.n	800e8e0 <HAL_PCD_EP_Close+0x6e>
 800e8dc:	2302      	movs	r3, #2
 800e8de:	e00e      	b.n	800e8fe <HAL_PCD_EP_Close+0x8c>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68f9      	ldr	r1, [r7, #12]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f004 fec8 	bl	8013684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	603b      	str	r3, [r7, #0]
 800e912:	460b      	mov	r3, r1
 800e914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e916:	7afb      	ldrb	r3, [r7, #11]
 800e918:	f003 020f 	and.w	r2, r3, #15
 800e91c:	4613      	mov	r3, r2
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	3304      	adds	r3, #4
 800e92e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2200      	movs	r2, #0
 800e940:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	2200      	movs	r2, #0
 800e946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e948:	7afb      	ldrb	r3, [r7, #11]
 800e94a:	f003 030f 	and.w	r3, r3, #15
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d102      	bne.n	800e962 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e962:	7afb      	ldrb	r3, [r7, #11]
 800e964:	f003 030f 	and.w	r3, r3, #15
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6818      	ldr	r0, [r3, #0]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	b2db      	uxtb	r3, r3
 800e976:	461a      	mov	r2, r3
 800e978:	6979      	ldr	r1, [r7, #20]
 800e97a:	f005 f9a7 	bl	8013ccc <USB_EP0StartXfer>
 800e97e:	e008      	b.n	800e992 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6818      	ldr	r0, [r3, #0]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	461a      	mov	r2, r3
 800e98c:	6979      	ldr	r1, [r7, #20]
 800e98e:	f004 ff55 	bl	801383c <USB_EPStartXfer>
  }

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e9a8:	78fb      	ldrb	r3, [r7, #3]
 800e9aa:	f003 020f 	and.w	r2, r3, #15
 800e9ae:	6879      	ldr	r1, [r7, #4]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	4413      	add	r3, r2
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	440b      	add	r3, r1
 800e9ba:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e9be:	681b      	ldr	r3, [r3, #0]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	607a      	str	r2, [r7, #4]
 800e9d6:	603b      	str	r3, [r7, #0]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e9dc:	7afb      	ldrb	r3, [r7, #11]
 800e9de:	f003 020f 	and.w	r2, r3, #15
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	4413      	add	r3, r2
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	3338      	adds	r3, #56	@ 0x38
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	2200      	movs	r2, #0
 800ea04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ea0c:	7afb      	ldrb	r3, [r7, #11]
 800ea0e:	f003 030f 	and.w	r3, r3, #15
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d102      	bne.n	800ea26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ea26:	7afb      	ldrb	r3, [r7, #11]
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d109      	bne.n	800ea44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6818      	ldr	r0, [r3, #0]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	6979      	ldr	r1, [r7, #20]
 800ea3e:	f005 f945 	bl	8013ccc <USB_EP0StartXfer>
 800ea42:	e008      	b.n	800ea56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6818      	ldr	r0, [r3, #0]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	691b      	ldr	r3, [r3, #16]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6979      	ldr	r1, [r7, #20]
 800ea52:	f004 fef3 	bl	801383c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ea6c:	78fb      	ldrb	r3, [r7, #3]
 800ea6e:	f003 020f 	and.w	r2, r3, #15
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d901      	bls.n	800ea7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e050      	b.n	800eb20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ea7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	da0f      	bge.n	800eaa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	f003 020f 	and.w	r2, r3, #15
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4413      	add	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	3338      	adds	r3, #56	@ 0x38
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4413      	add	r3, r2
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	705a      	strb	r2, [r3, #1]
 800eaa4:	e00d      	b.n	800eac2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800eaa6:	78fa      	ldrb	r2, [r7, #3]
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	4413      	add	r3, r2
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	4413      	add	r3, r2
 800eab8:	3304      	adds	r3, #4
 800eaba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2201      	movs	r2, #1
 800eac6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eac8:	78fb      	ldrb	r3, [r7, #3]
 800eaca:	f003 030f 	and.w	r3, r3, #15
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <HAL_PCD_EP_SetStall+0x82>
 800eade:	2302      	movs	r3, #2
 800eae0:	e01e      	b.n	800eb20 <HAL_PCD_EP_SetStall+0xc0>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68f9      	ldr	r1, [r7, #12]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f005 fb83 	bl	80141fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	f003 030f 	and.w	r3, r3, #15
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d10a      	bne.n	800eb16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6818      	ldr	r0, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	b2d9      	uxtb	r1, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eb10:	461a      	mov	r2, r3
 800eb12:	f005 fd73 	bl	80145fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800eb34:	78fb      	ldrb	r3, [r7, #3]
 800eb36:	f003 020f 	and.w	r2, r3, #15
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d901      	bls.n	800eb46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e042      	b.n	800ebcc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800eb46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	da0f      	bge.n	800eb6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	f003 020f 	and.w	r2, r3, #15
 800eb54:	4613      	mov	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	4413      	add	r3, r2
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	3338      	adds	r3, #56	@ 0x38
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	4413      	add	r3, r2
 800eb62:	3304      	adds	r3, #4
 800eb64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	705a      	strb	r2, [r3, #1]
 800eb6c:	e00f      	b.n	800eb8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb6e:	78fb      	ldrb	r3, [r7, #3]
 800eb70:	f003 020f 	and.w	r2, r3, #15
 800eb74:	4613      	mov	r3, r2
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	4413      	add	r3, r2
 800eb84:	3304      	adds	r3, #4
 800eb86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	f003 030f 	and.w	r3, r3, #15
 800eb9a:	b2da      	uxtb	r2, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d101      	bne.n	800ebae <HAL_PCD_EP_ClrStall+0x86>
 800ebaa:	2302      	movs	r3, #2
 800ebac:	e00e      	b.n	800ebcc <HAL_PCD_EP_ClrStall+0xa4>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68f9      	ldr	r1, [r7, #12]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f005 fb8b 	bl	80142d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ebe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	da0c      	bge.n	800ec02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ebe8:	78fb      	ldrb	r3, [r7, #3]
 800ebea:	f003 020f 	and.w	r2, r3, #15
 800ebee:	4613      	mov	r3, r2
 800ebf0:	00db      	lsls	r3, r3, #3
 800ebf2:	4413      	add	r3, r2
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	3338      	adds	r3, #56	@ 0x38
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e00c      	b.n	800ec1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ec02:	78fb      	ldrb	r3, [r7, #3]
 800ec04:	f003 020f 	and.w	r2, r3, #15
 800ec08:	4613      	mov	r3, r2
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	4413      	add	r3, r2
 800ec18:	3304      	adds	r3, #4
 800ec1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68f9      	ldr	r1, [r7, #12]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f005 f9aa 	bl	8013f7c <USB_EPStopXfer>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ec2c:	7afb      	ldrb	r3, [r7, #11]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b08a      	sub	sp, #40	@ 0x28
 800ec3a:	af02      	add	r7, sp, #8
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ec4a:	683a      	ldr	r2, [r7, #0]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	4413      	add	r3, r2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	3338      	adds	r3, #56	@ 0x38
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	4413      	add	r3, r2
 800ec5a:	3304      	adds	r3, #4
 800ec5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6a1a      	ldr	r2, [r3, #32]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	699b      	ldr	r3, [r3, #24]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d901      	bls.n	800ec6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e06c      	b.n	800ed48 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	699a      	ldr	r2, [r3, #24]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	69fa      	ldr	r2, [r7, #28]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d902      	bls.n	800ec8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	3303      	adds	r3, #3
 800ec8e:	089b      	lsrs	r3, r3, #2
 800ec90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ec92:	e02b      	b.n	800ecec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	699a      	ldr	r2, [r3, #24]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6a1b      	ldr	r3, [r3, #32]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	69fa      	ldr	r2, [r7, #28]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d902      	bls.n	800ecb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	3303      	adds	r3, #3
 800ecb4:	089b      	lsrs	r3, r3, #2
 800ecb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6919      	ldr	r1, [r3, #16]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	b2da      	uxtb	r2, r3
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	4603      	mov	r3, r0
 800ecce:	6978      	ldr	r0, [r7, #20]
 800ecd0:	f005 f9fe 	bl	80140d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	691a      	ldr	r2, [r3, #16]
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	441a      	add	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6a1a      	ldr	r2, [r3, #32]
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	441a      	add	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	015a      	lsls	r2, r3, #5
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ecfc:	69ba      	ldr	r2, [r7, #24]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d809      	bhi.n	800ed16 <PCD_WriteEmptyTxFifo+0xe0>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6a1a      	ldr	r2, [r3, #32]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d203      	bcs.n	800ed16 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1be      	bne.n	800ec94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d811      	bhi.n	800ed46 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	f003 030f 	and.w	r3, r3, #15
 800ed28:	2201      	movs	r2, #1
 800ed2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	43db      	mvns	r3, r3
 800ed3c:	6939      	ldr	r1, [r7, #16]
 800ed3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed42:	4013      	ands	r3, r2
 800ed44:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3720      	adds	r7, #32
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	333c      	adds	r3, #60	@ 0x3c
 800ed68:	3304      	adds	r3, #4
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	015a      	lsls	r2, r3, #5
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	4413      	add	r3, r2
 800ed76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d17b      	bne.n	800ee7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	f003 0308 	and.w	r3, r3, #8
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d015      	beq.n	800edbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	4a61      	ldr	r2, [pc, #388]	@ (800ef18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	f240 80b9 	bls.w	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 80b3 	beq.w	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	015a      	lsls	r2, r3, #5
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	4413      	add	r3, r2
 800edae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edb2:	461a      	mov	r2, r3
 800edb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800edb8:	6093      	str	r3, [r2, #8]
 800edba:	e0a7      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	4413      	add	r3, r2
 800edce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edd2:	461a      	mov	r2, r3
 800edd4:	2320      	movs	r3, #32
 800edd6:	6093      	str	r3, [r2, #8]
 800edd8:	e098      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f040 8093 	bne.w	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	4a4b      	ldr	r2, [pc, #300]	@ (800ef18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d90f      	bls.n	800ee0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00a      	beq.n	800ee0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	015a      	lsls	r2, r3, #5
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	4413      	add	r3, r2
 800ee00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee04:	461a      	mov	r2, r3
 800ee06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee0a:	6093      	str	r3, [r2, #8]
 800ee0c:	e07e      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ee0e:	683a      	ldr	r2, [r7, #0]
 800ee10:	4613      	mov	r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	4413      	add	r3, r2
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	4413      	add	r3, r2
 800ee20:	3304      	adds	r3, #4
 800ee22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	0159      	lsls	r1, r3, #5
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	440b      	add	r3, r1
 800ee30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee3a:	1ad2      	subs	r2, r2, r3
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d114      	bne.n	800ee70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d109      	bne.n	800ee62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6818      	ldr	r0, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ee58:	461a      	mov	r2, r3
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	f005 fbce 	bl	80145fc <USB_EP0_OutStart>
 800ee60:	e006      	b.n	800ee70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	691a      	ldr	r2, [r3, #16]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	441a      	add	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	4619      	mov	r1, r3
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f008 f81a 	bl	8016eb0 <HAL_PCD_DataOutStageCallback>
 800ee7c:	e046      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	4a26      	ldr	r2, [pc, #152]	@ (800ef1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d124      	bne.n	800eed0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eea2:	6093      	str	r3, [r2, #8]
 800eea4:	e032      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	f003 0320 	and.w	r3, r3, #32
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d008      	beq.n	800eec2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	015a      	lsls	r2, r3, #5
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eebc:	461a      	mov	r2, r3
 800eebe:	2320      	movs	r3, #32
 800eec0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f007 fff1 	bl	8016eb0 <HAL_PCD_DataOutStageCallback>
 800eece:	e01d      	b.n	800ef0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d114      	bne.n	800ef00 <PCD_EP_OutXfrComplete_int+0x1b0>
 800eed6:	6879      	ldr	r1, [r7, #4]
 800eed8:	683a      	ldr	r2, [r7, #0]
 800eeda:	4613      	mov	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	4413      	add	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	440b      	add	r3, r1
 800eee4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d108      	bne.n	800ef00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6818      	ldr	r0, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eef8:	461a      	mov	r2, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	f005 fb7e 	bl	80145fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f007 ffd2 	bl	8016eb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3720      	adds	r7, #32
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	4f54300a 	.word	0x4f54300a
 800ef1c:	4f54310a 	.word	0x4f54310a

0800ef20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	333c      	adds	r3, #60	@ 0x3c
 800ef38:	3304      	adds	r3, #4
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	015a      	lsls	r2, r3, #5
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	4413      	add	r3, r2
 800ef46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4a15      	ldr	r2, [pc, #84]	@ (800efa8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d90e      	bls.n	800ef74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f007 ff89 	bl	8016e8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	@ (800efa8 <PCD_EP_OutSetupPacket_int+0x88>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d90c      	bls.n	800ef9c <PCD_EP_OutSetupPacket_int+0x7c>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	691b      	ldr	r3, [r3, #16]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d108      	bne.n	800ef9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6818      	ldr	r0, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ef94:	461a      	mov	r2, r3
 800ef96:	2101      	movs	r1, #1
 800ef98:	f005 fb30 	bl	80145fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3718      	adds	r7, #24
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	4f54300a 	.word	0x4f54300a

0800efac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
 800efb8:	4613      	mov	r3, r2
 800efba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800efc4:	78fb      	ldrb	r3, [r7, #3]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d107      	bne.n	800efda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800efca:	883b      	ldrh	r3, [r7, #0]
 800efcc:	0419      	lsls	r1, r3, #16
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	430a      	orrs	r2, r1
 800efd6:	629a      	str	r2, [r3, #40]	@ 0x28
 800efd8:	e028      	b.n	800f02c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efe0:	0c1b      	lsrs	r3, r3, #16
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	4413      	add	r3, r2
 800efe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800efe8:	2300      	movs	r3, #0
 800efea:	73fb      	strb	r3, [r7, #15]
 800efec:	e00d      	b.n	800f00a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
 800eff4:	3340      	adds	r3, #64	@ 0x40
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	0c1b      	lsrs	r3, r3, #16
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	4413      	add	r3, r2
 800f002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f004:	7bfb      	ldrb	r3, [r7, #15]
 800f006:	3301      	adds	r3, #1
 800f008:	73fb      	strb	r3, [r7, #15]
 800f00a:	7bfa      	ldrb	r2, [r7, #15]
 800f00c:	78fb      	ldrb	r3, [r7, #3]
 800f00e:	3b01      	subs	r3, #1
 800f010:	429a      	cmp	r2, r3
 800f012:	d3ec      	bcc.n	800efee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f014:	883b      	ldrh	r3, [r7, #0]
 800f016:	0418      	lsls	r0, r3, #16
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6819      	ldr	r1, [r3, #0]
 800f01c:	78fb      	ldrb	r3, [r7, #3]
 800f01e:	3b01      	subs	r3, #1
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	4302      	orrs	r2, r0
 800f024:	3340      	adds	r3, #64	@ 0x40
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	440b      	add	r3, r1
 800f02a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr

0800f03a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f03a:	b480      	push	{r7}
 800f03c:	b083      	sub	sp, #12
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	887a      	ldrh	r2, [r7, #2]
 800f04c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f068:	bf00      	nop
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e267      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d075      	beq.n	800f17e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f092:	4b88      	ldr	r3, [pc, #544]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f003 030c 	and.w	r3, r3, #12
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	d00c      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f09e:	4b85      	ldr	r3, [pc, #532]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f0a6:	2b08      	cmp	r3, #8
 800f0a8:	d112      	bne.n	800f0d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f0aa:	4b82      	ldr	r3, [pc, #520]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f0b6:	d10b      	bne.n	800f0d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f0b8:	4b7e      	ldr	r3, [pc, #504]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d05b      	beq.n	800f17c <HAL_RCC_OscConfig+0x108>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d157      	bne.n	800f17c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e242      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0d8:	d106      	bne.n	800f0e8 <HAL_RCC_OscConfig+0x74>
 800f0da:	4b76      	ldr	r3, [pc, #472]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a75      	ldr	r2, [pc, #468]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	e01d      	b.n	800f124 <HAL_RCC_OscConfig+0xb0>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f0f0:	d10c      	bne.n	800f10c <HAL_RCC_OscConfig+0x98>
 800f0f2:	4b70      	ldr	r3, [pc, #448]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a6f      	ldr	r2, [pc, #444]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f0f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f0fc:	6013      	str	r3, [r2, #0]
 800f0fe:	4b6d      	ldr	r3, [pc, #436]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a6c      	ldr	r2, [pc, #432]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f108:	6013      	str	r3, [r2, #0]
 800f10a:	e00b      	b.n	800f124 <HAL_RCC_OscConfig+0xb0>
 800f10c:	4b69      	ldr	r3, [pc, #420]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a68      	ldr	r2, [pc, #416]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	4b66      	ldr	r3, [pc, #408]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a65      	ldr	r2, [pc, #404]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f11e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d013      	beq.n	800f154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f12c:	f7fb fb06 	bl	800a73c <HAL_GetTick>
 800f130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f132:	e008      	b.n	800f146 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f134:	f7fb fb02 	bl	800a73c <HAL_GetTick>
 800f138:	4602      	mov	r2, r0
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	2b64      	cmp	r3, #100	@ 0x64
 800f140:	d901      	bls.n	800f146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f142:	2303      	movs	r3, #3
 800f144:	e207      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f146:	4b5b      	ldr	r3, [pc, #364]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0f0      	beq.n	800f134 <HAL_RCC_OscConfig+0xc0>
 800f152:	e014      	b.n	800f17e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f154:	f7fb faf2 	bl	800a73c <HAL_GetTick>
 800f158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f15a:	e008      	b.n	800f16e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f15c:	f7fb faee 	bl	800a73c <HAL_GetTick>
 800f160:	4602      	mov	r2, r0
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	2b64      	cmp	r3, #100	@ 0x64
 800f168:	d901      	bls.n	800f16e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e1f3      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f16e:	4b51      	ldr	r3, [pc, #324]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1f0      	bne.n	800f15c <HAL_RCC_OscConfig+0xe8>
 800f17a:	e000      	b.n	800f17e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f17c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b00      	cmp	r3, #0
 800f188:	d063      	beq.n	800f252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f18a:	4b4a      	ldr	r3, [pc, #296]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	f003 030c 	and.w	r3, r3, #12
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00b      	beq.n	800f1ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f196:	4b47      	ldr	r3, [pc, #284]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f19e:	2b08      	cmp	r3, #8
 800f1a0:	d11c      	bne.n	800f1dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f1a2:	4b44      	ldr	r3, [pc, #272]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d116      	bne.n	800f1dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f1ae:	4b41      	ldr	r3, [pc, #260]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d005      	beq.n	800f1c6 <HAL_RCC_OscConfig+0x152>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d001      	beq.n	800f1c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e1c7      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f1c6:	4b3b      	ldr	r3, [pc, #236]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	4937      	ldr	r1, [pc, #220]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f1da:	e03a      	b.n	800f252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d020      	beq.n	800f226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f1e4:	4b34      	ldr	r3, [pc, #208]	@ (800f2b8 <HAL_RCC_OscConfig+0x244>)
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1ea:	f7fb faa7 	bl	800a73c <HAL_GetTick>
 800f1ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1f0:	e008      	b.n	800f204 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f1f2:	f7fb faa3 	bl	800a73c <HAL_GetTick>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d901      	bls.n	800f204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f200:	2303      	movs	r3, #3
 800f202:	e1a8      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f204:	4b2b      	ldr	r3, [pc, #172]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d0f0      	beq.n	800f1f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f210:	4b28      	ldr	r3, [pc, #160]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	4925      	ldr	r1, [pc, #148]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f220:	4313      	orrs	r3, r2
 800f222:	600b      	str	r3, [r1, #0]
 800f224:	e015      	b.n	800f252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f226:	4b24      	ldr	r3, [pc, #144]	@ (800f2b8 <HAL_RCC_OscConfig+0x244>)
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f22c:	f7fb fa86 	bl	800a73c <HAL_GetTick>
 800f230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f232:	e008      	b.n	800f246 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f234:	f7fb fa82 	bl	800a73c <HAL_GetTick>
 800f238:	4602      	mov	r2, r0
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	2b02      	cmp	r3, #2
 800f240:	d901      	bls.n	800f246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f242:	2303      	movs	r3, #3
 800f244:	e187      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f246:	4b1b      	ldr	r3, [pc, #108]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1f0      	bne.n	800f234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f003 0308 	and.w	r3, r3, #8
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d036      	beq.n	800f2cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	695b      	ldr	r3, [r3, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d016      	beq.n	800f294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f266:	4b15      	ldr	r3, [pc, #84]	@ (800f2bc <HAL_RCC_OscConfig+0x248>)
 800f268:	2201      	movs	r2, #1
 800f26a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f26c:	f7fb fa66 	bl	800a73c <HAL_GetTick>
 800f270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f272:	e008      	b.n	800f286 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f274:	f7fb fa62 	bl	800a73c <HAL_GetTick>
 800f278:	4602      	mov	r2, r0
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d901      	bls.n	800f286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f282:	2303      	movs	r3, #3
 800f284:	e167      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f286:	4b0b      	ldr	r3, [pc, #44]	@ (800f2b4 <HAL_RCC_OscConfig+0x240>)
 800f288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f28a:	f003 0302 	and.w	r3, r3, #2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d0f0      	beq.n	800f274 <HAL_RCC_OscConfig+0x200>
 800f292:	e01b      	b.n	800f2cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f294:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <HAL_RCC_OscConfig+0x248>)
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f29a:	f7fb fa4f 	bl	800a73c <HAL_GetTick>
 800f29e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f2a0:	e00e      	b.n	800f2c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f2a2:	f7fb fa4b 	bl	800a73c <HAL_GetTick>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	d907      	bls.n	800f2c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	e150      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
 800f2b4:	40023800 	.word	0x40023800
 800f2b8:	42470000 	.word	0x42470000
 800f2bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f2c0:	4b88      	ldr	r3, [pc, #544]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f2c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2c4:	f003 0302 	and.w	r3, r3, #2
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1ea      	bne.n	800f2a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f003 0304 	and.w	r3, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f000 8097 	beq.w	800f408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f2de:	4b81      	ldr	r3, [pc, #516]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10f      	bne.n	800f30a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	60bb      	str	r3, [r7, #8]
 800f2ee:	4b7d      	ldr	r3, [pc, #500]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2f2:	4a7c      	ldr	r2, [pc, #496]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f2f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f2f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800f2fa:	4b7a      	ldr	r3, [pc, #488]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f302:	60bb      	str	r3, [r7, #8]
 800f304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f306:	2301      	movs	r3, #1
 800f308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f30a:	4b77      	ldr	r3, [pc, #476]	@ (800f4e8 <HAL_RCC_OscConfig+0x474>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f312:	2b00      	cmp	r3, #0
 800f314:	d118      	bne.n	800f348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f316:	4b74      	ldr	r3, [pc, #464]	@ (800f4e8 <HAL_RCC_OscConfig+0x474>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a73      	ldr	r2, [pc, #460]	@ (800f4e8 <HAL_RCC_OscConfig+0x474>)
 800f31c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f322:	f7fb fa0b 	bl	800a73c <HAL_GetTick>
 800f326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f328:	e008      	b.n	800f33c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f32a:	f7fb fa07 	bl	800a73c <HAL_GetTick>
 800f32e:	4602      	mov	r2, r0
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	2b02      	cmp	r3, #2
 800f336:	d901      	bls.n	800f33c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f338:	2303      	movs	r3, #3
 800f33a:	e10c      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f33c:	4b6a      	ldr	r3, [pc, #424]	@ (800f4e8 <HAL_RCC_OscConfig+0x474>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0f0      	beq.n	800f32a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d106      	bne.n	800f35e <HAL_RCC_OscConfig+0x2ea>
 800f350:	4b64      	ldr	r3, [pc, #400]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f354:	4a63      	ldr	r2, [pc, #396]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f35c:	e01c      	b.n	800f398 <HAL_RCC_OscConfig+0x324>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	2b05      	cmp	r3, #5
 800f364:	d10c      	bne.n	800f380 <HAL_RCC_OscConfig+0x30c>
 800f366:	4b5f      	ldr	r3, [pc, #380]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f36a:	4a5e      	ldr	r2, [pc, #376]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f36c:	f043 0304 	orr.w	r3, r3, #4
 800f370:	6713      	str	r3, [r2, #112]	@ 0x70
 800f372:	4b5c      	ldr	r3, [pc, #368]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f376:	4a5b      	ldr	r2, [pc, #364]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f378:	f043 0301 	orr.w	r3, r3, #1
 800f37c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f37e:	e00b      	b.n	800f398 <HAL_RCC_OscConfig+0x324>
 800f380:	4b58      	ldr	r3, [pc, #352]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f384:	4a57      	ldr	r2, [pc, #348]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f386:	f023 0301 	bic.w	r3, r3, #1
 800f38a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f38c:	4b55      	ldr	r3, [pc, #340]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f38e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f390:	4a54      	ldr	r2, [pc, #336]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f392:	f023 0304 	bic.w	r3, r3, #4
 800f396:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	689b      	ldr	r3, [r3, #8]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d015      	beq.n	800f3cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3a0:	f7fb f9cc 	bl	800a73c <HAL_GetTick>
 800f3a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f3a6:	e00a      	b.n	800f3be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f3a8:	f7fb f9c8 	bl	800a73c <HAL_GetTick>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d901      	bls.n	800f3be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e0cb      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f3be:	4b49      	ldr	r3, [pc, #292]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3c2:	f003 0302 	and.w	r3, r3, #2
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0ee      	beq.n	800f3a8 <HAL_RCC_OscConfig+0x334>
 800f3ca:	e014      	b.n	800f3f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f3cc:	f7fb f9b6 	bl	800a73c <HAL_GetTick>
 800f3d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f3d2:	e00a      	b.n	800f3ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f3d4:	f7fb f9b2 	bl	800a73c <HAL_GetTick>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d901      	bls.n	800f3ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	e0b5      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f3ea:	4b3e      	ldr	r3, [pc, #248]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f3ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1ee      	bne.n	800f3d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f3f6:	7dfb      	ldrb	r3, [r7, #23]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d105      	bne.n	800f408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f3fc:	4b39      	ldr	r3, [pc, #228]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f400:	4a38      	ldr	r2, [pc, #224]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f406:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f000 80a1 	beq.w	800f554 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f412:	4b34      	ldr	r3, [pc, #208]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	f003 030c 	and.w	r3, r3, #12
 800f41a:	2b08      	cmp	r3, #8
 800f41c:	d05c      	beq.n	800f4d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	699b      	ldr	r3, [r3, #24]
 800f422:	2b02      	cmp	r3, #2
 800f424:	d141      	bne.n	800f4aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f426:	4b31      	ldr	r3, [pc, #196]	@ (800f4ec <HAL_RCC_OscConfig+0x478>)
 800f428:	2200      	movs	r2, #0
 800f42a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f42c:	f7fb f986 	bl	800a73c <HAL_GetTick>
 800f430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f432:	e008      	b.n	800f446 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f434:	f7fb f982 	bl	800a73c <HAL_GetTick>
 800f438:	4602      	mov	r2, r0
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d901      	bls.n	800f446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	e087      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f446:	4b27      	ldr	r3, [pc, #156]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1f0      	bne.n	800f434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	69da      	ldr	r2, [r3, #28]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	431a      	orrs	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f460:	019b      	lsls	r3, r3, #6
 800f462:	431a      	orrs	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f468:	085b      	lsrs	r3, r3, #1
 800f46a:	3b01      	subs	r3, #1
 800f46c:	041b      	lsls	r3, r3, #16
 800f46e:	431a      	orrs	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f474:	061b      	lsls	r3, r3, #24
 800f476:	491b      	ldr	r1, [pc, #108]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f478:	4313      	orrs	r3, r2
 800f47a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f47c:	4b1b      	ldr	r3, [pc, #108]	@ (800f4ec <HAL_RCC_OscConfig+0x478>)
 800f47e:	2201      	movs	r2, #1
 800f480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f482:	f7fb f95b 	bl	800a73c <HAL_GetTick>
 800f486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f488:	e008      	b.n	800f49c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f48a:	f7fb f957 	bl	800a73c <HAL_GetTick>
 800f48e:	4602      	mov	r2, r0
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	2b02      	cmp	r3, #2
 800f496:	d901      	bls.n	800f49c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f498:	2303      	movs	r3, #3
 800f49a:	e05c      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f49c:	4b11      	ldr	r3, [pc, #68]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d0f0      	beq.n	800f48a <HAL_RCC_OscConfig+0x416>
 800f4a8:	e054      	b.n	800f554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f4aa:	4b10      	ldr	r3, [pc, #64]	@ (800f4ec <HAL_RCC_OscConfig+0x478>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f4b0:	f7fb f944 	bl	800a73c <HAL_GetTick>
 800f4b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f4b6:	e008      	b.n	800f4ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f4b8:	f7fb f940 	bl	800a73c <HAL_GetTick>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d901      	bls.n	800f4ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f4c6:	2303      	movs	r3, #3
 800f4c8:	e045      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f4ca:	4b06      	ldr	r3, [pc, #24]	@ (800f4e4 <HAL_RCC_OscConfig+0x470>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1f0      	bne.n	800f4b8 <HAL_RCC_OscConfig+0x444>
 800f4d6:	e03d      	b.n	800f554 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d107      	bne.n	800f4f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e038      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
 800f4e4:	40023800 	.word	0x40023800
 800f4e8:	40007000 	.word	0x40007000
 800f4ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f560 <HAL_RCC_OscConfig+0x4ec>)
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d028      	beq.n	800f550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f508:	429a      	cmp	r2, r3
 800f50a:	d121      	bne.n	800f550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f516:	429a      	cmp	r2, r3
 800f518:	d11a      	bne.n	800f550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f520:	4013      	ands	r3, r2
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f528:	4293      	cmp	r3, r2
 800f52a:	d111      	bne.n	800f550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f536:	085b      	lsrs	r3, r3, #1
 800f538:	3b01      	subs	r3, #1
 800f53a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d107      	bne.n	800f550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d001      	beq.n	800f554 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	e000      	b.n	800f556 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	40023800 	.word	0x40023800

0800f564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e0cc      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f578:	4b68      	ldr	r3, [pc, #416]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f003 0307 	and.w	r3, r3, #7
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	429a      	cmp	r2, r3
 800f584:	d90c      	bls.n	800f5a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f586:	4b65      	ldr	r3, [pc, #404]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	b2d2      	uxtb	r2, r2
 800f58c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f58e:	4b63      	ldr	r3, [pc, #396]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d001      	beq.n	800f5a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	e0b8      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f003 0302 	and.w	r3, r3, #2
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d020      	beq.n	800f5ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f003 0304 	and.w	r3, r3, #4
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d005      	beq.n	800f5c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f5b8:	4b59      	ldr	r3, [pc, #356]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	4a58      	ldr	r2, [pc, #352]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f5c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f003 0308 	and.w	r3, r3, #8
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d005      	beq.n	800f5dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f5d0:	4b53      	ldr	r3, [pc, #332]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	4a52      	ldr	r2, [pc, #328]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f5da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f5dc:	4b50      	ldr	r3, [pc, #320]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	494d      	ldr	r1, [pc, #308]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d044      	beq.n	800f684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d107      	bne.n	800f612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f602:	4b47      	ldr	r3, [pc, #284]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d119      	bne.n	800f642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	e07f      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	2b02      	cmp	r3, #2
 800f618:	d003      	beq.n	800f622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d107      	bne.n	800f632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f622:	4b3f      	ldr	r3, [pc, #252]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f62e:	2301      	movs	r3, #1
 800f630:	e06f      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f632:	4b3b      	ldr	r3, [pc, #236]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f003 0302 	and.w	r3, r3, #2
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	e067      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f642:	4b37      	ldr	r3, [pc, #220]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f023 0203 	bic.w	r2, r3, #3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	4934      	ldr	r1, [pc, #208]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f650:	4313      	orrs	r3, r2
 800f652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f654:	f7fb f872 	bl	800a73c <HAL_GetTick>
 800f658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f65a:	e00a      	b.n	800f672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f65c:	f7fb f86e 	bl	800a73c <HAL_GetTick>
 800f660:	4602      	mov	r2, r0
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d901      	bls.n	800f672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f66e:	2303      	movs	r3, #3
 800f670:	e04f      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f672:	4b2b      	ldr	r3, [pc, #172]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	f003 020c 	and.w	r2, r3, #12
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	429a      	cmp	r2, r3
 800f682:	d1eb      	bne.n	800f65c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f684:	4b25      	ldr	r3, [pc, #148]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f003 0307 	and.w	r3, r3, #7
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d20c      	bcs.n	800f6ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f692:	4b22      	ldr	r3, [pc, #136]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	b2d2      	uxtb	r2, r2
 800f698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f69a:	4b20      	ldr	r3, [pc, #128]	@ (800f71c <HAL_RCC_ClockConfig+0x1b8>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f003 0307 	and.w	r3, r3, #7
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d001      	beq.n	800f6ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e032      	b.n	800f712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f003 0304 	and.w	r3, r3, #4
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d008      	beq.n	800f6ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f6b8:	4b19      	ldr	r3, [pc, #100]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	4916      	ldr	r1, [pc, #88]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 0308 	and.w	r3, r3, #8
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f6d6:	4b12      	ldr	r3, [pc, #72]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	490e      	ldr	r1, [pc, #56]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f6ea:	f000 f821 	bl	800f730 <HAL_RCC_GetSysClockFreq>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f720 <HAL_RCC_ClockConfig+0x1bc>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	091b      	lsrs	r3, r3, #4
 800f6f6:	f003 030f 	and.w	r3, r3, #15
 800f6fa:	490a      	ldr	r1, [pc, #40]	@ (800f724 <HAL_RCC_ClockConfig+0x1c0>)
 800f6fc:	5ccb      	ldrb	r3, [r1, r3]
 800f6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f702:	4a09      	ldr	r2, [pc, #36]	@ (800f728 <HAL_RCC_ClockConfig+0x1c4>)
 800f704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f706:	4b09      	ldr	r3, [pc, #36]	@ (800f72c <HAL_RCC_ClockConfig+0x1c8>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fa ffd2 	bl	800a6b4 <HAL_InitTick>

  return HAL_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	40023c00 	.word	0x40023c00
 800f720:	40023800 	.word	0x40023800
 800f724:	0801d560 	.word	0x0801d560
 800f728:	200000f4 	.word	0x200000f4
 800f72c:	200000f8 	.word	0x200000f8

0800f730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f734:	b094      	sub	sp, #80	@ 0x50
 800f736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f738:	2300      	movs	r3, #0
 800f73a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f73c:	2300      	movs	r3, #0
 800f73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f740:	2300      	movs	r3, #0
 800f742:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800f744:	2300      	movs	r3, #0
 800f746:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f748:	4b79      	ldr	r3, [pc, #484]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	f003 030c 	and.w	r3, r3, #12
 800f750:	2b08      	cmp	r3, #8
 800f752:	d00d      	beq.n	800f770 <HAL_RCC_GetSysClockFreq+0x40>
 800f754:	2b08      	cmp	r3, #8
 800f756:	f200 80e1 	bhi.w	800f91c <HAL_RCC_GetSysClockFreq+0x1ec>
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d002      	beq.n	800f764 <HAL_RCC_GetSysClockFreq+0x34>
 800f75e:	2b04      	cmp	r3, #4
 800f760:	d003      	beq.n	800f76a <HAL_RCC_GetSysClockFreq+0x3a>
 800f762:	e0db      	b.n	800f91c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f764:	4b73      	ldr	r3, [pc, #460]	@ (800f934 <HAL_RCC_GetSysClockFreq+0x204>)
 800f766:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800f768:	e0db      	b.n	800f922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f76a:	4b72      	ldr	r3, [pc, #456]	@ (800f934 <HAL_RCC_GetSysClockFreq+0x204>)
 800f76c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f76e:	e0d8      	b.n	800f922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f770:	4b6f      	ldr	r3, [pc, #444]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f778:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f77a:	4b6d      	ldr	r3, [pc, #436]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f782:	2b00      	cmp	r3, #0
 800f784:	d063      	beq.n	800f84e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f786:	4b6a      	ldr	r3, [pc, #424]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	099b      	lsrs	r3, r3, #6
 800f78c:	2200      	movs	r2, #0
 800f78e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f790:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f798:	633b      	str	r3, [r7, #48]	@ 0x30
 800f79a:	2300      	movs	r3, #0
 800f79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f79e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	462b      	mov	r3, r5
 800f7a6:	f04f 0000 	mov.w	r0, #0
 800f7aa:	f04f 0100 	mov.w	r1, #0
 800f7ae:	0159      	lsls	r1, r3, #5
 800f7b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f7b4:	0150      	lsls	r0, r2, #5
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	1a51      	subs	r1, r2, r1
 800f7be:	6139      	str	r1, [r7, #16]
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	eb63 0301 	sbc.w	r3, r3, r1
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	f04f 0200 	mov.w	r2, #0
 800f7cc:	f04f 0300 	mov.w	r3, #0
 800f7d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f7d4:	4659      	mov	r1, fp
 800f7d6:	018b      	lsls	r3, r1, #6
 800f7d8:	4651      	mov	r1, sl
 800f7da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f7de:	4651      	mov	r1, sl
 800f7e0:	018a      	lsls	r2, r1, #6
 800f7e2:	4651      	mov	r1, sl
 800f7e4:	ebb2 0801 	subs.w	r8, r2, r1
 800f7e8:	4659      	mov	r1, fp
 800f7ea:	eb63 0901 	sbc.w	r9, r3, r1
 800f7ee:	f04f 0200 	mov.w	r2, #0
 800f7f2:	f04f 0300 	mov.w	r3, #0
 800f7f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f7fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f7fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f802:	4690      	mov	r8, r2
 800f804:	4699      	mov	r9, r3
 800f806:	4623      	mov	r3, r4
 800f808:	eb18 0303 	adds.w	r3, r8, r3
 800f80c:	60bb      	str	r3, [r7, #8]
 800f80e:	462b      	mov	r3, r5
 800f810:	eb49 0303 	adc.w	r3, r9, r3
 800f814:	60fb      	str	r3, [r7, #12]
 800f816:	f04f 0200 	mov.w	r2, #0
 800f81a:	f04f 0300 	mov.w	r3, #0
 800f81e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f822:	4629      	mov	r1, r5
 800f824:	028b      	lsls	r3, r1, #10
 800f826:	4621      	mov	r1, r4
 800f828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f82c:	4621      	mov	r1, r4
 800f82e:	028a      	lsls	r2, r1, #10
 800f830:	4610      	mov	r0, r2
 800f832:	4619      	mov	r1, r3
 800f834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f836:	2200      	movs	r2, #0
 800f838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f83a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f83c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f840:	f7f1 fa22 	bl	8000c88 <__aeabi_uldivmod>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	4613      	mov	r3, r2
 800f84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f84c:	e058      	b.n	800f900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f84e:	4b38      	ldr	r3, [pc, #224]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	099b      	lsrs	r3, r3, #6
 800f854:	2200      	movs	r2, #0
 800f856:	4618      	mov	r0, r3
 800f858:	4611      	mov	r1, r2
 800f85a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f85e:	623b      	str	r3, [r7, #32]
 800f860:	2300      	movs	r3, #0
 800f862:	627b      	str	r3, [r7, #36]	@ 0x24
 800f864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f868:	4642      	mov	r2, r8
 800f86a:	464b      	mov	r3, r9
 800f86c:	f04f 0000 	mov.w	r0, #0
 800f870:	f04f 0100 	mov.w	r1, #0
 800f874:	0159      	lsls	r1, r3, #5
 800f876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f87a:	0150      	lsls	r0, r2, #5
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	4641      	mov	r1, r8
 800f882:	ebb2 0a01 	subs.w	sl, r2, r1
 800f886:	4649      	mov	r1, r9
 800f888:	eb63 0b01 	sbc.w	fp, r3, r1
 800f88c:	f04f 0200 	mov.w	r2, #0
 800f890:	f04f 0300 	mov.w	r3, #0
 800f894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f89c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f8a0:	ebb2 040a 	subs.w	r4, r2, sl
 800f8a4:	eb63 050b 	sbc.w	r5, r3, fp
 800f8a8:	f04f 0200 	mov.w	r2, #0
 800f8ac:	f04f 0300 	mov.w	r3, #0
 800f8b0:	00eb      	lsls	r3, r5, #3
 800f8b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f8b6:	00e2      	lsls	r2, r4, #3
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	461d      	mov	r5, r3
 800f8bc:	4643      	mov	r3, r8
 800f8be:	18e3      	adds	r3, r4, r3
 800f8c0:	603b      	str	r3, [r7, #0]
 800f8c2:	464b      	mov	r3, r9
 800f8c4:	eb45 0303 	adc.w	r3, r5, r3
 800f8c8:	607b      	str	r3, [r7, #4]
 800f8ca:	f04f 0200 	mov.w	r2, #0
 800f8ce:	f04f 0300 	mov.w	r3, #0
 800f8d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	028b      	lsls	r3, r1, #10
 800f8da:	4621      	mov	r1, r4
 800f8dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	028a      	lsls	r2, r1, #10
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	61bb      	str	r3, [r7, #24]
 800f8ee:	61fa      	str	r2, [r7, #28]
 800f8f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f8f4:	f7f1 f9c8 	bl	8000c88 <__aeabi_uldivmod>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f900:	4b0b      	ldr	r3, [pc, #44]	@ (800f930 <HAL_RCC_GetSysClockFreq+0x200>)
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	0c1b      	lsrs	r3, r3, #16
 800f906:	f003 0303 	and.w	r3, r3, #3
 800f90a:	3301      	adds	r3, #1
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800f910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f914:	fbb2 f3f3 	udiv	r3, r2, r3
 800f918:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f91a:	e002      	b.n	800f922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f91c:	4b05      	ldr	r3, [pc, #20]	@ (800f934 <HAL_RCC_GetSysClockFreq+0x204>)
 800f91e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f920:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f924:	4618      	mov	r0, r3
 800f926:	3750      	adds	r7, #80	@ 0x50
 800f928:	46bd      	mov	sp, r7
 800f92a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f92e:	bf00      	nop
 800f930:	40023800 	.word	0x40023800
 800f934:	00f42400 	.word	0x00f42400

0800f938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f938:	b480      	push	{r7}
 800f93a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f93c:	4b03      	ldr	r3, [pc, #12]	@ (800f94c <HAL_RCC_GetHCLKFreq+0x14>)
 800f93e:	681b      	ldr	r3, [r3, #0]
}
 800f940:	4618      	mov	r0, r3
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	200000f4 	.word	0x200000f4

0800f950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f954:	f7ff fff0 	bl	800f938 <HAL_RCC_GetHCLKFreq>
 800f958:	4602      	mov	r2, r0
 800f95a:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	0a9b      	lsrs	r3, r3, #10
 800f960:	f003 0307 	and.w	r3, r3, #7
 800f964:	4903      	ldr	r1, [pc, #12]	@ (800f974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f966:	5ccb      	ldrb	r3, [r1, r3]
 800f968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	40023800 	.word	0x40023800
 800f974:	0801d570 	.word	0x0801d570

0800f978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f97c:	f7ff ffdc 	bl	800f938 <HAL_RCC_GetHCLKFreq>
 800f980:	4602      	mov	r2, r0
 800f982:	4b05      	ldr	r3, [pc, #20]	@ (800f998 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	0b5b      	lsrs	r3, r3, #13
 800f988:	f003 0307 	and.w	r3, r3, #7
 800f98c:	4903      	ldr	r1, [pc, #12]	@ (800f99c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f98e:	5ccb      	ldrb	r3, [r1, r3]
 800f990:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f994:	4618      	mov	r0, r3
 800f996:	bd80      	pop	{r7, pc}
 800f998:	40023800 	.word	0x40023800
 800f99c:	0801d570 	.word	0x0801d570

0800f9a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d101      	bne.n	800f9b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e022      	b.n	800f9f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d105      	bne.n	800f9ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7fa f995 	bl	8009cf4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2203      	movs	r2, #3
 800f9ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f814 	bl	800fa00 <HAL_SD_InitCard>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e00a      	b.n	800f9f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fa00:	b5b0      	push	{r4, r5, r7, lr}
 800fa02:	b08e      	sub	sp, #56	@ 0x38
 800fa04:	af04      	add	r7, sp, #16
 800fa06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800fa10:	2300      	movs	r3, #0
 800fa12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800fa14:	2300      	movs	r3, #0
 800fa16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800fa1c:	2376      	movs	r3, #118	@ 0x76
 800fa1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681d      	ldr	r5, [r3, #0]
 800fa24:	466c      	mov	r4, sp
 800fa26:	f107 0314 	add.w	r3, r7, #20
 800fa2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fa32:	f107 0308 	add.w	r3, r7, #8
 800fa36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fa38:	4628      	mov	r0, r5
 800fa3a:	f002 fcaf 	bl	801239c <SDIO_Init>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800fa44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e04f      	b.n	800faf0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800fa50:	4b29      	ldr	r3, [pc, #164]	@ (800faf8 <HAL_SD_InitCard+0xf8>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f002 fce7 	bl	801242e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800fa60:	4b25      	ldr	r3, [pc, #148]	@ (800faf8 <HAL_SD_InitCard+0xf8>)
 800fa62:	2201      	movs	r2, #1
 800fa64:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800fa66:	2002      	movs	r0, #2
 800fa68:	f7fa fe74 	bl	800a754 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 ff03 	bl	8010878 <SD_PowerON>
 800fa72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00b      	beq.n	800fa92 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	431a      	orrs	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e02e      	b.n	800faf0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 fe22 	bl	80106dc <SD_InitCard>
 800fa98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00b      	beq.n	800fab8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2201      	movs	r2, #1
 800faa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	431a      	orrs	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e01b      	b.n	800faf0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fac0:	4618      	mov	r0, r3
 800fac2:	f002 fd46 	bl	8012552 <SDMMC_CmdBlockLength>
 800fac6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fac8:	6a3b      	ldr	r3, [r7, #32]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00f      	beq.n	800faee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4a0a      	ldr	r2, [pc, #40]	@ (800fafc <HAL_SD_InitCard+0xfc>)
 800fad4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	431a      	orrs	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	e000      	b.n	800faf0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800faee:	2300      	movs	r3, #0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3728      	adds	r7, #40	@ 0x28
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bdb0      	pop	{r4, r5, r7, pc}
 800faf8:	422580a0 	.word	0x422580a0
 800fafc:	004005ff 	.word	0x004005ff

0800fb00 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b092      	sub	sp, #72	@ 0x48
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fb0e:	f7fa fe15 	bl	800a73c <HAL_GetTick>
 800fb12:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d107      	bne.n	800fb32 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e1bd      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	f040 81b0 	bne.w	800fea0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fb46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	441a      	add	r2, r3
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d907      	bls.n	800fb64 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb58:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e1a4      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2203      	movs	r2, #3
 800fb68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2200      	movs	r2, #0
 800fb72:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d002      	beq.n	800fb82 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	025b      	lsls	r3, r3, #9
 800fb80:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fb82:	f04f 33ff 	mov.w	r3, #4294967295
 800fb86:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	025b      	lsls	r3, r3, #9
 800fb8c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800fb8e:	2390      	movs	r3, #144	@ 0x90
 800fb90:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800fb92:	2302      	movs	r3, #2
 800fb94:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800fb96:	2300      	movs	r3, #0
 800fb98:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f107 0214 	add.w	r2, r7, #20
 800fba6:	4611      	mov	r1, r2
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f002 fca6 	bl	80124fa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d90a      	bls.n	800fbca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f002 fd0a 	bl	80125da <SDMMC_CmdReadMultiBlock>
 800fbc6:	6478      	str	r0, [r7, #68]	@ 0x44
 800fbc8:	e009      	b.n	800fbde <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f002 fcdd 	bl	8012596 <SDMMC_CmdReadSingleBlock>
 800fbdc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800fbde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d012      	beq.n	800fc0a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a7a      	ldr	r2, [pc, #488]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fbea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fbf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbf2:	431a      	orrs	r2, r3
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e151      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800fc0e:	e061      	b.n	800fcd4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d03c      	beq.n	800fc98 <HAL_SD_ReadBlocks+0x198>
 800fc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d039      	beq.n	800fc98 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800fc24:	2300      	movs	r3, #0
 800fc26:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc28:	e033      	b.n	800fc92 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f002 fbdf 	bl	80123f2 <SDIO_ReadFIFO>
 800fc34:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800fc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc40:	3301      	adds	r3, #1
 800fc42:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800fc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc46:	3b01      	subs	r3, #1
 800fc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800fc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc4c:	0a1b      	lsrs	r3, r3, #8
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc56:	3301      	adds	r3, #1
 800fc58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800fc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800fc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc62:	0c1b      	lsrs	r3, r3, #16
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800fc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc72:	3b01      	subs	r3, #1
 800fc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800fc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc78:	0e1b      	lsrs	r3, r3, #24
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc82:	3301      	adds	r3, #1
 800fc84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800fc86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8e:	3301      	adds	r3, #1
 800fc90:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc94:	2b07      	cmp	r3, #7
 800fc96:	d9c8      	bls.n	800fc2a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800fc98:	f7fa fd50 	bl	800a73c <HAL_GetTick>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d902      	bls.n	800fcae <HAL_SD_ReadBlocks+0x1ae>
 800fca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d112      	bne.n	800fcd4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a48      	ldr	r2, [pc, #288]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fcb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	e0ec      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcda:	f240 332a 	movw	r3, #810	@ 0x32a
 800fcde:	4013      	ands	r3, r2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d095      	beq.n	800fc10 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d022      	beq.n	800fd38 <HAL_SD_ReadBlocks+0x238>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d91f      	bls.n	800fd38 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d01b      	beq.n	800fd38 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f002 fccf 	bl	80126a8 <SDMMC_CmdStopTransfer>
 800fd0a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800fd0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d012      	beq.n	800fd38 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a2f      	ldr	r2, [pc, #188]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fd18:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd20:	431a      	orrs	r2, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e0ba      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd3e:	f003 0308 	and.w	r3, r3, #8
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d012      	beq.n	800fd6c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a22      	ldr	r2, [pc, #136]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fd4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd52:	f043 0208 	orr.w	r2, r3, #8
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e0a0      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd72:	f003 0302 	and.w	r3, r3, #2
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d012      	beq.n	800fda0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a15      	ldr	r2, [pc, #84]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fd80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd86:	f043 0202 	orr.w	r2, r3, #2
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e086      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda6:	f003 0320 	and.w	r3, r3, #32
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d063      	beq.n	800fe76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4a08      	ldr	r2, [pc, #32]	@ (800fdd4 <HAL_SD_ReadBlocks+0x2d4>)
 800fdb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdba:	f043 0220 	orr.w	r2, r3, #32
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e06c      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
 800fdd4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f002 fb08 	bl	80123f2 <SDIO_ReadFIFO>
 800fde2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800fde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde6:	b2da      	uxtb	r2, r3
 800fde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800fdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdee:	3301      	adds	r3, #1
 800fdf0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800fdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800fdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfa:	0a1b      	lsrs	r3, r3, #8
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800fe02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe04:	3301      	adds	r3, #1
 800fe06:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800fe08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800fe0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe10:	0c1b      	lsrs	r3, r3, #16
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800fe18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800fe1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe20:	3b01      	subs	r3, #1
 800fe22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800fe24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe26:	0e1b      	lsrs	r3, r3, #24
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800fe2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe30:	3301      	adds	r3, #1
 800fe32:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800fe34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe36:	3b01      	subs	r3, #1
 800fe38:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800fe3a:	f7fa fc7f 	bl	800a73c <HAL_GetTick>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d902      	bls.n	800fe50 <HAL_SD_ReadBlocks+0x350>
 800fe4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d112      	bne.n	800fe76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a18      	ldr	r2, [pc, #96]	@ (800feb8 <HAL_SD_ReadBlocks+0x3b8>)
 800fe56:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e01b      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <HAL_SD_ReadBlocks+0x38a>
 800fe84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d1a6      	bne.n	800fdd8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800fe92:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	e006      	b.n	800feae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800feac:	2301      	movs	r3, #1
  }
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3748      	adds	r7, #72	@ 0x48
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	004005ff 	.word	0x004005ff

0800febc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b092      	sub	sp, #72	@ 0x48
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800feca:	f7fa fc37 	bl	800a73c <HAL_GetTick>
 800fece:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d107      	bne.n	800feee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800feea:	2301      	movs	r3, #1
 800feec:	e166      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	f040 8159 	bne.w	80101ae <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2200      	movs	r2, #0
 800ff00:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ff02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	441a      	add	r2, r3
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d907      	bls.n	800ff20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff14:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e14d      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2203      	movs	r2, #3
 800ff24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d002      	beq.n	800ff3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ff38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff3a:	025b      	lsls	r3, r3, #9
 800ff3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ff3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	025b      	lsls	r3, r3, #9
 800ff48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ff4a:	2390      	movs	r3, #144	@ 0x90
 800ff4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ff52:	2300      	movs	r3, #0
 800ff54:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ff56:	2301      	movs	r3, #1
 800ff58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f107 0218 	add.w	r2, r7, #24
 800ff62:	4611      	mov	r1, r2
 800ff64:	4618      	mov	r0, r3
 800ff66:	f002 fac8 	bl	80124fa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d90a      	bls.n	800ff86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2220      	movs	r2, #32
 800ff74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f002 fb70 	bl	8012662 <SDMMC_CmdWriteMultiBlock>
 800ff82:	6478      	str	r0, [r7, #68]	@ 0x44
 800ff84:	e009      	b.n	800ff9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2210      	movs	r2, #16
 800ff8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff92:	4618      	mov	r0, r3
 800ff94:	f002 fb43 	bl	801261e <SDMMC_CmdWriteSingleBlock>
 800ff98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d012      	beq.n	800ffc6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a87      	ldr	r2, [pc, #540]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 800ffa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffae:	431a      	orrs	r2, r3
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e0fa      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800ffca:	e065      	b.n	8010098 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d040      	beq.n	801005c <HAL_SD_WriteBlocks+0x1a0>
 800ffda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d03d      	beq.n	801005c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffe4:	e037      	b.n	8010056 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800ffe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ffec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffee:	3301      	adds	r3, #1
 800fff0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800fff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fff4:	3b01      	subs	r3, #1
 800fff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800fff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	021a      	lsls	r2, r3, #8
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	4313      	orrs	r3, r2
 8010002:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010006:	3301      	adds	r3, #1
 8010008:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 801000a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801000c:	3b01      	subs	r3, #1
 801000e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	041a      	lsls	r2, r3, #16
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	4313      	orrs	r3, r2
 801001a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801001c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801001e:	3301      	adds	r3, #1
 8010020:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8010022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010024:	3b01      	subs	r3, #1
 8010026:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	061a      	lsls	r2, r3, #24
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	4313      	orrs	r3, r2
 8010032:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010036:	3301      	adds	r3, #1
 8010038:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 801003a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801003c:	3b01      	subs	r3, #1
 801003e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f107 0214 	add.w	r2, r7, #20
 8010048:	4611      	mov	r1, r2
 801004a:	4618      	mov	r0, r3
 801004c:	f002 f9de 	bl	801240c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8010050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010052:	3301      	adds	r3, #1
 8010054:	643b      	str	r3, [r7, #64]	@ 0x40
 8010056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010058:	2b07      	cmp	r3, #7
 801005a:	d9c4      	bls.n	800ffe6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 801005c:	f7fa fb6e 	bl	800a73c <HAL_GetTick>
 8010060:	4602      	mov	r2, r0
 8010062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010068:	429a      	cmp	r2, r3
 801006a:	d902      	bls.n	8010072 <HAL_SD_WriteBlocks+0x1b6>
 801006c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801006e:	2b00      	cmp	r3, #0
 8010070:	d112      	bne.n	8010098 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4a53      	ldr	r2, [pc, #332]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 8010078:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801007e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010080:	431a      	orrs	r2, r3
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2201      	movs	r2, #1
 801008a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8010094:	2303      	movs	r3, #3
 8010096:	e091      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801009e:	f240 331a 	movw	r3, #794	@ 0x31a
 80100a2:	4013      	ands	r3, r2
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d091      	beq.n	800ffcc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d022      	beq.n	80100fc <HAL_SD_WriteBlocks+0x240>
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d91f      	bls.n	80100fc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	d01b      	beq.n	80100fc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f002 faed 	bl	80126a8 <SDMMC_CmdStopTransfer>
 80100ce:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80100d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d012      	beq.n	80100fc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a3a      	ldr	r2, [pc, #232]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 80100dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100e4:	431a      	orrs	r2, r3
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2201      	movs	r2, #1
 80100ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2200      	movs	r2, #0
 80100f6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e05f      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010102:	f003 0308 	and.w	r3, r3, #8
 8010106:	2b00      	cmp	r3, #0
 8010108:	d012      	beq.n	8010130 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a2d      	ldr	r2, [pc, #180]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 8010110:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010116:	f043 0208 	orr.w	r2, r3, #8
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2201      	movs	r2, #1
 8010122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801012c:	2301      	movs	r3, #1
 801012e:	e045      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010136:	f003 0302 	and.w	r3, r3, #2
 801013a:	2b00      	cmp	r3, #0
 801013c:	d012      	beq.n	8010164 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a20      	ldr	r2, [pc, #128]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 8010144:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801014a:	f043 0202 	orr.w	r2, r3, #2
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8010160:	2301      	movs	r3, #1
 8010162:	e02b      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801016a:	f003 0310 	and.w	r3, r3, #16
 801016e:	2b00      	cmp	r3, #0
 8010170:	d012      	beq.n	8010198 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a13      	ldr	r2, [pc, #76]	@ (80101c4 <HAL_SD_WriteBlocks+0x308>)
 8010178:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801017e:	f043 0210 	orr.w	r2, r3, #16
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2201      	movs	r2, #1
 801018a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	e011      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f240 523a 	movw	r2, #1338	@ 0x53a
 80101a0:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e006      	b.n	80101bc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80101ba:	2301      	movs	r3, #1
  }
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3748      	adds	r7, #72	@ 0x48
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	004005ff 	.word	0x004005ff

080101c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101d6:	0f9b      	lsrs	r3, r3, #30
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101e2:	0e9b      	lsrs	r3, r3, #26
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	f003 030f 	and.w	r3, r3, #15
 80101ea:	b2da      	uxtb	r2, r3
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101f4:	0e1b      	lsrs	r3, r3, #24
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010206:	0c1b      	lsrs	r3, r3, #16
 8010208:	b2da      	uxtb	r2, r3
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010212:	0a1b      	lsrs	r3, r3, #8
 8010214:	b2da      	uxtb	r2, r3
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801021e:	b2da      	uxtb	r2, r3
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010228:	0d1b      	lsrs	r3, r3, #20
 801022a:	b29a      	uxth	r2, r3
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010234:	0c1b      	lsrs	r3, r3, #16
 8010236:	b2db      	uxtb	r3, r3
 8010238:	f003 030f 	and.w	r3, r3, #15
 801023c:	b2da      	uxtb	r2, r3
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010246:	0bdb      	lsrs	r3, r3, #15
 8010248:	b2db      	uxtb	r3, r3
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010258:	0b9b      	lsrs	r3, r3, #14
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	b2da      	uxtb	r2, r3
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801026a:	0b5b      	lsrs	r3, r3, #13
 801026c:	b2db      	uxtb	r3, r3
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	b2da      	uxtb	r2, r3
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801027c:	0b1b      	lsrs	r3, r3, #12
 801027e:	b2db      	uxtb	r3, r3
 8010280:	f003 0301 	and.w	r3, r3, #1
 8010284:	b2da      	uxtb	r2, r3
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2200      	movs	r2, #0
 801028e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010294:	2b00      	cmp	r3, #0
 8010296:	d163      	bne.n	8010360 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801029c:	009a      	lsls	r2, r3, #2
 801029e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80102a2:	4013      	ands	r3, r2
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80102a8:	0f92      	lsrs	r2, r2, #30
 80102aa:	431a      	orrs	r2, r3
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b4:	0edb      	lsrs	r3, r3, #27
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	f003 0307 	and.w	r3, r3, #7
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102c6:	0e1b      	lsrs	r3, r3, #24
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	f003 0307 	and.w	r3, r3, #7
 80102ce:	b2da      	uxtb	r2, r3
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d8:	0d5b      	lsrs	r3, r3, #21
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	f003 0307 	and.w	r3, r3, #7
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102ea:	0c9b      	lsrs	r3, r3, #18
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	f003 0307 	and.w	r3, r3, #7
 80102f2:	b2da      	uxtb	r2, r3
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102fc:	0bdb      	lsrs	r3, r3, #15
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	f003 0307 	and.w	r3, r3, #7
 8010304:	b2da      	uxtb	r2, r3
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	7e1b      	ldrb	r3, [r3, #24]
 8010318:	b2db      	uxtb	r3, r3
 801031a:	f003 0307 	and.w	r3, r3, #7
 801031e:	3302      	adds	r3, #2
 8010320:	2201      	movs	r2, #1
 8010322:	fa02 f303 	lsl.w	r3, r2, r3
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 801032a:	fb03 f202 	mul.w	r2, r3, r2
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	7a1b      	ldrb	r3, [r3, #8]
 8010336:	b2db      	uxtb	r3, r3
 8010338:	f003 030f 	and.w	r3, r3, #15
 801033c:	2201      	movs	r2, #1
 801033e:	409a      	lsls	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 801034c:	0a52      	lsrs	r2, r2, #9
 801034e:	fb03 f202 	mul.w	r2, r3, r2
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801035c:	661a      	str	r2, [r3, #96]	@ 0x60
 801035e:	e031      	b.n	80103c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010364:	2b01      	cmp	r3, #1
 8010366:	d11d      	bne.n	80103a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801036c:	041b      	lsls	r3, r3, #16
 801036e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010376:	0c1b      	lsrs	r3, r3, #16
 8010378:	431a      	orrs	r2, r3
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	691b      	ldr	r3, [r3, #16]
 8010382:	3301      	adds	r3, #1
 8010384:	029a      	lsls	r2, r3, #10
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010398:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80103a2:	e00f      	b.n	80103c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a58      	ldr	r2, [pc, #352]	@ (801050c <HAL_SD_GetCardCSD+0x344>)
 80103aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80103c0:	2301      	movs	r3, #1
 80103c2:	e09d      	b.n	8010500 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103c8:	0b9b      	lsrs	r3, r3, #14
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	f003 0301 	and.w	r3, r3, #1
 80103d0:	b2da      	uxtb	r2, r3
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103da:	09db      	lsrs	r3, r3, #7
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103e2:	b2da      	uxtb	r2, r3
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103fc:	0fdb      	lsrs	r3, r3, #31
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010408:	0f5b      	lsrs	r3, r3, #29
 801040a:	b2db      	uxtb	r3, r3
 801040c:	f003 0303 	and.w	r3, r3, #3
 8010410:	b2da      	uxtb	r2, r3
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801041a:	0e9b      	lsrs	r3, r3, #26
 801041c:	b2db      	uxtb	r3, r3
 801041e:	f003 0307 	and.w	r3, r3, #7
 8010422:	b2da      	uxtb	r2, r3
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801042c:	0d9b      	lsrs	r3, r3, #22
 801042e:	b2db      	uxtb	r3, r3
 8010430:	f003 030f 	and.w	r3, r3, #15
 8010434:	b2da      	uxtb	r2, r3
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801043e:	0d5b      	lsrs	r3, r3, #21
 8010440:	b2db      	uxtb	r3, r3
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	b2da      	uxtb	r2, r3
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2200      	movs	r2, #0
 8010452:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801045a:	0c1b      	lsrs	r3, r3, #16
 801045c:	b2db      	uxtb	r3, r3
 801045e:	f003 0301 	and.w	r3, r3, #1
 8010462:	b2da      	uxtb	r2, r3
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801046e:	0bdb      	lsrs	r3, r3, #15
 8010470:	b2db      	uxtb	r3, r3
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	b2da      	uxtb	r2, r3
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010482:	0b9b      	lsrs	r3, r3, #14
 8010484:	b2db      	uxtb	r3, r3
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	b2da      	uxtb	r2, r3
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010496:	0b5b      	lsrs	r3, r3, #13
 8010498:	b2db      	uxtb	r3, r3
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	b2da      	uxtb	r2, r3
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104aa:	0b1b      	lsrs	r3, r3, #12
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	f003 0301 	and.w	r3, r3, #1
 80104b2:	b2da      	uxtb	r2, r3
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104be:	0a9b      	lsrs	r3, r3, #10
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	f003 0303 	and.w	r3, r3, #3
 80104c6:	b2da      	uxtb	r2, r3
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104d2:	0a1b      	lsrs	r3, r3, #8
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	f003 0303 	and.w	r3, r3, #3
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104e6:	085b      	lsrs	r3, r3, #1
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	2201      	movs	r2, #1
 80104fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	004005ff 	.word	0x004005ff

08010510 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010568:	b5b0      	push	{r4, r5, r7, lr}
 801056a:	b08e      	sub	sp, #56	@ 0x38
 801056c:	af04      	add	r7, sp, #16
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2203      	movs	r2, #3
 801057c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010584:	2b03      	cmp	r3, #3
 8010586:	d02e      	beq.n	80105e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801058e:	d106      	bne.n	801059e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010594:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	639a      	str	r2, [r3, #56]	@ 0x38
 801059c:	e029      	b.n	80105f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105a4:	d10a      	bne.n	80105bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 fa1c 	bl	80109e4 <SD_WideBus_Enable>
 80105ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	431a      	orrs	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80105ba:	e01a      	b.n	80105f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10a      	bne.n	80105d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fa59 	bl	8010a7a <SD_WideBus_Disable>
 80105c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	431a      	orrs	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80105d6:	e00c      	b.n	80105f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80105e4:	e005      	b.n	80105f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00b      	beq.n	8010612 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a26      	ldr	r2, [pc, #152]	@ (8010698 <HAL_SD_ConfigWideBusOperation+0x130>)
 8010600:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2201      	movs	r2, #1
 8010606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010610:	e01f      	b.n	8010652 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	695b      	ldr	r3, [r3, #20]
 801062c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681d      	ldr	r5, [r3, #0]
 8010638:	466c      	mov	r4, sp
 801063a:	f107 0314 	add.w	r3, r7, #20
 801063e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010646:	f107 0308 	add.w	r3, r7, #8
 801064a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801064c:	4628      	mov	r0, r5
 801064e:	f001 fea5 	bl	801239c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801065a:	4618      	mov	r0, r3
 801065c:	f001 ff79 	bl	8012552 <SDMMC_CmdBlockLength>
 8010660:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010662:	6a3b      	ldr	r3, [r7, #32]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00c      	beq.n	8010682 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a0a      	ldr	r2, [pc, #40]	@ (8010698 <HAL_SD_ConfigWideBusOperation+0x130>)
 801066e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	431a      	orrs	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2201      	movs	r2, #1
 8010686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 801068a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801068e:	4618      	mov	r0, r3
 8010690:	3728      	adds	r7, #40	@ 0x28
 8010692:	46bd      	mov	sp, r7
 8010694:	bdb0      	pop	{r4, r5, r7, pc}
 8010696:	bf00      	nop
 8010698:	004005ff 	.word	0x004005ff

0801069c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b086      	sub	sp, #24
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80106a8:	f107 030c 	add.w	r3, r7, #12
 80106ac:	4619      	mov	r1, r3
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f970 	bl	8010994 <SD_SendStatus>
 80106b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d005      	beq.n	80106c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	431a      	orrs	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	0a5b      	lsrs	r3, r3, #9
 80106cc:	f003 030f 	and.w	r3, r3, #15
 80106d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80106d2:	693b      	ldr	r3, [r7, #16]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80106dc:	b5b0      	push	{r4, r5, r7, lr}
 80106de:	b094      	sub	sp, #80	@ 0x50
 80106e0:	af04      	add	r7, sp, #16
 80106e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80106e4:	2301      	movs	r3, #1
 80106e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f001 feac 	bl	801244a <SDIO_GetPowerState>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d102      	bne.n	80106fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80106f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80106fc:	e0b8      	b.n	8010870 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010702:	2b03      	cmp	r3, #3
 8010704:	d02f      	beq.n	8010766 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4618      	mov	r0, r3
 801070c:	f002 f8d6 	bl	80128bc <SDMMC_CmdSendCID>
 8010710:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <SD_InitCard+0x40>
    {
      return errorstate;
 8010718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801071a:	e0a9      	b.n	8010870 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2100      	movs	r1, #0
 8010722:	4618      	mov	r0, r3
 8010724:	f001 fed6 	bl	80124d4 <SDIO_GetResponse>
 8010728:	4602      	mov	r2, r0
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2104      	movs	r1, #4
 8010734:	4618      	mov	r0, r3
 8010736:	f001 fecd 	bl	80124d4 <SDIO_GetResponse>
 801073a:	4602      	mov	r2, r0
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2108      	movs	r1, #8
 8010746:	4618      	mov	r0, r3
 8010748:	f001 fec4 	bl	80124d4 <SDIO_GetResponse>
 801074c:	4602      	mov	r2, r0
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	210c      	movs	r1, #12
 8010758:	4618      	mov	r0, r3
 801075a:	f001 febb 	bl	80124d4 <SDIO_GetResponse>
 801075e:	4602      	mov	r2, r0
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801076a:	2b03      	cmp	r3, #3
 801076c:	d00d      	beq.n	801078a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f107 020e 	add.w	r2, r7, #14
 8010776:	4611      	mov	r1, r2
 8010778:	4618      	mov	r0, r3
 801077a:	f002 f8dc 	bl	8012936 <SDMMC_CmdSetRelAdd>
 801077e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <SD_InitCard+0xae>
    {
      return errorstate;
 8010786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010788:	e072      	b.n	8010870 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801078e:	2b03      	cmp	r3, #3
 8010790:	d036      	beq.n	8010800 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010792:	89fb      	ldrh	r3, [r7, #14]
 8010794:	461a      	mov	r2, r3
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107a2:	041b      	lsls	r3, r3, #16
 80107a4:	4619      	mov	r1, r3
 80107a6:	4610      	mov	r0, r2
 80107a8:	f002 f8a6 	bl	80128f8 <SDMMC_CmdSendCSD>
 80107ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80107ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80107b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b6:	e05b      	b.n	8010870 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2100      	movs	r1, #0
 80107be:	4618      	mov	r0, r3
 80107c0:	f001 fe88 	bl	80124d4 <SDIO_GetResponse>
 80107c4:	4602      	mov	r2, r0
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2104      	movs	r1, #4
 80107d0:	4618      	mov	r0, r3
 80107d2:	f001 fe7f 	bl	80124d4 <SDIO_GetResponse>
 80107d6:	4602      	mov	r2, r0
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2108      	movs	r1, #8
 80107e2:	4618      	mov	r0, r3
 80107e4:	f001 fe76 	bl	80124d4 <SDIO_GetResponse>
 80107e8:	4602      	mov	r2, r0
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	210c      	movs	r1, #12
 80107f4:	4618      	mov	r0, r3
 80107f6:	f001 fe6d 	bl	80124d4 <SDIO_GetResponse>
 80107fa:	4602      	mov	r2, r0
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2104      	movs	r1, #4
 8010806:	4618      	mov	r0, r3
 8010808:	f001 fe64 	bl	80124d4 <SDIO_GetResponse>
 801080c:	4603      	mov	r3, r0
 801080e:	0d1a      	lsrs	r2, r3, #20
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010814:	f107 0310 	add.w	r3, r7, #16
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff fcd4 	bl	80101c8 <HAL_SD_GetCardCSD>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010826:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801082a:	e021      	b.n	8010870 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6819      	ldr	r1, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010834:	041b      	lsls	r3, r3, #16
 8010836:	2200      	movs	r2, #0
 8010838:	461c      	mov	r4, r3
 801083a:	4615      	mov	r5, r2
 801083c:	4622      	mov	r2, r4
 801083e:	462b      	mov	r3, r5
 8010840:	4608      	mov	r0, r1
 8010842:	f001 ff53 	bl	80126ec <SDMMC_CmdSelDesel>
 8010846:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8010848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <SD_InitCard+0x176>
  {
    return errorstate;
 801084e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010850:	e00e      	b.n	8010870 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681d      	ldr	r5, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	466c      	mov	r4, sp
 801085a:	f103 0210 	add.w	r2, r3, #16
 801085e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010864:	3304      	adds	r3, #4
 8010866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010868:	4628      	mov	r0, r5
 801086a:	f001 fd97 	bl	801239c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3740      	adds	r7, #64	@ 0x40
 8010874:	46bd      	mov	sp, r7
 8010876:	bdb0      	pop	{r4, r5, r7, pc}

08010878 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010880:	2300      	movs	r3, #0
 8010882:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8010884:	2300      	movs	r3, #0
 8010886:	617b      	str	r3, [r7, #20]
 8010888:	2300      	movs	r3, #0
 801088a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4618      	mov	r0, r3
 8010892:	f001 ff4e 	bl	8012732 <SDMMC_CmdGoIdleState>
 8010896:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	e072      	b.n	8010988 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f001 ff61 	bl	801276e <SDMMC_CmdOperCond>
 80108ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00d      	beq.n	80108d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4618      	mov	r0, r3
 80108c0:	f001 ff37 	bl	8012732 <SDMMC_CmdGoIdleState>
 80108c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	e05b      	b.n	8010988 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d137      	bne.n	801094e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2100      	movs	r1, #0
 80108e4:	4618      	mov	r0, r3
 80108e6:	f001 ff61 	bl	80127ac <SDMMC_CmdAppCommand>
 80108ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d02d      	beq.n	801094e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80108f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80108f6:	e047      	b.n	8010988 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2100      	movs	r1, #0
 80108fe:	4618      	mov	r0, r3
 8010900:	f001 ff54 	bl	80127ac <SDMMC_CmdAppCommand>
 8010904:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <SD_PowerON+0x98>
    {
      return errorstate;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	e03b      	b.n	8010988 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	491e      	ldr	r1, [pc, #120]	@ (8010990 <SD_PowerON+0x118>)
 8010916:	4618      	mov	r0, r3
 8010918:	f001 ff6a 	bl	80127f0 <SDMMC_CmdAppOperCommand>
 801091c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010924:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010928:	e02e      	b.n	8010988 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2100      	movs	r1, #0
 8010930:	4618      	mov	r0, r3
 8010932:	f001 fdcf 	bl	80124d4 <SDIO_GetResponse>
 8010936:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	0fdb      	lsrs	r3, r3, #31
 801093c:	2b01      	cmp	r3, #1
 801093e:	d101      	bne.n	8010944 <SD_PowerON+0xcc>
 8010940:	2301      	movs	r3, #1
 8010942:	e000      	b.n	8010946 <SD_PowerON+0xce>
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]

    count++;
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3301      	adds	r3, #1
 801094c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010954:	4293      	cmp	r3, r2
 8010956:	d802      	bhi.n	801095e <SD_PowerON+0xe6>
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0cc      	beq.n	80108f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010964:	4293      	cmp	r3, r2
 8010966:	d902      	bls.n	801096e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801096c:	e00c      	b.n	8010988 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d003      	beq.n	8010980 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	645a      	str	r2, [r3, #68]	@ 0x44
 801097e:	e002      	b.n	8010986 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2200      	movs	r2, #0
 8010984:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	c1100000 	.word	0xc1100000

08010994 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d102      	bne.n	80109aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80109a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80109a8:	e018      	b.n	80109dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109b2:	041b      	lsls	r3, r3, #16
 80109b4:	4619      	mov	r1, r3
 80109b6:	4610      	mov	r0, r2
 80109b8:	f001 ffde 	bl	8012978 <SDMMC_CmdSendStatus>
 80109bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	e009      	b.n	80109dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2100      	movs	r1, #0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f001 fd80 	bl	80124d4 <SDIO_GetResponse>
 80109d4:	4602      	mov	r2, r0
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80109ec:	2300      	movs	r3, #0
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	2300      	movs	r3, #0
 80109f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2100      	movs	r1, #0
 80109fa:	4618      	mov	r0, r3
 80109fc:	f001 fd6a 	bl	80124d4 <SDIO_GetResponse>
 8010a00:	4603      	mov	r3, r0
 8010a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a0a:	d102      	bne.n	8010a12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010a0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010a10:	e02f      	b.n	8010a72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010a12:	f107 030c 	add.w	r3, r7, #12
 8010a16:	4619      	mov	r1, r3
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f879 	bl	8010b10 <SD_FindSCR>
 8010a1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	e023      	b.n	8010a72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01c      	beq.n	8010a6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a3c:	041b      	lsls	r3, r3, #16
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4610      	mov	r0, r2
 8010a42:	f001 feb3 	bl	80127ac <SDMMC_CmdAppCommand>
 8010a46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d001      	beq.n	8010a52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	e00f      	b.n	8010a72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2102      	movs	r1, #2
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f001 feec 	bl	8012836 <SDMMC_CmdBusWidth>
 8010a5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	e003      	b.n	8010a72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e001      	b.n	8010a72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010a6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3718      	adds	r7, #24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b086      	sub	sp, #24
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010a82:	2300      	movs	r3, #0
 8010a84:	60fb      	str	r3, [r7, #12]
 8010a86:	2300      	movs	r3, #0
 8010a88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2100      	movs	r1, #0
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 fd1f 	bl	80124d4 <SDIO_GetResponse>
 8010a96:	4603      	mov	r3, r0
 8010a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010aa0:	d102      	bne.n	8010aa8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010aa6:	e02f      	b.n	8010b08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010aa8:	f107 030c 	add.w	r3, r7, #12
 8010aac:	4619      	mov	r1, r3
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 f82e 	bl	8010b10 <SD_FindSCR>
 8010ab4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	e023      	b.n	8010b08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d01c      	beq.n	8010b04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ad2:	041b      	lsls	r3, r3, #16
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f001 fe68 	bl	80127ac <SDMMC_CmdAppCommand>
 8010adc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	e00f      	b.n	8010b08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2100      	movs	r1, #0
 8010aee:	4618      	mov	r0, r3
 8010af0:	f001 fea1 	bl	8012836 <SDMMC_CmdBusWidth>
 8010af4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	e003      	b.n	8010b08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010b00:	2300      	movs	r3, #0
 8010b02:	e001      	b.n	8010b08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010b04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3718      	adds	r7, #24
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010b10:	b590      	push	{r4, r7, lr}
 8010b12:	b08f      	sub	sp, #60	@ 0x3c
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010b1a:	f7f9 fe0f 	bl	800a73c <HAL_GetTick>
 8010b1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8010b20:	2300      	movs	r3, #0
 8010b22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010b24:	2300      	movs	r3, #0
 8010b26:	60bb      	str	r3, [r7, #8]
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2108      	movs	r1, #8
 8010b36:	4618      	mov	r0, r3
 8010b38:	f001 fd0b 	bl	8012552 <SDMMC_CmdBlockLength>
 8010b3c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b46:	e0b2      	b.n	8010cae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b50:	041b      	lsls	r3, r3, #16
 8010b52:	4619      	mov	r1, r3
 8010b54:	4610      	mov	r0, r2
 8010b56:	f001 fe29 	bl	80127ac <SDMMC_CmdAppCommand>
 8010b5a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b64:	e0a3      	b.n	8010cae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010b66:	f04f 33ff 	mov.w	r3, #4294967295
 8010b6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010b6c:	2308      	movs	r3, #8
 8010b6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8010b70:	2330      	movs	r3, #48	@ 0x30
 8010b72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8010b74:	2302      	movs	r3, #2
 8010b76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f107 0210 	add.w	r2, r7, #16
 8010b88:	4611      	mov	r1, r2
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f001 fcb5 	bl	80124fa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f001 fe70 	bl	801287a <SDMMC_CmdSendSCR>
 8010b9a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d02a      	beq.n	8010bf8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ba4:	e083      	b.n	8010cae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00f      	beq.n	8010bd4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6819      	ldr	r1, [r3, #0]
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	f107 0208 	add.w	r2, r7, #8
 8010bc0:	18d4      	adds	r4, r2, r3
 8010bc2:	4608      	mov	r0, r1
 8010bc4:	f001 fc15 	bl	80123f2 <SDIO_ReadFIFO>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	6023      	str	r3, [r4, #0]
      index++;
 8010bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bce:	3301      	adds	r3, #1
 8010bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bd2:	e006      	b.n	8010be2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d012      	beq.n	8010c08 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010be2:	f7f9 fdab 	bl	800a73c <HAL_GetTick>
 8010be6:	4602      	mov	r2, r0
 8010be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bea:	1ad3      	subs	r3, r2, r3
 8010bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf0:	d102      	bne.n	8010bf8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010bf2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010bf6:	e05a      	b.n	8010cae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bfe:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0cf      	beq.n	8010ba6 <SD_FindSCR+0x96>
 8010c06:	e000      	b.n	8010c0a <SD_FindSCR+0xfa>
      break;
 8010c08:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c10:	f003 0308 	and.w	r3, r3, #8
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d005      	beq.n	8010c24 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010c20:	2308      	movs	r3, #8
 8010c22:	e044      	b.n	8010cae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d005      	beq.n	8010c3e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2202      	movs	r2, #2
 8010c38:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010c3a:	2302      	movs	r3, #2
 8010c3c:	e037      	b.n	8010cae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c44:	f003 0320 	and.w	r3, r3, #32
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d005      	beq.n	8010c58 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2220      	movs	r2, #32
 8010c52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010c54:	2320      	movs	r3, #32
 8010c56:	e02a      	b.n	8010cae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8010c60:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	061a      	lsls	r2, r3, #24
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	021b      	lsls	r3, r3, #8
 8010c6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	0a1b      	lsrs	r3, r3, #8
 8010c74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010c78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	0e1b      	lsrs	r3, r3, #24
 8010c7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c82:	601a      	str	r2, [r3, #0]
    scr++;
 8010c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c86:	3304      	adds	r3, #4
 8010c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	061a      	lsls	r2, r3, #24
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	021b      	lsls	r3, r3, #8
 8010c92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	0a1b      	lsrs	r3, r3, #8
 8010c9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ca0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	0e1b      	lsrs	r3, r3, #24
 8010ca6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010caa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010cac:	2300      	movs	r3, #0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	373c      	adds	r7, #60	@ 0x3c
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd90      	pop	{r4, r7, pc}

08010cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b082      	sub	sp, #8
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e041      	b.n	8010d4c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d106      	bne.n	8010ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7f9 f871 	bl	8009dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2202      	movs	r2, #2
 8010ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	3304      	adds	r3, #4
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	f000 fc9d 	bl	8011634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2201      	movs	r2, #1
 8010d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2201      	movs	r2, #1
 8010d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2201      	movs	r2, #1
 8010d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2201      	movs	r2, #1
 8010d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d001      	beq.n	8010d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e04e      	b.n	8010e0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f042 0201 	orr.w	r2, r2, #1
 8010d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a23      	ldr	r2, [pc, #140]	@ (8010e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d022      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d96:	d01d      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8010e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d018      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4a1e      	ldr	r2, [pc, #120]	@ (8010e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d013      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a1c      	ldr	r2, [pc, #112]	@ (8010e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d00e      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a1b      	ldr	r2, [pc, #108]	@ (8010e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d009      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a19      	ldr	r2, [pc, #100]	@ (8010e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d004      	beq.n	8010dd4 <HAL_TIM_Base_Start_IT+0x80>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a18      	ldr	r2, [pc, #96]	@ (8010e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d111      	bne.n	8010df8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	f003 0307 	and.w	r3, r3, #7
 8010dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2b06      	cmp	r3, #6
 8010de4:	d010      	beq.n	8010e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f042 0201 	orr.w	r2, r2, #1
 8010df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010df6:	e007      	b.n	8010e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f042 0201 	orr.w	r2, r2, #1
 8010e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3714      	adds	r7, #20
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	40010000 	.word	0x40010000
 8010e1c:	40000400 	.word	0x40000400
 8010e20:	40000800 	.word	0x40000800
 8010e24:	40000c00 	.word	0x40000c00
 8010e28:	40010400 	.word	0x40010400
 8010e2c:	40014000 	.word	0x40014000
 8010e30:	40001800 	.word	0x40001800

08010e34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	68da      	ldr	r2, [r3, #12]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f022 0201 	bic.w	r2, r2, #1
 8010e4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6a1a      	ldr	r2, [r3, #32]
 8010e52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010e56:	4013      	ands	r3, r2
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d10f      	bne.n	8010e7c <HAL_TIM_Base_Stop_IT+0x48>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6a1a      	ldr	r2, [r3, #32]
 8010e62:	f240 4344 	movw	r3, #1092	@ 0x444
 8010e66:	4013      	ands	r3, r2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d107      	bne.n	8010e7c <HAL_TIM_Base_Stop_IT+0x48>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f022 0201 	bic.w	r2, r2, #1
 8010e7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b082      	sub	sp, #8
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e041      	b.n	8010f28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d106      	bne.n	8010ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7f9 f827 	bl	8009f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	3304      	adds	r3, #4
 8010ece:	4619      	mov	r1, r3
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	f000 fbaf 	bl	8011634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2201      	movs	r2, #1
 8010f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2201      	movs	r2, #1
 8010f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2201      	movs	r2, #1
 8010f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d109      	bne.n	8010f54 <HAL_TIM_PWM_Start+0x24>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	bf14      	ite	ne
 8010f4c:	2301      	movne	r3, #1
 8010f4e:	2300      	moveq	r3, #0
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	e022      	b.n	8010f9a <HAL_TIM_PWM_Start+0x6a>
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2b04      	cmp	r3, #4
 8010f58:	d109      	bne.n	8010f6e <HAL_TIM_PWM_Start+0x3e>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	bf14      	ite	ne
 8010f66:	2301      	movne	r3, #1
 8010f68:	2300      	moveq	r3, #0
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	e015      	b.n	8010f9a <HAL_TIM_PWM_Start+0x6a>
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	2b08      	cmp	r3, #8
 8010f72:	d109      	bne.n	8010f88 <HAL_TIM_PWM_Start+0x58>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	bf14      	ite	ne
 8010f80:	2301      	movne	r3, #1
 8010f82:	2300      	moveq	r3, #0
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	e008      	b.n	8010f9a <HAL_TIM_PWM_Start+0x6a>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	bf14      	ite	ne
 8010f94:	2301      	movne	r3, #1
 8010f96:	2300      	moveq	r3, #0
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e07c      	b.n	801109c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d104      	bne.n	8010fb2 <HAL_TIM_PWM_Start+0x82>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2202      	movs	r2, #2
 8010fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010fb0:	e013      	b.n	8010fda <HAL_TIM_PWM_Start+0xaa>
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	d104      	bne.n	8010fc2 <HAL_TIM_PWM_Start+0x92>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2202      	movs	r2, #2
 8010fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010fc0:	e00b      	b.n	8010fda <HAL_TIM_PWM_Start+0xaa>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d104      	bne.n	8010fd2 <HAL_TIM_PWM_Start+0xa2>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2202      	movs	r2, #2
 8010fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010fd0:	e003      	b.n	8010fda <HAL_TIM_PWM_Start+0xaa>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 fe10 	bl	8011c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a2d      	ldr	r2, [pc, #180]	@ (80110a4 <HAL_TIM_PWM_Start+0x174>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d004      	beq.n	8010ffc <HAL_TIM_PWM_Start+0xcc>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80110a8 <HAL_TIM_PWM_Start+0x178>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d101      	bne.n	8011000 <HAL_TIM_PWM_Start+0xd0>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e000      	b.n	8011002 <HAL_TIM_PWM_Start+0xd2>
 8011000:	2300      	movs	r3, #0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d007      	beq.n	8011016 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a22      	ldr	r2, [pc, #136]	@ (80110a4 <HAL_TIM_PWM_Start+0x174>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d022      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011028:	d01d      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4a1f      	ldr	r2, [pc, #124]	@ (80110ac <HAL_TIM_PWM_Start+0x17c>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d018      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a1d      	ldr	r2, [pc, #116]	@ (80110b0 <HAL_TIM_PWM_Start+0x180>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d013      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4a1c      	ldr	r2, [pc, #112]	@ (80110b4 <HAL_TIM_PWM_Start+0x184>)
 8011044:	4293      	cmp	r3, r2
 8011046:	d00e      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4a16      	ldr	r2, [pc, #88]	@ (80110a8 <HAL_TIM_PWM_Start+0x178>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d009      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a18      	ldr	r2, [pc, #96]	@ (80110b8 <HAL_TIM_PWM_Start+0x188>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d004      	beq.n	8011066 <HAL_TIM_PWM_Start+0x136>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a16      	ldr	r2, [pc, #88]	@ (80110bc <HAL_TIM_PWM_Start+0x18c>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d111      	bne.n	801108a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	f003 0307 	and.w	r3, r3, #7
 8011070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b06      	cmp	r3, #6
 8011076:	d010      	beq.n	801109a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f042 0201 	orr.w	r2, r2, #1
 8011086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011088:	e007      	b.n	801109a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f042 0201 	orr.w	r2, r2, #1
 8011098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801109a:	2300      	movs	r3, #0
}
 801109c:	4618      	mov	r0, r3
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	40010000 	.word	0x40010000
 80110a8:	40010400 	.word	0x40010400
 80110ac:	40000400 	.word	0x40000400
 80110b0:	40000800 	.word	0x40000800
 80110b4:	40000c00 	.word	0x40000c00
 80110b8:	40014000 	.word	0x40014000
 80110bc:	40001800 	.word	0x40001800

080110c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	f003 0302 	and.w	r3, r3, #2
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	d122      	bne.n	801111c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	f003 0302 	and.w	r3, r3, #2
 80110e0:	2b02      	cmp	r3, #2
 80110e2:	d11b      	bne.n	801111c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f06f 0202 	mvn.w	r2, #2
 80110ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2201      	movs	r2, #1
 80110f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	699b      	ldr	r3, [r3, #24]
 80110fa:	f003 0303 	and.w	r3, r3, #3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 fa77 	bl	80115f6 <HAL_TIM_IC_CaptureCallback>
 8011108:	e005      	b.n	8011116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fa69 	bl	80115e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 fa7a 	bl	801160a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	691b      	ldr	r3, [r3, #16]
 8011122:	f003 0304 	and.w	r3, r3, #4
 8011126:	2b04      	cmp	r3, #4
 8011128:	d122      	bne.n	8011170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	f003 0304 	and.w	r3, r3, #4
 8011134:	2b04      	cmp	r3, #4
 8011136:	d11b      	bne.n	8011170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f06f 0204 	mvn.w	r2, #4
 8011140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2202      	movs	r2, #2
 8011146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011152:	2b00      	cmp	r3, #0
 8011154:	d003      	beq.n	801115e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 fa4d 	bl	80115f6 <HAL_TIM_IC_CaptureCallback>
 801115c:	e005      	b.n	801116a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 fa3f 	bl	80115e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 fa50 	bl	801160a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	691b      	ldr	r3, [r3, #16]
 8011176:	f003 0308 	and.w	r3, r3, #8
 801117a:	2b08      	cmp	r3, #8
 801117c:	d122      	bne.n	80111c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	f003 0308 	and.w	r3, r3, #8
 8011188:	2b08      	cmp	r3, #8
 801118a:	d11b      	bne.n	80111c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f06f 0208 	mvn.w	r2, #8
 8011194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2204      	movs	r2, #4
 801119a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	69db      	ldr	r3, [r3, #28]
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d003      	beq.n	80111b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 fa23 	bl	80115f6 <HAL_TIM_IC_CaptureCallback>
 80111b0:	e005      	b.n	80111be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 fa15 	bl	80115e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f000 fa26 	bl	801160a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	691b      	ldr	r3, [r3, #16]
 80111ca:	f003 0310 	and.w	r3, r3, #16
 80111ce:	2b10      	cmp	r3, #16
 80111d0:	d122      	bne.n	8011218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	f003 0310 	and.w	r3, r3, #16
 80111dc:	2b10      	cmp	r3, #16
 80111de:	d11b      	bne.n	8011218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f06f 0210 	mvn.w	r2, #16
 80111e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2208      	movs	r2, #8
 80111ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	69db      	ldr	r3, [r3, #28]
 80111f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d003      	beq.n	8011206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f9f9 	bl	80115f6 <HAL_TIM_IC_CaptureCallback>
 8011204:	e005      	b.n	8011212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 f9eb 	bl	80115e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 f9fc 	bl	801160a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b01      	cmp	r3, #1
 8011224:	d10e      	bne.n	8011244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b01      	cmp	r3, #1
 8011232:	d107      	bne.n	8011244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f06f 0201 	mvn.w	r2, #1
 801123c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7f6 fbbc 	bl	80079bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	691b      	ldr	r3, [r3, #16]
 801124a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801124e:	2b80      	cmp	r3, #128	@ 0x80
 8011250:	d10e      	bne.n	8011270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801125c:	2b80      	cmp	r3, #128	@ 0x80
 801125e:	d107      	bne.n	8011270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fdca 	bl	8011e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801127a:	2b40      	cmp	r3, #64	@ 0x40
 801127c:	d10e      	bne.n	801129c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011288:	2b40      	cmp	r3, #64	@ 0x40
 801128a:	d107      	bne.n	801129c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 f9c1 	bl	801161e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	691b      	ldr	r3, [r3, #16]
 80112a2:	f003 0320 	and.w	r3, r3, #32
 80112a6:	2b20      	cmp	r3, #32
 80112a8:	d10e      	bne.n	80112c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	f003 0320 	and.w	r3, r3, #32
 80112b4:	2b20      	cmp	r3, #32
 80112b6:	d107      	bne.n	80112c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f06f 0220 	mvn.w	r2, #32
 80112c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fd94 	bl	8011df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80112c8:	bf00      	nop
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d101      	bne.n	80112ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80112ea:	2302      	movs	r3, #2
 80112ec:	e0ae      	b.n	801144c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2201      	movs	r2, #1
 80112f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2b0c      	cmp	r3, #12
 80112fa:	f200 809f 	bhi.w	801143c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80112fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011304:	08011339 	.word	0x08011339
 8011308:	0801143d 	.word	0x0801143d
 801130c:	0801143d 	.word	0x0801143d
 8011310:	0801143d 	.word	0x0801143d
 8011314:	08011379 	.word	0x08011379
 8011318:	0801143d 	.word	0x0801143d
 801131c:	0801143d 	.word	0x0801143d
 8011320:	0801143d 	.word	0x0801143d
 8011324:	080113bb 	.word	0x080113bb
 8011328:	0801143d 	.word	0x0801143d
 801132c:	0801143d 	.word	0x0801143d
 8011330:	0801143d 	.word	0x0801143d
 8011334:	080113fb 	.word	0x080113fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68b9      	ldr	r1, [r7, #8]
 801133e:	4618      	mov	r0, r3
 8011340:	f000 fa18 	bl	8011774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	699a      	ldr	r2, [r3, #24]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	f042 0208 	orr.w	r2, r2, #8
 8011352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	699a      	ldr	r2, [r3, #24]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f022 0204 	bic.w	r2, r2, #4
 8011362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6999      	ldr	r1, [r3, #24]
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	691a      	ldr	r2, [r3, #16]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	430a      	orrs	r2, r1
 8011374:	619a      	str	r2, [r3, #24]
      break;
 8011376:	e064      	b.n	8011442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68b9      	ldr	r1, [r7, #8]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 fa68 	bl	8011854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	699a      	ldr	r2, [r3, #24]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	699a      	ldr	r2, [r3, #24]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80113a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	6999      	ldr	r1, [r3, #24]
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	691b      	ldr	r3, [r3, #16]
 80113ae:	021a      	lsls	r2, r3, #8
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	430a      	orrs	r2, r1
 80113b6:	619a      	str	r2, [r3, #24]
      break;
 80113b8:	e043      	b.n	8011442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68b9      	ldr	r1, [r7, #8]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 fabd 	bl	8011940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	69da      	ldr	r2, [r3, #28]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f042 0208 	orr.w	r2, r2, #8
 80113d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	69da      	ldr	r2, [r3, #28]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f022 0204 	bic.w	r2, r2, #4
 80113e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	69d9      	ldr	r1, [r3, #28]
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	691a      	ldr	r2, [r3, #16]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	430a      	orrs	r2, r1
 80113f6:	61da      	str	r2, [r3, #28]
      break;
 80113f8:	e023      	b.n	8011442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68b9      	ldr	r1, [r7, #8]
 8011400:	4618      	mov	r0, r3
 8011402:	f000 fb11 	bl	8011a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	69da      	ldr	r2, [r3, #28]
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	69da      	ldr	r2, [r3, #28]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	69d9      	ldr	r1, [r3, #28]
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	021a      	lsls	r2, r3, #8
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	430a      	orrs	r2, r1
 8011438:	61da      	str	r2, [r3, #28]
      break;
 801143a:	e002      	b.n	8011442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801143c:	2301      	movs	r3, #1
 801143e:	75fb      	strb	r3, [r7, #23]
      break;
 8011440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801144a:	7dfb      	ldrb	r3, [r7, #23]
}
 801144c:	4618      	mov	r0, r3
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011468:	2b01      	cmp	r3, #1
 801146a:	d101      	bne.n	8011470 <HAL_TIM_ConfigClockSource+0x1c>
 801146c:	2302      	movs	r3, #2
 801146e:	e0b4      	b.n	80115da <HAL_TIM_ConfigClockSource+0x186>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2201      	movs	r2, #1
 8011474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2202      	movs	r2, #2
 801147c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801148e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80114a8:	d03e      	beq.n	8011528 <HAL_TIM_ConfigClockSource+0xd4>
 80114aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80114ae:	f200 8087 	bhi.w	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114b6:	f000 8086 	beq.w	80115c6 <HAL_TIM_ConfigClockSource+0x172>
 80114ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114be:	d87f      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114c0:	2b70      	cmp	r3, #112	@ 0x70
 80114c2:	d01a      	beq.n	80114fa <HAL_TIM_ConfigClockSource+0xa6>
 80114c4:	2b70      	cmp	r3, #112	@ 0x70
 80114c6:	d87b      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114c8:	2b60      	cmp	r3, #96	@ 0x60
 80114ca:	d050      	beq.n	801156e <HAL_TIM_ConfigClockSource+0x11a>
 80114cc:	2b60      	cmp	r3, #96	@ 0x60
 80114ce:	d877      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114d0:	2b50      	cmp	r3, #80	@ 0x50
 80114d2:	d03c      	beq.n	801154e <HAL_TIM_ConfigClockSource+0xfa>
 80114d4:	2b50      	cmp	r3, #80	@ 0x50
 80114d6:	d873      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114d8:	2b40      	cmp	r3, #64	@ 0x40
 80114da:	d058      	beq.n	801158e <HAL_TIM_ConfigClockSource+0x13a>
 80114dc:	2b40      	cmp	r3, #64	@ 0x40
 80114de:	d86f      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114e0:	2b30      	cmp	r3, #48	@ 0x30
 80114e2:	d064      	beq.n	80115ae <HAL_TIM_ConfigClockSource+0x15a>
 80114e4:	2b30      	cmp	r3, #48	@ 0x30
 80114e6:	d86b      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114e8:	2b20      	cmp	r3, #32
 80114ea:	d060      	beq.n	80115ae <HAL_TIM_ConfigClockSource+0x15a>
 80114ec:	2b20      	cmp	r3, #32
 80114ee:	d867      	bhi.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d05c      	beq.n	80115ae <HAL_TIM_ConfigClockSource+0x15a>
 80114f4:	2b10      	cmp	r3, #16
 80114f6:	d05a      	beq.n	80115ae <HAL_TIM_ConfigClockSource+0x15a>
 80114f8:	e062      	b.n	80115c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6818      	ldr	r0, [r3, #0]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	6899      	ldr	r1, [r3, #8]
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	685a      	ldr	r2, [r3, #4]
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	f000 fb5d 	bl	8011bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	689b      	ldr	r3, [r3, #8]
 8011514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801151c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	609a      	str	r2, [r3, #8]
      break;
 8011526:	e04f      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	6899      	ldr	r1, [r3, #8]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	685a      	ldr	r2, [r3, #4]
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	f000 fb46 	bl	8011bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	689a      	ldr	r2, [r3, #8]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801154a:	609a      	str	r2, [r3, #8]
      break;
 801154c:	e03c      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6818      	ldr	r0, [r3, #0]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	6859      	ldr	r1, [r3, #4]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	461a      	mov	r2, r3
 801155c:	f000 faba 	bl	8011ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2150      	movs	r1, #80	@ 0x50
 8011566:	4618      	mov	r0, r3
 8011568:	f000 fb13 	bl	8011b92 <TIM_ITRx_SetConfig>
      break;
 801156c:	e02c      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	6859      	ldr	r1, [r3, #4]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	461a      	mov	r2, r3
 801157c:	f000 fad9 	bl	8011b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2160      	movs	r1, #96	@ 0x60
 8011586:	4618      	mov	r0, r3
 8011588:	f000 fb03 	bl	8011b92 <TIM_ITRx_SetConfig>
      break;
 801158c:	e01c      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6818      	ldr	r0, [r3, #0]
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	6859      	ldr	r1, [r3, #4]
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	461a      	mov	r2, r3
 801159c:	f000 fa9a 	bl	8011ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2140      	movs	r1, #64	@ 0x40
 80115a6:	4618      	mov	r0, r3
 80115a8:	f000 faf3 	bl	8011b92 <TIM_ITRx_SetConfig>
      break;
 80115ac:	e00c      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4619      	mov	r1, r3
 80115b8:	4610      	mov	r0, r2
 80115ba:	f000 faea 	bl	8011b92 <TIM_ITRx_SetConfig>
      break;
 80115be:	e003      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80115c0:	2301      	movs	r3, #1
 80115c2:	73fb      	strb	r3, [r7, #15]
      break;
 80115c4:	e000      	b.n	80115c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80115c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2201      	movs	r2, #1
 80115cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2200      	movs	r2, #0
 80115d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80115e2:	b480      	push	{r7}
 80115e4:	b083      	sub	sp, #12
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80115ea:	bf00      	nop
 80115ec:	370c      	adds	r7, #12
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr

080115f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80115f6:	b480      	push	{r7}
 80115f8:	b083      	sub	sp, #12
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80115fe:	bf00      	nop
 8011600:	370c      	adds	r7, #12
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr

0801160a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011612:	bf00      	nop
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801161e:	b480      	push	{r7}
 8011620:	b083      	sub	sp, #12
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011626:	bf00      	nop
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
	...

08011634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a40      	ldr	r2, [pc, #256]	@ (8011748 <TIM_Base_SetConfig+0x114>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d013      	beq.n	8011674 <TIM_Base_SetConfig+0x40>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011652:	d00f      	beq.n	8011674 <TIM_Base_SetConfig+0x40>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4a3d      	ldr	r2, [pc, #244]	@ (801174c <TIM_Base_SetConfig+0x118>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d00b      	beq.n	8011674 <TIM_Base_SetConfig+0x40>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a3c      	ldr	r2, [pc, #240]	@ (8011750 <TIM_Base_SetConfig+0x11c>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d007      	beq.n	8011674 <TIM_Base_SetConfig+0x40>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a3b      	ldr	r2, [pc, #236]	@ (8011754 <TIM_Base_SetConfig+0x120>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d003      	beq.n	8011674 <TIM_Base_SetConfig+0x40>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4a3a      	ldr	r2, [pc, #232]	@ (8011758 <TIM_Base_SetConfig+0x124>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d108      	bne.n	8011686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801167a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	4313      	orrs	r3, r2
 8011684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a2f      	ldr	r2, [pc, #188]	@ (8011748 <TIM_Base_SetConfig+0x114>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d02b      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011694:	d027      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a2c      	ldr	r2, [pc, #176]	@ (801174c <TIM_Base_SetConfig+0x118>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d023      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a2b      	ldr	r2, [pc, #172]	@ (8011750 <TIM_Base_SetConfig+0x11c>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d01f      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a2a      	ldr	r2, [pc, #168]	@ (8011754 <TIM_Base_SetConfig+0x120>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d01b      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a29      	ldr	r2, [pc, #164]	@ (8011758 <TIM_Base_SetConfig+0x124>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d017      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a28      	ldr	r2, [pc, #160]	@ (801175c <TIM_Base_SetConfig+0x128>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d013      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a27      	ldr	r2, [pc, #156]	@ (8011760 <TIM_Base_SetConfig+0x12c>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d00f      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4a26      	ldr	r2, [pc, #152]	@ (8011764 <TIM_Base_SetConfig+0x130>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d00b      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	4a25      	ldr	r2, [pc, #148]	@ (8011768 <TIM_Base_SetConfig+0x134>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d007      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	4a24      	ldr	r2, [pc, #144]	@ (801176c <TIM_Base_SetConfig+0x138>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d003      	beq.n	80116e6 <TIM_Base_SetConfig+0xb2>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4a23      	ldr	r2, [pc, #140]	@ (8011770 <TIM_Base_SetConfig+0x13c>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d108      	bne.n	80116f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80116ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	695b      	ldr	r3, [r3, #20]
 8011702:	4313      	orrs	r3, r2
 8011704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	689a      	ldr	r2, [r3, #8]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4a0a      	ldr	r2, [pc, #40]	@ (8011748 <TIM_Base_SetConfig+0x114>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d003      	beq.n	801172c <TIM_Base_SetConfig+0xf8>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4a0c      	ldr	r2, [pc, #48]	@ (8011758 <TIM_Base_SetConfig+0x124>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d103      	bne.n	8011734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	691a      	ldr	r2, [r3, #16]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	615a      	str	r2, [r3, #20]
}
 801173a:	bf00      	nop
 801173c:	3714      	adds	r7, #20
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	40010000 	.word	0x40010000
 801174c:	40000400 	.word	0x40000400
 8011750:	40000800 	.word	0x40000800
 8011754:	40000c00 	.word	0x40000c00
 8011758:	40010400 	.word	0x40010400
 801175c:	40014000 	.word	0x40014000
 8011760:	40014400 	.word	0x40014400
 8011764:	40014800 	.word	0x40014800
 8011768:	40001800 	.word	0x40001800
 801176c:	40001c00 	.word	0x40001c00
 8011770:	40002000 	.word	0x40002000

08011774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011774:	b480      	push	{r7}
 8011776:	b087      	sub	sp, #28
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a1b      	ldr	r3, [r3, #32]
 8011782:	f023 0201 	bic.w	r2, r3, #1
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a1b      	ldr	r3, [r3, #32]
 801178e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	699b      	ldr	r3, [r3, #24]
 801179a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0303 	bic.w	r3, r3, #3
 80117aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	f023 0302 	bic.w	r3, r3, #2
 80117bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4a20      	ldr	r2, [pc, #128]	@ (801184c <TIM_OC1_SetConfig+0xd8>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d003      	beq.n	80117d8 <TIM_OC1_SetConfig+0x64>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a1f      	ldr	r2, [pc, #124]	@ (8011850 <TIM_OC1_SetConfig+0xdc>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d10c      	bne.n	80117f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	f023 0308 	bic.w	r3, r3, #8
 80117de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	4313      	orrs	r3, r2
 80117e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f023 0304 	bic.w	r3, r3, #4
 80117f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	4a15      	ldr	r2, [pc, #84]	@ (801184c <TIM_OC1_SetConfig+0xd8>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d003      	beq.n	8011802 <TIM_OC1_SetConfig+0x8e>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a14      	ldr	r2, [pc, #80]	@ (8011850 <TIM_OC1_SetConfig+0xdc>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d111      	bne.n	8011826 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	695b      	ldr	r3, [r3, #20]
 8011816:	693a      	ldr	r2, [r7, #16]
 8011818:	4313      	orrs	r3, r2
 801181a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	699b      	ldr	r3, [r3, #24]
 8011820:	693a      	ldr	r2, [r7, #16]
 8011822:	4313      	orrs	r3, r2
 8011824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	693a      	ldr	r2, [r7, #16]
 801182a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	697a      	ldr	r2, [r7, #20]
 801183e:	621a      	str	r2, [r3, #32]
}
 8011840:	bf00      	nop
 8011842:	371c      	adds	r7, #28
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr
 801184c:	40010000 	.word	0x40010000
 8011850:	40010400 	.word	0x40010400

08011854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011854:	b480      	push	{r7}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a1b      	ldr	r3, [r3, #32]
 8011862:	f023 0210 	bic.w	r2, r3, #16
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a1b      	ldr	r3, [r3, #32]
 801186e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801188a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	021b      	lsls	r3, r3, #8
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	4313      	orrs	r3, r2
 8011896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f023 0320 	bic.w	r3, r3, #32
 801189e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	011b      	lsls	r3, r3, #4
 80118a6:	697a      	ldr	r2, [r7, #20]
 80118a8:	4313      	orrs	r3, r2
 80118aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4a22      	ldr	r2, [pc, #136]	@ (8011938 <TIM_OC2_SetConfig+0xe4>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d003      	beq.n	80118bc <TIM_OC2_SetConfig+0x68>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4a21      	ldr	r2, [pc, #132]	@ (801193c <TIM_OC2_SetConfig+0xe8>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d10d      	bne.n	80118d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80118c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	697a      	ldr	r2, [r7, #20]
 80118cc:	4313      	orrs	r3, r2
 80118ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a17      	ldr	r2, [pc, #92]	@ (8011938 <TIM_OC2_SetConfig+0xe4>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d003      	beq.n	80118e8 <TIM_OC2_SetConfig+0x94>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a16      	ldr	r2, [pc, #88]	@ (801193c <TIM_OC2_SetConfig+0xe8>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d113      	bne.n	8011910 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80118ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80118f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	693a      	ldr	r2, [r7, #16]
 8011900:	4313      	orrs	r3, r2
 8011902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	693a      	ldr	r2, [r7, #16]
 801190c:	4313      	orrs	r3, r2
 801190e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	685a      	ldr	r2, [r3, #4]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	697a      	ldr	r2, [r7, #20]
 8011928:	621a      	str	r2, [r3, #32]
}
 801192a:	bf00      	nop
 801192c:	371c      	adds	r7, #28
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	40010000 	.word	0x40010000
 801193c:	40010400 	.word	0x40010400

08011940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011940:	b480      	push	{r7}
 8011942:	b087      	sub	sp, #28
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a1b      	ldr	r3, [r3, #32]
 801195a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	69db      	ldr	r3, [r3, #28]
 8011966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801196e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f023 0303 	bic.w	r3, r3, #3
 8011976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	4313      	orrs	r3, r2
 8011980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	697a      	ldr	r2, [r7, #20]
 8011992:	4313      	orrs	r3, r2
 8011994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4a21      	ldr	r2, [pc, #132]	@ (8011a20 <TIM_OC3_SetConfig+0xe0>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d003      	beq.n	80119a6 <TIM_OC3_SetConfig+0x66>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4a20      	ldr	r2, [pc, #128]	@ (8011a24 <TIM_OC3_SetConfig+0xe4>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d10d      	bne.n	80119c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80119ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	68db      	ldr	r3, [r3, #12]
 80119b2:	021b      	lsls	r3, r3, #8
 80119b4:	697a      	ldr	r2, [r7, #20]
 80119b6:	4313      	orrs	r3, r2
 80119b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80119c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4a16      	ldr	r2, [pc, #88]	@ (8011a20 <TIM_OC3_SetConfig+0xe0>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d003      	beq.n	80119d2 <TIM_OC3_SetConfig+0x92>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4a15      	ldr	r2, [pc, #84]	@ (8011a24 <TIM_OC3_SetConfig+0xe4>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d113      	bne.n	80119fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80119e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	695b      	ldr	r3, [r3, #20]
 80119e6:	011b      	lsls	r3, r3, #4
 80119e8:	693a      	ldr	r2, [r7, #16]
 80119ea:	4313      	orrs	r3, r2
 80119ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	699b      	ldr	r3, [r3, #24]
 80119f2:	011b      	lsls	r3, r3, #4
 80119f4:	693a      	ldr	r2, [r7, #16]
 80119f6:	4313      	orrs	r3, r2
 80119f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	693a      	ldr	r2, [r7, #16]
 80119fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	685a      	ldr	r2, [r3, #4]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	621a      	str	r2, [r3, #32]
}
 8011a14:	bf00      	nop
 8011a16:	371c      	adds	r7, #28
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	40010000 	.word	0x40010000
 8011a24:	40010400 	.word	0x40010400

08011a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b087      	sub	sp, #28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a1b      	ldr	r3, [r3, #32]
 8011a36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	69db      	ldr	r3, [r3, #28]
 8011a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	021b      	lsls	r3, r3, #8
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	689b      	ldr	r3, [r3, #8]
 8011a78:	031b      	lsls	r3, r3, #12
 8011a7a:	693a      	ldr	r2, [r7, #16]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4a12      	ldr	r2, [pc, #72]	@ (8011acc <TIM_OC4_SetConfig+0xa4>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d003      	beq.n	8011a90 <TIM_OC4_SetConfig+0x68>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4a11      	ldr	r2, [pc, #68]	@ (8011ad0 <TIM_OC4_SetConfig+0xa8>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d109      	bne.n	8011aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	695b      	ldr	r3, [r3, #20]
 8011a9c:	019b      	lsls	r3, r3, #6
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	685a      	ldr	r2, [r3, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	621a      	str	r2, [r3, #32]
}
 8011abe:	bf00      	nop
 8011ac0:	371c      	adds	r7, #28
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop
 8011acc:	40010000 	.word	0x40010000
 8011ad0:	40010400 	.word	0x40010400

08011ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b087      	sub	sp, #28
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	f023 0201 	bic.w	r2, r3, #1
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	699b      	ldr	r3, [r3, #24]
 8011af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	011b      	lsls	r3, r3, #4
 8011b04:	693a      	ldr	r2, [r7, #16]
 8011b06:	4313      	orrs	r3, r2
 8011b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	f023 030a 	bic.w	r3, r3, #10
 8011b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	4313      	orrs	r3, r2
 8011b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	693a      	ldr	r2, [r7, #16]
 8011b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	621a      	str	r2, [r3, #32]
}
 8011b26:	bf00      	nop
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr

08011b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b32:	b480      	push	{r7}
 8011b34:	b087      	sub	sp, #28
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	60f8      	str	r0, [r7, #12]
 8011b3a:	60b9      	str	r1, [r7, #8]
 8011b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6a1b      	ldr	r3, [r3, #32]
 8011b42:	f023 0210 	bic.w	r2, r3, #16
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	699b      	ldr	r3, [r3, #24]
 8011b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	6a1b      	ldr	r3, [r3, #32]
 8011b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	031b      	lsls	r3, r3, #12
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	4313      	orrs	r3, r2
 8011b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	011b      	lsls	r3, r3, #4
 8011b74:	693a      	ldr	r2, [r7, #16]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	697a      	ldr	r2, [r7, #20]
 8011b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	621a      	str	r2, [r3, #32]
}
 8011b86:	bf00      	nop
 8011b88:	371c      	adds	r7, #28
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011b92:	b480      	push	{r7}
 8011b94:	b085      	sub	sp, #20
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	689b      	ldr	r3, [r3, #8]
 8011ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	f043 0307 	orr.w	r3, r3, #7
 8011bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	609a      	str	r2, [r3, #8]
}
 8011bbc:	bf00      	nop
 8011bbe:	3714      	adds	r7, #20
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b087      	sub	sp, #28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	021a      	lsls	r2, r3, #8
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	431a      	orrs	r2, r3
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	697a      	ldr	r2, [r7, #20]
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	609a      	str	r2, [r3, #8]
}
 8011bfc:	bf00      	nop
 8011bfe:	371c      	adds	r7, #28
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b087      	sub	sp, #28
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	60f8      	str	r0, [r7, #12]
 8011c10:	60b9      	str	r1, [r7, #8]
 8011c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f003 031f 	and.w	r3, r3, #31
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6a1a      	ldr	r2, [r3, #32]
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	43db      	mvns	r3, r3
 8011c2a:	401a      	ands	r2, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	6a1a      	ldr	r2, [r3, #32]
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	f003 031f 	and.w	r3, r3, #31
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c40:	431a      	orrs	r2, r3
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	621a      	str	r2, [r3, #32]
}
 8011c46:	bf00      	nop
 8011c48:	371c      	adds	r7, #28
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
	...

08011c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d101      	bne.n	8011c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011c68:	2302      	movs	r3, #2
 8011c6a:	e05a      	b.n	8011d22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2201      	movs	r2, #1
 8011c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2202      	movs	r2, #2
 8011c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	68fa      	ldr	r2, [r7, #12]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4a21      	ldr	r2, [pc, #132]	@ (8011d30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d022      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011cb8:	d01d      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8011d34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d018      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8011d38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	d013      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8011d3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d00e      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a18      	ldr	r2, [pc, #96]	@ (8011d40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d009      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a17      	ldr	r2, [pc, #92]	@ (8011d44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d004      	beq.n	8011cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a15      	ldr	r2, [pc, #84]	@ (8011d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d10c      	bne.n	8011d10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	4313      	orrs	r3, r2
 8011d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	68ba      	ldr	r2, [r7, #8]
 8011d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2201      	movs	r2, #1
 8011d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011d20:	2300      	movs	r3, #0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3714      	adds	r7, #20
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop
 8011d30:	40010000 	.word	0x40010000
 8011d34:	40000400 	.word	0x40000400
 8011d38:	40000800 	.word	0x40000800
 8011d3c:	40000c00 	.word	0x40000c00
 8011d40:	40010400 	.word	0x40010400
 8011d44:	40014000 	.word	0x40014000
 8011d48:	40001800 	.word	0x40001800

08011d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b085      	sub	sp, #20
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d101      	bne.n	8011d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011d64:	2302      	movs	r3, #2
 8011d66:	e03d      	b.n	8011de4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	68db      	ldr	r3, [r3, #12]
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	4313      	orrs	r3, r2
 8011d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	691b      	ldr	r3, [r3, #16]
 8011db2:	4313      	orrs	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	695b      	ldr	r3, [r3, #20]
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	69db      	ldr	r3, [r3, #28]
 8011dce:	4313      	orrs	r3, r2
 8011dd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011e0c:	bf00      	nop
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr

08011e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011e26:	2301      	movs	r3, #1
 8011e28:	e03f      	b.n	8011eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7f8 f938 	bl	800a0b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2224      	movs	r2, #36	@ 0x24
 8011e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68da      	ldr	r2, [r3, #12]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 f829 	bl	8011eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	695a      	ldr	r2, [r3, #20]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2220      	movs	r2, #32
 8011e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2220      	movs	r2, #32
 8011ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
	...

08011eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011eb8:	b0c0      	sub	sp, #256	@ 0x100
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ed0:	68d9      	ldr	r1, [r3, #12]
 8011ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	ea40 0301 	orr.w	r3, r0, r1
 8011edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ee2:	689a      	ldr	r2, [r3, #8]
 8011ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ee8:	691b      	ldr	r3, [r3, #16]
 8011eea:	431a      	orrs	r2, r3
 8011eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ef0:	695b      	ldr	r3, [r3, #20]
 8011ef2:	431a      	orrs	r2, r3
 8011ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	4313      	orrs	r3, r2
 8011efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011f0c:	f021 010c 	bic.w	r1, r1, #12
 8011f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011f1a:	430b      	orrs	r3, r1
 8011f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	695b      	ldr	r3, [r3, #20]
 8011f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f2e:	6999      	ldr	r1, [r3, #24]
 8011f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	ea40 0301 	orr.w	r3, r0, r1
 8011f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	4b8f      	ldr	r3, [pc, #572]	@ (8012180 <UART_SetConfig+0x2cc>)
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d005      	beq.n	8011f54 <UART_SetConfig+0xa0>
 8011f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8012184 <UART_SetConfig+0x2d0>)
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d104      	bne.n	8011f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011f54:	f7fd fd10 	bl	800f978 <HAL_RCC_GetPCLK2Freq>
 8011f58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011f5c:	e003      	b.n	8011f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011f5e:	f7fd fcf7 	bl	800f950 <HAL_RCC_GetPCLK1Freq>
 8011f62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f6a:	69db      	ldr	r3, [r3, #28]
 8011f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011f70:	f040 810c 	bne.w	801218c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011f86:	4622      	mov	r2, r4
 8011f88:	462b      	mov	r3, r5
 8011f8a:	1891      	adds	r1, r2, r2
 8011f8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011f8e:	415b      	adcs	r3, r3
 8011f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011f96:	4621      	mov	r1, r4
 8011f98:	eb12 0801 	adds.w	r8, r2, r1
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	eb43 0901 	adc.w	r9, r3, r1
 8011fa2:	f04f 0200 	mov.w	r2, #0
 8011fa6:	f04f 0300 	mov.w	r3, #0
 8011faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011fb6:	4690      	mov	r8, r2
 8011fb8:	4699      	mov	r9, r3
 8011fba:	4623      	mov	r3, r4
 8011fbc:	eb18 0303 	adds.w	r3, r8, r3
 8011fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011fc4:	462b      	mov	r3, r5
 8011fc6:	eb49 0303 	adc.w	r3, r9, r3
 8011fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	18db      	adds	r3, r3, r3
 8011fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8011fe8:	4613      	mov	r3, r2
 8011fea:	eb42 0303 	adc.w	r3, r2, r3
 8011fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8011ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011ff8:	f7ee fe46 	bl	8000c88 <__aeabi_uldivmod>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4b61      	ldr	r3, [pc, #388]	@ (8012188 <UART_SetConfig+0x2d4>)
 8012002:	fba3 2302 	umull	r2, r3, r3, r2
 8012006:	095b      	lsrs	r3, r3, #5
 8012008:	011c      	lsls	r4, r3, #4
 801200a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801200e:	2200      	movs	r2, #0
 8012010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8012018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801201c:	4642      	mov	r2, r8
 801201e:	464b      	mov	r3, r9
 8012020:	1891      	adds	r1, r2, r2
 8012022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012024:	415b      	adcs	r3, r3
 8012026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801202c:	4641      	mov	r1, r8
 801202e:	eb12 0a01 	adds.w	sl, r2, r1
 8012032:	4649      	mov	r1, r9
 8012034:	eb43 0b01 	adc.w	fp, r3, r1
 8012038:	f04f 0200 	mov.w	r2, #0
 801203c:	f04f 0300 	mov.w	r3, #0
 8012040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801204c:	4692      	mov	sl, r2
 801204e:	469b      	mov	fp, r3
 8012050:	4643      	mov	r3, r8
 8012052:	eb1a 0303 	adds.w	r3, sl, r3
 8012056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801205a:	464b      	mov	r3, r9
 801205c:	eb4b 0303 	adc.w	r3, fp, r3
 8012060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8012074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012078:	460b      	mov	r3, r1
 801207a:	18db      	adds	r3, r3, r3
 801207c:	643b      	str	r3, [r7, #64]	@ 0x40
 801207e:	4613      	mov	r3, r2
 8012080:	eb42 0303 	adc.w	r3, r2, r3
 8012084:	647b      	str	r3, [r7, #68]	@ 0x44
 8012086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801208a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801208e:	f7ee fdfb 	bl	8000c88 <__aeabi_uldivmod>
 8012092:	4602      	mov	r2, r0
 8012094:	460b      	mov	r3, r1
 8012096:	4611      	mov	r1, r2
 8012098:	4b3b      	ldr	r3, [pc, #236]	@ (8012188 <UART_SetConfig+0x2d4>)
 801209a:	fba3 2301 	umull	r2, r3, r3, r1
 801209e:	095b      	lsrs	r3, r3, #5
 80120a0:	2264      	movs	r2, #100	@ 0x64
 80120a2:	fb02 f303 	mul.w	r3, r2, r3
 80120a6:	1acb      	subs	r3, r1, r3
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80120ae:	4b36      	ldr	r3, [pc, #216]	@ (8012188 <UART_SetConfig+0x2d4>)
 80120b0:	fba3 2302 	umull	r2, r3, r3, r2
 80120b4:	095b      	lsrs	r3, r3, #5
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80120bc:	441c      	add	r4, r3
 80120be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120c2:	2200      	movs	r2, #0
 80120c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80120c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80120cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80120d0:	4642      	mov	r2, r8
 80120d2:	464b      	mov	r3, r9
 80120d4:	1891      	adds	r1, r2, r2
 80120d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80120d8:	415b      	adcs	r3, r3
 80120da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80120dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80120e0:	4641      	mov	r1, r8
 80120e2:	1851      	adds	r1, r2, r1
 80120e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80120e6:	4649      	mov	r1, r9
 80120e8:	414b      	adcs	r3, r1
 80120ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80120ec:	f04f 0200 	mov.w	r2, #0
 80120f0:	f04f 0300 	mov.w	r3, #0
 80120f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80120f8:	4659      	mov	r1, fp
 80120fa:	00cb      	lsls	r3, r1, #3
 80120fc:	4651      	mov	r1, sl
 80120fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012102:	4651      	mov	r1, sl
 8012104:	00ca      	lsls	r2, r1, #3
 8012106:	4610      	mov	r0, r2
 8012108:	4619      	mov	r1, r3
 801210a:	4603      	mov	r3, r0
 801210c:	4642      	mov	r2, r8
 801210e:	189b      	adds	r3, r3, r2
 8012110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012114:	464b      	mov	r3, r9
 8012116:	460a      	mov	r2, r1
 8012118:	eb42 0303 	adc.w	r3, r2, r3
 801211c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801212c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012134:	460b      	mov	r3, r1
 8012136:	18db      	adds	r3, r3, r3
 8012138:	62bb      	str	r3, [r7, #40]	@ 0x28
 801213a:	4613      	mov	r3, r2
 801213c:	eb42 0303 	adc.w	r3, r2, r3
 8012140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801214a:	f7ee fd9d 	bl	8000c88 <__aeabi_uldivmod>
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	4b0d      	ldr	r3, [pc, #52]	@ (8012188 <UART_SetConfig+0x2d4>)
 8012154:	fba3 1302 	umull	r1, r3, r3, r2
 8012158:	095b      	lsrs	r3, r3, #5
 801215a:	2164      	movs	r1, #100	@ 0x64
 801215c:	fb01 f303 	mul.w	r3, r1, r3
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	00db      	lsls	r3, r3, #3
 8012164:	3332      	adds	r3, #50	@ 0x32
 8012166:	4a08      	ldr	r2, [pc, #32]	@ (8012188 <UART_SetConfig+0x2d4>)
 8012168:	fba2 2303 	umull	r2, r3, r2, r3
 801216c:	095b      	lsrs	r3, r3, #5
 801216e:	f003 0207 	and.w	r2, r3, #7
 8012172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4422      	add	r2, r4
 801217a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801217c:	e106      	b.n	801238c <UART_SetConfig+0x4d8>
 801217e:	bf00      	nop
 8012180:	40011000 	.word	0x40011000
 8012184:	40011400 	.word	0x40011400
 8012188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801218c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012190:	2200      	movs	r2, #0
 8012192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801219a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801219e:	4642      	mov	r2, r8
 80121a0:	464b      	mov	r3, r9
 80121a2:	1891      	adds	r1, r2, r2
 80121a4:	6239      	str	r1, [r7, #32]
 80121a6:	415b      	adcs	r3, r3
 80121a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80121aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80121ae:	4641      	mov	r1, r8
 80121b0:	1854      	adds	r4, r2, r1
 80121b2:	4649      	mov	r1, r9
 80121b4:	eb43 0501 	adc.w	r5, r3, r1
 80121b8:	f04f 0200 	mov.w	r2, #0
 80121bc:	f04f 0300 	mov.w	r3, #0
 80121c0:	00eb      	lsls	r3, r5, #3
 80121c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80121c6:	00e2      	lsls	r2, r4, #3
 80121c8:	4614      	mov	r4, r2
 80121ca:	461d      	mov	r5, r3
 80121cc:	4643      	mov	r3, r8
 80121ce:	18e3      	adds	r3, r4, r3
 80121d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80121d4:	464b      	mov	r3, r9
 80121d6:	eb45 0303 	adc.w	r3, r5, r3
 80121da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80121ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80121ee:	f04f 0200 	mov.w	r2, #0
 80121f2:	f04f 0300 	mov.w	r3, #0
 80121f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80121fa:	4629      	mov	r1, r5
 80121fc:	008b      	lsls	r3, r1, #2
 80121fe:	4621      	mov	r1, r4
 8012200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012204:	4621      	mov	r1, r4
 8012206:	008a      	lsls	r2, r1, #2
 8012208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801220c:	f7ee fd3c 	bl	8000c88 <__aeabi_uldivmod>
 8012210:	4602      	mov	r2, r0
 8012212:	460b      	mov	r3, r1
 8012214:	4b60      	ldr	r3, [pc, #384]	@ (8012398 <UART_SetConfig+0x4e4>)
 8012216:	fba3 2302 	umull	r2, r3, r3, r2
 801221a:	095b      	lsrs	r3, r3, #5
 801221c:	011c      	lsls	r4, r3, #4
 801221e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012222:	2200      	movs	r2, #0
 8012224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801222c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012230:	4642      	mov	r2, r8
 8012232:	464b      	mov	r3, r9
 8012234:	1891      	adds	r1, r2, r2
 8012236:	61b9      	str	r1, [r7, #24]
 8012238:	415b      	adcs	r3, r3
 801223a:	61fb      	str	r3, [r7, #28]
 801223c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012240:	4641      	mov	r1, r8
 8012242:	1851      	adds	r1, r2, r1
 8012244:	6139      	str	r1, [r7, #16]
 8012246:	4649      	mov	r1, r9
 8012248:	414b      	adcs	r3, r1
 801224a:	617b      	str	r3, [r7, #20]
 801224c:	f04f 0200 	mov.w	r2, #0
 8012250:	f04f 0300 	mov.w	r3, #0
 8012254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012258:	4659      	mov	r1, fp
 801225a:	00cb      	lsls	r3, r1, #3
 801225c:	4651      	mov	r1, sl
 801225e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012262:	4651      	mov	r1, sl
 8012264:	00ca      	lsls	r2, r1, #3
 8012266:	4610      	mov	r0, r2
 8012268:	4619      	mov	r1, r3
 801226a:	4603      	mov	r3, r0
 801226c:	4642      	mov	r2, r8
 801226e:	189b      	adds	r3, r3, r2
 8012270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012274:	464b      	mov	r3, r9
 8012276:	460a      	mov	r2, r1
 8012278:	eb42 0303 	adc.w	r3, r2, r3
 801227c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	67bb      	str	r3, [r7, #120]	@ 0x78
 801228a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801228c:	f04f 0200 	mov.w	r2, #0
 8012290:	f04f 0300 	mov.w	r3, #0
 8012294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8012298:	4649      	mov	r1, r9
 801229a:	008b      	lsls	r3, r1, #2
 801229c:	4641      	mov	r1, r8
 801229e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80122a2:	4641      	mov	r1, r8
 80122a4:	008a      	lsls	r2, r1, #2
 80122a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80122aa:	f7ee fced 	bl	8000c88 <__aeabi_uldivmod>
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4611      	mov	r1, r2
 80122b4:	4b38      	ldr	r3, [pc, #224]	@ (8012398 <UART_SetConfig+0x4e4>)
 80122b6:	fba3 2301 	umull	r2, r3, r3, r1
 80122ba:	095b      	lsrs	r3, r3, #5
 80122bc:	2264      	movs	r2, #100	@ 0x64
 80122be:	fb02 f303 	mul.w	r3, r2, r3
 80122c2:	1acb      	subs	r3, r1, r3
 80122c4:	011b      	lsls	r3, r3, #4
 80122c6:	3332      	adds	r3, #50	@ 0x32
 80122c8:	4a33      	ldr	r2, [pc, #204]	@ (8012398 <UART_SetConfig+0x4e4>)
 80122ca:	fba2 2303 	umull	r2, r3, r2, r3
 80122ce:	095b      	lsrs	r3, r3, #5
 80122d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122d4:	441c      	add	r4, r3
 80122d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80122da:	2200      	movs	r2, #0
 80122dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80122de:	677a      	str	r2, [r7, #116]	@ 0x74
 80122e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80122e4:	4642      	mov	r2, r8
 80122e6:	464b      	mov	r3, r9
 80122e8:	1891      	adds	r1, r2, r2
 80122ea:	60b9      	str	r1, [r7, #8]
 80122ec:	415b      	adcs	r3, r3
 80122ee:	60fb      	str	r3, [r7, #12]
 80122f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80122f4:	4641      	mov	r1, r8
 80122f6:	1851      	adds	r1, r2, r1
 80122f8:	6039      	str	r1, [r7, #0]
 80122fa:	4649      	mov	r1, r9
 80122fc:	414b      	adcs	r3, r1
 80122fe:	607b      	str	r3, [r7, #4]
 8012300:	f04f 0200 	mov.w	r2, #0
 8012304:	f04f 0300 	mov.w	r3, #0
 8012308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801230c:	4659      	mov	r1, fp
 801230e:	00cb      	lsls	r3, r1, #3
 8012310:	4651      	mov	r1, sl
 8012312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012316:	4651      	mov	r1, sl
 8012318:	00ca      	lsls	r2, r1, #3
 801231a:	4610      	mov	r0, r2
 801231c:	4619      	mov	r1, r3
 801231e:	4603      	mov	r3, r0
 8012320:	4642      	mov	r2, r8
 8012322:	189b      	adds	r3, r3, r2
 8012324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012326:	464b      	mov	r3, r9
 8012328:	460a      	mov	r2, r1
 801232a:	eb42 0303 	adc.w	r3, r2, r3
 801232e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	663b      	str	r3, [r7, #96]	@ 0x60
 801233a:	667a      	str	r2, [r7, #100]	@ 0x64
 801233c:	f04f 0200 	mov.w	r2, #0
 8012340:	f04f 0300 	mov.w	r3, #0
 8012344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012348:	4649      	mov	r1, r9
 801234a:	008b      	lsls	r3, r1, #2
 801234c:	4641      	mov	r1, r8
 801234e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012352:	4641      	mov	r1, r8
 8012354:	008a      	lsls	r2, r1, #2
 8012356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801235a:	f7ee fc95 	bl	8000c88 <__aeabi_uldivmod>
 801235e:	4602      	mov	r2, r0
 8012360:	460b      	mov	r3, r1
 8012362:	4b0d      	ldr	r3, [pc, #52]	@ (8012398 <UART_SetConfig+0x4e4>)
 8012364:	fba3 1302 	umull	r1, r3, r3, r2
 8012368:	095b      	lsrs	r3, r3, #5
 801236a:	2164      	movs	r1, #100	@ 0x64
 801236c:	fb01 f303 	mul.w	r3, r1, r3
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	011b      	lsls	r3, r3, #4
 8012374:	3332      	adds	r3, #50	@ 0x32
 8012376:	4a08      	ldr	r2, [pc, #32]	@ (8012398 <UART_SetConfig+0x4e4>)
 8012378:	fba2 2303 	umull	r2, r3, r2, r3
 801237c:	095b      	lsrs	r3, r3, #5
 801237e:	f003 020f 	and.w	r2, r3, #15
 8012382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4422      	add	r2, r4
 801238a:	609a      	str	r2, [r3, #8]
}
 801238c:	bf00      	nop
 801238e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012392:	46bd      	mov	sp, r7
 8012394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012398:	51eb851f 	.word	0x51eb851f

0801239c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 801239c:	b084      	sub	sp, #16
 801239e:	b480      	push	{r7}
 80123a0:	b085      	sub	sp, #20
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
 80123a6:	f107 001c 	add.w	r0, r7, #28
 80123aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80123ae:	2300      	movs	r3, #0
 80123b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80123b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80123b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80123b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80123ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80123bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80123be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80123c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80123c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80123c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80123c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	4313      	orrs	r3, r2
 80123cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80123d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80123da:	68fa      	ldr	r2, [r7, #12]
 80123dc:	431a      	orrs	r2, r3
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80123e2:	2300      	movs	r3, #0
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3714      	adds	r7, #20
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	b004      	add	sp, #16
 80123f0:	4770      	bx	lr

080123f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80123f2:	b480      	push	{r7}
 80123f4:	b083      	sub	sp, #12
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012400:	4618      	mov	r0, r3
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801242e:	b480      	push	{r7}
 8012430:	b083      	sub	sp, #12
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2203      	movs	r2, #3
 801243a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	370c      	adds	r7, #12
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 801244a:	b480      	push	{r7}
 801244c:	b083      	sub	sp, #12
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f003 0303 	and.w	r3, r3, #3
}
 801245a:	4618      	mov	r0, r3
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012466:	b480      	push	{r7}
 8012468:	b085      	sub	sp, #20
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012470:	2300      	movs	r3, #0
 8012472:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012484:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801248a:	431a      	orrs	r2, r3
                       Command->CPSM);
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012490:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	4313      	orrs	r3, r2
 8012496:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80124a0:	f023 030f 	bic.w	r3, r3, #15
 80124a4:	68fa      	ldr	r2, [r7, #12]
 80124a6:	431a      	orrs	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80124ac:	2300      	movs	r3, #0
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3714      	adds	r7, #20
 80124b2:	46bd      	mov	sp, r7
 80124b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b8:	4770      	bx	lr

080124ba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80124ba:	b480      	push	{r7}
 80124bc:	b083      	sub	sp, #12
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	b2db      	uxtb	r3, r3
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b085      	sub	sp, #20
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3314      	adds	r3, #20
 80124e2:	461a      	mov	r2, r3
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	4413      	add	r3, r2
 80124e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
}  
 80124ee:	4618      	mov	r0, r3
 80124f0:	3714      	adds	r7, #20
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr

080124fa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80124fa:	b480      	push	{r7}
 80124fc:	b085      	sub	sp, #20
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012504:	2300      	movs	r3, #0
 8012506:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	685a      	ldr	r2, [r3, #4]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012520:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012526:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801252c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	4313      	orrs	r3, r2
 8012532:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012538:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	431a      	orrs	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012544:	2300      	movs	r3, #0

}
 8012546:	4618      	mov	r0, r3
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b088      	sub	sp, #32
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012560:	2310      	movs	r3, #16
 8012562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012564:	2340      	movs	r3, #64	@ 0x40
 8012566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012568:	2300      	movs	r3, #0
 801256a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801256c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012570:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012572:	f107 0308 	add.w	r3, r7, #8
 8012576:	4619      	mov	r1, r3
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7ff ff74 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012582:	2110      	movs	r1, #16
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 fa19 	bl	80129bc <SDMMC_GetCmdResp1>
 801258a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801258c:	69fb      	ldr	r3, [r7, #28]
}
 801258e:	4618      	mov	r0, r3
 8012590:	3720      	adds	r7, #32
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b088      	sub	sp, #32
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80125a4:	2311      	movs	r3, #17
 80125a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125a8:	2340      	movs	r3, #64	@ 0x40
 80125aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125ac:	2300      	movs	r3, #0
 80125ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80125b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125b6:	f107 0308 	add.w	r3, r7, #8
 80125ba:	4619      	mov	r1, r3
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f7ff ff52 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80125c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80125c6:	2111      	movs	r1, #17
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f000 f9f7 	bl	80129bc <SDMMC_GetCmdResp1>
 80125ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125d0:	69fb      	ldr	r3, [r7, #28]
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3720      	adds	r7, #32
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b088      	sub	sp, #32
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80125e8:	2312      	movs	r3, #18
 80125ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80125ec:	2340      	movs	r3, #64	@ 0x40
 80125ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80125f0:	2300      	movs	r3, #0
 80125f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80125f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80125f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80125fa:	f107 0308 	add.w	r3, r7, #8
 80125fe:	4619      	mov	r1, r3
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7ff ff30 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012606:	f241 3288 	movw	r2, #5000	@ 0x1388
 801260a:	2112      	movs	r1, #18
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 f9d5 	bl	80129bc <SDMMC_GetCmdResp1>
 8012612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012614:	69fb      	ldr	r3, [r7, #28]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3720      	adds	r7, #32
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b088      	sub	sp, #32
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801262c:	2318      	movs	r3, #24
 801262e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012630:	2340      	movs	r3, #64	@ 0x40
 8012632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012634:	2300      	movs	r3, #0
 8012636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801263c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801263e:	f107 0308 	add.w	r3, r7, #8
 8012642:	4619      	mov	r1, r3
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff ff0e 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801264e:	2118      	movs	r1, #24
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f000 f9b3 	bl	80129bc <SDMMC_GetCmdResp1>
 8012656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012658:	69fb      	ldr	r3, [r7, #28]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3720      	adds	r7, #32
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012662:	b580      	push	{r7, lr}
 8012664:	b088      	sub	sp, #32
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
 801266a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012670:	2319      	movs	r3, #25
 8012672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012674:	2340      	movs	r3, #64	@ 0x40
 8012676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012678:	2300      	movs	r3, #0
 801267a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801267c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012680:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012682:	f107 0308 	add.w	r3, r7, #8
 8012686:	4619      	mov	r1, r3
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff feec 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012692:	2119      	movs	r1, #25
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f991 	bl	80129bc <SDMMC_GetCmdResp1>
 801269a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801269c:	69fb      	ldr	r3, [r7, #28]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3720      	adds	r7, #32
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
	...

080126a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b088      	sub	sp, #32
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80126b0:	2300      	movs	r3, #0
 80126b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80126b4:	230c      	movs	r3, #12
 80126b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80126b8:	2340      	movs	r3, #64	@ 0x40
 80126ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80126bc:	2300      	movs	r3, #0
 80126be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80126c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80126c6:	f107 0308 	add.w	r3, r7, #8
 80126ca:	4619      	mov	r1, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7ff feca 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80126d2:	4a05      	ldr	r2, [pc, #20]	@ (80126e8 <SDMMC_CmdStopTransfer+0x40>)
 80126d4:	210c      	movs	r1, #12
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f970 	bl	80129bc <SDMMC_GetCmdResp1>
 80126dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126de:	69fb      	ldr	r3, [r7, #28]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3720      	adds	r7, #32
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	05f5e100 	.word	0x05f5e100

080126ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b08a      	sub	sp, #40	@ 0x28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80126fc:	2307      	movs	r3, #7
 80126fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012700:	2340      	movs	r3, #64	@ 0x40
 8012702:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012704:	2300      	movs	r3, #0
 8012706:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801270c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801270e:	f107 0310 	add.w	r3, r7, #16
 8012712:	4619      	mov	r1, r3
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f7ff fea6 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801271e:	2107      	movs	r1, #7
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f000 f94b 	bl	80129bc <SDMMC_GetCmdResp1>
 8012726:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8012728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801272a:	4618      	mov	r0, r3
 801272c:	3728      	adds	r7, #40	@ 0x28
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}

08012732 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8012732:	b580      	push	{r7, lr}
 8012734:	b088      	sub	sp, #32
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801273a:	2300      	movs	r3, #0
 801273c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801273e:	2300      	movs	r3, #0
 8012740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8012742:	2300      	movs	r3, #0
 8012744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012746:	2300      	movs	r3, #0
 8012748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801274a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801274e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012750:	f107 0308 	add.w	r3, r7, #8
 8012754:	4619      	mov	r1, r3
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7ff fe85 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fb65 	bl	8012e2c <SDMMC_GetCmdError>
 8012762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012764:	69fb      	ldr	r3, [r7, #28]
}
 8012766:	4618      	mov	r0, r3
 8012768:	3720      	adds	r7, #32
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b088      	sub	sp, #32
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012776:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801277a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801277c:	2308      	movs	r3, #8
 801277e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012780:	2340      	movs	r3, #64	@ 0x40
 8012782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012784:	2300      	movs	r3, #0
 8012786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801278c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801278e:	f107 0308 	add.w	r3, r7, #8
 8012792:	4619      	mov	r1, r3
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff fe66 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 faf8 	bl	8012d90 <SDMMC_GetCmdResp7>
 80127a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127a2:	69fb      	ldr	r3, [r7, #28]
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3720      	adds	r7, #32
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b088      	sub	sp, #32
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80127ba:	2337      	movs	r3, #55	@ 0x37
 80127bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80127be:	2340      	movs	r3, #64	@ 0x40
 80127c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80127c2:	2300      	movs	r3, #0
 80127c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80127c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80127ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80127cc:	f107 0308 	add.w	r3, r7, #8
 80127d0:	4619      	mov	r1, r3
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff fe47 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80127d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80127dc:	2137      	movs	r1, #55	@ 0x37
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 f8ec 	bl	80129bc <SDMMC_GetCmdResp1>
 80127e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127e6:	69fb      	ldr	r3, [r7, #28]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3720      	adds	r7, #32
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012806:	2329      	movs	r3, #41	@ 0x29
 8012808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801280a:	2340      	movs	r3, #64	@ 0x40
 801280c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801280e:	2300      	movs	r3, #0
 8012810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012818:	f107 0308 	add.w	r3, r7, #8
 801281c:	4619      	mov	r1, r3
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f7ff fe21 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 f9ff 	bl	8012c28 <SDMMC_GetCmdResp3>
 801282a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801282c:	69fb      	ldr	r3, [r7, #28]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3720      	adds	r7, #32
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b088      	sub	sp, #32
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012844:	2306      	movs	r3, #6
 8012846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012848:	2340      	movs	r3, #64	@ 0x40
 801284a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801284c:	2300      	movs	r3, #0
 801284e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012854:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012856:	f107 0308 	add.w	r3, r7, #8
 801285a:	4619      	mov	r1, r3
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f7ff fe02 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8012862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012866:	2106      	movs	r1, #6
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 f8a7 	bl	80129bc <SDMMC_GetCmdResp1>
 801286e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012870:	69fb      	ldr	r3, [r7, #28]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3720      	adds	r7, #32
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b088      	sub	sp, #32
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012882:	2300      	movs	r3, #0
 8012884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012886:	2333      	movs	r3, #51	@ 0x33
 8012888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801288a:	2340      	movs	r3, #64	@ 0x40
 801288c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801288e:	2300      	movs	r3, #0
 8012890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012898:	f107 0308 	add.w	r3, r7, #8
 801289c:	4619      	mov	r1, r3
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7ff fde1 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80128a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80128a8:	2133      	movs	r1, #51	@ 0x33
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 f886 	bl	80129bc <SDMMC_GetCmdResp1>
 80128b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128b2:	69fb      	ldr	r3, [r7, #28]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3720      	adds	r7, #32
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b088      	sub	sp, #32
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80128c4:	2300      	movs	r3, #0
 80128c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80128c8:	2302      	movs	r3, #2
 80128ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80128cc:	23c0      	movs	r3, #192	@ 0xc0
 80128ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80128d0:	2300      	movs	r3, #0
 80128d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80128d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80128da:	f107 0308 	add.w	r3, r7, #8
 80128de:	4619      	mov	r1, r3
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff fdc0 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f956 	bl	8012b98 <SDMMC_GetCmdResp2>
 80128ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128ee:	69fb      	ldr	r3, [r7, #28]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b088      	sub	sp, #32
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012906:	2309      	movs	r3, #9
 8012908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801290a:	23c0      	movs	r3, #192	@ 0xc0
 801290c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801290e:	2300      	movs	r3, #0
 8012910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012918:	f107 0308 	add.w	r3, r7, #8
 801291c:	4619      	mov	r1, r3
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff fda1 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f000 f937 	bl	8012b98 <SDMMC_GetCmdResp2>
 801292a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801292c:	69fb      	ldr	r3, [r7, #28]
}
 801292e:	4618      	mov	r0, r3
 8012930:	3720      	adds	r7, #32
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b088      	sub	sp, #32
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012940:	2300      	movs	r3, #0
 8012942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012944:	2303      	movs	r3, #3
 8012946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012948:	2340      	movs	r3, #64	@ 0x40
 801294a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801294c:	2300      	movs	r3, #0
 801294e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012954:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012956:	f107 0308 	add.w	r3, r7, #8
 801295a:	4619      	mov	r1, r3
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f7ff fd82 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	2103      	movs	r1, #3
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 f99c 	bl	8012ca4 <SDMMC_GetCmdResp6>
 801296c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801296e:	69fb      	ldr	r3, [r7, #28]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3720      	adds	r7, #32
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b088      	sub	sp, #32
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012986:	230d      	movs	r3, #13
 8012988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801298a:	2340      	movs	r3, #64	@ 0x40
 801298c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801298e:	2300      	movs	r3, #0
 8012990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012998:	f107 0308 	add.w	r3, r7, #8
 801299c:	4619      	mov	r1, r3
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff fd61 	bl	8012466 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80129a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80129a8:	210d      	movs	r1, #13
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f000 f806 	bl	80129bc <SDMMC_GetCmdResp1>
 80129b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129b2:	69fb      	ldr	r3, [r7, #28]
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3720      	adds	r7, #32
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b088      	sub	sp, #32
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	460b      	mov	r3, r1
 80129c6:	607a      	str	r2, [r7, #4]
 80129c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129ca:	4b70      	ldr	r3, [pc, #448]	@ (8012b8c <SDMMC_GetCmdResp1+0x1d0>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a70      	ldr	r2, [pc, #448]	@ (8012b90 <SDMMC_GetCmdResp1+0x1d4>)
 80129d0:	fba2 2303 	umull	r2, r3, r2, r3
 80129d4:	0a5a      	lsrs	r2, r3, #9
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	fb02 f303 	mul.w	r3, r2, r3
 80129dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	1e5a      	subs	r2, r3, #1
 80129e2:	61fa      	str	r2, [r7, #28]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80129ec:	e0c9      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d0ef      	beq.n	80129de <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80129fe:	69bb      	ldr	r3, [r7, #24]
 8012a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1ea      	bne.n	80129de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a0c:	f003 0304 	and.w	r3, r3, #4
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d004      	beq.n	8012a1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2204      	movs	r2, #4
 8012a18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a1a:	2304      	movs	r3, #4
 8012a1c:	e0b1      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a22:	f003 0301 	and.w	r3, r3, #1
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d004      	beq.n	8012a34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a30:	2301      	movs	r3, #1
 8012a32:	e0a6      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	22c5      	movs	r2, #197	@ 0xc5
 8012a38:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f7ff fd3d 	bl	80124ba <SDIO_GetCommandResponse>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	7afb      	ldrb	r3, [r7, #11]
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d001      	beq.n	8012a4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	e099      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012a4e:	2100      	movs	r1, #0
 8012a50:	68f8      	ldr	r0, [r7, #12]
 8012a52:	f7ff fd3f 	bl	80124d4 <SDIO_GetResponse>
 8012a56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012a58:	697a      	ldr	r2, [r7, #20]
 8012a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8012b94 <SDMMC_GetCmdResp1+0x1d8>)
 8012a5c:	4013      	ands	r3, r2
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d101      	bne.n	8012a66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012a62:	2300      	movs	r3, #0
 8012a64:	e08d      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	da02      	bge.n	8012a72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012a70:	e087      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d001      	beq.n	8012a80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012a7c:	2340      	movs	r3, #64	@ 0x40
 8012a7e:	e080      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d001      	beq.n	8012a8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012a8a:	2380      	movs	r3, #128	@ 0x80
 8012a8c:	e079      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d002      	beq.n	8012a9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012a9c:	e071      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012aac:	e069      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d002      	beq.n	8012abe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012abc:	e061      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d002      	beq.n	8012ace <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012ac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012acc:	e059      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012adc:	e051      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012aec:	e049      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d002      	beq.n	8012afe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012af8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012afc:	e041      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d002      	beq.n	8012b0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b0c:	e039      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8012b1c:	e031      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d002      	beq.n	8012b2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8012b2c:	e029      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012b3c:	e021      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d002      	beq.n	8012b4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012b4c:	e019      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d002      	beq.n	8012b5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012b58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012b5c:	e011      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d002      	beq.n	8012b6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012b68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012b6c:	e009      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	f003 0308 	and.w	r3, r3, #8
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012b78:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8012b7c:	e001      	b.n	8012b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	200000f4 	.word	0x200000f4
 8012b90:	10624dd3 	.word	0x10624dd3
 8012b94:	fdffe008 	.word	0xfdffe008

08012b98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8012c20 <SDMMC_GetCmdResp2+0x88>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8012c24 <SDMMC_GetCmdResp2+0x8c>)
 8012ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8012baa:	0a5b      	lsrs	r3, r3, #9
 8012bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012bb0:	fb02 f303 	mul.w	r3, r2, r3
 8012bb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	1e5a      	subs	r2, r3, #1
 8012bba:	60fa      	str	r2, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d102      	bne.n	8012bc6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012bc4:	e026      	b.n	8012c14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d0ef      	beq.n	8012bb6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d1ea      	bne.n	8012bb6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012be4:	f003 0304 	and.w	r3, r3, #4
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d004      	beq.n	8012bf6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2204      	movs	r2, #4
 8012bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012bf2:	2304      	movs	r3, #4
 8012bf4:	e00e      	b.n	8012c14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012bfa:	f003 0301 	and.w	r3, r3, #1
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d004      	beq.n	8012c0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	e003      	b.n	8012c14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	22c5      	movs	r2, #197	@ 0xc5
 8012c10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3714      	adds	r7, #20
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr
 8012c20:	200000f4 	.word	0x200000f4
 8012c24:	10624dd3 	.word	0x10624dd3

08012c28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b085      	sub	sp, #20
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c30:	4b1a      	ldr	r3, [pc, #104]	@ (8012c9c <SDMMC_GetCmdResp3+0x74>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a1a      	ldr	r2, [pc, #104]	@ (8012ca0 <SDMMC_GetCmdResp3+0x78>)
 8012c36:	fba2 2303 	umull	r2, r3, r2, r3
 8012c3a:	0a5b      	lsrs	r3, r3, #9
 8012c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c40:	fb02 f303 	mul.w	r3, r2, r3
 8012c44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	1e5a      	subs	r2, r3, #1
 8012c4a:	60fa      	str	r2, [r7, #12]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d102      	bne.n	8012c56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012c54:	e01b      	b.n	8012c8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d0ef      	beq.n	8012c46 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1ea      	bne.n	8012c46 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c74:	f003 0304 	and.w	r3, r3, #4
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d004      	beq.n	8012c86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2204      	movs	r2, #4
 8012c80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c82:	2304      	movs	r3, #4
 8012c84:	e003      	b.n	8012c8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	22c5      	movs	r2, #197	@ 0xc5
 8012c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012c8c:	2300      	movs	r3, #0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3714      	adds	r7, #20
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	200000f4 	.word	0x200000f4
 8012ca0:	10624dd3 	.word	0x10624dd3

08012ca4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	460b      	mov	r3, r1
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cb2:	4b35      	ldr	r3, [pc, #212]	@ (8012d88 <SDMMC_GetCmdResp6+0xe4>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a35      	ldr	r2, [pc, #212]	@ (8012d8c <SDMMC_GetCmdResp6+0xe8>)
 8012cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8012cbc:	0a5b      	lsrs	r3, r3, #9
 8012cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cc2:	fb02 f303 	mul.w	r3, r2, r3
 8012cc6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	1e5a      	subs	r2, r3, #1
 8012ccc:	61fa      	str	r2, [r7, #28]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d102      	bne.n	8012cd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012cd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012cd6:	e052      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cdc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012cde:	69bb      	ldr	r3, [r7, #24]
 8012ce0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d0ef      	beq.n	8012cc8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d1ea      	bne.n	8012cc8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cf6:	f003 0304 	and.w	r3, r3, #4
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d004      	beq.n	8012d08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2204      	movs	r2, #4
 8012d02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d04:	2304      	movs	r3, #4
 8012d06:	e03a      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d0c:	f003 0301 	and.w	r3, r3, #1
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d004      	beq.n	8012d1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2201      	movs	r2, #1
 8012d18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e02f      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f7ff fbcb 	bl	80124ba <SDIO_GetCommandResponse>
 8012d24:	4603      	mov	r3, r0
 8012d26:	461a      	mov	r2, r3
 8012d28:	7afb      	ldrb	r3, [r7, #11]
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d001      	beq.n	8012d32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e025      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	22c5      	movs	r2, #197	@ 0xc5
 8012d36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012d38:	2100      	movs	r1, #0
 8012d3a:	68f8      	ldr	r0, [r7, #12]
 8012d3c:	f7ff fbca 	bl	80124d4 <SDIO_GetResponse>
 8012d40:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d106      	bne.n	8012d5a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	0c1b      	lsrs	r3, r3, #16
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012d56:	2300      	movs	r3, #0
 8012d58:	e011      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012d68:	e009      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d78:	e001      	b.n	8012d7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3720      	adds	r7, #32
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	200000f4 	.word	0x200000f4
 8012d8c:	10624dd3 	.word	0x10624dd3

08012d90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b085      	sub	sp, #20
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d98:	4b22      	ldr	r3, [pc, #136]	@ (8012e24 <SDMMC_GetCmdResp7+0x94>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a22      	ldr	r2, [pc, #136]	@ (8012e28 <SDMMC_GetCmdResp7+0x98>)
 8012d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8012da2:	0a5b      	lsrs	r3, r3, #9
 8012da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012da8:	fb02 f303 	mul.w	r3, r2, r3
 8012dac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	1e5a      	subs	r2, r3, #1
 8012db2:	60fa      	str	r2, [r7, #12]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d102      	bne.n	8012dbe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012db8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012dbc:	e02c      	b.n	8012e18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012dc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d0ef      	beq.n	8012dae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d1ea      	bne.n	8012dae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ddc:	f003 0304 	and.w	r3, r3, #4
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d004      	beq.n	8012dee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2204      	movs	r2, #4
 8012de8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012dea:	2304      	movs	r3, #4
 8012dec:	e014      	b.n	8012e18 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012df2:	f003 0301 	and.w	r3, r3, #1
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d004      	beq.n	8012e04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e00:	2301      	movs	r3, #1
 8012e02:	e009      	b.n	8012e18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2240      	movs	r2, #64	@ 0x40
 8012e14:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012e16:	2300      	movs	r3, #0
  
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3714      	adds	r7, #20
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr
 8012e24:	200000f4 	.word	0x200000f4
 8012e28:	10624dd3 	.word	0x10624dd3

08012e2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b085      	sub	sp, #20
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012e34:	4b11      	ldr	r3, [pc, #68]	@ (8012e7c <SDMMC_GetCmdError+0x50>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a11      	ldr	r2, [pc, #68]	@ (8012e80 <SDMMC_GetCmdError+0x54>)
 8012e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e3e:	0a5b      	lsrs	r3, r3, #9
 8012e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e44:	fb02 f303 	mul.w	r3, r2, r3
 8012e48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	1e5a      	subs	r2, r3, #1
 8012e4e:	60fa      	str	r2, [r7, #12]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d102      	bne.n	8012e5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012e58:	e009      	b.n	8012e6e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d0f1      	beq.n	8012e4a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	22c5      	movs	r2, #197	@ 0xc5
 8012e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8012e6c:	2300      	movs	r3, #0
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3714      	adds	r7, #20
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop
 8012e7c:	200000f4 	.word	0x200000f4
 8012e80:	10624dd3 	.word	0x10624dd3

08012e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012e84:	b084      	sub	sp, #16
 8012e86:	b580      	push	{r7, lr}
 8012e88:	b084      	sub	sp, #16
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	f107 001c 	add.w	r0, r7, #28
 8012e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d122      	bne.n	8012ee2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ea0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8012eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d105      	bne.n	8012ed6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	68db      	ldr	r3, [r3, #12]
 8012ece:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f001 fbee 	bl	80146b8 <USB_CoreReset>
 8012edc:	4603      	mov	r3, r0
 8012ede:	73fb      	strb	r3, [r7, #15]
 8012ee0:	e01a      	b.n	8012f18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f001 fbe2 	bl	80146b8 <USB_CoreReset>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8012f0a:	e005      	b.n	8012f18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d10b      	bne.n	8012f36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	f043 0206 	orr.w	r2, r3, #6
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	689b      	ldr	r3, [r3, #8]
 8012f2e:	f043 0220 	orr.w	r2, r3, #32
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f42:	b004      	add	sp, #16
 8012f44:	4770      	bx	lr
	...

08012f48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b087      	sub	sp, #28
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	4613      	mov	r3, r2
 8012f54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012f56:	79fb      	ldrb	r3, [r7, #7]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d165      	bne.n	8013028 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	4a41      	ldr	r2, [pc, #260]	@ (8013064 <USB_SetTurnaroundTime+0x11c>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d906      	bls.n	8012f72 <USB_SetTurnaroundTime+0x2a>
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	4a40      	ldr	r2, [pc, #256]	@ (8013068 <USB_SetTurnaroundTime+0x120>)
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d202      	bcs.n	8012f72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012f6c:	230f      	movs	r3, #15
 8012f6e:	617b      	str	r3, [r7, #20]
 8012f70:	e062      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	4a3c      	ldr	r2, [pc, #240]	@ (8013068 <USB_SetTurnaroundTime+0x120>)
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d306      	bcc.n	8012f88 <USB_SetTurnaroundTime+0x40>
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	4a3b      	ldr	r2, [pc, #236]	@ (801306c <USB_SetTurnaroundTime+0x124>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d202      	bcs.n	8012f88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f82:	230e      	movs	r3, #14
 8012f84:	617b      	str	r3, [r7, #20]
 8012f86:	e057      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	4a38      	ldr	r2, [pc, #224]	@ (801306c <USB_SetTurnaroundTime+0x124>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d306      	bcc.n	8012f9e <USB_SetTurnaroundTime+0x56>
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	4a37      	ldr	r2, [pc, #220]	@ (8013070 <USB_SetTurnaroundTime+0x128>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d202      	bcs.n	8012f9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f98:	230d      	movs	r3, #13
 8012f9a:	617b      	str	r3, [r7, #20]
 8012f9c:	e04c      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	4a33      	ldr	r2, [pc, #204]	@ (8013070 <USB_SetTurnaroundTime+0x128>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d306      	bcc.n	8012fb4 <USB_SetTurnaroundTime+0x6c>
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	4a32      	ldr	r2, [pc, #200]	@ (8013074 <USB_SetTurnaroundTime+0x12c>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d802      	bhi.n	8012fb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012fae:	230c      	movs	r3, #12
 8012fb0:	617b      	str	r3, [r7, #20]
 8012fb2:	e041      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8013074 <USB_SetTurnaroundTime+0x12c>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d906      	bls.n	8012fca <USB_SetTurnaroundTime+0x82>
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8013078 <USB_SetTurnaroundTime+0x130>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d802      	bhi.n	8012fca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012fc4:	230b      	movs	r3, #11
 8012fc6:	617b      	str	r3, [r7, #20]
 8012fc8:	e036      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8013078 <USB_SetTurnaroundTime+0x130>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d906      	bls.n	8012fe0 <USB_SetTurnaroundTime+0x98>
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	4a29      	ldr	r2, [pc, #164]	@ (801307c <USB_SetTurnaroundTime+0x134>)
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d802      	bhi.n	8012fe0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012fda:	230a      	movs	r3, #10
 8012fdc:	617b      	str	r3, [r7, #20]
 8012fde:	e02b      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	4a26      	ldr	r2, [pc, #152]	@ (801307c <USB_SetTurnaroundTime+0x134>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d906      	bls.n	8012ff6 <USB_SetTurnaroundTime+0xae>
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	4a25      	ldr	r2, [pc, #148]	@ (8013080 <USB_SetTurnaroundTime+0x138>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d202      	bcs.n	8012ff6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012ff0:	2309      	movs	r3, #9
 8012ff2:	617b      	str	r3, [r7, #20]
 8012ff4:	e020      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	4a21      	ldr	r2, [pc, #132]	@ (8013080 <USB_SetTurnaroundTime+0x138>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d306      	bcc.n	801300c <USB_SetTurnaroundTime+0xc4>
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	4a20      	ldr	r2, [pc, #128]	@ (8013084 <USB_SetTurnaroundTime+0x13c>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d802      	bhi.n	801300c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013006:	2308      	movs	r3, #8
 8013008:	617b      	str	r3, [r7, #20]
 801300a:	e015      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	4a1d      	ldr	r2, [pc, #116]	@ (8013084 <USB_SetTurnaroundTime+0x13c>)
 8013010:	4293      	cmp	r3, r2
 8013012:	d906      	bls.n	8013022 <USB_SetTurnaroundTime+0xda>
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	4a1c      	ldr	r2, [pc, #112]	@ (8013088 <USB_SetTurnaroundTime+0x140>)
 8013018:	4293      	cmp	r3, r2
 801301a:	d202      	bcs.n	8013022 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801301c:	2307      	movs	r3, #7
 801301e:	617b      	str	r3, [r7, #20]
 8013020:	e00a      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013022:	2306      	movs	r3, #6
 8013024:	617b      	str	r3, [r7, #20]
 8013026:	e007      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013028:	79fb      	ldrb	r3, [r7, #7]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d102      	bne.n	8013034 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801302e:	2309      	movs	r3, #9
 8013030:	617b      	str	r3, [r7, #20]
 8013032:	e001      	b.n	8013038 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013034:	2309      	movs	r3, #9
 8013036:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	68da      	ldr	r2, [r3, #12]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	029b      	lsls	r3, r3, #10
 801304c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8013050:	431a      	orrs	r2, r3
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013056:	2300      	movs	r3, #0
}
 8013058:	4618      	mov	r0, r3
 801305a:	371c      	adds	r7, #28
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr
 8013064:	00d8acbf 	.word	0x00d8acbf
 8013068:	00e4e1c0 	.word	0x00e4e1c0
 801306c:	00f42400 	.word	0x00f42400
 8013070:	01067380 	.word	0x01067380
 8013074:	011a499f 	.word	0x011a499f
 8013078:	01312cff 	.word	0x01312cff
 801307c:	014ca43f 	.word	0x014ca43f
 8013080:	016e3600 	.word	0x016e3600
 8013084:	01a6ab1f 	.word	0x01a6ab1f
 8013088:	01e84800 	.word	0x01e84800

0801308c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801308c:	b480      	push	{r7}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	689b      	ldr	r3, [r3, #8]
 8013098:	f043 0201 	orr.w	r2, r3, #1
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80130a0:	2300      	movs	r3, #0
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	370c      	adds	r7, #12
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr

080130ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80130ae:	b480      	push	{r7}
 80130b0:	b083      	sub	sp, #12
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	689b      	ldr	r3, [r3, #8]
 80130ba:	f023 0201 	bic.w	r2, r3, #1
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80130c2:	2300      	movs	r3, #0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr

080130d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b084      	sub	sp, #16
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80130dc:	2300      	movs	r3, #0
 80130de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80130ec:	78fb      	ldrb	r3, [r7, #3]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d115      	bne.n	801311e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130fe:	2001      	movs	r0, #1
 8013100:	f7f7 fb28 	bl	800a754 <HAL_Delay>
      ms++;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	3301      	adds	r3, #1
 8013108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f001 fa45 	bl	801459a <USB_GetMode>
 8013110:	4603      	mov	r3, r0
 8013112:	2b01      	cmp	r3, #1
 8013114:	d01e      	beq.n	8013154 <USB_SetCurrentMode+0x84>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2b31      	cmp	r3, #49	@ 0x31
 801311a:	d9f0      	bls.n	80130fe <USB_SetCurrentMode+0x2e>
 801311c:	e01a      	b.n	8013154 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801311e:	78fb      	ldrb	r3, [r7, #3]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d115      	bne.n	8013150 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013130:	2001      	movs	r0, #1
 8013132:	f7f7 fb0f 	bl	800a754 <HAL_Delay>
      ms++;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	3301      	adds	r3, #1
 801313a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f001 fa2c 	bl	801459a <USB_GetMode>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d005      	beq.n	8013154 <USB_SetCurrentMode+0x84>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b31      	cmp	r3, #49	@ 0x31
 801314c:	d9f0      	bls.n	8013130 <USB_SetCurrentMode+0x60>
 801314e:	e001      	b.n	8013154 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013150:	2301      	movs	r3, #1
 8013152:	e005      	b.n	8013160 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2b32      	cmp	r3, #50	@ 0x32
 8013158:	d101      	bne.n	801315e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e000      	b.n	8013160 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801315e:	2300      	movs	r3, #0
}
 8013160:	4618      	mov	r0, r3
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013168:	b084      	sub	sp, #16
 801316a:	b580      	push	{r7, lr}
 801316c:	b086      	sub	sp, #24
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
 8013172:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801317a:	2300      	movs	r3, #0
 801317c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013182:	2300      	movs	r3, #0
 8013184:	613b      	str	r3, [r7, #16]
 8013186:	e009      	b.n	801319c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	3340      	adds	r3, #64	@ 0x40
 801318e:	009b      	lsls	r3, r3, #2
 8013190:	4413      	add	r3, r2
 8013192:	2200      	movs	r2, #0
 8013194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	3301      	adds	r3, #1
 801319a:	613b      	str	r3, [r7, #16]
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	2b0e      	cmp	r3, #14
 80131a0:	d9f2      	bls.n	8013188 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80131a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d11c      	bne.n	80131e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80131b6:	f043 0302 	orr.w	r3, r3, #2
 80131ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131cc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	639a      	str	r2, [r3, #56]	@ 0x38
 80131e0:	e00b      	b.n	80131fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013200:	461a      	mov	r2, r3
 8013202:	2300      	movs	r3, #0
 8013204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801320c:	4619      	mov	r1, r3
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013214:	461a      	mov	r2, r3
 8013216:	680b      	ldr	r3, [r1, #0]
 8013218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801321c:	2b01      	cmp	r3, #1
 801321e:	d10c      	bne.n	801323a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013222:	2b00      	cmp	r3, #0
 8013224:	d104      	bne.n	8013230 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013226:	2100      	movs	r1, #0
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 f965 	bl	80134f8 <USB_SetDevSpeed>
 801322e:	e008      	b.n	8013242 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013230:	2101      	movs	r1, #1
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f000 f960 	bl	80134f8 <USB_SetDevSpeed>
 8013238:	e003      	b.n	8013242 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801323a:	2103      	movs	r1, #3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 f95b 	bl	80134f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013242:	2110      	movs	r1, #16
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f000 f8f3 	bl	8013430 <USB_FlushTxFifo>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d001      	beq.n	8013254 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013250:	2301      	movs	r3, #1
 8013252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 f91f 	bl	8013498 <USB_FlushRxFifo>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013260:	2301      	movs	r3, #1
 8013262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801326a:	461a      	mov	r2, r3
 801326c:	2300      	movs	r3, #0
 801326e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013276:	461a      	mov	r2, r3
 8013278:	2300      	movs	r3, #0
 801327a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013282:	461a      	mov	r2, r3
 8013284:	2300      	movs	r3, #0
 8013286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013288:	2300      	movs	r3, #0
 801328a:	613b      	str	r3, [r7, #16]
 801328c:	e043      	b.n	8013316 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	015a      	lsls	r2, r3, #5
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	4413      	add	r3, r2
 8013296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80132a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80132a4:	d118      	bne.n	80132d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d10a      	bne.n	80132c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	015a      	lsls	r2, r3, #5
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4413      	add	r3, r2
 80132b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132b8:	461a      	mov	r2, r3
 80132ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80132be:	6013      	str	r3, [r2, #0]
 80132c0:	e013      	b.n	80132ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	015a      	lsls	r2, r3, #5
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	4413      	add	r3, r2
 80132ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132ce:	461a      	mov	r2, r3
 80132d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80132d4:	6013      	str	r3, [r2, #0]
 80132d6:	e008      	b.n	80132ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	015a      	lsls	r2, r3, #5
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	4413      	add	r3, r2
 80132e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132e4:	461a      	mov	r2, r3
 80132e6:	2300      	movs	r3, #0
 80132e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	015a      	lsls	r2, r3, #5
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	4413      	add	r3, r2
 80132f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80132f6:	461a      	mov	r2, r3
 80132f8:	2300      	movs	r3, #0
 80132fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	015a      	lsls	r2, r3, #5
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	4413      	add	r3, r2
 8013304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013308:	461a      	mov	r2, r3
 801330a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801330e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	3301      	adds	r3, #1
 8013314:	613b      	str	r3, [r7, #16]
 8013316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013318:	693a      	ldr	r2, [r7, #16]
 801331a:	429a      	cmp	r2, r3
 801331c:	d3b7      	bcc.n	801328e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801331e:	2300      	movs	r3, #0
 8013320:	613b      	str	r3, [r7, #16]
 8013322:	e043      	b.n	80133ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	015a      	lsls	r2, r3, #5
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	4413      	add	r3, r2
 801332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801333a:	d118      	bne.n	801336e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d10a      	bne.n	8013358 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	015a      	lsls	r2, r3, #5
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	4413      	add	r3, r2
 801334a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801334e:	461a      	mov	r2, r3
 8013350:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8013354:	6013      	str	r3, [r2, #0]
 8013356:	e013      	b.n	8013380 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	015a      	lsls	r2, r3, #5
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	4413      	add	r3, r2
 8013360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013364:	461a      	mov	r2, r3
 8013366:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801336a:	6013      	str	r3, [r2, #0]
 801336c:	e008      	b.n	8013380 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	015a      	lsls	r2, r3, #5
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	4413      	add	r3, r2
 8013376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801337a:	461a      	mov	r2, r3
 801337c:	2300      	movs	r3, #0
 801337e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	015a      	lsls	r2, r3, #5
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	4413      	add	r3, r2
 8013388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801338c:	461a      	mov	r2, r3
 801338e:	2300      	movs	r3, #0
 8013390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	015a      	lsls	r2, r3, #5
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	4413      	add	r3, r2
 801339a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801339e:	461a      	mov	r2, r3
 80133a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80133a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	3301      	adds	r3, #1
 80133aa:	613b      	str	r3, [r7, #16]
 80133ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ae:	693a      	ldr	r2, [r7, #16]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d3b7      	bcc.n	8013324 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133ba:	691b      	ldr	r3, [r3, #16]
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80133c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80133c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80133d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80133d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d105      	bne.n	80133e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	699b      	ldr	r3, [r3, #24]
 80133e0:	f043 0210 	orr.w	r2, r3, #16
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	699a      	ldr	r2, [r3, #24]
 80133ec:	4b0f      	ldr	r3, [pc, #60]	@ (801342c <USB_DevInit+0x2c4>)
 80133ee:	4313      	orrs	r3, r2
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80133f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d005      	beq.n	8013406 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	699b      	ldr	r3, [r3, #24]
 80133fe:	f043 0208 	orr.w	r2, r3, #8
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013408:	2b01      	cmp	r3, #1
 801340a:	d107      	bne.n	801341c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	699b      	ldr	r3, [r3, #24]
 8013410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013414:	f043 0304 	orr.w	r3, r3, #4
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801341c:	7dfb      	ldrb	r3, [r7, #23]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3718      	adds	r7, #24
 8013422:	46bd      	mov	sp, r7
 8013424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013428:	b004      	add	sp, #16
 801342a:	4770      	bx	lr
 801342c:	803c3800 	.word	0x803c3800

08013430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013430:	b480      	push	{r7}
 8013432:	b085      	sub	sp, #20
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801343a:	2300      	movs	r3, #0
 801343c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	3301      	adds	r3, #1
 8013442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	4a13      	ldr	r2, [pc, #76]	@ (8013494 <USB_FlushTxFifo+0x64>)
 8013448:	4293      	cmp	r3, r2
 801344a:	d901      	bls.n	8013450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801344c:	2303      	movs	r3, #3
 801344e:	e01b      	b.n	8013488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	691b      	ldr	r3, [r3, #16]
 8013454:	2b00      	cmp	r3, #0
 8013456:	daf2      	bge.n	801343e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013458:	2300      	movs	r3, #0
 801345a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	019b      	lsls	r3, r3, #6
 8013460:	f043 0220 	orr.w	r2, r3, #32
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	3301      	adds	r3, #1
 801346c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	4a08      	ldr	r2, [pc, #32]	@ (8013494 <USB_FlushTxFifo+0x64>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d901      	bls.n	801347a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013476:	2303      	movs	r3, #3
 8013478:	e006      	b.n	8013488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	f003 0320 	and.w	r3, r3, #32
 8013482:	2b20      	cmp	r3, #32
 8013484:	d0f0      	beq.n	8013468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013486:	2300      	movs	r3, #0
}
 8013488:	4618      	mov	r0, r3
 801348a:	3714      	adds	r7, #20
 801348c:	46bd      	mov	sp, r7
 801348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013492:	4770      	bx	lr
 8013494:	00030d40 	.word	0x00030d40

08013498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	3301      	adds	r3, #1
 80134a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	4a11      	ldr	r2, [pc, #68]	@ (80134f4 <USB_FlushRxFifo+0x5c>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d901      	bls.n	80134b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80134b2:	2303      	movs	r3, #3
 80134b4:	e018      	b.n	80134e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	691b      	ldr	r3, [r3, #16]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	daf2      	bge.n	80134a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80134be:	2300      	movs	r3, #0
 80134c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2210      	movs	r2, #16
 80134c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	3301      	adds	r3, #1
 80134cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	4a08      	ldr	r2, [pc, #32]	@ (80134f4 <USB_FlushRxFifo+0x5c>)
 80134d2:	4293      	cmp	r3, r2
 80134d4:	d901      	bls.n	80134da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80134d6:	2303      	movs	r3, #3
 80134d8:	e006      	b.n	80134e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	691b      	ldr	r3, [r3, #16]
 80134de:	f003 0310 	and.w	r3, r3, #16
 80134e2:	2b10      	cmp	r3, #16
 80134e4:	d0f0      	beq.n	80134c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80134e6:	2300      	movs	r3, #0
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3714      	adds	r7, #20
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr
 80134f4:	00030d40 	.word	0x00030d40

080134f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	460b      	mov	r3, r1
 8013502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	78fb      	ldrb	r3, [r7, #3]
 8013512:	68f9      	ldr	r1, [r7, #12]
 8013514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013518:	4313      	orrs	r3, r2
 801351a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801351c:	2300      	movs	r3, #0
}
 801351e:	4618      	mov	r0, r3
 8013520:	3714      	adds	r7, #20
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801352a:	b480      	push	{r7}
 801352c:	b087      	sub	sp, #28
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801353c:	689b      	ldr	r3, [r3, #8]
 801353e:	f003 0306 	and.w	r3, r3, #6
 8013542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d102      	bne.n	8013550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]
 801354e:	e00a      	b.n	8013566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2b02      	cmp	r3, #2
 8013554:	d002      	beq.n	801355c <USB_GetDevSpeed+0x32>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2b06      	cmp	r3, #6
 801355a:	d102      	bne.n	8013562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801355c:	2302      	movs	r3, #2
 801355e:	75fb      	strb	r3, [r7, #23]
 8013560:	e001      	b.n	8013566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013562:	230f      	movs	r3, #15
 8013564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013566:	7dfb      	ldrb	r3, [r7, #23]
}
 8013568:	4618      	mov	r0, r3
 801356a:	371c      	adds	r7, #28
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013574:	b480      	push	{r7}
 8013576:	b085      	sub	sp, #20
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	785b      	ldrb	r3, [r3, #1]
 801358c:	2b01      	cmp	r3, #1
 801358e:	d13a      	bne.n	8013606 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013596:	69da      	ldr	r2, [r3, #28]
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 030f 	and.w	r3, r3, #15
 80135a0:	2101      	movs	r1, #1
 80135a2:	fa01 f303 	lsl.w	r3, r1, r3
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	68f9      	ldr	r1, [r7, #12]
 80135aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80135ae:	4313      	orrs	r3, r2
 80135b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	015a      	lsls	r2, r3, #5
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	4413      	add	r3, r2
 80135ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d155      	bne.n	8013674 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	015a      	lsls	r2, r3, #5
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	4413      	add	r3, r2
 80135d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	791b      	ldrb	r3, [r3, #4]
 80135e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80135e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	059b      	lsls	r3, r3, #22
 80135ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80135ec:	4313      	orrs	r3, r2
 80135ee:	68ba      	ldr	r2, [r7, #8]
 80135f0:	0151      	lsls	r1, r2, #5
 80135f2:	68fa      	ldr	r2, [r7, #12]
 80135f4:	440a      	add	r2, r1
 80135f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80135fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80135fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013602:	6013      	str	r3, [r2, #0]
 8013604:	e036      	b.n	8013674 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801360c:	69da      	ldr	r2, [r3, #28]
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	f003 030f 	and.w	r3, r3, #15
 8013616:	2101      	movs	r1, #1
 8013618:	fa01 f303 	lsl.w	r3, r1, r3
 801361c:	041b      	lsls	r3, r3, #16
 801361e:	68f9      	ldr	r1, [r7, #12]
 8013620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013624:	4313      	orrs	r3, r2
 8013626:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	015a      	lsls	r2, r3, #5
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	4413      	add	r3, r2
 8013630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801363a:	2b00      	cmp	r3, #0
 801363c:	d11a      	bne.n	8013674 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	015a      	lsls	r2, r3, #5
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	4413      	add	r3, r2
 8013646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	791b      	ldrb	r3, [r3, #4]
 8013658:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801365a:	430b      	orrs	r3, r1
 801365c:	4313      	orrs	r3, r2
 801365e:	68ba      	ldr	r2, [r7, #8]
 8013660:	0151      	lsls	r1, r2, #5
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	440a      	add	r2, r1
 8013666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801366a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801366e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013672:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr
	...

08013684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013684:	b480      	push	{r7}
 8013686:	b085      	sub	sp, #20
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	785b      	ldrb	r3, [r3, #1]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d161      	bne.n	8013764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	015a      	lsls	r2, r3, #5
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	4413      	add	r3, r2
 80136a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80136b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80136b6:	d11f      	bne.n	80136f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	015a      	lsls	r2, r3, #5
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	4413      	add	r3, r2
 80136c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68ba      	ldr	r2, [r7, #8]
 80136c8:	0151      	lsls	r1, r2, #5
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	440a      	add	r2, r1
 80136ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80136d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	015a      	lsls	r2, r3, #5
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	4413      	add	r3, r2
 80136e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	0151      	lsls	r1, r2, #5
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	440a      	add	r2, r1
 80136ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80136f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80136f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80136fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	f003 030f 	and.w	r3, r3, #15
 8013708:	2101      	movs	r1, #1
 801370a:	fa01 f303 	lsl.w	r3, r1, r3
 801370e:	b29b      	uxth	r3, r3
 8013710:	43db      	mvns	r3, r3
 8013712:	68f9      	ldr	r1, [r7, #12]
 8013714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013718:	4013      	ands	r3, r2
 801371a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013722:	69da      	ldr	r2, [r3, #28]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	f003 030f 	and.w	r3, r3, #15
 801372c:	2101      	movs	r1, #1
 801372e:	fa01 f303 	lsl.w	r3, r1, r3
 8013732:	b29b      	uxth	r3, r3
 8013734:	43db      	mvns	r3, r3
 8013736:	68f9      	ldr	r1, [r7, #12]
 8013738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801373c:	4013      	ands	r3, r2
 801373e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	015a      	lsls	r2, r3, #5
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	4413      	add	r3, r2
 8013748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	0159      	lsls	r1, r3, #5
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	440b      	add	r3, r1
 8013756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801375a:	4619      	mov	r1, r3
 801375c:	4b35      	ldr	r3, [pc, #212]	@ (8013834 <USB_DeactivateEndpoint+0x1b0>)
 801375e:	4013      	ands	r3, r2
 8013760:	600b      	str	r3, [r1, #0]
 8013762:	e060      	b.n	8013826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	015a      	lsls	r2, r3, #5
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	4413      	add	r3, r2
 801376c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801377a:	d11f      	bne.n	80137bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	015a      	lsls	r2, r3, #5
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	4413      	add	r3, r2
 8013784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	0151      	lsls	r1, r2, #5
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	440a      	add	r2, r1
 8013792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801379a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	015a      	lsls	r2, r3, #5
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	68ba      	ldr	r2, [r7, #8]
 80137ac:	0151      	lsls	r1, r2, #5
 80137ae:	68fa      	ldr	r2, [r7, #12]
 80137b0:	440a      	add	r2, r1
 80137b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80137b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80137ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80137c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	f003 030f 	and.w	r3, r3, #15
 80137cc:	2101      	movs	r1, #1
 80137ce:	fa01 f303 	lsl.w	r3, r1, r3
 80137d2:	041b      	lsls	r3, r3, #16
 80137d4:	43db      	mvns	r3, r3
 80137d6:	68f9      	ldr	r1, [r7, #12]
 80137d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80137dc:	4013      	ands	r3, r2
 80137de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80137e6:	69da      	ldr	r2, [r3, #28]
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	f003 030f 	and.w	r3, r3, #15
 80137f0:	2101      	movs	r1, #1
 80137f2:	fa01 f303 	lsl.w	r3, r1, r3
 80137f6:	041b      	lsls	r3, r3, #16
 80137f8:	43db      	mvns	r3, r3
 80137fa:	68f9      	ldr	r1, [r7, #12]
 80137fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013800:	4013      	ands	r3, r2
 8013802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	015a      	lsls	r2, r3, #5
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	4413      	add	r3, r2
 801380c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	0159      	lsls	r1, r3, #5
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	440b      	add	r3, r1
 801381a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801381e:	4619      	mov	r1, r3
 8013820:	4b05      	ldr	r3, [pc, #20]	@ (8013838 <USB_DeactivateEndpoint+0x1b4>)
 8013822:	4013      	ands	r3, r2
 8013824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3714      	adds	r7, #20
 801382c:	46bd      	mov	sp, r7
 801382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013832:	4770      	bx	lr
 8013834:	ec337800 	.word	0xec337800
 8013838:	eff37800 	.word	0xeff37800

0801383c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b08a      	sub	sp, #40	@ 0x28
 8013840:	af02      	add	r7, sp, #8
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	4613      	mov	r3, r2
 8013848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b01      	cmp	r3, #1
 801385a:	f040 815c 	bne.w	8013b16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	699b      	ldr	r3, [r3, #24]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d132      	bne.n	80138cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	015a      	lsls	r2, r3, #5
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	4413      	add	r3, r2
 801386e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013872:	691b      	ldr	r3, [r3, #16]
 8013874:	69ba      	ldr	r2, [r7, #24]
 8013876:	0151      	lsls	r1, r2, #5
 8013878:	69fa      	ldr	r2, [r7, #28]
 801387a:	440a      	add	r2, r1
 801387c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013880:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013884:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	015a      	lsls	r2, r3, #5
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	4413      	add	r3, r2
 8013892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013896:	691b      	ldr	r3, [r3, #16]
 8013898:	69ba      	ldr	r2, [r7, #24]
 801389a:	0151      	lsls	r1, r2, #5
 801389c:	69fa      	ldr	r2, [r7, #28]
 801389e:	440a      	add	r2, r1
 80138a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80138a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	015a      	lsls	r2, r3, #5
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	4413      	add	r3, r2
 80138b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138b6:	691b      	ldr	r3, [r3, #16]
 80138b8:	69ba      	ldr	r2, [r7, #24]
 80138ba:	0151      	lsls	r1, r2, #5
 80138bc:	69fa      	ldr	r2, [r7, #28]
 80138be:	440a      	add	r2, r1
 80138c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138c4:	0cdb      	lsrs	r3, r3, #19
 80138c6:	04db      	lsls	r3, r3, #19
 80138c8:	6113      	str	r3, [r2, #16]
 80138ca:	e074      	b.n	80139b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	69ba      	ldr	r2, [r7, #24]
 80138dc:	0151      	lsls	r1, r2, #5
 80138de:	69fa      	ldr	r2, [r7, #28]
 80138e0:	440a      	add	r2, r1
 80138e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138e6:	0cdb      	lsrs	r3, r3, #19
 80138e8:	04db      	lsls	r3, r3, #19
 80138ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	015a      	lsls	r2, r3, #5
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	4413      	add	r3, r2
 80138f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	69ba      	ldr	r2, [r7, #24]
 80138fc:	0151      	lsls	r1, r2, #5
 80138fe:	69fa      	ldr	r2, [r7, #28]
 8013900:	440a      	add	r2, r1
 8013902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013906:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801390a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801390e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801391c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	6999      	ldr	r1, [r3, #24]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	440b      	add	r3, r1
 8013928:	1e59      	subs	r1, r3, #1
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013932:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013934:	4b9d      	ldr	r3, [pc, #628]	@ (8013bac <USB_EPStartXfer+0x370>)
 8013936:	400b      	ands	r3, r1
 8013938:	69b9      	ldr	r1, [r7, #24]
 801393a:	0148      	lsls	r0, r1, #5
 801393c:	69f9      	ldr	r1, [r7, #28]
 801393e:	4401      	add	r1, r0
 8013940:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013944:	4313      	orrs	r3, r2
 8013946:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	4413      	add	r3, r2
 8013950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013954:	691a      	ldr	r2, [r3, #16]
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801395e:	69b9      	ldr	r1, [r7, #24]
 8013960:	0148      	lsls	r0, r1, #5
 8013962:	69f9      	ldr	r1, [r7, #28]
 8013964:	4401      	add	r1, r0
 8013966:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801396a:	4313      	orrs	r3, r2
 801396c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	791b      	ldrb	r3, [r3, #4]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d11f      	bne.n	80139b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	015a      	lsls	r2, r3, #5
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	4413      	add	r3, r2
 801397e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	69ba      	ldr	r2, [r7, #24]
 8013986:	0151      	lsls	r1, r2, #5
 8013988:	69fa      	ldr	r2, [r7, #28]
 801398a:	440a      	add	r2, r1
 801398c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013990:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8013994:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	015a      	lsls	r2, r3, #5
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	4413      	add	r3, r2
 801399e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139a2:	691b      	ldr	r3, [r3, #16]
 80139a4:	69ba      	ldr	r2, [r7, #24]
 80139a6:	0151      	lsls	r1, r2, #5
 80139a8:	69fa      	ldr	r2, [r7, #28]
 80139aa:	440a      	add	r2, r1
 80139ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80139b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d14b      	bne.n	8013a54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	695b      	ldr	r3, [r3, #20]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d009      	beq.n	80139d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139d0:	461a      	mov	r2, r3
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	695b      	ldr	r3, [r3, #20]
 80139d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	791b      	ldrb	r3, [r3, #4]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d128      	bne.n	8013a32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139e6:	689b      	ldr	r3, [r3, #8]
 80139e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d110      	bne.n	8013a12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	015a      	lsls	r2, r3, #5
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	4413      	add	r3, r2
 80139f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	69ba      	ldr	r2, [r7, #24]
 8013a00:	0151      	lsls	r1, r2, #5
 8013a02:	69fa      	ldr	r2, [r7, #28]
 8013a04:	440a      	add	r2, r1
 8013a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013a0e:	6013      	str	r3, [r2, #0]
 8013a10:	e00f      	b.n	8013a32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	015a      	lsls	r2, r3, #5
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	4413      	add	r3, r2
 8013a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	69ba      	ldr	r2, [r7, #24]
 8013a22:	0151      	lsls	r1, r2, #5
 8013a24:	69fa      	ldr	r2, [r7, #28]
 8013a26:	440a      	add	r2, r1
 8013a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	015a      	lsls	r2, r3, #5
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	4413      	add	r3, r2
 8013a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	0151      	lsls	r1, r2, #5
 8013a44:	69fa      	ldr	r2, [r7, #28]
 8013a46:	440a      	add	r2, r1
 8013a48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013a50:	6013      	str	r3, [r2, #0]
 8013a52:	e133      	b.n	8013cbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a54:	69bb      	ldr	r3, [r7, #24]
 8013a56:	015a      	lsls	r2, r3, #5
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	69ba      	ldr	r2, [r7, #24]
 8013a64:	0151      	lsls	r1, r2, #5
 8013a66:	69fa      	ldr	r2, [r7, #28]
 8013a68:	440a      	add	r2, r1
 8013a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013a6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013a72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	791b      	ldrb	r3, [r3, #4]
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d015      	beq.n	8013aa8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	699b      	ldr	r3, [r3, #24]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f000 811b 	beq.w	8013cbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	f003 030f 	and.w	r3, r3, #15
 8013a96:	2101      	movs	r1, #1
 8013a98:	fa01 f303 	lsl.w	r3, r1, r3
 8013a9c:	69f9      	ldr	r1, [r7, #28]
 8013a9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013aa2:	4313      	orrs	r3, r2
 8013aa4:	634b      	str	r3, [r1, #52]	@ 0x34
 8013aa6:	e109      	b.n	8013cbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013aae:	689b      	ldr	r3, [r3, #8]
 8013ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d110      	bne.n	8013ada <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	015a      	lsls	r2, r3, #5
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	4413      	add	r3, r2
 8013ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	69ba      	ldr	r2, [r7, #24]
 8013ac8:	0151      	lsls	r1, r2, #5
 8013aca:	69fa      	ldr	r2, [r7, #28]
 8013acc:	440a      	add	r2, r1
 8013ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ad2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013ad6:	6013      	str	r3, [r2, #0]
 8013ad8:	e00f      	b.n	8013afa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	015a      	lsls	r2, r3, #5
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	69ba      	ldr	r2, [r7, #24]
 8013aea:	0151      	lsls	r1, r2, #5
 8013aec:	69fa      	ldr	r2, [r7, #28]
 8013aee:	440a      	add	r2, r1
 8013af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013af8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	6919      	ldr	r1, [r3, #16]
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	781a      	ldrb	r2, [r3, #0]
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	699b      	ldr	r3, [r3, #24]
 8013b06:	b298      	uxth	r0, r3
 8013b08:	79fb      	ldrb	r3, [r7, #7]
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f000 fade 	bl	80140d0 <USB_WritePacket>
 8013b14:	e0d2      	b.n	8013cbc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	015a      	lsls	r2, r3, #5
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b22:	691b      	ldr	r3, [r3, #16]
 8013b24:	69ba      	ldr	r2, [r7, #24]
 8013b26:	0151      	lsls	r1, r2, #5
 8013b28:	69fa      	ldr	r2, [r7, #28]
 8013b2a:	440a      	add	r2, r1
 8013b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b30:	0cdb      	lsrs	r3, r3, #19
 8013b32:	04db      	lsls	r3, r3, #19
 8013b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	015a      	lsls	r2, r3, #5
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b42:	691b      	ldr	r3, [r3, #16]
 8013b44:	69ba      	ldr	r2, [r7, #24]
 8013b46:	0151      	lsls	r1, r2, #5
 8013b48:	69fa      	ldr	r2, [r7, #28]
 8013b4a:	440a      	add	r2, r1
 8013b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013b54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013b58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	699b      	ldr	r3, [r3, #24]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d126      	bne.n	8013bb0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	015a      	lsls	r2, r3, #5
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	4413      	add	r3, r2
 8013b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b6e:	691a      	ldr	r2, [r3, #16]
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b78:	69b9      	ldr	r1, [r7, #24]
 8013b7a:	0148      	lsls	r0, r1, #5
 8013b7c:	69f9      	ldr	r1, [r7, #28]
 8013b7e:	4401      	add	r1, r0
 8013b80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b84:	4313      	orrs	r3, r2
 8013b86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	015a      	lsls	r2, r3, #5
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b94:	691b      	ldr	r3, [r3, #16]
 8013b96:	69ba      	ldr	r2, [r7, #24]
 8013b98:	0151      	lsls	r1, r2, #5
 8013b9a:	69fa      	ldr	r2, [r7, #28]
 8013b9c:	440a      	add	r2, r1
 8013b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ba2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013ba6:	6113      	str	r3, [r2, #16]
 8013ba8:	e03a      	b.n	8013c20 <USB_EPStartXfer+0x3e4>
 8013baa:	bf00      	nop
 8013bac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	699a      	ldr	r2, [r3, #24]
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	4413      	add	r3, r2
 8013bba:	1e5a      	subs	r2, r3, #1
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bc4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	8afa      	ldrh	r2, [r7, #22]
 8013bcc:	fb03 f202 	mul.w	r2, r3, r2
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	015a      	lsls	r2, r3, #5
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	4413      	add	r3, r2
 8013bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013be0:	691a      	ldr	r2, [r3, #16]
 8013be2:	8afb      	ldrh	r3, [r7, #22]
 8013be4:	04d9      	lsls	r1, r3, #19
 8013be6:	4b38      	ldr	r3, [pc, #224]	@ (8013cc8 <USB_EPStartXfer+0x48c>)
 8013be8:	400b      	ands	r3, r1
 8013bea:	69b9      	ldr	r1, [r7, #24]
 8013bec:	0148      	lsls	r0, r1, #5
 8013bee:	69f9      	ldr	r1, [r7, #28]
 8013bf0:	4401      	add	r1, r0
 8013bf2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c06:	691a      	ldr	r2, [r3, #16]
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	69db      	ldr	r3, [r3, #28]
 8013c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c10:	69b9      	ldr	r1, [r7, #24]
 8013c12:	0148      	lsls	r0, r1, #5
 8013c14:	69f9      	ldr	r1, [r7, #28]
 8013c16:	4401      	add	r1, r0
 8013c18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013c20:	79fb      	ldrb	r3, [r7, #7]
 8013c22:	2b01      	cmp	r3, #1
 8013c24:	d10d      	bne.n	8013c42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	691b      	ldr	r3, [r3, #16]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d009      	beq.n	8013c42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	6919      	ldr	r1, [r3, #16]
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	015a      	lsls	r2, r3, #5
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	4413      	add	r3, r2
 8013c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c3e:	460a      	mov	r2, r1
 8013c40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	791b      	ldrb	r3, [r3, #4]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d128      	bne.n	8013c9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c50:	689b      	ldr	r3, [r3, #8]
 8013c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d110      	bne.n	8013c7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	015a      	lsls	r2, r3, #5
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	4413      	add	r3, r2
 8013c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	69ba      	ldr	r2, [r7, #24]
 8013c6a:	0151      	lsls	r1, r2, #5
 8013c6c:	69fa      	ldr	r2, [r7, #28]
 8013c6e:	440a      	add	r2, r1
 8013c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013c78:	6013      	str	r3, [r2, #0]
 8013c7a:	e00f      	b.n	8013c9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013c7c:	69bb      	ldr	r3, [r7, #24]
 8013c7e:	015a      	lsls	r2, r3, #5
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	4413      	add	r3, r2
 8013c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	69ba      	ldr	r2, [r7, #24]
 8013c8c:	0151      	lsls	r1, r2, #5
 8013c8e:	69fa      	ldr	r2, [r7, #28]
 8013c90:	440a      	add	r2, r1
 8013c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013c9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	015a      	lsls	r2, r3, #5
 8013ca0:	69fb      	ldr	r3, [r7, #28]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	69ba      	ldr	r2, [r7, #24]
 8013cac:	0151      	lsls	r1, r2, #5
 8013cae:	69fa      	ldr	r2, [r7, #28]
 8013cb0:	440a      	add	r2, r1
 8013cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013cb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3720      	adds	r7, #32
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	1ff80000 	.word	0x1ff80000

08013ccc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b087      	sub	sp, #28
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	4613      	mov	r3, r2
 8013cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	785b      	ldrb	r3, [r3, #1]
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	f040 80ce 	bne.w	8013e8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	699b      	ldr	r3, [r3, #24]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d132      	bne.n	8013d5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	015a      	lsls	r2, r3, #5
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	0151      	lsls	r1, r2, #5
 8013d08:	697a      	ldr	r2, [r7, #20]
 8013d0a:	440a      	add	r2, r1
 8013d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013d14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	015a      	lsls	r2, r3, #5
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	4413      	add	r3, r2
 8013d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d26:	691b      	ldr	r3, [r3, #16]
 8013d28:	693a      	ldr	r2, [r7, #16]
 8013d2a:	0151      	lsls	r1, r2, #5
 8013d2c:	697a      	ldr	r2, [r7, #20]
 8013d2e:	440a      	add	r2, r1
 8013d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	015a      	lsls	r2, r3, #5
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	4413      	add	r3, r2
 8013d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d46:	691b      	ldr	r3, [r3, #16]
 8013d48:	693a      	ldr	r2, [r7, #16]
 8013d4a:	0151      	lsls	r1, r2, #5
 8013d4c:	697a      	ldr	r2, [r7, #20]
 8013d4e:	440a      	add	r2, r1
 8013d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d54:	0cdb      	lsrs	r3, r3, #19
 8013d56:	04db      	lsls	r3, r3, #19
 8013d58:	6113      	str	r3, [r2, #16]
 8013d5a:	e04e      	b.n	8013dfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	015a      	lsls	r2, r3, #5
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	4413      	add	r3, r2
 8013d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d68:	691b      	ldr	r3, [r3, #16]
 8013d6a:	693a      	ldr	r2, [r7, #16]
 8013d6c:	0151      	lsls	r1, r2, #5
 8013d6e:	697a      	ldr	r2, [r7, #20]
 8013d70:	440a      	add	r2, r1
 8013d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d76:	0cdb      	lsrs	r3, r3, #19
 8013d78:	04db      	lsls	r3, r3, #19
 8013d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	015a      	lsls	r2, r3, #5
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	4413      	add	r3, r2
 8013d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	693a      	ldr	r2, [r7, #16]
 8013d8c:	0151      	lsls	r1, r2, #5
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	440a      	add	r2, r1
 8013d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013d96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013d9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013d9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	699a      	ldr	r2, [r3, #24]
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d903      	bls.n	8013db4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	68da      	ldr	r2, [r3, #12]
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	015a      	lsls	r2, r3, #5
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	4413      	add	r3, r2
 8013dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013dc0:	691b      	ldr	r3, [r3, #16]
 8013dc2:	693a      	ldr	r2, [r7, #16]
 8013dc4:	0151      	lsls	r1, r2, #5
 8013dc6:	697a      	ldr	r2, [r7, #20]
 8013dc8:	440a      	add	r2, r1
 8013dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013dce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	015a      	lsls	r2, r3, #5
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	4413      	add	r3, r2
 8013ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013de0:	691a      	ldr	r2, [r3, #16]
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	699b      	ldr	r3, [r3, #24]
 8013de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013dea:	6939      	ldr	r1, [r7, #16]
 8013dec:	0148      	lsls	r0, r1, #5
 8013dee:	6979      	ldr	r1, [r7, #20]
 8013df0:	4401      	add	r1, r0
 8013df2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013df6:	4313      	orrs	r3, r2
 8013df8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013dfa:	79fb      	ldrb	r3, [r7, #7]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d11e      	bne.n	8013e3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	695b      	ldr	r3, [r3, #20]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d009      	beq.n	8013e1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	015a      	lsls	r2, r3, #5
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	4413      	add	r3, r2
 8013e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e14:	461a      	mov	r2, r3
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	695b      	ldr	r3, [r3, #20]
 8013e1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	015a      	lsls	r2, r3, #5
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	4413      	add	r3, r2
 8013e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	693a      	ldr	r2, [r7, #16]
 8013e2c:	0151      	lsls	r1, r2, #5
 8013e2e:	697a      	ldr	r2, [r7, #20]
 8013e30:	440a      	add	r2, r1
 8013e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013e36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	e097      	b.n	8013f6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	015a      	lsls	r2, r3, #5
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	4413      	add	r3, r2
 8013e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	693a      	ldr	r2, [r7, #16]
 8013e4e:	0151      	lsls	r1, r2, #5
 8013e50:	697a      	ldr	r2, [r7, #20]
 8013e52:	440a      	add	r2, r1
 8013e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013e58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013e5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f000 8083 	beq.w	8013f6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	f003 030f 	and.w	r3, r3, #15
 8013e78:	2101      	movs	r1, #1
 8013e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e7e:	6979      	ldr	r1, [r7, #20]
 8013e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013e84:	4313      	orrs	r3, r2
 8013e86:	634b      	str	r3, [r1, #52]	@ 0x34
 8013e88:	e071      	b.n	8013f6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	015a      	lsls	r2, r3, #5
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	4413      	add	r3, r2
 8013e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e96:	691b      	ldr	r3, [r3, #16]
 8013e98:	693a      	ldr	r2, [r7, #16]
 8013e9a:	0151      	lsls	r1, r2, #5
 8013e9c:	697a      	ldr	r2, [r7, #20]
 8013e9e:	440a      	add	r2, r1
 8013ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ea4:	0cdb      	lsrs	r3, r3, #19
 8013ea6:	04db      	lsls	r3, r3, #19
 8013ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	015a      	lsls	r2, r3, #5
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013eb6:	691b      	ldr	r3, [r3, #16]
 8013eb8:	693a      	ldr	r2, [r7, #16]
 8013eba:	0151      	lsls	r1, r2, #5
 8013ebc:	697a      	ldr	r2, [r7, #20]
 8013ebe:	440a      	add	r2, r1
 8013ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ec4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013ec8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8013ecc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	699b      	ldr	r3, [r3, #24]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d003      	beq.n	8013ede <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	68da      	ldr	r2, [r3, #12]
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	68da      	ldr	r2, [r3, #12]
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	015a      	lsls	r2, r3, #5
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	4413      	add	r3, r2
 8013eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	693a      	ldr	r2, [r7, #16]
 8013ef6:	0151      	lsls	r1, r2, #5
 8013ef8:	697a      	ldr	r2, [r7, #20]
 8013efa:	440a      	add	r2, r1
 8013efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	015a      	lsls	r2, r3, #5
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f12:	691a      	ldr	r2, [r3, #16]
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	69db      	ldr	r3, [r3, #28]
 8013f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f1c:	6939      	ldr	r1, [r7, #16]
 8013f1e:	0148      	lsls	r0, r1, #5
 8013f20:	6979      	ldr	r1, [r7, #20]
 8013f22:	4401      	add	r1, r0
 8013f24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013f2c:	79fb      	ldrb	r3, [r7, #7]
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d10d      	bne.n	8013f4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	691b      	ldr	r3, [r3, #16]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d009      	beq.n	8013f4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	6919      	ldr	r1, [r3, #16]
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	015a      	lsls	r2, r3, #5
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	4413      	add	r3, r2
 8013f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f4a:	460a      	mov	r2, r1
 8013f4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	015a      	lsls	r2, r3, #5
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	4413      	add	r3, r2
 8013f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	693a      	ldr	r2, [r7, #16]
 8013f5e:	0151      	lsls	r1, r2, #5
 8013f60:	697a      	ldr	r2, [r7, #20]
 8013f62:	440a      	add	r2, r1
 8013f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013f6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f6e:	2300      	movs	r3, #0
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	371c      	adds	r7, #28
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr

08013f7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b087      	sub	sp, #28
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013f86:	2300      	movs	r3, #0
 8013f88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	785b      	ldrb	r3, [r3, #1]
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d14a      	bne.n	8014030 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	015a      	lsls	r2, r3, #5
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	4413      	add	r3, r2
 8013fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013fb2:	f040 8086 	bne.w	80140c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	015a      	lsls	r2, r3, #5
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	683a      	ldr	r2, [r7, #0]
 8013fc8:	7812      	ldrb	r2, [r2, #0]
 8013fca:	0151      	lsls	r1, r2, #5
 8013fcc:	693a      	ldr	r2, [r7, #16]
 8013fce:	440a      	add	r2, r1
 8013fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013fd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013fd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	015a      	lsls	r2, r3, #5
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	4413      	add	r3, r2
 8013fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	683a      	ldr	r2, [r7, #0]
 8013fec:	7812      	ldrb	r2, [r2, #0]
 8013fee:	0151      	lsls	r1, r2, #5
 8013ff0:	693a      	ldr	r2, [r7, #16]
 8013ff2:	440a      	add	r2, r1
 8013ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	3301      	adds	r3, #1
 8014002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f242 7210 	movw	r2, #10000	@ 0x2710
 801400a:	4293      	cmp	r3, r2
 801400c:	d902      	bls.n	8014014 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801400e:	2301      	movs	r3, #1
 8014010:	75fb      	strb	r3, [r7, #23]
          break;
 8014012:	e056      	b.n	80140c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	015a      	lsls	r2, r3, #5
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	4413      	add	r3, r2
 801401e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801402c:	d0e7      	beq.n	8013ffe <USB_EPStopXfer+0x82>
 801402e:	e048      	b.n	80140c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	015a      	lsls	r2, r3, #5
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	4413      	add	r3, r2
 801403a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014048:	d13b      	bne.n	80140c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	015a      	lsls	r2, r3, #5
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	4413      	add	r3, r2
 8014054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	7812      	ldrb	r2, [r2, #0]
 801405e:	0151      	lsls	r1, r2, #5
 8014060:	693a      	ldr	r2, [r7, #16]
 8014062:	440a      	add	r2, r1
 8014064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014068:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801406c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	015a      	lsls	r2, r3, #5
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	4413      	add	r3, r2
 8014078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	683a      	ldr	r2, [r7, #0]
 8014080:	7812      	ldrb	r2, [r2, #0]
 8014082:	0151      	lsls	r1, r2, #5
 8014084:	693a      	ldr	r2, [r7, #16]
 8014086:	440a      	add	r2, r1
 8014088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801408c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014090:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	3301      	adds	r3, #1
 8014096:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801409e:	4293      	cmp	r3, r2
 80140a0:	d902      	bls.n	80140a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80140a2:	2301      	movs	r3, #1
 80140a4:	75fb      	strb	r3, [r7, #23]
          break;
 80140a6:	e00c      	b.n	80140c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	015a      	lsls	r2, r3, #5
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	4413      	add	r3, r2
 80140b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80140bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80140c0:	d0e7      	beq.n	8014092 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80140c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	371c      	adds	r7, #28
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr

080140d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b089      	sub	sp, #36	@ 0x24
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	4611      	mov	r1, r2
 80140dc:	461a      	mov	r2, r3
 80140de:	460b      	mov	r3, r1
 80140e0:	71fb      	strb	r3, [r7, #7]
 80140e2:	4613      	mov	r3, r2
 80140e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80140ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d123      	bne.n	801413e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80140f6:	88bb      	ldrh	r3, [r7, #4]
 80140f8:	3303      	adds	r3, #3
 80140fa:	089b      	lsrs	r3, r3, #2
 80140fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80140fe:	2300      	movs	r3, #0
 8014100:	61bb      	str	r3, [r7, #24]
 8014102:	e018      	b.n	8014136 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014104:	79fb      	ldrb	r3, [r7, #7]
 8014106:	031a      	lsls	r2, r3, #12
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	4413      	add	r3, r2
 801410c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014110:	461a      	mov	r2, r3
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	3301      	adds	r3, #1
 801411c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	3301      	adds	r3, #1
 8014122:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	3301      	adds	r3, #1
 8014128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	3301      	adds	r3, #1
 801412e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	3301      	adds	r3, #1
 8014134:	61bb      	str	r3, [r7, #24]
 8014136:	69ba      	ldr	r2, [r7, #24]
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	429a      	cmp	r2, r3
 801413c:	d3e2      	bcc.n	8014104 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801413e:	2300      	movs	r3, #0
}
 8014140:	4618      	mov	r0, r3
 8014142:	3724      	adds	r7, #36	@ 0x24
 8014144:	46bd      	mov	sp, r7
 8014146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414a:	4770      	bx	lr

0801414c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801414c:	b480      	push	{r7}
 801414e:	b08b      	sub	sp, #44	@ 0x2c
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	4613      	mov	r3, r2
 8014158:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014162:	88fb      	ldrh	r3, [r7, #6]
 8014164:	089b      	lsrs	r3, r3, #2
 8014166:	b29b      	uxth	r3, r3
 8014168:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801416a:	88fb      	ldrh	r3, [r7, #6]
 801416c:	f003 0303 	and.w	r3, r3, #3
 8014170:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014172:	2300      	movs	r3, #0
 8014174:	623b      	str	r3, [r7, #32]
 8014176:	e014      	b.n	80141a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014182:	601a      	str	r2, [r3, #0]
    pDest++;
 8014184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014186:	3301      	adds	r3, #1
 8014188:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801418c:	3301      	adds	r3, #1
 801418e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014192:	3301      	adds	r3, #1
 8014194:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8014196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014198:	3301      	adds	r3, #1
 801419a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801419c:	6a3b      	ldr	r3, [r7, #32]
 801419e:	3301      	adds	r3, #1
 80141a0:	623b      	str	r3, [r7, #32]
 80141a2:	6a3a      	ldr	r2, [r7, #32]
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d3e6      	bcc.n	8014178 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80141aa:	8bfb      	ldrh	r3, [r7, #30]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d01e      	beq.n	80141ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80141b0:	2300      	movs	r3, #0
 80141b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80141ba:	461a      	mov	r2, r3
 80141bc:	f107 0310 	add.w	r3, r7, #16
 80141c0:	6812      	ldr	r2, [r2, #0]
 80141c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80141c4:	693a      	ldr	r2, [r7, #16]
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	fa22 f303 	lsr.w	r3, r2, r3
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d4:	701a      	strb	r2, [r3, #0]
      i++;
 80141d6:	6a3b      	ldr	r3, [r7, #32]
 80141d8:	3301      	adds	r3, #1
 80141da:	623b      	str	r3, [r7, #32]
      pDest++;
 80141dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141de:	3301      	adds	r3, #1
 80141e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80141e2:	8bfb      	ldrh	r3, [r7, #30]
 80141e4:	3b01      	subs	r3, #1
 80141e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80141e8:	8bfb      	ldrh	r3, [r7, #30]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d1ea      	bne.n	80141c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80141ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	372c      	adds	r7, #44	@ 0x2c
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr

080141fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	785b      	ldrb	r3, [r3, #1]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d12c      	bne.n	8014272 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	015a      	lsls	r2, r3, #5
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	4413      	add	r3, r2
 8014220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	2b00      	cmp	r3, #0
 8014228:	db12      	blt.n	8014250 <USB_EPSetStall+0x54>
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d00f      	beq.n	8014250 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	015a      	lsls	r2, r3, #5
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	4413      	add	r3, r2
 8014238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	0151      	lsls	r1, r2, #5
 8014242:	68fa      	ldr	r2, [r7, #12]
 8014244:	440a      	add	r2, r1
 8014246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801424a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801424e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	015a      	lsls	r2, r3, #5
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	4413      	add	r3, r2
 8014258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	0151      	lsls	r1, r2, #5
 8014262:	68fa      	ldr	r2, [r7, #12]
 8014264:	440a      	add	r2, r1
 8014266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801426a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801426e:	6013      	str	r3, [r2, #0]
 8014270:	e02b      	b.n	80142ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	015a      	lsls	r2, r3, #5
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	4413      	add	r3, r2
 801427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	2b00      	cmp	r3, #0
 8014282:	db12      	blt.n	80142aa <USB_EPSetStall+0xae>
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00f      	beq.n	80142aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	015a      	lsls	r2, r3, #5
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	4413      	add	r3, r2
 8014292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	68ba      	ldr	r2, [r7, #8]
 801429a:	0151      	lsls	r1, r2, #5
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	440a      	add	r2, r1
 80142a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80142a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80142a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	015a      	lsls	r2, r3, #5
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	4413      	add	r3, r2
 80142b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	68ba      	ldr	r2, [r7, #8]
 80142ba:	0151      	lsls	r1, r2, #5
 80142bc:	68fa      	ldr	r2, [r7, #12]
 80142be:	440a      	add	r2, r1
 80142c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80142c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80142c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80142ca:	2300      	movs	r3, #0
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3714      	adds	r7, #20
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80142d8:	b480      	push	{r7}
 80142da:	b085      	sub	sp, #20
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	785b      	ldrb	r3, [r3, #1]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d128      	bne.n	8014346 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	015a      	lsls	r2, r3, #5
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	4413      	add	r3, r2
 80142fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	68ba      	ldr	r2, [r7, #8]
 8014304:	0151      	lsls	r1, r2, #5
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	440a      	add	r2, r1
 801430a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801430e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014312:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	791b      	ldrb	r3, [r3, #4]
 8014318:	2b03      	cmp	r3, #3
 801431a:	d003      	beq.n	8014324 <USB_EPClearStall+0x4c>
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	791b      	ldrb	r3, [r3, #4]
 8014320:	2b02      	cmp	r3, #2
 8014322:	d138      	bne.n	8014396 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	015a      	lsls	r2, r3, #5
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	4413      	add	r3, r2
 801432c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	68ba      	ldr	r2, [r7, #8]
 8014334:	0151      	lsls	r1, r2, #5
 8014336:	68fa      	ldr	r2, [r7, #12]
 8014338:	440a      	add	r2, r1
 801433a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014342:	6013      	str	r3, [r2, #0]
 8014344:	e027      	b.n	8014396 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	015a      	lsls	r2, r3, #5
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	4413      	add	r3, r2
 801434e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	68ba      	ldr	r2, [r7, #8]
 8014356:	0151      	lsls	r1, r2, #5
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	440a      	add	r2, r1
 801435c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014360:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014364:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	791b      	ldrb	r3, [r3, #4]
 801436a:	2b03      	cmp	r3, #3
 801436c:	d003      	beq.n	8014376 <USB_EPClearStall+0x9e>
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	791b      	ldrb	r3, [r3, #4]
 8014372:	2b02      	cmp	r3, #2
 8014374:	d10f      	bne.n	8014396 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	015a      	lsls	r2, r3, #5
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	4413      	add	r3, r2
 801437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	68ba      	ldr	r2, [r7, #8]
 8014386:	0151      	lsls	r1, r2, #5
 8014388:	68fa      	ldr	r2, [r7, #12]
 801438a:	440a      	add	r2, r1
 801438c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014394:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014396:	2300      	movs	r3, #0
}
 8014398:	4618      	mov	r0, r3
 801439a:	3714      	adds	r7, #20
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	460b      	mov	r3, r1
 80143ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80143c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80143c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	011b      	lsls	r3, r3, #4
 80143d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80143d8:	68f9      	ldr	r1, [r7, #12]
 80143da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80143de:	4313      	orrs	r3, r2
 80143e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3714      	adds	r7, #20
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	68fa      	ldr	r2, [r7, #12]
 8014406:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801440a:	f023 0303 	bic.w	r3, r3, #3
 801440e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801441e:	f023 0302 	bic.w	r3, r3, #2
 8014422:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014432:	b480      	push	{r7}
 8014434:	b085      	sub	sp, #20
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801444c:	f023 0303 	bic.w	r3, r3, #3
 8014450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014460:	f043 0302 	orr.w	r3, r3, #2
 8014464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014466:	2300      	movs	r3, #0
}
 8014468:	4618      	mov	r0, r3
 801446a:	3714      	adds	r7, #20
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr

08014474 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014474:	b480      	push	{r7}
 8014476:	b085      	sub	sp, #20
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	699b      	ldr	r3, [r3, #24]
 8014486:	68fa      	ldr	r2, [r7, #12]
 8014488:	4013      	ands	r3, r2
 801448a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801448c:	68fb      	ldr	r3, [r7, #12]
}
 801448e:	4618      	mov	r0, r3
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801449a:	b480      	push	{r7}
 801449c:	b085      	sub	sp, #20
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144ac:	699b      	ldr	r3, [r3, #24]
 80144ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144b6:	69db      	ldr	r3, [r3, #28]
 80144b8:	68ba      	ldr	r2, [r7, #8]
 80144ba:	4013      	ands	r3, r2
 80144bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	0c1b      	lsrs	r3, r3, #16
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3714      	adds	r7, #20
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80144ce:	b480      	push	{r7}
 80144d0:	b085      	sub	sp, #20
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144e0:	699b      	ldr	r3, [r3, #24]
 80144e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144ea:	69db      	ldr	r3, [r3, #28]
 80144ec:	68ba      	ldr	r2, [r7, #8]
 80144ee:	4013      	ands	r3, r2
 80144f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	b29b      	uxth	r3, r3
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3714      	adds	r7, #20
 80144fa:	46bd      	mov	sp, r7
 80144fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014500:	4770      	bx	lr

08014502 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014502:	b480      	push	{r7}
 8014504:	b085      	sub	sp, #20
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
 801450a:	460b      	mov	r3, r1
 801450c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014512:	78fb      	ldrb	r3, [r7, #3]
 8014514:	015a      	lsls	r2, r3, #5
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	4413      	add	r3, r2
 801451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801451e:	689b      	ldr	r3, [r3, #8]
 8014520:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014528:	695b      	ldr	r3, [r3, #20]
 801452a:	68ba      	ldr	r2, [r7, #8]
 801452c:	4013      	ands	r3, r2
 801452e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014530:	68bb      	ldr	r3, [r7, #8]
}
 8014532:	4618      	mov	r0, r3
 8014534:	3714      	adds	r7, #20
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr

0801453e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801453e:	b480      	push	{r7}
 8014540:	b087      	sub	sp, #28
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	460b      	mov	r3, r1
 8014548:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014554:	691b      	ldr	r3, [r3, #16]
 8014556:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014560:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014562:	78fb      	ldrb	r3, [r7, #3]
 8014564:	f003 030f 	and.w	r3, r3, #15
 8014568:	68fa      	ldr	r2, [r7, #12]
 801456a:	fa22 f303 	lsr.w	r3, r2, r3
 801456e:	01db      	lsls	r3, r3, #7
 8014570:	b2db      	uxtb	r3, r3
 8014572:	693a      	ldr	r2, [r7, #16]
 8014574:	4313      	orrs	r3, r2
 8014576:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014578:	78fb      	ldrb	r3, [r7, #3]
 801457a:	015a      	lsls	r2, r3, #5
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	4413      	add	r3, r2
 8014580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014584:	689b      	ldr	r3, [r3, #8]
 8014586:	693a      	ldr	r2, [r7, #16]
 8014588:	4013      	ands	r3, r2
 801458a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801458c:	68bb      	ldr	r3, [r7, #8]
}
 801458e:	4618      	mov	r0, r3
 8014590:	371c      	adds	r7, #28
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801459a:	b480      	push	{r7}
 801459c:	b083      	sub	sp, #12
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	695b      	ldr	r3, [r3, #20]
 80145a6:	f003 0301 	and.w	r3, r3, #1
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	370c      	adds	r7, #12
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr

080145b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80145b6:	b480      	push	{r7}
 80145b8:	b085      	sub	sp, #20
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	68fa      	ldr	r2, [r7, #12]
 80145cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80145d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80145d4:	f023 0307 	bic.w	r3, r3, #7
 80145d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80145e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80145ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b087      	sub	sp, #28
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	460b      	mov	r3, r1
 8014606:	607a      	str	r2, [r7, #4]
 8014608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	333c      	adds	r3, #60	@ 0x3c
 8014612:	3304      	adds	r3, #4
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	4a26      	ldr	r2, [pc, #152]	@ (80146b4 <USB_EP0_OutStart+0xb8>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d90a      	bls.n	8014636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801462c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014630:	d101      	bne.n	8014636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014632:	2300      	movs	r3, #0
 8014634:	e037      	b.n	80146a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801463c:	461a      	mov	r2, r3
 801463e:	2300      	movs	r3, #0
 8014640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014648:	691b      	ldr	r3, [r3, #16]
 801464a:	697a      	ldr	r2, [r7, #20]
 801464c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801465c:	691b      	ldr	r3, [r3, #16]
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014664:	f043 0318 	orr.w	r3, r3, #24
 8014668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014670:	691b      	ldr	r3, [r3, #16]
 8014672:	697a      	ldr	r2, [r7, #20]
 8014674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014678:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801467c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801467e:	7afb      	ldrb	r3, [r7, #11]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d10f      	bne.n	80146a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801468a:	461a      	mov	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	697a      	ldr	r2, [r7, #20]
 801469a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801469e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80146a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	371c      	adds	r7, #28
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	4f54300a 	.word	0x4f54300a

080146b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146c0:	2300      	movs	r3, #0
 80146c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	3301      	adds	r3, #1
 80146c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	4a13      	ldr	r2, [pc, #76]	@ (801471c <USB_CoreReset+0x64>)
 80146ce:	4293      	cmp	r3, r2
 80146d0:	d901      	bls.n	80146d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80146d2:	2303      	movs	r3, #3
 80146d4:	e01b      	b.n	801470e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	daf2      	bge.n	80146c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80146de:	2300      	movs	r3, #0
 80146e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	691b      	ldr	r3, [r3, #16]
 80146e6:	f043 0201 	orr.w	r2, r3, #1
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	3301      	adds	r3, #1
 80146f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	4a09      	ldr	r2, [pc, #36]	@ (801471c <USB_CoreReset+0x64>)
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d901      	bls.n	8014700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80146fc:	2303      	movs	r3, #3
 80146fe:	e006      	b.n	801470e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	691b      	ldr	r3, [r3, #16]
 8014704:	f003 0301 	and.w	r3, r3, #1
 8014708:	2b01      	cmp	r3, #1
 801470a:	d0f0      	beq.n	80146ee <USB_CoreReset+0x36>

  return HAL_OK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3714      	adds	r7, #20
 8014712:	46bd      	mov	sp, r7
 8014714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop
 801471c:	00030d40 	.word	0x00030d40

08014720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014724:	4904      	ldr	r1, [pc, #16]	@ (8014738 <MX_FATFS_Init+0x18>)
 8014726:	4805      	ldr	r0, [pc, #20]	@ (801473c <MX_FATFS_Init+0x1c>)
 8014728:	f002 f96c 	bl	8016a04 <FATFS_LinkDriver>
 801472c:	4603      	mov	r3, r0
 801472e:	461a      	mov	r2, r3
 8014730:	4b03      	ldr	r3, [pc, #12]	@ (8014740 <MX_FATFS_Init+0x20>)
 8014732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014734:	bf00      	nop
 8014736:	bd80      	pop	{r7, pc}
 8014738:	20001b10 	.word	0x20001b10
 801473c:	0801d580 	.word	0x0801d580
 8014740:	20001b0c 	.word	0x20001b0c

08014744 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801474a:	2300      	movs	r3, #0
 801474c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801474e:	f000 f879 	bl	8014844 <BSP_SD_IsDetected>
 8014752:	4603      	mov	r3, r0
 8014754:	2b01      	cmp	r3, #1
 8014756:	d001      	beq.n	801475c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	e012      	b.n	8014782 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801475c:	480b      	ldr	r0, [pc, #44]	@ (801478c <BSP_SD_Init+0x48>)
 801475e:	f7fb f91f 	bl	800f9a0 <HAL_SD_Init>
 8014762:	4603      	mov	r3, r0
 8014764:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014766:	79fb      	ldrb	r3, [r7, #7]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d109      	bne.n	8014780 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801476c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014770:	4806      	ldr	r0, [pc, #24]	@ (801478c <BSP_SD_Init+0x48>)
 8014772:	f7fb fef9 	bl	8010568 <HAL_SD_ConfigWideBusOperation>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d001      	beq.n	8014780 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801477c:	2301      	movs	r3, #1
 801477e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014780:	79fb      	ldrb	r3, [r7, #7]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	20000714 	.word	0x20000714

08014790 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b088      	sub	sp, #32
 8014794:	af02      	add	r7, sp, #8
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	607a      	str	r2, [r7, #4]
 801479c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801479e:	2300      	movs	r3, #0
 80147a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	68f9      	ldr	r1, [r7, #12]
 80147ac:	4806      	ldr	r0, [pc, #24]	@ (80147c8 <BSP_SD_ReadBlocks+0x38>)
 80147ae:	f7fb f9a7 	bl	800fb00 <HAL_SD_ReadBlocks>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d001      	beq.n	80147bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80147b8:	2301      	movs	r3, #1
 80147ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80147bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3718      	adds	r7, #24
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	20000714 	.word	0x20000714

080147cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b088      	sub	sp, #32
 80147d0:	af02      	add	r7, sp, #8
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	607a      	str	r2, [r7, #4]
 80147d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80147da:	2300      	movs	r3, #0
 80147dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	9300      	str	r3, [sp, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	68ba      	ldr	r2, [r7, #8]
 80147e6:	68f9      	ldr	r1, [r7, #12]
 80147e8:	4806      	ldr	r0, [pc, #24]	@ (8014804 <BSP_SD_WriteBlocks+0x38>)
 80147ea:	f7fb fb67 	bl	800febc <HAL_SD_WriteBlocks>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d001      	beq.n	80147f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80147f4:	2301      	movs	r3, #1
 80147f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80147f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3718      	adds	r7, #24
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	20000714 	.word	0x20000714

08014808 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801480c:	4805      	ldr	r0, [pc, #20]	@ (8014824 <BSP_SD_GetCardState+0x1c>)
 801480e:	f7fb ff45 	bl	801069c <HAL_SD_GetCardState>
 8014812:	4603      	mov	r3, r0
 8014814:	2b04      	cmp	r3, #4
 8014816:	bf14      	ite	ne
 8014818:	2301      	movne	r3, #1
 801481a:	2300      	moveq	r3, #0
 801481c:	b2db      	uxtb	r3, r3
}
 801481e:	4618      	mov	r0, r3
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	20000714 	.word	0x20000714

08014828 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8014830:	6879      	ldr	r1, [r7, #4]
 8014832:	4803      	ldr	r0, [pc, #12]	@ (8014840 <BSP_SD_GetCardInfo+0x18>)
 8014834:	f7fb fe6c 	bl	8010510 <HAL_SD_GetCardInfo>
}
 8014838:	bf00      	nop
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	20000714 	.word	0x20000714

08014844 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801484a:	2301      	movs	r3, #1
 801484c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801484e:	f000 f80b 	bl	8014868 <BSP_PlatformIsDetected>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d101      	bne.n	801485c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014858:	2300      	movs	r3, #0
 801485a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801485c:	79fb      	ldrb	r3, [r7, #7]
 801485e:	b2db      	uxtb	r3, r3
}
 8014860:	4618      	mov	r0, r3
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801486e:	2301      	movs	r3, #1
 8014870:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014876:	4806      	ldr	r0, [pc, #24]	@ (8014890 <BSP_PlatformIsDetected+0x28>)
 8014878:	f7f7 fbc8 	bl	800c00c <HAL_GPIO_ReadPin>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d001      	beq.n	8014886 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8014882:	2300      	movs	r3, #0
 8014884:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014886:	79fb      	ldrb	r3, [r7, #7]
}
 8014888:	4618      	mov	r0, r3
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	40020000 	.word	0x40020000

08014894 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	4603      	mov	r3, r0
 801489c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801489e:	4b0b      	ldr	r3, [pc, #44]	@ (80148cc <SD_CheckStatus+0x38>)
 80148a0:	2201      	movs	r2, #1
 80148a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80148a4:	f7ff ffb0 	bl	8014808 <BSP_SD_GetCardState>
 80148a8:	4603      	mov	r3, r0
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d107      	bne.n	80148be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80148ae:	4b07      	ldr	r3, [pc, #28]	@ (80148cc <SD_CheckStatus+0x38>)
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	f023 0301 	bic.w	r3, r3, #1
 80148b8:	b2da      	uxtb	r2, r3
 80148ba:	4b04      	ldr	r3, [pc, #16]	@ (80148cc <SD_CheckStatus+0x38>)
 80148bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80148be:	4b03      	ldr	r3, [pc, #12]	@ (80148cc <SD_CheckStatus+0x38>)
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	b2db      	uxtb	r3, r3
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	200000fd 	.word	0x200000fd

080148d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	4603      	mov	r3, r0
 80148d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80148da:	4b0b      	ldr	r3, [pc, #44]	@ (8014908 <SD_initialize+0x38>)
 80148dc:	2201      	movs	r2, #1
 80148de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80148e0:	f7ff ff30 	bl	8014744 <BSP_SD_Init>
 80148e4:	4603      	mov	r3, r0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d107      	bne.n	80148fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80148ea:	79fb      	ldrb	r3, [r7, #7]
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7ff ffd1 	bl	8014894 <SD_CheckStatus>
 80148f2:	4603      	mov	r3, r0
 80148f4:	461a      	mov	r2, r3
 80148f6:	4b04      	ldr	r3, [pc, #16]	@ (8014908 <SD_initialize+0x38>)
 80148f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80148fa:	4b03      	ldr	r3, [pc, #12]	@ (8014908 <SD_initialize+0x38>)
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	b2db      	uxtb	r3, r3
}
 8014900:	4618      	mov	r0, r3
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	200000fd 	.word	0x200000fd

0801490c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	4603      	mov	r3, r0
 8014914:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014916:	79fb      	ldrb	r3, [r7, #7]
 8014918:	4618      	mov	r0, r3
 801491a:	f7ff ffbb 	bl	8014894 <SD_CheckStatus>
 801491e:	4603      	mov	r3, r0
}
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b086      	sub	sp, #24
 801492c:	af00      	add	r7, sp, #0
 801492e:	60b9      	str	r1, [r7, #8]
 8014930:	607a      	str	r2, [r7, #4]
 8014932:	603b      	str	r3, [r7, #0]
 8014934:	4603      	mov	r3, r0
 8014936:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014938:	2301      	movs	r3, #1
 801493a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801493c:	f04f 33ff 	mov.w	r3, #4294967295
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	68b8      	ldr	r0, [r7, #8]
 8014946:	f7ff ff23 	bl	8014790 <BSP_SD_ReadBlocks>
 801494a:	4603      	mov	r3, r0
 801494c:	2b00      	cmp	r3, #0
 801494e:	d107      	bne.n	8014960 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8014950:	bf00      	nop
 8014952:	f7ff ff59 	bl	8014808 <BSP_SD_GetCardState>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1fa      	bne.n	8014952 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801495c:	2300      	movs	r3, #0
 801495e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8014960:	7dfb      	ldrb	r3, [r7, #23]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3718      	adds	r7, #24
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801496a:	b580      	push	{r7, lr}
 801496c:	b086      	sub	sp, #24
 801496e:	af00      	add	r7, sp, #0
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
 8014976:	4603      	mov	r3, r0
 8014978:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801497a:	2301      	movs	r3, #1
 801497c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801497e:	f04f 33ff 	mov.w	r3, #4294967295
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	6879      	ldr	r1, [r7, #4]
 8014986:	68b8      	ldr	r0, [r7, #8]
 8014988:	f7ff ff20 	bl	80147cc <BSP_SD_WriteBlocks>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d107      	bne.n	80149a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8014992:	bf00      	nop
 8014994:	f7ff ff38 	bl	8014808 <BSP_SD_GetCardState>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d1fa      	bne.n	8014994 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801499e:	2300      	movs	r3, #0
 80149a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3718      	adds	r7, #24
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}

080149ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b08c      	sub	sp, #48	@ 0x30
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	603a      	str	r2, [r7, #0]
 80149b6:	71fb      	strb	r3, [r7, #7]
 80149b8:	460b      	mov	r3, r1
 80149ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80149bc:	2301      	movs	r3, #1
 80149be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80149c2:	4b25      	ldr	r3, [pc, #148]	@ (8014a58 <SD_ioctl+0xac>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	f003 0301 	and.w	r3, r3, #1
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d001      	beq.n	80149d4 <SD_ioctl+0x28>
 80149d0:	2303      	movs	r3, #3
 80149d2:	e03c      	b.n	8014a4e <SD_ioctl+0xa2>

  switch (cmd)
 80149d4:	79bb      	ldrb	r3, [r7, #6]
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d834      	bhi.n	8014a44 <SD_ioctl+0x98>
 80149da:	a201      	add	r2, pc, #4	@ (adr r2, 80149e0 <SD_ioctl+0x34>)
 80149dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e0:	080149f1 	.word	0x080149f1
 80149e4:	080149f9 	.word	0x080149f9
 80149e8:	08014a11 	.word	0x08014a11
 80149ec:	08014a2b 	.word	0x08014a2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80149f0:	2300      	movs	r3, #0
 80149f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80149f6:	e028      	b.n	8014a4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80149f8:	f107 030c 	add.w	r3, r7, #12
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff ff13 	bl	8014828 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8014a0e:	e01c      	b.n	8014a4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014a10:	f107 030c 	add.w	r3, r7, #12
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff ff07 	bl	8014828 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014a22:	2300      	movs	r3, #0
 8014a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8014a28:	e00f      	b.n	8014a4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014a2a:	f107 030c 	add.w	r3, r7, #12
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7ff fefa 	bl	8014828 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a36:	0a5a      	lsrs	r2, r3, #9
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8014a42:	e002      	b.n	8014a4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014a44:	2304      	movs	r3, #4
 8014a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8014a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3730      	adds	r7, #48	@ 0x30
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	200000fd 	.word	0x200000fd

08014a5c <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8014a60:	bf00      	nop
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr
	...

08014a6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	460b      	mov	r3, r1
 8014a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014a78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014a7c:	f002 fc82 	bl	8017384 <USBD_static_malloc>
 8014a80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d109      	bne.n	8014a9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	32b0      	adds	r2, #176	@ 0xb0
 8014a92:	2100      	movs	r1, #0
 8014a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014a98:	2302      	movs	r3, #2
 8014a9a:	e0d4      	b.n	8014c46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014a9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f003 fe8c 	bl	80187c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	32b0      	adds	r2, #176	@ 0xb0
 8014ab2:	68f9      	ldr	r1, [r7, #12]
 8014ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	32b0      	adds	r2, #176	@ 0xb0
 8014ac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	7c1b      	ldrb	r3, [r3, #16]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d138      	bne.n	8014b46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8014c50 <USBD_CDC_Init+0x1e4>)
 8014ad6:	7819      	ldrb	r1, [r3, #0]
 8014ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014adc:	2202      	movs	r2, #2
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f002 fb2d 	bl	801713e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8014c50 <USBD_CDC_Init+0x1e4>)
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	f003 020f 	and.w	r2, r3, #15
 8014aec:	6879      	ldr	r1, [r7, #4]
 8014aee:	4613      	mov	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4413      	add	r3, r2
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	440b      	add	r3, r1
 8014af8:	3324      	adds	r3, #36	@ 0x24
 8014afa:	2201      	movs	r2, #1
 8014afc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014afe:	4b55      	ldr	r3, [pc, #340]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014b00:	7819      	ldrb	r1, [r3, #0]
 8014b02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014b06:	2202      	movs	r2, #2
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f002 fb18 	bl	801713e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014b0e:	4b51      	ldr	r3, [pc, #324]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	f003 020f 	and.w	r2, r3, #15
 8014b16:	6879      	ldr	r1, [r7, #4]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	4413      	add	r3, r2
 8014b1e:	009b      	lsls	r3, r3, #2
 8014b20:	440b      	add	r3, r1
 8014b22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014b26:	2201      	movs	r2, #1
 8014b28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8014c58 <USBD_CDC_Init+0x1ec>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	f003 020f 	and.w	r2, r3, #15
 8014b32:	6879      	ldr	r1, [r7, #4]
 8014b34:	4613      	mov	r3, r2
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	4413      	add	r3, r2
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	440b      	add	r3, r1
 8014b3e:	3326      	adds	r3, #38	@ 0x26
 8014b40:	2210      	movs	r2, #16
 8014b42:	801a      	strh	r2, [r3, #0]
 8014b44:	e035      	b.n	8014bb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014b46:	4b42      	ldr	r3, [pc, #264]	@ (8014c50 <USBD_CDC_Init+0x1e4>)
 8014b48:	7819      	ldrb	r1, [r3, #0]
 8014b4a:	2340      	movs	r3, #64	@ 0x40
 8014b4c:	2202      	movs	r2, #2
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f002 faf5 	bl	801713e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014b54:	4b3e      	ldr	r3, [pc, #248]	@ (8014c50 <USBD_CDC_Init+0x1e4>)
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	f003 020f 	and.w	r2, r3, #15
 8014b5c:	6879      	ldr	r1, [r7, #4]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4413      	add	r3, r2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	440b      	add	r3, r1
 8014b68:	3324      	adds	r3, #36	@ 0x24
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014b6e:	4b39      	ldr	r3, [pc, #228]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014b70:	7819      	ldrb	r1, [r3, #0]
 8014b72:	2340      	movs	r3, #64	@ 0x40
 8014b74:	2202      	movs	r2, #2
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f002 fae1 	bl	801713e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014b7c:	4b35      	ldr	r3, [pc, #212]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	f003 020f 	and.w	r2, r3, #15
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	4613      	mov	r3, r2
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	4413      	add	r3, r2
 8014b8c:	009b      	lsls	r3, r3, #2
 8014b8e:	440b      	add	r3, r1
 8014b90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014b94:	2201      	movs	r2, #1
 8014b96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014b98:	4b2f      	ldr	r3, [pc, #188]	@ (8014c58 <USBD_CDC_Init+0x1ec>)
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	f003 020f 	and.w	r2, r3, #15
 8014ba0:	6879      	ldr	r1, [r7, #4]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	4413      	add	r3, r2
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	440b      	add	r3, r1
 8014bac:	3326      	adds	r3, #38	@ 0x26
 8014bae:	2210      	movs	r2, #16
 8014bb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014bb2:	4b29      	ldr	r3, [pc, #164]	@ (8014c58 <USBD_CDC_Init+0x1ec>)
 8014bb4:	7819      	ldrb	r1, [r3, #0]
 8014bb6:	2308      	movs	r3, #8
 8014bb8:	2203      	movs	r2, #3
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f002 fabf 	bl	801713e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014bc0:	4b25      	ldr	r3, [pc, #148]	@ (8014c58 <USBD_CDC_Init+0x1ec>)
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	f003 020f 	and.w	r2, r3, #15
 8014bc8:	6879      	ldr	r1, [r7, #4]
 8014bca:	4613      	mov	r3, r2
 8014bcc:	009b      	lsls	r3, r3, #2
 8014bce:	4413      	add	r3, r2
 8014bd0:	009b      	lsls	r3, r3, #2
 8014bd2:	440b      	add	r3, r1
 8014bd4:	3324      	adds	r3, #36	@ 0x24
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	33b0      	adds	r3, #176	@ 0xb0
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	4413      	add	r3, r2
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2200      	movs	r2, #0
 8014c02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014c10:	2302      	movs	r3, #2
 8014c12:	e018      	b.n	8014c46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	7c1b      	ldrb	r3, [r3, #16]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d10a      	bne.n	8014c32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014c1e:	7819      	ldrb	r1, [r3, #0]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014c26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f002 fb76 	bl	801731c <USBD_LL_PrepareReceive>
 8014c30:	e008      	b.n	8014c44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014c32:	4b08      	ldr	r3, [pc, #32]	@ (8014c54 <USBD_CDC_Init+0x1e8>)
 8014c34:	7819      	ldrb	r1, [r3, #0]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014c3c:	2340      	movs	r3, #64	@ 0x40
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f002 fb6c 	bl	801731c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014c44:	2300      	movs	r3, #0
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3710      	adds	r7, #16
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	20000187 	.word	0x20000187
 8014c54:	20000188 	.word	0x20000188
 8014c58:	20000189 	.word	0x20000189

08014c5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	460b      	mov	r3, r1
 8014c66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014c68:	4b3a      	ldr	r3, [pc, #232]	@ (8014d54 <USBD_CDC_DeInit+0xf8>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f002 fa8b 	bl	801718a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014c74:	4b37      	ldr	r3, [pc, #220]	@ (8014d54 <USBD_CDC_DeInit+0xf8>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 020f 	and.w	r2, r3, #15
 8014c7c:	6879      	ldr	r1, [r7, #4]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	4413      	add	r3, r2
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	440b      	add	r3, r1
 8014c88:	3324      	adds	r3, #36	@ 0x24
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014c8e:	4b32      	ldr	r3, [pc, #200]	@ (8014d58 <USBD_CDC_DeInit+0xfc>)
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f002 fa78 	bl	801718a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8014d58 <USBD_CDC_DeInit+0xfc>)
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	f003 020f 	and.w	r2, r3, #15
 8014ca2:	6879      	ldr	r1, [r7, #4]
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	4413      	add	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	440b      	add	r3, r1
 8014cae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014cb6:	4b29      	ldr	r3, [pc, #164]	@ (8014d5c <USBD_CDC_DeInit+0x100>)
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f002 fa64 	bl	801718a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014cc2:	4b26      	ldr	r3, [pc, #152]	@ (8014d5c <USBD_CDC_DeInit+0x100>)
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	f003 020f 	and.w	r2, r3, #15
 8014cca:	6879      	ldr	r1, [r7, #4]
 8014ccc:	4613      	mov	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	440b      	add	r3, r1
 8014cd6:	3324      	adds	r3, #36	@ 0x24
 8014cd8:	2200      	movs	r2, #0
 8014cda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8014d5c <USBD_CDC_DeInit+0x100>)
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	f003 020f 	and.w	r2, r3, #15
 8014ce4:	6879      	ldr	r1, [r7, #4]
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	4413      	add	r3, r2
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	440b      	add	r3, r1
 8014cf0:	3326      	adds	r3, #38	@ 0x26
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	32b0      	adds	r2, #176	@ 0xb0
 8014d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d01f      	beq.n	8014d48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	33b0      	adds	r3, #176	@ 0xb0
 8014d12:	009b      	lsls	r3, r3, #2
 8014d14:	4413      	add	r3, r2
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	32b0      	adds	r2, #176	@ 0xb0
 8014d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f002 fb38 	bl	80173a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	32b0      	adds	r2, #176	@ 0xb0
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3708      	adds	r7, #8
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	20000187 	.word	0x20000187
 8014d58:	20000188 	.word	0x20000188
 8014d5c:	20000189 	.word	0x20000189

08014d60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b086      	sub	sp, #24
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	32b0      	adds	r2, #176	@ 0xb0
 8014d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d82:	2300      	movs	r3, #0
 8014d84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d101      	bne.n	8014d90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014d8c:	2303      	movs	r3, #3
 8014d8e:	e0bf      	b.n	8014f10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d050      	beq.n	8014e3e <USBD_CDC_Setup+0xde>
 8014d9c:	2b20      	cmp	r3, #32
 8014d9e:	f040 80af 	bne.w	8014f00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	88db      	ldrh	r3, [r3, #6]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d03a      	beq.n	8014e20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	b25b      	sxtb	r3, r3
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	da1b      	bge.n	8014dec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	33b0      	adds	r3, #176	@ 0xb0
 8014dbe:	009b      	lsls	r3, r3, #2
 8014dc0:	4413      	add	r3, r2
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014dca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014dcc:	683a      	ldr	r2, [r7, #0]
 8014dce:	88d2      	ldrh	r2, [r2, #6]
 8014dd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	88db      	ldrh	r3, [r3, #6]
 8014dd6:	2b07      	cmp	r3, #7
 8014dd8:	bf28      	it	cs
 8014dda:	2307      	movcs	r3, #7
 8014ddc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	89fa      	ldrh	r2, [r7, #14]
 8014de2:	4619      	mov	r1, r3
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f001 fd41 	bl	801686c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014dea:	e090      	b.n	8014f0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	785a      	ldrb	r2, [r3, #1]
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	88db      	ldrh	r3, [r3, #6]
 8014dfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8014dfc:	d803      	bhi.n	8014e06 <USBD_CDC_Setup+0xa6>
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	88db      	ldrh	r3, [r3, #6]
 8014e02:	b2da      	uxtb	r2, r3
 8014e04:	e000      	b.n	8014e08 <USBD_CDC_Setup+0xa8>
 8014e06:	2240      	movs	r2, #64	@ 0x40
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014e0e:	6939      	ldr	r1, [r7, #16]
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014e16:	461a      	mov	r2, r3
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f001 fd53 	bl	80168c4 <USBD_CtlPrepareRx>
      break;
 8014e1e:	e076      	b.n	8014f0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	33b0      	adds	r3, #176	@ 0xb0
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4413      	add	r3, r2
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	689b      	ldr	r3, [r3, #8]
 8014e32:	683a      	ldr	r2, [r7, #0]
 8014e34:	7850      	ldrb	r0, [r2, #1]
 8014e36:	2200      	movs	r2, #0
 8014e38:	6839      	ldr	r1, [r7, #0]
 8014e3a:	4798      	blx	r3
      break;
 8014e3c:	e067      	b.n	8014f0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	785b      	ldrb	r3, [r3, #1]
 8014e42:	2b0b      	cmp	r3, #11
 8014e44:	d851      	bhi.n	8014eea <USBD_CDC_Setup+0x18a>
 8014e46:	a201      	add	r2, pc, #4	@ (adr r2, 8014e4c <USBD_CDC_Setup+0xec>)
 8014e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e4c:	08014e7d 	.word	0x08014e7d
 8014e50:	08014ef9 	.word	0x08014ef9
 8014e54:	08014eeb 	.word	0x08014eeb
 8014e58:	08014eeb 	.word	0x08014eeb
 8014e5c:	08014eeb 	.word	0x08014eeb
 8014e60:	08014eeb 	.word	0x08014eeb
 8014e64:	08014eeb 	.word	0x08014eeb
 8014e68:	08014eeb 	.word	0x08014eeb
 8014e6c:	08014eeb 	.word	0x08014eeb
 8014e70:	08014eeb 	.word	0x08014eeb
 8014e74:	08014ea7 	.word	0x08014ea7
 8014e78:	08014ed1 	.word	0x08014ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	2b03      	cmp	r3, #3
 8014e86:	d107      	bne.n	8014e98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014e88:	f107 030a 	add.w	r3, r7, #10
 8014e8c:	2202      	movs	r2, #2
 8014e8e:	4619      	mov	r1, r3
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f001 fceb 	bl	801686c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e96:	e032      	b.n	8014efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014e98:	6839      	ldr	r1, [r7, #0]
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f001 fc75 	bl	801678a <USBD_CtlError>
            ret = USBD_FAIL;
 8014ea0:	2303      	movs	r3, #3
 8014ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8014ea4:	e02b      	b.n	8014efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	2b03      	cmp	r3, #3
 8014eb0:	d107      	bne.n	8014ec2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014eb2:	f107 030d 	add.w	r3, r7, #13
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	4619      	mov	r1, r3
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f001 fcd6 	bl	801686c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014ec0:	e01d      	b.n	8014efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f001 fc60 	bl	801678a <USBD_CtlError>
            ret = USBD_FAIL;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8014ece:	e016      	b.n	8014efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	2b03      	cmp	r3, #3
 8014eda:	d00f      	beq.n	8014efc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014edc:	6839      	ldr	r1, [r7, #0]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f001 fc53 	bl	801678a <USBD_CtlError>
            ret = USBD_FAIL;
 8014ee4:	2303      	movs	r3, #3
 8014ee6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014ee8:	e008      	b.n	8014efc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014eea:	6839      	ldr	r1, [r7, #0]
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f001 fc4c 	bl	801678a <USBD_CtlError>
          ret = USBD_FAIL;
 8014ef2:	2303      	movs	r3, #3
 8014ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8014ef6:	e002      	b.n	8014efe <USBD_CDC_Setup+0x19e>
          break;
 8014ef8:	bf00      	nop
 8014efa:	e008      	b.n	8014f0e <USBD_CDC_Setup+0x1ae>
          break;
 8014efc:	bf00      	nop
      }
      break;
 8014efe:	e006      	b.n	8014f0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014f00:	6839      	ldr	r1, [r7, #0]
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f001 fc41 	bl	801678a <USBD_CtlError>
      ret = USBD_FAIL;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8014f0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8014f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	3718      	adds	r7, #24
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	460b      	mov	r3, r1
 8014f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	32b0      	adds	r2, #176	@ 0xb0
 8014f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014f3e:	2303      	movs	r3, #3
 8014f40:	e065      	b.n	801500e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	32b0      	adds	r2, #176	@ 0xb0
 8014f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014f52:	78fb      	ldrb	r3, [r7, #3]
 8014f54:	f003 020f 	and.w	r2, r3, #15
 8014f58:	6879      	ldr	r1, [r7, #4]
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	4413      	add	r3, r2
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	440b      	add	r3, r1
 8014f64:	3318      	adds	r3, #24
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d02f      	beq.n	8014fcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014f6c:	78fb      	ldrb	r3, [r7, #3]
 8014f6e:	f003 020f 	and.w	r2, r3, #15
 8014f72:	6879      	ldr	r1, [r7, #4]
 8014f74:	4613      	mov	r3, r2
 8014f76:	009b      	lsls	r3, r3, #2
 8014f78:	4413      	add	r3, r2
 8014f7a:	009b      	lsls	r3, r3, #2
 8014f7c:	440b      	add	r3, r1
 8014f7e:	3318      	adds	r3, #24
 8014f80:	681a      	ldr	r2, [r3, #0]
 8014f82:	78fb      	ldrb	r3, [r7, #3]
 8014f84:	f003 010f 	and.w	r1, r3, #15
 8014f88:	68f8      	ldr	r0, [r7, #12]
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	00db      	lsls	r3, r3, #3
 8014f8e:	440b      	add	r3, r1
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	4403      	add	r3, r0
 8014f94:	3348      	adds	r3, #72	@ 0x48
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8014f9c:	fb01 f303 	mul.w	r3, r1, r3
 8014fa0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d112      	bne.n	8014fcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014fa6:	78fb      	ldrb	r3, [r7, #3]
 8014fa8:	f003 020f 	and.w	r2, r3, #15
 8014fac:	6879      	ldr	r1, [r7, #4]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	009b      	lsls	r3, r3, #2
 8014fb2:	4413      	add	r3, r2
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	440b      	add	r3, r1
 8014fb8:	3318      	adds	r3, #24
 8014fba:	2200      	movs	r2, #0
 8014fbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014fbe:	78f9      	ldrb	r1, [r7, #3]
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f002 f988 	bl	80172da <USBD_LL_Transmit>
 8014fca:	e01f      	b.n	801500c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	33b0      	adds	r3, #176	@ 0xb0
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4413      	add	r3, r2
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	691b      	ldr	r3, [r3, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d010      	beq.n	801500c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	33b0      	adds	r3, #176	@ 0xb0
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4413      	add	r3, r2
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	691b      	ldr	r3, [r3, #16]
 8014ffc:	68ba      	ldr	r2, [r7, #8]
 8014ffe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015008:	78fa      	ldrb	r2, [r7, #3]
 801500a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801500c:	2300      	movs	r3, #0
}
 801500e:	4618      	mov	r0, r3
 8015010:	3710      	adds	r7, #16
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b084      	sub	sp, #16
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	460b      	mov	r3, r1
 8015020:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	32b0      	adds	r2, #176	@ 0xb0
 801502c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015030:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	32b0      	adds	r2, #176	@ 0xb0
 801503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d101      	bne.n	8015048 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015044:	2303      	movs	r3, #3
 8015046:	e01a      	b.n	801507e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015048:	78fb      	ldrb	r3, [r7, #3]
 801504a:	4619      	mov	r1, r3
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f002 f986 	bl	801735e <USBD_LL_GetRxDataSize>
 8015052:	4602      	mov	r2, r0
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	33b0      	adds	r3, #176	@ 0xb0
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	4413      	add	r3, r2
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	68fa      	ldr	r2, [r7, #12]
 801506e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015072:	68fa      	ldr	r2, [r7, #12]
 8015074:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015078:	4611      	mov	r1, r2
 801507a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801507c:	2300      	movs	r3, #0
}
 801507e:	4618      	mov	r0, r3
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b084      	sub	sp, #16
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	32b0      	adds	r2, #176	@ 0xb0
 8015098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801509c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d101      	bne.n	80150a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80150a4:	2303      	movs	r3, #3
 80150a6:	e024      	b.n	80150f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	33b0      	adds	r3, #176	@ 0xb0
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	4413      	add	r3, r2
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d019      	beq.n	80150f0 <USBD_CDC_EP0_RxReady+0x6a>
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80150c2:	2bff      	cmp	r3, #255	@ 0xff
 80150c4:	d014      	beq.n	80150f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80150cc:	687a      	ldr	r2, [r7, #4]
 80150ce:	33b0      	adds	r3, #176	@ 0xb0
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	4413      	add	r3, r2
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	689b      	ldr	r3, [r3, #8]
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80150de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80150e0:	68fa      	ldr	r2, [r7, #12]
 80150e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80150e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	22ff      	movs	r2, #255	@ 0xff
 80150ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80150f0:	2300      	movs	r3, #0
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
	...

080150fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b086      	sub	sp, #24
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015104:	2182      	movs	r1, #130	@ 0x82
 8015106:	4818      	ldr	r0, [pc, #96]	@ (8015168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015108:	f000 fd09 	bl	8015b1e <USBD_GetEpDesc>
 801510c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801510e:	2101      	movs	r1, #1
 8015110:	4815      	ldr	r0, [pc, #84]	@ (8015168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015112:	f000 fd04 	bl	8015b1e <USBD_GetEpDesc>
 8015116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015118:	2181      	movs	r1, #129	@ 0x81
 801511a:	4813      	ldr	r0, [pc, #76]	@ (8015168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801511c:	f000 fcff 	bl	8015b1e <USBD_GetEpDesc>
 8015120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d002      	beq.n	801512e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	2210      	movs	r2, #16
 801512c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d006      	beq.n	8015142 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	2200      	movs	r2, #0
 8015138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801513c:	711a      	strb	r2, [r3, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d006      	beq.n	8015156 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2200      	movs	r2, #0
 801514c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015150:	711a      	strb	r2, [r3, #4]
 8015152:	2200      	movs	r2, #0
 8015154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2243      	movs	r2, #67	@ 0x43
 801515a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801515c:	4b02      	ldr	r3, [pc, #8]	@ (8015168 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801515e:	4618      	mov	r0, r3
 8015160:	3718      	adds	r7, #24
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	20000144 	.word	0x20000144

0801516c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b086      	sub	sp, #24
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015174:	2182      	movs	r1, #130	@ 0x82
 8015176:	4818      	ldr	r0, [pc, #96]	@ (80151d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015178:	f000 fcd1 	bl	8015b1e <USBD_GetEpDesc>
 801517c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801517e:	2101      	movs	r1, #1
 8015180:	4815      	ldr	r0, [pc, #84]	@ (80151d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015182:	f000 fccc 	bl	8015b1e <USBD_GetEpDesc>
 8015186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015188:	2181      	movs	r1, #129	@ 0x81
 801518a:	4813      	ldr	r0, [pc, #76]	@ (80151d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801518c:	f000 fcc7 	bl	8015b1e <USBD_GetEpDesc>
 8015190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d002      	beq.n	801519e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	2210      	movs	r2, #16
 801519c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d006      	beq.n	80151b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	2200      	movs	r2, #0
 80151a8:	711a      	strb	r2, [r3, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	f042 0202 	orr.w	r2, r2, #2
 80151b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d006      	beq.n	80151c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2200      	movs	r2, #0
 80151bc:	711a      	strb	r2, [r3, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	f042 0202 	orr.w	r2, r2, #2
 80151c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2243      	movs	r2, #67	@ 0x43
 80151ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80151cc:	4b02      	ldr	r3, [pc, #8]	@ (80151d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20000144 	.word	0x20000144

080151dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b086      	sub	sp, #24
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80151e4:	2182      	movs	r1, #130	@ 0x82
 80151e6:	4818      	ldr	r0, [pc, #96]	@ (8015248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151e8:	f000 fc99 	bl	8015b1e <USBD_GetEpDesc>
 80151ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80151ee:	2101      	movs	r1, #1
 80151f0:	4815      	ldr	r0, [pc, #84]	@ (8015248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151f2:	f000 fc94 	bl	8015b1e <USBD_GetEpDesc>
 80151f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80151f8:	2181      	movs	r1, #129	@ 0x81
 80151fa:	4813      	ldr	r0, [pc, #76]	@ (8015248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151fc:	f000 fc8f 	bl	8015b1e <USBD_GetEpDesc>
 8015200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d002      	beq.n	801520e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	2210      	movs	r2, #16
 801520c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d006      	beq.n	8015222 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	2200      	movs	r2, #0
 8015218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801521c:	711a      	strb	r2, [r3, #4]
 801521e:	2200      	movs	r2, #0
 8015220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d006      	beq.n	8015236 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015230:	711a      	strb	r2, [r3, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2243      	movs	r2, #67	@ 0x43
 801523a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801523c:	4b02      	ldr	r3, [pc, #8]	@ (8015248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801523e:	4618      	mov	r0, r3
 8015240:	3718      	adds	r7, #24
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	20000144 	.word	0x20000144

0801524c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	220a      	movs	r2, #10
 8015258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801525a:	4b03      	ldr	r3, [pc, #12]	@ (8015268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr
 8015268:	20000100 	.word	0x20000100

0801526c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801526c:	b480      	push	{r7}
 801526e:	b083      	sub	sp, #12
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d101      	bne.n	8015280 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801527c:	2303      	movs	r3, #3
 801527e:	e009      	b.n	8015294 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	33b0      	adds	r3, #176	@ 0xb0
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	4413      	add	r3, r2
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b087      	sub	sp, #28
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	32b0      	adds	r2, #176	@ 0xb0
 80152b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d101      	bne.n	80152c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80152c2:	2303      	movs	r3, #3
 80152c4:	e008      	b.n	80152d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	68ba      	ldr	r2, [r7, #8]
 80152ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80152d6:	2300      	movs	r3, #0
}
 80152d8:	4618      	mov	r0, r3
 80152da:	371c      	adds	r7, #28
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	32b0      	adds	r2, #176	@ 0xb0
 80152f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015304:	2303      	movs	r3, #3
 8015306:	e004      	b.n	8015312 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	683a      	ldr	r2, [r7, #0]
 801530c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3714      	adds	r7, #20
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr
	...

08015320 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	32b0      	adds	r2, #176	@ 0xb0
 8015332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015336:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	32b0      	adds	r2, #176	@ 0xb0
 8015342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d101      	bne.n	801534e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801534a:	2303      	movs	r3, #3
 801534c:	e018      	b.n	8015380 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	7c1b      	ldrb	r3, [r3, #16]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10a      	bne.n	801536c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015356:	4b0c      	ldr	r3, [pc, #48]	@ (8015388 <USBD_CDC_ReceivePacket+0x68>)
 8015358:	7819      	ldrb	r1, [r3, #0]
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f001 ffd9 	bl	801731c <USBD_LL_PrepareReceive>
 801536a:	e008      	b.n	801537e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801536c:	4b06      	ldr	r3, [pc, #24]	@ (8015388 <USBD_CDC_ReceivePacket+0x68>)
 801536e:	7819      	ldrb	r1, [r3, #0]
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015376:	2340      	movs	r3, #64	@ 0x40
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f001 ffcf 	bl	801731c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3710      	adds	r7, #16
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	20000188 	.word	0x20000188

0801538c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b086      	sub	sp, #24
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	60b9      	str	r1, [r7, #8]
 8015396:	4613      	mov	r3, r2
 8015398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d101      	bne.n	80153a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80153a0:	2303      	movs	r3, #3
 80153a2:	e01f      	b.n	80153e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2200      	movs	r2, #0
 80153a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2200      	movs	r2, #0
 80153b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d003      	beq.n	80153ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	2201      	movs	r2, #1
 80153ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	79fa      	ldrb	r2, [r7, #7]
 80153d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f001 fe49 	bl	8017070 <USBD_LL_Init>
 80153de:	4603      	mov	r3, r0
 80153e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80153e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3718      	adds	r7, #24
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80153f6:	2300      	movs	r3, #0
 80153f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d101      	bne.n	8015404 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015400:	2303      	movs	r3, #3
 8015402:	e025      	b.n	8015450 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	683a      	ldr	r2, [r7, #0]
 8015408:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	32ae      	adds	r2, #174	@ 0xae
 8015416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801541c:	2b00      	cmp	r3, #0
 801541e:	d00f      	beq.n	8015440 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	32ae      	adds	r2, #174	@ 0xae
 801542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015430:	f107 020e 	add.w	r2, r7, #14
 8015434:	4610      	mov	r0, r2
 8015436:	4798      	blx	r3
 8015438:	4602      	mov	r2, r0
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015446:	1c5a      	adds	r2, r3, #1
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801544e:	2300      	movs	r3, #0
}
 8015450:	4618      	mov	r0, r3
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f001 fe51 	bl	8017108 <USBD_LL_Start>
 8015466:	4603      	mov	r3, r0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015478:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801547a:	4618      	mov	r0, r3
 801547c:	370c      	adds	r7, #12
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr

08015486 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015486:	b580      	push	{r7, lr}
 8015488:	b084      	sub	sp, #16
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
 801548e:	460b      	mov	r3, r1
 8015490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015492:	2300      	movs	r3, #0
 8015494:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801549c:	2b00      	cmp	r3, #0
 801549e:	d009      	beq.n	80154b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	78fa      	ldrb	r2, [r7, #3]
 80154aa:	4611      	mov	r1, r2
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	4798      	blx	r3
 80154b0:	4603      	mov	r3, r0
 80154b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3710      	adds	r7, #16
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b084      	sub	sp, #16
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
 80154c6:	460b      	mov	r3, r1
 80154c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80154ca:	2300      	movs	r3, #0
 80154cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	78fa      	ldrb	r2, [r7, #3]
 80154d8:	4611      	mov	r1, r2
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	4798      	blx	r3
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d001      	beq.n	80154e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80154e4:	2303      	movs	r3, #3
 80154e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b084      	sub	sp, #16
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
 80154fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015502:	6839      	ldr	r1, [r7, #0]
 8015504:	4618      	mov	r0, r3
 8015506:	f001 f906 	bl	8016716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2201      	movs	r2, #1
 801550e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8015518:	461a      	mov	r2, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015526:	f003 031f 	and.w	r3, r3, #31
 801552a:	2b02      	cmp	r3, #2
 801552c:	d01a      	beq.n	8015564 <USBD_LL_SetupStage+0x72>
 801552e:	2b02      	cmp	r3, #2
 8015530:	d822      	bhi.n	8015578 <USBD_LL_SetupStage+0x86>
 8015532:	2b00      	cmp	r3, #0
 8015534:	d002      	beq.n	801553c <USBD_LL_SetupStage+0x4a>
 8015536:	2b01      	cmp	r3, #1
 8015538:	d00a      	beq.n	8015550 <USBD_LL_SetupStage+0x5e>
 801553a:	e01d      	b.n	8015578 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015542:	4619      	mov	r1, r3
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f000 fb5d 	bl	8015c04 <USBD_StdDevReq>
 801554a:	4603      	mov	r3, r0
 801554c:	73fb      	strb	r3, [r7, #15]
      break;
 801554e:	e020      	b.n	8015592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8015556:	4619      	mov	r1, r3
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 fbc5 	bl	8015ce8 <USBD_StdItfReq>
 801555e:	4603      	mov	r3, r0
 8015560:	73fb      	strb	r3, [r7, #15]
      break;
 8015562:	e016      	b.n	8015592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f000 fc27 	bl	8015dc0 <USBD_StdEPReq>
 8015572:	4603      	mov	r3, r0
 8015574:	73fb      	strb	r3, [r7, #15]
      break;
 8015576:	e00c      	b.n	8015592 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801557e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8015582:	b2db      	uxtb	r3, r3
 8015584:	4619      	mov	r1, r3
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f001 fe1e 	bl	80171c8 <USBD_LL_StallEP>
 801558c:	4603      	mov	r3, r0
 801558e:	73fb      	strb	r3, [r7, #15]
      break;
 8015590:	bf00      	nop
  }

  return ret;
 8015592:	7bfb      	ldrb	r3, [r7, #15]
}
 8015594:	4618      	mov	r0, r3
 8015596:	3710      	adds	r7, #16
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b086      	sub	sp, #24
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	460b      	mov	r3, r1
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80155aa:	2300      	movs	r3, #0
 80155ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80155ae:	7afb      	ldrb	r3, [r7, #11]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d16e      	bne.n	8015692 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80155ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80155c2:	2b03      	cmp	r3, #3
 80155c4:	f040 8098 	bne.w	80156f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	689a      	ldr	r2, [r3, #8]
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d913      	bls.n	80155fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	689a      	ldr	r2, [r3, #8]
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	1ad2      	subs	r2, r2, r3
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	68da      	ldr	r2, [r3, #12]
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	689b      	ldr	r3, [r3, #8]
 80155ea:	4293      	cmp	r3, r2
 80155ec:	bf28      	it	cs
 80155ee:	4613      	movcs	r3, r2
 80155f0:	461a      	mov	r2, r3
 80155f2:	6879      	ldr	r1, [r7, #4]
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f001 f982 	bl	80168fe <USBD_CtlContinueRx>
 80155fa:	e07d      	b.n	80156f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015602:	f003 031f 	and.w	r3, r3, #31
 8015606:	2b02      	cmp	r3, #2
 8015608:	d014      	beq.n	8015634 <USBD_LL_DataOutStage+0x98>
 801560a:	2b02      	cmp	r3, #2
 801560c:	d81d      	bhi.n	801564a <USBD_LL_DataOutStage+0xae>
 801560e:	2b00      	cmp	r3, #0
 8015610:	d002      	beq.n	8015618 <USBD_LL_DataOutStage+0x7c>
 8015612:	2b01      	cmp	r3, #1
 8015614:	d003      	beq.n	801561e <USBD_LL_DataOutStage+0x82>
 8015616:	e018      	b.n	801564a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015618:	2300      	movs	r3, #0
 801561a:	75bb      	strb	r3, [r7, #22]
            break;
 801561c:	e018      	b.n	8015650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015624:	b2db      	uxtb	r3, r3
 8015626:	4619      	mov	r1, r3
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	f000 fa5e 	bl	8015aea <USBD_CoreFindIF>
 801562e:	4603      	mov	r3, r0
 8015630:	75bb      	strb	r3, [r7, #22]
            break;
 8015632:	e00d      	b.n	8015650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801563a:	b2db      	uxtb	r3, r3
 801563c:	4619      	mov	r1, r3
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f000 fa60 	bl	8015b04 <USBD_CoreFindEP>
 8015644:	4603      	mov	r3, r0
 8015646:	75bb      	strb	r3, [r7, #22]
            break;
 8015648:	e002      	b.n	8015650 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801564a:	2300      	movs	r3, #0
 801564c:	75bb      	strb	r3, [r7, #22]
            break;
 801564e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015650:	7dbb      	ldrb	r3, [r7, #22]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d119      	bne.n	801568a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801565c:	b2db      	uxtb	r3, r3
 801565e:	2b03      	cmp	r3, #3
 8015660:	d113      	bne.n	801568a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015662:	7dba      	ldrb	r2, [r7, #22]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	32ae      	adds	r2, #174	@ 0xae
 8015668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d00b      	beq.n	801568a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015672:	7dba      	ldrb	r2, [r7, #22]
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801567a:	7dba      	ldrb	r2, [r7, #22]
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	32ae      	adds	r2, #174	@ 0xae
 8015680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015684:	691b      	ldr	r3, [r3, #16]
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801568a:	68f8      	ldr	r0, [r7, #12]
 801568c:	f001 f948 	bl	8016920 <USBD_CtlSendStatus>
 8015690:	e032      	b.n	80156f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015692:	7afb      	ldrb	r3, [r7, #11]
 8015694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015698:	b2db      	uxtb	r3, r3
 801569a:	4619      	mov	r1, r3
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f000 fa31 	bl	8015b04 <USBD_CoreFindEP>
 80156a2:	4603      	mov	r3, r0
 80156a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80156a6:	7dbb      	ldrb	r3, [r7, #22]
 80156a8:	2bff      	cmp	r3, #255	@ 0xff
 80156aa:	d025      	beq.n	80156f8 <USBD_LL_DataOutStage+0x15c>
 80156ac:	7dbb      	ldrb	r3, [r7, #22]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d122      	bne.n	80156f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	2b03      	cmp	r3, #3
 80156bc:	d117      	bne.n	80156ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80156be:	7dba      	ldrb	r2, [r7, #22]
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	32ae      	adds	r2, #174	@ 0xae
 80156c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156c8:	699b      	ldr	r3, [r3, #24]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00f      	beq.n	80156ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80156ce:	7dba      	ldrb	r2, [r7, #22]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80156d6:	7dba      	ldrb	r2, [r7, #22]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	32ae      	adds	r2, #174	@ 0xae
 80156dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156e0:	699b      	ldr	r3, [r3, #24]
 80156e2:	7afa      	ldrb	r2, [r7, #11]
 80156e4:	4611      	mov	r1, r2
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	4798      	blx	r3
 80156ea:	4603      	mov	r3, r0
 80156ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80156ee:	7dfb      	ldrb	r3, [r7, #23]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d001      	beq.n	80156f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80156f4:	7dfb      	ldrb	r3, [r7, #23]
 80156f6:	e000      	b.n	80156fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80156f8:	2300      	movs	r3, #0
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3718      	adds	r7, #24
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}

08015702 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015702:	b580      	push	{r7, lr}
 8015704:	b086      	sub	sp, #24
 8015706:	af00      	add	r7, sp, #0
 8015708:	60f8      	str	r0, [r7, #12]
 801570a:	460b      	mov	r3, r1
 801570c:	607a      	str	r2, [r7, #4]
 801570e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015710:	7afb      	ldrb	r3, [r7, #11]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d16f      	bne.n	80157f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	3314      	adds	r3, #20
 801571a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015722:	2b02      	cmp	r3, #2
 8015724:	d15a      	bne.n	80157dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	689a      	ldr	r2, [r3, #8]
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	429a      	cmp	r2, r3
 8015730:	d914      	bls.n	801575c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	689a      	ldr	r2, [r3, #8]
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	1ad2      	subs	r2, r2, r3
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	689b      	ldr	r3, [r3, #8]
 8015744:	461a      	mov	r2, r3
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	68f8      	ldr	r0, [r7, #12]
 801574a:	f001 f8aa 	bl	80168a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801574e:	2300      	movs	r3, #0
 8015750:	2200      	movs	r2, #0
 8015752:	2100      	movs	r1, #0
 8015754:	68f8      	ldr	r0, [r7, #12]
 8015756:	f001 fde1 	bl	801731c <USBD_LL_PrepareReceive>
 801575a:	e03f      	b.n	80157dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	68da      	ldr	r2, [r3, #12]
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	429a      	cmp	r2, r3
 8015766:	d11c      	bne.n	80157a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	685a      	ldr	r2, [r3, #4]
 801576c:	693b      	ldr	r3, [r7, #16]
 801576e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015770:	429a      	cmp	r2, r3
 8015772:	d316      	bcc.n	80157a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	685a      	ldr	r2, [r3, #4]
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801577e:	429a      	cmp	r2, r3
 8015780:	d20f      	bcs.n	80157a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015782:	2200      	movs	r2, #0
 8015784:	2100      	movs	r1, #0
 8015786:	68f8      	ldr	r0, [r7, #12]
 8015788:	f001 f88b 	bl	80168a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015794:	2300      	movs	r3, #0
 8015796:	2200      	movs	r2, #0
 8015798:	2100      	movs	r1, #0
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f001 fdbe 	bl	801731c <USBD_LL_PrepareReceive>
 80157a0:	e01c      	b.n	80157dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80157a8:	b2db      	uxtb	r3, r3
 80157aa:	2b03      	cmp	r3, #3
 80157ac:	d10f      	bne.n	80157ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d009      	beq.n	80157ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	2200      	movs	r2, #0
 80157be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	68f8      	ldr	r0, [r7, #12]
 80157cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80157ce:	2180      	movs	r1, #128	@ 0x80
 80157d0:	68f8      	ldr	r0, [r7, #12]
 80157d2:	f001 fcf9 	bl	80171c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f001 f8b5 	bl	8016946 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d03a      	beq.n	801585c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80157e6:	68f8      	ldr	r0, [r7, #12]
 80157e8:	f7ff fe42 	bl	8015470 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80157f4:	e032      	b.n	801585c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80157f6:	7afb      	ldrb	r3, [r7, #11]
 80157f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	4619      	mov	r1, r3
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	f000 f97f 	bl	8015b04 <USBD_CoreFindEP>
 8015806:	4603      	mov	r3, r0
 8015808:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801580a:	7dfb      	ldrb	r3, [r7, #23]
 801580c:	2bff      	cmp	r3, #255	@ 0xff
 801580e:	d025      	beq.n	801585c <USBD_LL_DataInStage+0x15a>
 8015810:	7dfb      	ldrb	r3, [r7, #23]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d122      	bne.n	801585c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801581c:	b2db      	uxtb	r3, r3
 801581e:	2b03      	cmp	r3, #3
 8015820:	d11c      	bne.n	801585c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015822:	7dfa      	ldrb	r2, [r7, #23]
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	32ae      	adds	r2, #174	@ 0xae
 8015828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801582c:	695b      	ldr	r3, [r3, #20]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d014      	beq.n	801585c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015832:	7dfa      	ldrb	r2, [r7, #23]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801583a:	7dfa      	ldrb	r2, [r7, #23]
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	32ae      	adds	r2, #174	@ 0xae
 8015840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015844:	695b      	ldr	r3, [r3, #20]
 8015846:	7afa      	ldrb	r2, [r7, #11]
 8015848:	4611      	mov	r1, r2
 801584a:	68f8      	ldr	r0, [r7, #12]
 801584c:	4798      	blx	r3
 801584e:	4603      	mov	r3, r0
 8015850:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015852:	7dbb      	ldrb	r3, [r7, #22]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d001      	beq.n	801585c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015858:	7dbb      	ldrb	r3, [r7, #22]
 801585a:	e000      	b.n	801585e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3718      	adds	r7, #24
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b084      	sub	sp, #16
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801586e:	2300      	movs	r3, #0
 8015870:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2201      	movs	r2, #1
 8015876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2200      	movs	r2, #0
 8015886:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2200      	movs	r2, #0
 801588c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2200      	movs	r2, #0
 8015894:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d014      	beq.n	80158cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00e      	beq.n	80158cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	6852      	ldr	r2, [r2, #4]
 80158ba:	b2d2      	uxtb	r2, r2
 80158bc:	4611      	mov	r1, r2
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	4798      	blx	r3
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d001      	beq.n	80158cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80158c8:	2303      	movs	r3, #3
 80158ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80158cc:	2340      	movs	r3, #64	@ 0x40
 80158ce:	2200      	movs	r2, #0
 80158d0:	2100      	movs	r1, #0
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f001 fc33 	bl	801713e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2201      	movs	r2, #1
 80158dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2240      	movs	r2, #64	@ 0x40
 80158e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80158e8:	2340      	movs	r3, #64	@ 0x40
 80158ea:	2200      	movs	r2, #0
 80158ec:	2180      	movs	r1, #128	@ 0x80
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f001 fc25 	bl	801713e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2201      	movs	r2, #1
 80158f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2240      	movs	r2, #64	@ 0x40
 80158fe:	621a      	str	r2, [r3, #32]

  return ret;
 8015900:	7bfb      	ldrb	r3, [r7, #15]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3710      	adds	r7, #16
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}

0801590a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801590a:	b480      	push	{r7}
 801590c:	b083      	sub	sp, #12
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
 8015912:	460b      	mov	r3, r1
 8015914:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	78fa      	ldrb	r2, [r7, #3]
 801591a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801591c:	2300      	movs	r3, #0
}
 801591e:	4618      	mov	r0, r3
 8015920:	370c      	adds	r7, #12
 8015922:	46bd      	mov	sp, r7
 8015924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015928:	4770      	bx	lr

0801592a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801592a:	b480      	push	{r7}
 801592c:	b083      	sub	sp, #12
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015938:	b2da      	uxtb	r2, r3
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2204      	movs	r2, #4
 8015944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015948:	2300      	movs	r3, #0
}
 801594a:	4618      	mov	r0, r3
 801594c:	370c      	adds	r7, #12
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr

08015956 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015956:	b480      	push	{r7}
 8015958:	b083      	sub	sp, #12
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015964:	b2db      	uxtb	r3, r3
 8015966:	2b04      	cmp	r3, #4
 8015968:	d106      	bne.n	8015978 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015970:	b2da      	uxtb	r2, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015978:	2300      	movs	r3, #0
}
 801597a:	4618      	mov	r0, r3
 801597c:	370c      	adds	r7, #12
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b082      	sub	sp, #8
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015994:	b2db      	uxtb	r3, r3
 8015996:	2b03      	cmp	r3, #3
 8015998:	d110      	bne.n	80159bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d00b      	beq.n	80159bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80159aa:	69db      	ldr	r3, [r3, #28]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d005      	beq.n	80159bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80159b6:	69db      	ldr	r3, [r3, #28]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80159bc:	2300      	movs	r3, #0
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3708      	adds	r7, #8
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}

080159c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80159c6:	b580      	push	{r7, lr}
 80159c8:	b082      	sub	sp, #8
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
 80159ce:	460b      	mov	r3, r1
 80159d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	32ae      	adds	r2, #174	@ 0xae
 80159dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d101      	bne.n	80159e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80159e4:	2303      	movs	r3, #3
 80159e6:	e01c      	b.n	8015a22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159ee:	b2db      	uxtb	r3, r3
 80159f0:	2b03      	cmp	r3, #3
 80159f2:	d115      	bne.n	8015a20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	32ae      	adds	r2, #174	@ 0xae
 80159fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a02:	6a1b      	ldr	r3, [r3, #32]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d00b      	beq.n	8015a20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	32ae      	adds	r2, #174	@ 0xae
 8015a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a16:	6a1b      	ldr	r3, [r3, #32]
 8015a18:	78fa      	ldrb	r2, [r7, #3]
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a20:	2300      	movs	r3, #0
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}

08015a2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b082      	sub	sp, #8
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	460b      	mov	r3, r1
 8015a34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	32ae      	adds	r2, #174	@ 0xae
 8015a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d101      	bne.n	8015a4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015a48:	2303      	movs	r3, #3
 8015a4a:	e01c      	b.n	8015a86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	2b03      	cmp	r3, #3
 8015a56:	d115      	bne.n	8015a84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	32ae      	adds	r2, #174	@ 0xae
 8015a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d00b      	beq.n	8015a84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	32ae      	adds	r2, #174	@ 0xae
 8015a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a7c:	78fa      	ldrb	r2, [r7, #3]
 8015a7e:	4611      	mov	r1, r2
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015a8e:	b480      	push	{r7}
 8015a90:	b083      	sub	sp, #12
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015a96:	2300      	movs	r3, #0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr

08015aa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d00e      	beq.n	8015ae0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	6852      	ldr	r2, [r2, #4]
 8015ace:	b2d2      	uxtb	r2, r2
 8015ad0:	4611      	mov	r1, r2
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	4798      	blx	r3
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d001      	beq.n	8015ae0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015adc:	2303      	movs	r3, #3
 8015ade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015aea:	b480      	push	{r7}
 8015aec:	b083      	sub	sp, #12
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
 8015af2:	460b      	mov	r3, r1
 8015af4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015af6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	370c      	adds	r7, #12
 8015afc:	46bd      	mov	sp, r7
 8015afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b02:	4770      	bx	lr

08015b04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015b04:	b480      	push	{r7}
 8015b06:	b083      	sub	sp, #12
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015b10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	370c      	adds	r7, #12
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr

08015b1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b086      	sub	sp, #24
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
 8015b26:	460b      	mov	r3, r1
 8015b28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015b32:	2300      	movs	r3, #0
 8015b34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	885b      	ldrh	r3, [r3, #2]
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	68fa      	ldr	r2, [r7, #12]
 8015b3e:	7812      	ldrb	r2, [r2, #0]
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d91f      	bls.n	8015b84 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015b4a:	e013      	b.n	8015b74 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015b4c:	f107 030a 	add.w	r3, r7, #10
 8015b50:	4619      	mov	r1, r3
 8015b52:	6978      	ldr	r0, [r7, #20]
 8015b54:	f000 f81b 	bl	8015b8e <USBD_GetNextDesc>
 8015b58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	785b      	ldrb	r3, [r3, #1]
 8015b5e:	2b05      	cmp	r3, #5
 8015b60:	d108      	bne.n	8015b74 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	789b      	ldrb	r3, [r3, #2]
 8015b6a:	78fa      	ldrb	r2, [r7, #3]
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d008      	beq.n	8015b82 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015b70:	2300      	movs	r3, #0
 8015b72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	885b      	ldrh	r3, [r3, #2]
 8015b78:	b29a      	uxth	r2, r3
 8015b7a:	897b      	ldrh	r3, [r7, #10]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d8e5      	bhi.n	8015b4c <USBD_GetEpDesc+0x2e>
 8015b80:	e000      	b.n	8015b84 <USBD_GetEpDesc+0x66>
          break;
 8015b82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015b84:	693b      	ldr	r3, [r7, #16]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015b8e:	b480      	push	{r7}
 8015b90:	b085      	sub	sp, #20
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
 8015b96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	881b      	ldrh	r3, [r3, #0]
 8015ba0:	68fa      	ldr	r2, [r7, #12]
 8015ba2:	7812      	ldrb	r2, [r2, #0]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3714      	adds	r7, #20
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr

08015bc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015bc6:	b480      	push	{r7}
 8015bc8:	b087      	sub	sp, #28
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015be4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8015be8:	021b      	lsls	r3, r3, #8
 8015bea:	b21a      	sxth	r2, r3
 8015bec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	b21b      	sxth	r3, r3
 8015bf4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015bf6:	89fb      	ldrh	r3, [r7, #14]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	371c      	adds	r7, #28
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c02:	4770      	bx	lr

08015c04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	781b      	ldrb	r3, [r3, #0]
 8015c16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015c1a:	2b40      	cmp	r3, #64	@ 0x40
 8015c1c:	d005      	beq.n	8015c2a <USBD_StdDevReq+0x26>
 8015c1e:	2b40      	cmp	r3, #64	@ 0x40
 8015c20:	d857      	bhi.n	8015cd2 <USBD_StdDevReq+0xce>
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00f      	beq.n	8015c46 <USBD_StdDevReq+0x42>
 8015c26:	2b20      	cmp	r3, #32
 8015c28:	d153      	bne.n	8015cd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	32ae      	adds	r2, #174	@ 0xae
 8015c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c38:	689b      	ldr	r3, [r3, #8]
 8015c3a:	6839      	ldr	r1, [r7, #0]
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	4798      	blx	r3
 8015c40:	4603      	mov	r3, r0
 8015c42:	73fb      	strb	r3, [r7, #15]
      break;
 8015c44:	e04a      	b.n	8015cdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	785b      	ldrb	r3, [r3, #1]
 8015c4a:	2b09      	cmp	r3, #9
 8015c4c:	d83b      	bhi.n	8015cc6 <USBD_StdDevReq+0xc2>
 8015c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8015c54 <USBD_StdDevReq+0x50>)
 8015c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c54:	08015ca9 	.word	0x08015ca9
 8015c58:	08015cbd 	.word	0x08015cbd
 8015c5c:	08015cc7 	.word	0x08015cc7
 8015c60:	08015cb3 	.word	0x08015cb3
 8015c64:	08015cc7 	.word	0x08015cc7
 8015c68:	08015c87 	.word	0x08015c87
 8015c6c:	08015c7d 	.word	0x08015c7d
 8015c70:	08015cc7 	.word	0x08015cc7
 8015c74:	08015c9f 	.word	0x08015c9f
 8015c78:	08015c91 	.word	0x08015c91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015c7c:	6839      	ldr	r1, [r7, #0]
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f000 fa3c 	bl	80160fc <USBD_GetDescriptor>
          break;
 8015c84:	e024      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015c86:	6839      	ldr	r1, [r7, #0]
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f000 fba1 	bl	80163d0 <USBD_SetAddress>
          break;
 8015c8e:	e01f      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015c90:	6839      	ldr	r1, [r7, #0]
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f000 fbe0 	bl	8016458 <USBD_SetConfig>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	73fb      	strb	r3, [r7, #15]
          break;
 8015c9c:	e018      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015c9e:	6839      	ldr	r1, [r7, #0]
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f000 fc83 	bl	80165ac <USBD_GetConfig>
          break;
 8015ca6:	e013      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015ca8:	6839      	ldr	r1, [r7, #0]
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f000 fcb4 	bl	8016618 <USBD_GetStatus>
          break;
 8015cb0:	e00e      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015cb2:	6839      	ldr	r1, [r7, #0]
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f000 fce3 	bl	8016680 <USBD_SetFeature>
          break;
 8015cba:	e009      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015cbc:	6839      	ldr	r1, [r7, #0]
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f000 fd07 	bl	80166d2 <USBD_ClrFeature>
          break;
 8015cc4:	e004      	b.n	8015cd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015cc6:	6839      	ldr	r1, [r7, #0]
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 fd5e 	bl	801678a <USBD_CtlError>
          break;
 8015cce:	bf00      	nop
      }
      break;
 8015cd0:	e004      	b.n	8015cdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015cd2:	6839      	ldr	r1, [r7, #0]
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f000 fd58 	bl	801678a <USBD_CtlError>
      break;
 8015cda:	bf00      	nop
  }

  return ret;
 8015cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3710      	adds	r7, #16
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	bf00      	nop

08015ce8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015cfe:	2b40      	cmp	r3, #64	@ 0x40
 8015d00:	d005      	beq.n	8015d0e <USBD_StdItfReq+0x26>
 8015d02:	2b40      	cmp	r3, #64	@ 0x40
 8015d04:	d852      	bhi.n	8015dac <USBD_StdItfReq+0xc4>
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d001      	beq.n	8015d0e <USBD_StdItfReq+0x26>
 8015d0a:	2b20      	cmp	r3, #32
 8015d0c:	d14e      	bne.n	8015dac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d14:	b2db      	uxtb	r3, r3
 8015d16:	3b01      	subs	r3, #1
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	d840      	bhi.n	8015d9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	889b      	ldrh	r3, [r3, #4]
 8015d20:	b2db      	uxtb	r3, r3
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d836      	bhi.n	8015d94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	889b      	ldrh	r3, [r3, #4]
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	4619      	mov	r1, r3
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f7ff fedb 	bl	8015aea <USBD_CoreFindIF>
 8015d34:	4603      	mov	r3, r0
 8015d36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	2bff      	cmp	r3, #255	@ 0xff
 8015d3c:	d01d      	beq.n	8015d7a <USBD_StdItfReq+0x92>
 8015d3e:	7bbb      	ldrb	r3, [r7, #14]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d11a      	bne.n	8015d7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015d44:	7bba      	ldrb	r2, [r7, #14]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	32ae      	adds	r2, #174	@ 0xae
 8015d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00f      	beq.n	8015d74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015d54:	7bba      	ldrb	r2, [r7, #14]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015d5c:	7bba      	ldrb	r2, [r7, #14]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	32ae      	adds	r2, #174	@ 0xae
 8015d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d66:	689b      	ldr	r3, [r3, #8]
 8015d68:	6839      	ldr	r1, [r7, #0]
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	4798      	blx	r3
 8015d6e:	4603      	mov	r3, r0
 8015d70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015d72:	e004      	b.n	8015d7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015d74:	2303      	movs	r3, #3
 8015d76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015d78:	e001      	b.n	8015d7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015d7a:	2303      	movs	r3, #3
 8015d7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	88db      	ldrh	r3, [r3, #6]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d110      	bne.n	8015da8 <USBD_StdItfReq+0xc0>
 8015d86:	7bfb      	ldrb	r3, [r7, #15]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10d      	bne.n	8015da8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 fdc7 	bl	8016920 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015d92:	e009      	b.n	8015da8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015d94:	6839      	ldr	r1, [r7, #0]
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f000 fcf7 	bl	801678a <USBD_CtlError>
          break;
 8015d9c:	e004      	b.n	8015da8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015d9e:	6839      	ldr	r1, [r7, #0]
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f000 fcf2 	bl	801678a <USBD_CtlError>
          break;
 8015da6:	e000      	b.n	8015daa <USBD_StdItfReq+0xc2>
          break;
 8015da8:	bf00      	nop
      }
      break;
 8015daa:	e004      	b.n	8015db6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015dac:	6839      	ldr	r1, [r7, #0]
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 fceb 	bl	801678a <USBD_CtlError>
      break;
 8015db4:	bf00      	nop
  }

  return ret;
 8015db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3710      	adds	r7, #16
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	889b      	ldrh	r3, [r3, #4]
 8015dd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ddc:	2b40      	cmp	r3, #64	@ 0x40
 8015dde:	d007      	beq.n	8015df0 <USBD_StdEPReq+0x30>
 8015de0:	2b40      	cmp	r3, #64	@ 0x40
 8015de2:	f200 817f 	bhi.w	80160e4 <USBD_StdEPReq+0x324>
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d02a      	beq.n	8015e40 <USBD_StdEPReq+0x80>
 8015dea:	2b20      	cmp	r3, #32
 8015dec:	f040 817a 	bne.w	80160e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015df0:	7bbb      	ldrb	r3, [r7, #14]
 8015df2:	4619      	mov	r1, r3
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7ff fe85 	bl	8015b04 <USBD_CoreFindEP>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015dfe:	7b7b      	ldrb	r3, [r7, #13]
 8015e00:	2bff      	cmp	r3, #255	@ 0xff
 8015e02:	f000 8174 	beq.w	80160ee <USBD_StdEPReq+0x32e>
 8015e06:	7b7b      	ldrb	r3, [r7, #13]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f040 8170 	bne.w	80160ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015e0e:	7b7a      	ldrb	r2, [r7, #13]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015e16:	7b7a      	ldrb	r2, [r7, #13]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	32ae      	adds	r2, #174	@ 0xae
 8015e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e20:	689b      	ldr	r3, [r3, #8]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	f000 8163 	beq.w	80160ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015e28:	7b7a      	ldrb	r2, [r7, #13]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	32ae      	adds	r2, #174	@ 0xae
 8015e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e32:	689b      	ldr	r3, [r3, #8]
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	4798      	blx	r3
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015e3e:	e156      	b.n	80160ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	785b      	ldrb	r3, [r3, #1]
 8015e44:	2b03      	cmp	r3, #3
 8015e46:	d008      	beq.n	8015e5a <USBD_StdEPReq+0x9a>
 8015e48:	2b03      	cmp	r3, #3
 8015e4a:	f300 8145 	bgt.w	80160d8 <USBD_StdEPReq+0x318>
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 809b 	beq.w	8015f8a <USBD_StdEPReq+0x1ca>
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	d03c      	beq.n	8015ed2 <USBD_StdEPReq+0x112>
 8015e58:	e13e      	b.n	80160d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b02      	cmp	r3, #2
 8015e64:	d002      	beq.n	8015e6c <USBD_StdEPReq+0xac>
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	d016      	beq.n	8015e98 <USBD_StdEPReq+0xd8>
 8015e6a:	e02c      	b.n	8015ec6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e6c:	7bbb      	ldrb	r3, [r7, #14]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d00d      	beq.n	8015e8e <USBD_StdEPReq+0xce>
 8015e72:	7bbb      	ldrb	r3, [r7, #14]
 8015e74:	2b80      	cmp	r3, #128	@ 0x80
 8015e76:	d00a      	beq.n	8015e8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e78:	7bbb      	ldrb	r3, [r7, #14]
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f001 f9a3 	bl	80171c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e82:	2180      	movs	r1, #128	@ 0x80
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f001 f99f 	bl	80171c8 <USBD_LL_StallEP>
 8015e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e8c:	e020      	b.n	8015ed0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015e8e:	6839      	ldr	r1, [r7, #0]
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f000 fc7a 	bl	801678a <USBD_CtlError>
              break;
 8015e96:	e01b      	b.n	8015ed0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	885b      	ldrh	r3, [r3, #2]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d10e      	bne.n	8015ebe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015ea0:	7bbb      	ldrb	r3, [r7, #14]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00b      	beq.n	8015ebe <USBD_StdEPReq+0xfe>
 8015ea6:	7bbb      	ldrb	r3, [r7, #14]
 8015ea8:	2b80      	cmp	r3, #128	@ 0x80
 8015eaa:	d008      	beq.n	8015ebe <USBD_StdEPReq+0xfe>
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	88db      	ldrh	r3, [r3, #6]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d104      	bne.n	8015ebe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015eb4:	7bbb      	ldrb	r3, [r7, #14]
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f001 f985 	bl	80171c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f000 fd2e 	bl	8016920 <USBD_CtlSendStatus>

              break;
 8015ec4:	e004      	b.n	8015ed0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ec6:	6839      	ldr	r1, [r7, #0]
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f000 fc5e 	bl	801678a <USBD_CtlError>
              break;
 8015ece:	bf00      	nop
          }
          break;
 8015ed0:	e107      	b.n	80160e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ed8:	b2db      	uxtb	r3, r3
 8015eda:	2b02      	cmp	r3, #2
 8015edc:	d002      	beq.n	8015ee4 <USBD_StdEPReq+0x124>
 8015ede:	2b03      	cmp	r3, #3
 8015ee0:	d016      	beq.n	8015f10 <USBD_StdEPReq+0x150>
 8015ee2:	e04b      	b.n	8015f7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ee4:	7bbb      	ldrb	r3, [r7, #14]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00d      	beq.n	8015f06 <USBD_StdEPReq+0x146>
 8015eea:	7bbb      	ldrb	r3, [r7, #14]
 8015eec:	2b80      	cmp	r3, #128	@ 0x80
 8015eee:	d00a      	beq.n	8015f06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ef0:	7bbb      	ldrb	r3, [r7, #14]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f001 f967 	bl	80171c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015efa:	2180      	movs	r1, #128	@ 0x80
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f001 f963 	bl	80171c8 <USBD_LL_StallEP>
 8015f02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015f04:	e040      	b.n	8015f88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015f06:	6839      	ldr	r1, [r7, #0]
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f000 fc3e 	bl	801678a <USBD_CtlError>
              break;
 8015f0e:	e03b      	b.n	8015f88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	885b      	ldrh	r3, [r3, #2]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d136      	bne.n	8015f86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015f18:	7bbb      	ldrb	r3, [r7, #14]
 8015f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d004      	beq.n	8015f2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015f22:	7bbb      	ldrb	r3, [r7, #14]
 8015f24:	4619      	mov	r1, r3
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f001 f96d 	bl	8017206 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 fcf7 	bl	8016920 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f32:	7bbb      	ldrb	r3, [r7, #14]
 8015f34:	4619      	mov	r1, r3
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7ff fde4 	bl	8015b04 <USBD_CoreFindEP>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f40:	7b7b      	ldrb	r3, [r7, #13]
 8015f42:	2bff      	cmp	r3, #255	@ 0xff
 8015f44:	d01f      	beq.n	8015f86 <USBD_StdEPReq+0x1c6>
 8015f46:	7b7b      	ldrb	r3, [r7, #13]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d11c      	bne.n	8015f86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015f4c:	7b7a      	ldrb	r2, [r7, #13]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015f54:	7b7a      	ldrb	r2, [r7, #13]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	32ae      	adds	r2, #174	@ 0xae
 8015f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d010      	beq.n	8015f86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015f64:	7b7a      	ldrb	r2, [r7, #13]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	32ae      	adds	r2, #174	@ 0xae
 8015f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f6e:	689b      	ldr	r3, [r3, #8]
 8015f70:	6839      	ldr	r1, [r7, #0]
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	4798      	blx	r3
 8015f76:	4603      	mov	r3, r0
 8015f78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015f7a:	e004      	b.n	8015f86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015f7c:	6839      	ldr	r1, [r7, #0]
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f000 fc03 	bl	801678a <USBD_CtlError>
              break;
 8015f84:	e000      	b.n	8015f88 <USBD_StdEPReq+0x1c8>
              break;
 8015f86:	bf00      	nop
          }
          break;
 8015f88:	e0ab      	b.n	80160e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2b02      	cmp	r3, #2
 8015f94:	d002      	beq.n	8015f9c <USBD_StdEPReq+0x1dc>
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	d032      	beq.n	8016000 <USBD_StdEPReq+0x240>
 8015f9a:	e097      	b.n	80160cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f9c:	7bbb      	ldrb	r3, [r7, #14]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d007      	beq.n	8015fb2 <USBD_StdEPReq+0x1f2>
 8015fa2:	7bbb      	ldrb	r3, [r7, #14]
 8015fa4:	2b80      	cmp	r3, #128	@ 0x80
 8015fa6:	d004      	beq.n	8015fb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015fa8:	6839      	ldr	r1, [r7, #0]
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 fbed 	bl	801678a <USBD_CtlError>
                break;
 8015fb0:	e091      	b.n	80160d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	da0b      	bge.n	8015fd2 <USBD_StdEPReq+0x212>
 8015fba:	7bbb      	ldrb	r3, [r7, #14]
 8015fbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	4413      	add	r3, r2
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	3310      	adds	r3, #16
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	4413      	add	r3, r2
 8015fce:	3304      	adds	r3, #4
 8015fd0:	e00b      	b.n	8015fea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fd2:	7bbb      	ldrb	r3, [r7, #14]
 8015fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fd8:	4613      	mov	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	4413      	add	r3, r2
 8015fde:	009b      	lsls	r3, r3, #2
 8015fe0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	3304      	adds	r3, #4
 8015fea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	2202      	movs	r2, #2
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fc37 	bl	801686c <USBD_CtlSendData>
              break;
 8015ffe:	e06a      	b.n	80160d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016004:	2b00      	cmp	r3, #0
 8016006:	da11      	bge.n	801602c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016008:	7bbb      	ldrb	r3, [r7, #14]
 801600a:	f003 020f 	and.w	r2, r3, #15
 801600e:	6879      	ldr	r1, [r7, #4]
 8016010:	4613      	mov	r3, r2
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	4413      	add	r3, r2
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	440b      	add	r3, r1
 801601a:	3324      	adds	r3, #36	@ 0x24
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d117      	bne.n	8016052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016022:	6839      	ldr	r1, [r7, #0]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 fbb0 	bl	801678a <USBD_CtlError>
                  break;
 801602a:	e054      	b.n	80160d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801602c:	7bbb      	ldrb	r3, [r7, #14]
 801602e:	f003 020f 	and.w	r2, r3, #15
 8016032:	6879      	ldr	r1, [r7, #4]
 8016034:	4613      	mov	r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	4413      	add	r3, r2
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	440b      	add	r3, r1
 801603e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016042:	881b      	ldrh	r3, [r3, #0]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d104      	bne.n	8016052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016048:	6839      	ldr	r1, [r7, #0]
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fb9d 	bl	801678a <USBD_CtlError>
                  break;
 8016050:	e041      	b.n	80160d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016056:	2b00      	cmp	r3, #0
 8016058:	da0b      	bge.n	8016072 <USBD_StdEPReq+0x2b2>
 801605a:	7bbb      	ldrb	r3, [r7, #14]
 801605c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016060:	4613      	mov	r3, r2
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	4413      	add	r3, r2
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	3310      	adds	r3, #16
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	4413      	add	r3, r2
 801606e:	3304      	adds	r3, #4
 8016070:	e00b      	b.n	801608a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016072:	7bbb      	ldrb	r3, [r7, #14]
 8016074:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016078:	4613      	mov	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	4413      	add	r3, r2
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	4413      	add	r3, r2
 8016088:	3304      	adds	r3, #4
 801608a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801608c:	7bbb      	ldrb	r3, [r7, #14]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d002      	beq.n	8016098 <USBD_StdEPReq+0x2d8>
 8016092:	7bbb      	ldrb	r3, [r7, #14]
 8016094:	2b80      	cmp	r3, #128	@ 0x80
 8016096:	d103      	bne.n	80160a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	2200      	movs	r2, #0
 801609c:	601a      	str	r2, [r3, #0]
 801609e:	e00e      	b.n	80160be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80160a0:	7bbb      	ldrb	r3, [r7, #14]
 80160a2:	4619      	mov	r1, r3
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f001 f8cd 	bl	8017244 <USBD_LL_IsStallEP>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d003      	beq.n	80160b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	2201      	movs	r2, #1
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	e002      	b.n	80160be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2200      	movs	r2, #0
 80160bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2202      	movs	r2, #2
 80160c2:	4619      	mov	r1, r3
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 fbd1 	bl	801686c <USBD_CtlSendData>
              break;
 80160ca:	e004      	b.n	80160d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80160cc:	6839      	ldr	r1, [r7, #0]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 fb5b 	bl	801678a <USBD_CtlError>
              break;
 80160d4:	bf00      	nop
          }
          break;
 80160d6:	e004      	b.n	80160e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80160d8:	6839      	ldr	r1, [r7, #0]
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fb55 	bl	801678a <USBD_CtlError>
          break;
 80160e0:	bf00      	nop
      }
      break;
 80160e2:	e005      	b.n	80160f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 fb4f 	bl	801678a <USBD_CtlError>
      break;
 80160ec:	e000      	b.n	80160f0 <USBD_StdEPReq+0x330>
      break;
 80160ee:	bf00      	nop
  }

  return ret;
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
	...

080160fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b084      	sub	sp, #16
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016106:	2300      	movs	r3, #0
 8016108:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801610a:	2300      	movs	r3, #0
 801610c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801610e:	2300      	movs	r3, #0
 8016110:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	885b      	ldrh	r3, [r3, #2]
 8016116:	0a1b      	lsrs	r3, r3, #8
 8016118:	b29b      	uxth	r3, r3
 801611a:	3b01      	subs	r3, #1
 801611c:	2b06      	cmp	r3, #6
 801611e:	f200 8128 	bhi.w	8016372 <USBD_GetDescriptor+0x276>
 8016122:	a201      	add	r2, pc, #4	@ (adr r2, 8016128 <USBD_GetDescriptor+0x2c>)
 8016124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016128:	08016145 	.word	0x08016145
 801612c:	0801615d 	.word	0x0801615d
 8016130:	0801619d 	.word	0x0801619d
 8016134:	08016373 	.word	0x08016373
 8016138:	08016373 	.word	0x08016373
 801613c:	08016313 	.word	0x08016313
 8016140:	0801633f 	.word	0x0801633f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	7c12      	ldrb	r2, [r2, #16]
 8016150:	f107 0108 	add.w	r1, r7, #8
 8016154:	4610      	mov	r0, r2
 8016156:	4798      	blx	r3
 8016158:	60f8      	str	r0, [r7, #12]
      break;
 801615a:	e112      	b.n	8016382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	7c1b      	ldrb	r3, [r3, #16]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10d      	bne.n	8016180 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801616c:	f107 0208 	add.w	r2, r7, #8
 8016170:	4610      	mov	r0, r2
 8016172:	4798      	blx	r3
 8016174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	2202      	movs	r2, #2
 801617c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801617e:	e100      	b.n	8016382 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016188:	f107 0208 	add.w	r2, r7, #8
 801618c:	4610      	mov	r0, r2
 801618e:	4798      	blx	r3
 8016190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	3301      	adds	r3, #1
 8016196:	2202      	movs	r2, #2
 8016198:	701a      	strb	r2, [r3, #0]
      break;
 801619a:	e0f2      	b.n	8016382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	885b      	ldrh	r3, [r3, #2]
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	2b05      	cmp	r3, #5
 80161a4:	f200 80ac 	bhi.w	8016300 <USBD_GetDescriptor+0x204>
 80161a8:	a201      	add	r2, pc, #4	@ (adr r2, 80161b0 <USBD_GetDescriptor+0xb4>)
 80161aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ae:	bf00      	nop
 80161b0:	080161c9 	.word	0x080161c9
 80161b4:	080161fd 	.word	0x080161fd
 80161b8:	08016231 	.word	0x08016231
 80161bc:	08016265 	.word	0x08016265
 80161c0:	08016299 	.word	0x08016299
 80161c4:	080162cd 	.word	0x080162cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00b      	beq.n	80161ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	7c12      	ldrb	r2, [r2, #16]
 80161e0:	f107 0108 	add.w	r1, r7, #8
 80161e4:	4610      	mov	r0, r2
 80161e6:	4798      	blx	r3
 80161e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161ea:	e091      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161ec:	6839      	ldr	r1, [r7, #0]
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f000 facb 	bl	801678a <USBD_CtlError>
            err++;
 80161f4:	7afb      	ldrb	r3, [r7, #11]
 80161f6:	3301      	adds	r3, #1
 80161f8:	72fb      	strb	r3, [r7, #11]
          break;
 80161fa:	e089      	b.n	8016310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016202:	689b      	ldr	r3, [r3, #8]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d00b      	beq.n	8016220 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	687a      	ldr	r2, [r7, #4]
 8016212:	7c12      	ldrb	r2, [r2, #16]
 8016214:	f107 0108 	add.w	r1, r7, #8
 8016218:	4610      	mov	r0, r2
 801621a:	4798      	blx	r3
 801621c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801621e:	e077      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016220:	6839      	ldr	r1, [r7, #0]
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f000 fab1 	bl	801678a <USBD_CtlError>
            err++;
 8016228:	7afb      	ldrb	r3, [r7, #11]
 801622a:	3301      	adds	r3, #1
 801622c:	72fb      	strb	r3, [r7, #11]
          break;
 801622e:	e06f      	b.n	8016310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00b      	beq.n	8016254 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	687a      	ldr	r2, [r7, #4]
 8016246:	7c12      	ldrb	r2, [r2, #16]
 8016248:	f107 0108 	add.w	r1, r7, #8
 801624c:	4610      	mov	r0, r2
 801624e:	4798      	blx	r3
 8016250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016252:	e05d      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f000 fa97 	bl	801678a <USBD_CtlError>
            err++;
 801625c:	7afb      	ldrb	r3, [r7, #11]
 801625e:	3301      	adds	r3, #1
 8016260:	72fb      	strb	r3, [r7, #11]
          break;
 8016262:	e055      	b.n	8016310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801626a:	691b      	ldr	r3, [r3, #16]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00b      	beq.n	8016288 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016276:	691b      	ldr	r3, [r3, #16]
 8016278:	687a      	ldr	r2, [r7, #4]
 801627a:	7c12      	ldrb	r2, [r2, #16]
 801627c:	f107 0108 	add.w	r1, r7, #8
 8016280:	4610      	mov	r0, r2
 8016282:	4798      	blx	r3
 8016284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016286:	e043      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016288:	6839      	ldr	r1, [r7, #0]
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 fa7d 	bl	801678a <USBD_CtlError>
            err++;
 8016290:	7afb      	ldrb	r3, [r7, #11]
 8016292:	3301      	adds	r3, #1
 8016294:	72fb      	strb	r3, [r7, #11]
          break;
 8016296:	e03b      	b.n	8016310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801629e:	695b      	ldr	r3, [r3, #20]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d00b      	beq.n	80162bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80162aa:	695b      	ldr	r3, [r3, #20]
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	7c12      	ldrb	r2, [r2, #16]
 80162b0:	f107 0108 	add.w	r1, r7, #8
 80162b4:	4610      	mov	r0, r2
 80162b6:	4798      	blx	r3
 80162b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162ba:	e029      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162bc:	6839      	ldr	r1, [r7, #0]
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f000 fa63 	bl	801678a <USBD_CtlError>
            err++;
 80162c4:	7afb      	ldrb	r3, [r7, #11]
 80162c6:	3301      	adds	r3, #1
 80162c8:	72fb      	strb	r3, [r7, #11]
          break;
 80162ca:	e021      	b.n	8016310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80162d2:	699b      	ldr	r3, [r3, #24]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d00b      	beq.n	80162f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80162de:	699b      	ldr	r3, [r3, #24]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	7c12      	ldrb	r2, [r2, #16]
 80162e4:	f107 0108 	add.w	r1, r7, #8
 80162e8:	4610      	mov	r0, r2
 80162ea:	4798      	blx	r3
 80162ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162ee:	e00f      	b.n	8016310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162f0:	6839      	ldr	r1, [r7, #0]
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 fa49 	bl	801678a <USBD_CtlError>
            err++;
 80162f8:	7afb      	ldrb	r3, [r7, #11]
 80162fa:	3301      	adds	r3, #1
 80162fc:	72fb      	strb	r3, [r7, #11]
          break;
 80162fe:	e007      	b.n	8016310 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016300:	6839      	ldr	r1, [r7, #0]
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fa41 	bl	801678a <USBD_CtlError>
          err++;
 8016308:	7afb      	ldrb	r3, [r7, #11]
 801630a:	3301      	adds	r3, #1
 801630c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801630e:	bf00      	nop
      }
      break;
 8016310:	e037      	b.n	8016382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	7c1b      	ldrb	r3, [r3, #16]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d109      	bne.n	801632e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016322:	f107 0208 	add.w	r2, r7, #8
 8016326:	4610      	mov	r0, r2
 8016328:	4798      	blx	r3
 801632a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801632c:	e029      	b.n	8016382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801632e:	6839      	ldr	r1, [r7, #0]
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 fa2a 	bl	801678a <USBD_CtlError>
        err++;
 8016336:	7afb      	ldrb	r3, [r7, #11]
 8016338:	3301      	adds	r3, #1
 801633a:	72fb      	strb	r3, [r7, #11]
      break;
 801633c:	e021      	b.n	8016382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	7c1b      	ldrb	r3, [r3, #16]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d10d      	bne.n	8016362 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801634c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801634e:	f107 0208 	add.w	r2, r7, #8
 8016352:	4610      	mov	r0, r2
 8016354:	4798      	blx	r3
 8016356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	3301      	adds	r3, #1
 801635c:	2207      	movs	r2, #7
 801635e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016360:	e00f      	b.n	8016382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016362:	6839      	ldr	r1, [r7, #0]
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	f000 fa10 	bl	801678a <USBD_CtlError>
        err++;
 801636a:	7afb      	ldrb	r3, [r7, #11]
 801636c:	3301      	adds	r3, #1
 801636e:	72fb      	strb	r3, [r7, #11]
      break;
 8016370:	e007      	b.n	8016382 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016372:	6839      	ldr	r1, [r7, #0]
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f000 fa08 	bl	801678a <USBD_CtlError>
      err++;
 801637a:	7afb      	ldrb	r3, [r7, #11]
 801637c:	3301      	adds	r3, #1
 801637e:	72fb      	strb	r3, [r7, #11]
      break;
 8016380:	bf00      	nop
  }

  if (err != 0U)
 8016382:	7afb      	ldrb	r3, [r7, #11]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d11e      	bne.n	80163c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	88db      	ldrh	r3, [r3, #6]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d016      	beq.n	80163be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016390:	893b      	ldrh	r3, [r7, #8]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00e      	beq.n	80163b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	88da      	ldrh	r2, [r3, #6]
 801639a:	893b      	ldrh	r3, [r7, #8]
 801639c:	4293      	cmp	r3, r2
 801639e:	bf28      	it	cs
 80163a0:	4613      	movcs	r3, r2
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80163a6:	893b      	ldrh	r3, [r7, #8]
 80163a8:	461a      	mov	r2, r3
 80163aa:	68f9      	ldr	r1, [r7, #12]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fa5d 	bl	801686c <USBD_CtlSendData>
 80163b2:	e009      	b.n	80163c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80163b4:	6839      	ldr	r1, [r7, #0]
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 f9e7 	bl	801678a <USBD_CtlError>
 80163bc:	e004      	b.n	80163c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 faae 	bl	8016920 <USBD_CtlSendStatus>
 80163c4:	e000      	b.n	80163c8 <USBD_GetDescriptor+0x2cc>
    return;
 80163c6:	bf00      	nop
  }
}
 80163c8:	3710      	adds	r7, #16
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop

080163d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b084      	sub	sp, #16
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d131      	bne.n	8016446 <USBD_SetAddress+0x76>
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	88db      	ldrh	r3, [r3, #6]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d12d      	bne.n	8016446 <USBD_SetAddress+0x76>
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	885b      	ldrh	r3, [r3, #2]
 80163ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80163f0:	d829      	bhi.n	8016446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	885b      	ldrh	r3, [r3, #2]
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80163fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016404:	b2db      	uxtb	r3, r3
 8016406:	2b03      	cmp	r3, #3
 8016408:	d104      	bne.n	8016414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801640a:	6839      	ldr	r1, [r7, #0]
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f000 f9bc 	bl	801678a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016412:	e01d      	b.n	8016450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	7bfa      	ldrb	r2, [r7, #15]
 8016418:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801641c:	7bfb      	ldrb	r3, [r7, #15]
 801641e:	4619      	mov	r1, r3
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f000 ff3b 	bl	801729c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f000 fa7a 	bl	8016920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801642c:	7bfb      	ldrb	r3, [r7, #15]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d004      	beq.n	801643c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2202      	movs	r2, #2
 8016436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801643a:	e009      	b.n	8016450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2201      	movs	r2, #1
 8016440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016444:	e004      	b.n	8016450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 f99e 	bl	801678a <USBD_CtlError>
  }
}
 801644e:	bf00      	nop
 8016450:	bf00      	nop
 8016452:	3710      	adds	r7, #16
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016462:	2300      	movs	r3, #0
 8016464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	885b      	ldrh	r3, [r3, #2]
 801646a:	b2da      	uxtb	r2, r3
 801646c:	4b4e      	ldr	r3, [pc, #312]	@ (80165a8 <USBD_SetConfig+0x150>)
 801646e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016470:	4b4d      	ldr	r3, [pc, #308]	@ (80165a8 <USBD_SetConfig+0x150>)
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	2b01      	cmp	r3, #1
 8016476:	d905      	bls.n	8016484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 f985 	bl	801678a <USBD_CtlError>
    return USBD_FAIL;
 8016480:	2303      	movs	r3, #3
 8016482:	e08c      	b.n	801659e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801648a:	b2db      	uxtb	r3, r3
 801648c:	2b02      	cmp	r3, #2
 801648e:	d002      	beq.n	8016496 <USBD_SetConfig+0x3e>
 8016490:	2b03      	cmp	r3, #3
 8016492:	d029      	beq.n	80164e8 <USBD_SetConfig+0x90>
 8016494:	e075      	b.n	8016582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016496:	4b44      	ldr	r3, [pc, #272]	@ (80165a8 <USBD_SetConfig+0x150>)
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d020      	beq.n	80164e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801649e:	4b42      	ldr	r3, [pc, #264]	@ (80165a8 <USBD_SetConfig+0x150>)
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	461a      	mov	r2, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80164a8:	4b3f      	ldr	r3, [pc, #252]	@ (80165a8 <USBD_SetConfig+0x150>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	4619      	mov	r1, r3
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f7fe ffe9 	bl	8015486 <USBD_SetClassConfig>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d008      	beq.n	80164d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80164be:	6839      	ldr	r1, [r7, #0]
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f000 f962 	bl	801678a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2202      	movs	r2, #2
 80164ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80164ce:	e065      	b.n	801659c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f000 fa25 	bl	8016920 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2203      	movs	r2, #3
 80164da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80164de:	e05d      	b.n	801659c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f000 fa1d 	bl	8016920 <USBD_CtlSendStatus>
      break;
 80164e6:	e059      	b.n	801659c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80164e8:	4b2f      	ldr	r3, [pc, #188]	@ (80165a8 <USBD_SetConfig+0x150>)
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d112      	bne.n	8016516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2202      	movs	r2, #2
 80164f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80164f8:	4b2b      	ldr	r3, [pc, #172]	@ (80165a8 <USBD_SetConfig+0x150>)
 80164fa:	781b      	ldrb	r3, [r3, #0]
 80164fc:	461a      	mov	r2, r3
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016502:	4b29      	ldr	r3, [pc, #164]	@ (80165a8 <USBD_SetConfig+0x150>)
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	4619      	mov	r1, r3
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f7fe ffd8 	bl	80154be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f000 fa06 	bl	8016920 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016514:	e042      	b.n	801659c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016516:	4b24      	ldr	r3, [pc, #144]	@ (80165a8 <USBD_SetConfig+0x150>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	461a      	mov	r2, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	d02a      	beq.n	801657a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	b2db      	uxtb	r3, r3
 801652a:	4619      	mov	r1, r3
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f7fe ffc6 	bl	80154be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016532:	4b1d      	ldr	r3, [pc, #116]	@ (80165a8 <USBD_SetConfig+0x150>)
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	461a      	mov	r2, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801653c:	4b1a      	ldr	r3, [pc, #104]	@ (80165a8 <USBD_SetConfig+0x150>)
 801653e:	781b      	ldrb	r3, [r3, #0]
 8016540:	4619      	mov	r1, r3
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f7fe ff9f 	bl	8015486 <USBD_SetClassConfig>
 8016548:	4603      	mov	r3, r0
 801654a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801654c:	7bfb      	ldrb	r3, [r7, #15]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00f      	beq.n	8016572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016552:	6839      	ldr	r1, [r7, #0]
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f000 f918 	bl	801678a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	b2db      	uxtb	r3, r3
 8016560:	4619      	mov	r1, r3
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7fe ffab 	bl	80154be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2202      	movs	r2, #2
 801656c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8016570:	e014      	b.n	801659c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 f9d4 	bl	8016920 <USBD_CtlSendStatus>
      break;
 8016578:	e010      	b.n	801659c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 f9d0 	bl	8016920 <USBD_CtlSendStatus>
      break;
 8016580:	e00c      	b.n	801659c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016582:	6839      	ldr	r1, [r7, #0]
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f000 f900 	bl	801678a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801658a:	4b07      	ldr	r3, [pc, #28]	@ (80165a8 <USBD_SetConfig+0x150>)
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	4619      	mov	r1, r3
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7fe ff94 	bl	80154be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016596:	2303      	movs	r3, #3
 8016598:	73fb      	strb	r3, [r7, #15]
      break;
 801659a:	bf00      	nop
  }

  return ret;
 801659c:	7bfb      	ldrb	r3, [r7, #15]
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3710      	adds	r7, #16
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	20001b14 	.word	0x20001b14

080165ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
 80165b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	88db      	ldrh	r3, [r3, #6]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d004      	beq.n	80165c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80165be:	6839      	ldr	r1, [r7, #0]
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f000 f8e2 	bl	801678a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80165c6:	e023      	b.n	8016610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165ce:	b2db      	uxtb	r3, r3
 80165d0:	2b02      	cmp	r3, #2
 80165d2:	dc02      	bgt.n	80165da <USBD_GetConfig+0x2e>
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	dc03      	bgt.n	80165e0 <USBD_GetConfig+0x34>
 80165d8:	e015      	b.n	8016606 <USBD_GetConfig+0x5a>
 80165da:	2b03      	cmp	r3, #3
 80165dc:	d00b      	beq.n	80165f6 <USBD_GetConfig+0x4a>
 80165de:	e012      	b.n	8016606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2200      	movs	r2, #0
 80165e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	3308      	adds	r3, #8
 80165ea:	2201      	movs	r2, #1
 80165ec:	4619      	mov	r1, r3
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f000 f93c 	bl	801686c <USBD_CtlSendData>
        break;
 80165f4:	e00c      	b.n	8016610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	3304      	adds	r3, #4
 80165fa:	2201      	movs	r2, #1
 80165fc:	4619      	mov	r1, r3
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 f934 	bl	801686c <USBD_CtlSendData>
        break;
 8016604:	e004      	b.n	8016610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016606:	6839      	ldr	r1, [r7, #0]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f000 f8be 	bl	801678a <USBD_CtlError>
        break;
 801660e:	bf00      	nop
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016628:	b2db      	uxtb	r3, r3
 801662a:	3b01      	subs	r3, #1
 801662c:	2b02      	cmp	r3, #2
 801662e:	d81e      	bhi.n	801666e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	88db      	ldrh	r3, [r3, #6]
 8016634:	2b02      	cmp	r3, #2
 8016636:	d004      	beq.n	8016642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016638:	6839      	ldr	r1, [r7, #0]
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f000 f8a5 	bl	801678a <USBD_CtlError>
        break;
 8016640:	e01a      	b.n	8016678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2201      	movs	r2, #1
 8016646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801664e:	2b00      	cmp	r3, #0
 8016650:	d005      	beq.n	801665e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	68db      	ldr	r3, [r3, #12]
 8016656:	f043 0202 	orr.w	r2, r3, #2
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	330c      	adds	r3, #12
 8016662:	2202      	movs	r2, #2
 8016664:	4619      	mov	r1, r3
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f000 f900 	bl	801686c <USBD_CtlSendData>
      break;
 801666c:	e004      	b.n	8016678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801666e:	6839      	ldr	r1, [r7, #0]
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 f88a 	bl	801678a <USBD_CtlError>
      break;
 8016676:	bf00      	nop
  }
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	885b      	ldrh	r3, [r3, #2]
 801668e:	2b01      	cmp	r3, #1
 8016690:	d107      	bne.n	80166a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2201      	movs	r2, #1
 8016696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801669a:	6878      	ldr	r0, [r7, #4]
 801669c:	f000 f940 	bl	8016920 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80166a0:	e013      	b.n	80166ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	885b      	ldrh	r3, [r3, #2]
 80166a6:	2b02      	cmp	r3, #2
 80166a8:	d10b      	bne.n	80166c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80166aa:	683b      	ldr	r3, [r7, #0]
 80166ac:	889b      	ldrh	r3, [r3, #4]
 80166ae:	0a1b      	lsrs	r3, r3, #8
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	b2da      	uxtb	r2, r3
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 f930 	bl	8016920 <USBD_CtlSendStatus>
}
 80166c0:	e003      	b.n	80166ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80166c2:	6839      	ldr	r1, [r7, #0]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f000 f860 	bl	801678a <USBD_CtlError>
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166d2:	b580      	push	{r7, lr}
 80166d4:	b082      	sub	sp, #8
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	6078      	str	r0, [r7, #4]
 80166da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	3b01      	subs	r3, #1
 80166e6:	2b02      	cmp	r3, #2
 80166e8:	d80b      	bhi.n	8016702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	885b      	ldrh	r3, [r3, #2]
 80166ee:	2b01      	cmp	r3, #1
 80166f0:	d10c      	bne.n	801670c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 f910 	bl	8016920 <USBD_CtlSendStatus>
      }
      break;
 8016700:	e004      	b.n	801670c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016702:	6839      	ldr	r1, [r7, #0]
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f000 f840 	bl	801678a <USBD_CtlError>
      break;
 801670a:	e000      	b.n	801670e <USBD_ClrFeature+0x3c>
      break;
 801670c:	bf00      	nop
  }
}
 801670e:	bf00      	nop
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}

08016716 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016716:	b580      	push	{r7, lr}
 8016718:	b084      	sub	sp, #16
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	781a      	ldrb	r2, [r3, #0]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	3301      	adds	r3, #1
 8016730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	781a      	ldrb	r2, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	3301      	adds	r3, #1
 801673e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f7ff fa40 	bl	8015bc6 <SWAPBYTE>
 8016746:	4603      	mov	r3, r0
 8016748:	461a      	mov	r2, r3
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	3301      	adds	r3, #1
 8016752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	3301      	adds	r3, #1
 8016758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801675a:	68f8      	ldr	r0, [r7, #12]
 801675c:	f7ff fa33 	bl	8015bc6 <SWAPBYTE>
 8016760:	4603      	mov	r3, r0
 8016762:	461a      	mov	r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	3301      	adds	r3, #1
 801676c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	3301      	adds	r3, #1
 8016772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	f7ff fa26 	bl	8015bc6 <SWAPBYTE>
 801677a:	4603      	mov	r3, r0
 801677c:	461a      	mov	r2, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	80da      	strh	r2, [r3, #6]
}
 8016782:	bf00      	nop
 8016784:	3710      	adds	r7, #16
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}

0801678a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801678a:	b580      	push	{r7, lr}
 801678c:	b082      	sub	sp, #8
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]
 8016792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016794:	2180      	movs	r1, #128	@ 0x80
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f000 fd16 	bl	80171c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801679c:	2100      	movs	r1, #0
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f000 fd12 	bl	80171c8 <USBD_LL_StallEP>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b086      	sub	sp, #24
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80167b8:	2300      	movs	r3, #0
 80167ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d036      	beq.n	8016830 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80167c6:	6938      	ldr	r0, [r7, #16]
 80167c8:	f000 f836 	bl	8016838 <USBD_GetLen>
 80167cc:	4603      	mov	r3, r0
 80167ce:	3301      	adds	r3, #1
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	b29a      	uxth	r2, r3
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80167da:	7dfb      	ldrb	r3, [r7, #23]
 80167dc:	68ba      	ldr	r2, [r7, #8]
 80167de:	4413      	add	r3, r2
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	7812      	ldrb	r2, [r2, #0]
 80167e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80167e6:	7dfb      	ldrb	r3, [r7, #23]
 80167e8:	3301      	adds	r3, #1
 80167ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80167ec:	7dfb      	ldrb	r3, [r7, #23]
 80167ee:	68ba      	ldr	r2, [r7, #8]
 80167f0:	4413      	add	r3, r2
 80167f2:	2203      	movs	r2, #3
 80167f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80167f6:	7dfb      	ldrb	r3, [r7, #23]
 80167f8:	3301      	adds	r3, #1
 80167fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80167fc:	e013      	b.n	8016826 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80167fe:	7dfb      	ldrb	r3, [r7, #23]
 8016800:	68ba      	ldr	r2, [r7, #8]
 8016802:	4413      	add	r3, r2
 8016804:	693a      	ldr	r2, [r7, #16]
 8016806:	7812      	ldrb	r2, [r2, #0]
 8016808:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	3301      	adds	r3, #1
 801680e:	613b      	str	r3, [r7, #16]
    idx++;
 8016810:	7dfb      	ldrb	r3, [r7, #23]
 8016812:	3301      	adds	r3, #1
 8016814:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016816:	7dfb      	ldrb	r3, [r7, #23]
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	4413      	add	r3, r2
 801681c:	2200      	movs	r2, #0
 801681e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016820:	7dfb      	ldrb	r3, [r7, #23]
 8016822:	3301      	adds	r3, #1
 8016824:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d1e7      	bne.n	80167fe <USBD_GetString+0x52>
 801682e:	e000      	b.n	8016832 <USBD_GetString+0x86>
    return;
 8016830:	bf00      	nop
  }
}
 8016832:	3718      	adds	r7, #24
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016838:	b480      	push	{r7}
 801683a:	b085      	sub	sp, #20
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016840:	2300      	movs	r3, #0
 8016842:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016848:	e005      	b.n	8016856 <USBD_GetLen+0x1e>
  {
    len++;
 801684a:	7bfb      	ldrb	r3, [r7, #15]
 801684c:	3301      	adds	r3, #1
 801684e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	3301      	adds	r3, #1
 8016854:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d1f5      	bne.n	801684a <USBD_GetLen+0x12>
  }

  return len;
 801685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016860:	4618      	mov	r0, r3
 8016862:	3714      	adds	r7, #20
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr

0801686c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b084      	sub	sp, #16
 8016870:	af00      	add	r7, sp, #0
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	2202      	movs	r2, #2
 801687c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	68ba      	ldr	r2, [r7, #8]
 8016890:	2100      	movs	r1, #0
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	f000 fd21 	bl	80172da <USBD_LL_Transmit>

  return USBD_OK;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3710      	adds	r7, #16
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80168a2:	b580      	push	{r7, lr}
 80168a4:	b084      	sub	sp, #16
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	60f8      	str	r0, [r7, #12]
 80168aa:	60b9      	str	r1, [r7, #8]
 80168ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	68ba      	ldr	r2, [r7, #8]
 80168b2:	2100      	movs	r1, #0
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f000 fd10 	bl	80172da <USBD_LL_Transmit>

  return USBD_OK;
 80168ba:	2300      	movs	r3, #0
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3710      	adds	r7, #16
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b084      	sub	sp, #16
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2203      	movs	r2, #3
 80168d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	687a      	ldr	r2, [r7, #4]
 80168dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	68ba      	ldr	r2, [r7, #8]
 80168ec:	2100      	movs	r1, #0
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f000 fd14 	bl	801731c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168f4:	2300      	movs	r3, #0
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}

080168fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80168fe:	b580      	push	{r7, lr}
 8016900:	b084      	sub	sp, #16
 8016902:	af00      	add	r7, sp, #0
 8016904:	60f8      	str	r0, [r7, #12]
 8016906:	60b9      	str	r1, [r7, #8]
 8016908:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	68ba      	ldr	r2, [r7, #8]
 801690e:	2100      	movs	r1, #0
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f000 fd03 	bl	801731c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016916:	2300      	movs	r3, #0
}
 8016918:	4618      	mov	r0, r3
 801691a:	3710      	adds	r7, #16
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2204      	movs	r2, #4
 801692c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016930:	2300      	movs	r3, #0
 8016932:	2200      	movs	r2, #0
 8016934:	2100      	movs	r1, #0
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 fccf 	bl	80172da <USBD_LL_Transmit>

  return USBD_OK;
 801693c:	2300      	movs	r3, #0
}
 801693e:	4618      	mov	r0, r3
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b082      	sub	sp, #8
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2205      	movs	r2, #5
 8016952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016956:	2300      	movs	r3, #0
 8016958:	2200      	movs	r2, #0
 801695a:	2100      	movs	r1, #0
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f000 fcdd 	bl	801731c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801696c:	b480      	push	{r7}
 801696e:	b087      	sub	sp, #28
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	4613      	mov	r3, r2
 8016978:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801697a:	2301      	movs	r3, #1
 801697c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801697e:	2300      	movs	r3, #0
 8016980:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016982:	4b1f      	ldr	r3, [pc, #124]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 8016984:	7a5b      	ldrb	r3, [r3, #9]
 8016986:	b2db      	uxtb	r3, r3
 8016988:	2b00      	cmp	r3, #0
 801698a:	d131      	bne.n	80169f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801698c:	4b1c      	ldr	r3, [pc, #112]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 801698e:	7a5b      	ldrb	r3, [r3, #9]
 8016990:	b2db      	uxtb	r3, r3
 8016992:	461a      	mov	r2, r3
 8016994:	4b1a      	ldr	r3, [pc, #104]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 8016996:	2100      	movs	r1, #0
 8016998:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801699a:	4b19      	ldr	r3, [pc, #100]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 801699c:	7a5b      	ldrb	r3, [r3, #9]
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	4a17      	ldr	r2, [pc, #92]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	4413      	add	r3, r2
 80169a6:	68fa      	ldr	r2, [r7, #12]
 80169a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80169aa:	4b15      	ldr	r3, [pc, #84]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 80169ac:	7a5b      	ldrb	r3, [r3, #9]
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	461a      	mov	r2, r3
 80169b2:	4b13      	ldr	r3, [pc, #76]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 80169b4:	4413      	add	r3, r2
 80169b6:	79fa      	ldrb	r2, [r7, #7]
 80169b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80169ba:	4b11      	ldr	r3, [pc, #68]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 80169bc:	7a5b      	ldrb	r3, [r3, #9]
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	1c5a      	adds	r2, r3, #1
 80169c2:	b2d1      	uxtb	r1, r2
 80169c4:	4a0e      	ldr	r2, [pc, #56]	@ (8016a00 <FATFS_LinkDriverEx+0x94>)
 80169c6:	7251      	strb	r1, [r2, #9]
 80169c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80169ca:	7dbb      	ldrb	r3, [r7, #22]
 80169cc:	3330      	adds	r3, #48	@ 0x30
 80169ce:	b2da      	uxtb	r2, r3
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	3301      	adds	r3, #1
 80169d8:	223a      	movs	r2, #58	@ 0x3a
 80169da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	3302      	adds	r3, #2
 80169e0:	222f      	movs	r2, #47	@ 0x2f
 80169e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	3303      	adds	r3, #3
 80169e8:	2200      	movs	r2, #0
 80169ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80169ec:	2300      	movs	r3, #0
 80169ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80169f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	371c      	adds	r7, #28
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop
 8016a00:	20001b18 	.word	0x20001b18

08016a04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016a0e:	2200      	movs	r2, #0
 8016a10:	6839      	ldr	r1, [r7, #0]
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7ff ffaa 	bl	801696c <FATFS_LinkDriverEx>
 8016a18:	4603      	mov	r3, r0
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3708      	adds	r7, #8
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
	...

08016a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016a28:	2200      	movs	r2, #0
 8016a2a:	4912      	ldr	r1, [pc, #72]	@ (8016a74 <MX_USB_DEVICE_Init+0x50>)
 8016a2c:	4812      	ldr	r0, [pc, #72]	@ (8016a78 <MX_USB_DEVICE_Init+0x54>)
 8016a2e:	f7fe fcad 	bl	801538c <USBD_Init>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d001      	beq.n	8016a3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016a38:	f7f2 fe1c 	bl	8009674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016a3c:	490f      	ldr	r1, [pc, #60]	@ (8016a7c <MX_USB_DEVICE_Init+0x58>)
 8016a3e:	480e      	ldr	r0, [pc, #56]	@ (8016a78 <MX_USB_DEVICE_Init+0x54>)
 8016a40:	f7fe fcd4 	bl	80153ec <USBD_RegisterClass>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d001      	beq.n	8016a4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016a4a:	f7f2 fe13 	bl	8009674 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016a4e:	490c      	ldr	r1, [pc, #48]	@ (8016a80 <MX_USB_DEVICE_Init+0x5c>)
 8016a50:	4809      	ldr	r0, [pc, #36]	@ (8016a78 <MX_USB_DEVICE_Init+0x54>)
 8016a52:	f7fe fc0b 	bl	801526c <USBD_CDC_RegisterInterface>
 8016a56:	4603      	mov	r3, r0
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d001      	beq.n	8016a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016a5c:	f7f2 fe0a 	bl	8009674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016a60:	4805      	ldr	r0, [pc, #20]	@ (8016a78 <MX_USB_DEVICE_Init+0x54>)
 8016a62:	f7fe fcf9 	bl	8015458 <USBD_Start>
 8016a66:	4603      	mov	r3, r0
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d001      	beq.n	8016a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016a6c:	f7f2 fe02 	bl	8009674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016a70:	bf00      	nop
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	200001a0 	.word	0x200001a0
 8016a78:	20001b24 	.word	0x20001b24
 8016a7c:	2000010c 	.word	0x2000010c
 8016a80:	2000018c 	.word	0x2000018c

08016a84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016a88:	2200      	movs	r2, #0
 8016a8a:	4905      	ldr	r1, [pc, #20]	@ (8016aa0 <CDC_Init_FS+0x1c>)
 8016a8c:	4805      	ldr	r0, [pc, #20]	@ (8016aa4 <CDC_Init_FS+0x20>)
 8016a8e:	f7fe fc07 	bl	80152a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016a92:	4905      	ldr	r1, [pc, #20]	@ (8016aa8 <CDC_Init_FS+0x24>)
 8016a94:	4803      	ldr	r0, [pc, #12]	@ (8016aa4 <CDC_Init_FS+0x20>)
 8016a96:	f7fe fc25 	bl	80152e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016a9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	20002600 	.word	0x20002600
 8016aa4:	20001b24 	.word	0x20001b24
 8016aa8:	20001e00 	.word	0x20001e00

08016aac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016aac:	b480      	push	{r7}
 8016aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016ab0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aba:	4770      	bx	lr

08016abc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016abc:	b480      	push	{r7}
 8016abe:	b083      	sub	sp, #12
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	6039      	str	r1, [r7, #0]
 8016ac6:	71fb      	strb	r3, [r7, #7]
 8016ac8:	4613      	mov	r3, r2
 8016aca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016acc:	79fb      	ldrb	r3, [r7, #7]
 8016ace:	2b23      	cmp	r3, #35	@ 0x23
 8016ad0:	d84a      	bhi.n	8016b68 <CDC_Control_FS+0xac>
 8016ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8016ad8 <CDC_Control_FS+0x1c>)
 8016ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ad8:	08016b69 	.word	0x08016b69
 8016adc:	08016b69 	.word	0x08016b69
 8016ae0:	08016b69 	.word	0x08016b69
 8016ae4:	08016b69 	.word	0x08016b69
 8016ae8:	08016b69 	.word	0x08016b69
 8016aec:	08016b69 	.word	0x08016b69
 8016af0:	08016b69 	.word	0x08016b69
 8016af4:	08016b69 	.word	0x08016b69
 8016af8:	08016b69 	.word	0x08016b69
 8016afc:	08016b69 	.word	0x08016b69
 8016b00:	08016b69 	.word	0x08016b69
 8016b04:	08016b69 	.word	0x08016b69
 8016b08:	08016b69 	.word	0x08016b69
 8016b0c:	08016b69 	.word	0x08016b69
 8016b10:	08016b69 	.word	0x08016b69
 8016b14:	08016b69 	.word	0x08016b69
 8016b18:	08016b69 	.word	0x08016b69
 8016b1c:	08016b69 	.word	0x08016b69
 8016b20:	08016b69 	.word	0x08016b69
 8016b24:	08016b69 	.word	0x08016b69
 8016b28:	08016b69 	.word	0x08016b69
 8016b2c:	08016b69 	.word	0x08016b69
 8016b30:	08016b69 	.word	0x08016b69
 8016b34:	08016b69 	.word	0x08016b69
 8016b38:	08016b69 	.word	0x08016b69
 8016b3c:	08016b69 	.word	0x08016b69
 8016b40:	08016b69 	.word	0x08016b69
 8016b44:	08016b69 	.word	0x08016b69
 8016b48:	08016b69 	.word	0x08016b69
 8016b4c:	08016b69 	.word	0x08016b69
 8016b50:	08016b69 	.word	0x08016b69
 8016b54:	08016b69 	.word	0x08016b69
 8016b58:	08016b69 	.word	0x08016b69
 8016b5c:	08016b69 	.word	0x08016b69
 8016b60:	08016b69 	.word	0x08016b69
 8016b64:	08016b69 	.word	0x08016b69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016b68:	bf00      	nop
  }

  return (USBD_OK);
 8016b6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	370c      	adds	r7, #12
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016b82:	6879      	ldr	r1, [r7, #4]
 8016b84:	4805      	ldr	r0, [pc, #20]	@ (8016b9c <CDC_Receive_FS+0x24>)
 8016b86:	f7fe fbad 	bl	80152e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016b8a:	4804      	ldr	r0, [pc, #16]	@ (8016b9c <CDC_Receive_FS+0x24>)
 8016b8c:	f7fe fbc8 	bl	8015320 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016b90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	20001b24 	.word	0x20001b24

08016ba0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b087      	sub	sp, #28
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	4613      	mov	r3, r2
 8016bac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	371c      	adds	r7, #28
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr
	...

08016bc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	4603      	mov	r3, r0
 8016bcc:	6039      	str	r1, [r7, #0]
 8016bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	2212      	movs	r2, #18
 8016bd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016bd6:	4b03      	ldr	r3, [pc, #12]	@ (8016be4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	370c      	adds	r7, #12
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr
 8016be4:	200001bc 	.word	0x200001bc

08016be8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016be8:	b480      	push	{r7}
 8016bea:	b083      	sub	sp, #12
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	6039      	str	r1, [r7, #0]
 8016bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	2204      	movs	r2, #4
 8016bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bfa:	4b03      	ldr	r3, [pc, #12]	@ (8016c08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	370c      	adds	r7, #12
 8016c00:	46bd      	mov	sp, r7
 8016c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c06:	4770      	bx	lr
 8016c08:	200001d0 	.word	0x200001d0

08016c0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	4603      	mov	r3, r0
 8016c14:	6039      	str	r1, [r7, #0]
 8016c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016c18:	79fb      	ldrb	r3, [r7, #7]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d105      	bne.n	8016c2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c1e:	683a      	ldr	r2, [r7, #0]
 8016c20:	4907      	ldr	r1, [pc, #28]	@ (8016c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8016c22:	4808      	ldr	r0, [pc, #32]	@ (8016c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c24:	f7ff fdc2 	bl	80167ac <USBD_GetString>
 8016c28:	e004      	b.n	8016c34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c2a:	683a      	ldr	r2, [r7, #0]
 8016c2c:	4904      	ldr	r1, [pc, #16]	@ (8016c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8016c2e:	4805      	ldr	r0, [pc, #20]	@ (8016c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c30:	f7ff fdbc 	bl	80167ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c34:	4b02      	ldr	r3, [pc, #8]	@ (8016c40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	3708      	adds	r7, #8
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	20002e00 	.word	0x20002e00
 8016c44:	0801d4b4 	.word	0x0801d4b4

08016c48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	4603      	mov	r3, r0
 8016c50:	6039      	str	r1, [r7, #0]
 8016c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c54:	683a      	ldr	r2, [r7, #0]
 8016c56:	4904      	ldr	r1, [pc, #16]	@ (8016c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016c58:	4804      	ldr	r0, [pc, #16]	@ (8016c6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016c5a:	f7ff fda7 	bl	80167ac <USBD_GetString>
  return USBD_StrDesc;
 8016c5e:	4b02      	ldr	r3, [pc, #8]	@ (8016c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3708      	adds	r7, #8
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	20002e00 	.word	0x20002e00
 8016c6c:	0801d4cc 	.word	0x0801d4cc

08016c70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	6039      	str	r1, [r7, #0]
 8016c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	221a      	movs	r2, #26
 8016c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c82:	f000 f843 	bl	8016d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016c86:	4b02      	ldr	r3, [pc, #8]	@ (8016c90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3708      	adds	r7, #8
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	200001d4 	.word	0x200001d4

08016c94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	6039      	str	r1, [r7, #0]
 8016c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016ca0:	79fb      	ldrb	r3, [r7, #7]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d105      	bne.n	8016cb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ca6:	683a      	ldr	r2, [r7, #0]
 8016ca8:	4907      	ldr	r1, [pc, #28]	@ (8016cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016caa:	4808      	ldr	r0, [pc, #32]	@ (8016ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016cac:	f7ff fd7e 	bl	80167ac <USBD_GetString>
 8016cb0:	e004      	b.n	8016cbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016cb2:	683a      	ldr	r2, [r7, #0]
 8016cb4:	4904      	ldr	r1, [pc, #16]	@ (8016cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016cb6:	4805      	ldr	r0, [pc, #20]	@ (8016ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016cb8:	f7ff fd78 	bl	80167ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cbc:	4b02      	ldr	r3, [pc, #8]	@ (8016cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3708      	adds	r7, #8
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	20002e00 	.word	0x20002e00
 8016ccc:	0801d4e0 	.word	0x0801d4e0

08016cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	6039      	str	r1, [r7, #0]
 8016cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cdc:	79fb      	ldrb	r3, [r7, #7]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d105      	bne.n	8016cee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016ce2:	683a      	ldr	r2, [r7, #0]
 8016ce4:	4907      	ldr	r1, [pc, #28]	@ (8016d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016ce6:	4808      	ldr	r0, [pc, #32]	@ (8016d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016ce8:	f7ff fd60 	bl	80167ac <USBD_GetString>
 8016cec:	e004      	b.n	8016cf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cee:	683a      	ldr	r2, [r7, #0]
 8016cf0:	4904      	ldr	r1, [pc, #16]	@ (8016d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cf2:	4805      	ldr	r0, [pc, #20]	@ (8016d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cf4:	f7ff fd5a 	bl	80167ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cf8:	4b02      	ldr	r3, [pc, #8]	@ (8016d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3708      	adds	r7, #8
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	20002e00 	.word	0x20002e00
 8016d08:	0801d4ec 	.word	0x0801d4ec

08016d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016d12:	4b0f      	ldr	r3, [pc, #60]	@ (8016d50 <Get_SerialNum+0x44>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016d18:	4b0e      	ldr	r3, [pc, #56]	@ (8016d54 <Get_SerialNum+0x48>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8016d58 <Get_SerialNum+0x4c>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016d24:	68fa      	ldr	r2, [r7, #12]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4413      	add	r3, r2
 8016d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d009      	beq.n	8016d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016d32:	2208      	movs	r2, #8
 8016d34:	4909      	ldr	r1, [pc, #36]	@ (8016d5c <Get_SerialNum+0x50>)
 8016d36:	68f8      	ldr	r0, [r7, #12]
 8016d38:	f000 f814 	bl	8016d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016d3c:	2204      	movs	r2, #4
 8016d3e:	4908      	ldr	r1, [pc, #32]	@ (8016d60 <Get_SerialNum+0x54>)
 8016d40:	68b8      	ldr	r0, [r7, #8]
 8016d42:	f000 f80f 	bl	8016d64 <IntToUnicode>
  }
}
 8016d46:	bf00      	nop
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	1fff7a10 	.word	0x1fff7a10
 8016d54:	1fff7a14 	.word	0x1fff7a14
 8016d58:	1fff7a18 	.word	0x1fff7a18
 8016d5c:	200001d6 	.word	0x200001d6
 8016d60:	200001e6 	.word	0x200001e6

08016d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d64:	b480      	push	{r7}
 8016d66:	b087      	sub	sp, #28
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	4613      	mov	r3, r2
 8016d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d76:	2300      	movs	r3, #0
 8016d78:	75fb      	strb	r3, [r7, #23]
 8016d7a:	e027      	b.n	8016dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	0f1b      	lsrs	r3, r3, #28
 8016d80:	2b09      	cmp	r3, #9
 8016d82:	d80b      	bhi.n	8016d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	0f1b      	lsrs	r3, r3, #28
 8016d88:	b2da      	uxtb	r2, r3
 8016d8a:	7dfb      	ldrb	r3, [r7, #23]
 8016d8c:	005b      	lsls	r3, r3, #1
 8016d8e:	4619      	mov	r1, r3
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	440b      	add	r3, r1
 8016d94:	3230      	adds	r2, #48	@ 0x30
 8016d96:	b2d2      	uxtb	r2, r2
 8016d98:	701a      	strb	r2, [r3, #0]
 8016d9a:	e00a      	b.n	8016db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	0f1b      	lsrs	r3, r3, #28
 8016da0:	b2da      	uxtb	r2, r3
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
 8016da4:	005b      	lsls	r3, r3, #1
 8016da6:	4619      	mov	r1, r3
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	440b      	add	r3, r1
 8016dac:	3237      	adds	r2, #55	@ 0x37
 8016dae:	b2d2      	uxtb	r2, r2
 8016db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	011b      	lsls	r3, r3, #4
 8016db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016db8:	7dfb      	ldrb	r3, [r7, #23]
 8016dba:	005b      	lsls	r3, r3, #1
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	68ba      	ldr	r2, [r7, #8]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016dc6:	7dfb      	ldrb	r3, [r7, #23]
 8016dc8:	3301      	adds	r3, #1
 8016dca:	75fb      	strb	r3, [r7, #23]
 8016dcc:	7dfa      	ldrb	r2, [r7, #23]
 8016dce:	79fb      	ldrb	r3, [r7, #7]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d3d3      	bcc.n	8016d7c <IntToUnicode+0x18>
  }
}
 8016dd4:	bf00      	nop
 8016dd6:	bf00      	nop
 8016dd8:	371c      	adds	r7, #28
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr
	...

08016de4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b08a      	sub	sp, #40	@ 0x28
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016dec:	f107 0314 	add.w	r3, r7, #20
 8016df0:	2200      	movs	r2, #0
 8016df2:	601a      	str	r2, [r3, #0]
 8016df4:	605a      	str	r2, [r3, #4]
 8016df6:	609a      	str	r2, [r3, #8]
 8016df8:	60da      	str	r2, [r3, #12]
 8016dfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016e04:	d13a      	bne.n	8016e7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016e06:	2300      	movs	r3, #0
 8016e08:	613b      	str	r3, [r7, #16]
 8016e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e10:	f043 0301 	orr.w	r3, r3, #1
 8016e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8016e16:	4b1b      	ldr	r3, [pc, #108]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e1a:	f003 0301 	and.w	r3, r3, #1
 8016e1e:	613b      	str	r3, [r7, #16]
 8016e20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016e22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e28:	2302      	movs	r3, #2
 8016e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016e30:	2303      	movs	r3, #3
 8016e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016e34:	230a      	movs	r3, #10
 8016e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016e38:	f107 0314 	add.w	r3, r7, #20
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4812      	ldr	r0, [pc, #72]	@ (8016e88 <HAL_PCD_MspInit+0xa4>)
 8016e40:	f7f4 ff48 	bl	800bcd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016e44:	4b0f      	ldr	r3, [pc, #60]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e48:	4a0e      	ldr	r2, [pc, #56]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e4e:	6353      	str	r3, [r2, #52]	@ 0x34
 8016e50:	2300      	movs	r3, #0
 8016e52:	60fb      	str	r3, [r7, #12]
 8016e54:	4b0b      	ldr	r3, [pc, #44]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e58:	4a0a      	ldr	r2, [pc, #40]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016e5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8016e60:	4b08      	ldr	r3, [pc, #32]	@ (8016e84 <HAL_PCD_MspInit+0xa0>)
 8016e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016e68:	60fb      	str	r3, [r7, #12]
 8016e6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	2100      	movs	r1, #0
 8016e70:	2043      	movs	r0, #67	@ 0x43
 8016e72:	f7f4 f9cc 	bl	800b20e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016e76:	2043      	movs	r0, #67	@ 0x43
 8016e78:	f7f4 f9e5 	bl	800b246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016e7c:	bf00      	nop
 8016e7e:	3728      	adds	r7, #40	@ 0x28
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	40023800 	.word	0x40023800
 8016e88:	40020000 	.word	0x40020000

08016e8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	4610      	mov	r0, r2
 8016ea4:	f7fe fb25 	bl	80154f2 <USBD_LL_SetupStage>
}
 8016ea8:	bf00      	nop
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b082      	sub	sp, #8
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	460b      	mov	r3, r1
 8016eba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8016ec2:	78fa      	ldrb	r2, [r7, #3]
 8016ec4:	6879      	ldr	r1, [r7, #4]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	00db      	lsls	r3, r3, #3
 8016eca:	4413      	add	r3, r2
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	440b      	add	r3, r1
 8016ed0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8016ed4:	681a      	ldr	r2, [r3, #0]
 8016ed6:	78fb      	ldrb	r3, [r7, #3]
 8016ed8:	4619      	mov	r1, r3
 8016eda:	f7fe fb5f 	bl	801559c <USBD_LL_DataOutStage>
}
 8016ede:	bf00      	nop
 8016ee0:	3708      	adds	r7, #8
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}

08016ee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ee6:	b580      	push	{r7, lr}
 8016ee8:	b082      	sub	sp, #8
 8016eea:	af00      	add	r7, sp, #0
 8016eec:	6078      	str	r0, [r7, #4]
 8016eee:	460b      	mov	r3, r1
 8016ef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8016ef8:	78fa      	ldrb	r2, [r7, #3]
 8016efa:	6879      	ldr	r1, [r7, #4]
 8016efc:	4613      	mov	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	4413      	add	r3, r2
 8016f02:	009b      	lsls	r3, r3, #2
 8016f04:	440b      	add	r3, r1
 8016f06:	334c      	adds	r3, #76	@ 0x4c
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	78fb      	ldrb	r3, [r7, #3]
 8016f0c:	4619      	mov	r1, r3
 8016f0e:	f7fe fbf8 	bl	8015702 <USBD_LL_DataInStage>
}
 8016f12:	bf00      	nop
 8016f14:	3708      	adds	r7, #8
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f1a:	b580      	push	{r7, lr}
 8016f1c:	b082      	sub	sp, #8
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7fe fd2c 	bl	8015986 <USBD_LL_SOF>
}
 8016f2e:	bf00      	nop
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b084      	sub	sp, #16
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016f3e:	2301      	movs	r3, #1
 8016f40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	68db      	ldr	r3, [r3, #12]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d102      	bne.n	8016f50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	73fb      	strb	r3, [r7, #15]
 8016f4e:	e008      	b.n	8016f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	2b02      	cmp	r3, #2
 8016f56:	d102      	bne.n	8016f5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016f58:	2301      	movs	r3, #1
 8016f5a:	73fb      	strb	r3, [r7, #15]
 8016f5c:	e001      	b.n	8016f62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016f5e:	f7f2 fb89 	bl	8009674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8016f68:	7bfa      	ldrb	r2, [r7, #15]
 8016f6a:	4611      	mov	r1, r2
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7fe fccc 	bl	801590a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7fe fc74 	bl	8015866 <USBD_LL_Reset>
}
 8016f7e:	bf00      	nop
 8016f80:	3710      	adds	r7, #16
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}
	...

08016f88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b082      	sub	sp, #8
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fe fcc7 	bl	801592a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	6812      	ldr	r2, [r2, #0]
 8016faa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016fae:	f043 0301 	orr.w	r3, r3, #1
 8016fb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6a1b      	ldr	r3, [r3, #32]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d005      	beq.n	8016fc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016fbc:	4b04      	ldr	r3, [pc, #16]	@ (8016fd0 <HAL_PCD_SuspendCallback+0x48>)
 8016fbe:	691b      	ldr	r3, [r3, #16]
 8016fc0:	4a03      	ldr	r2, [pc, #12]	@ (8016fd0 <HAL_PCD_SuspendCallback+0x48>)
 8016fc2:	f043 0306 	orr.w	r3, r3, #6
 8016fc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016fc8:	bf00      	nop
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	e000ed00 	.word	0xe000ed00

08016fd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7fe fcb7 	bl	8015956 <USBD_LL_Resume>
}
 8016fe8:	bf00      	nop
 8016fea:	3708      	adds	r7, #8
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017002:	78fa      	ldrb	r2, [r7, #3]
 8017004:	4611      	mov	r1, r2
 8017006:	4618      	mov	r0, r3
 8017008:	f7fe fd0f 	bl	8015a2a <USBD_LL_IsoOUTIncomplete>
}
 801700c:	bf00      	nop
 801700e:	3708      	adds	r7, #8
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	460b      	mov	r3, r1
 801701e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017026:	78fa      	ldrb	r2, [r7, #3]
 8017028:	4611      	mov	r1, r2
 801702a:	4618      	mov	r0, r3
 801702c:	f7fe fccb 	bl	80159c6 <USBD_LL_IsoINIncomplete>
}
 8017030:	bf00      	nop
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017046:	4618      	mov	r0, r3
 8017048:	f7fe fd21 	bl	8015a8e <USBD_LL_DevConnected>
}
 801704c:	bf00      	nop
 801704e:	3708      	adds	r7, #8
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}

08017054 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017062:	4618      	mov	r0, r3
 8017064:	f7fe fd1e 	bl	8015aa4 <USBD_LL_DevDisconnected>
}
 8017068:	bf00      	nop
 801706a:	3708      	adds	r7, #8
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}

08017070 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d13c      	bne.n	80170fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017080:	4a20      	ldr	r2, [pc, #128]	@ (8017104 <USBD_LL_Init+0x94>)
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	4a1e      	ldr	r2, [pc, #120]	@ (8017104 <USBD_LL_Init+0x94>)
 801708c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017090:	4b1c      	ldr	r3, [pc, #112]	@ (8017104 <USBD_LL_Init+0x94>)
 8017092:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8017096:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017098:	4b1a      	ldr	r3, [pc, #104]	@ (8017104 <USBD_LL_Init+0x94>)
 801709a:	2204      	movs	r2, #4
 801709c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801709e:	4b19      	ldr	r3, [pc, #100]	@ (8017104 <USBD_LL_Init+0x94>)
 80170a0:	2202      	movs	r2, #2
 80170a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80170a4:	4b17      	ldr	r3, [pc, #92]	@ (8017104 <USBD_LL_Init+0x94>)
 80170a6:	2200      	movs	r2, #0
 80170a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80170aa:	4b16      	ldr	r3, [pc, #88]	@ (8017104 <USBD_LL_Init+0x94>)
 80170ac:	2202      	movs	r2, #2
 80170ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80170b0:	4b14      	ldr	r3, [pc, #80]	@ (8017104 <USBD_LL_Init+0x94>)
 80170b2:	2200      	movs	r2, #0
 80170b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80170b6:	4b13      	ldr	r3, [pc, #76]	@ (8017104 <USBD_LL_Init+0x94>)
 80170b8:	2200      	movs	r2, #0
 80170ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80170bc:	4b11      	ldr	r3, [pc, #68]	@ (8017104 <USBD_LL_Init+0x94>)
 80170be:	2200      	movs	r2, #0
 80170c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80170c2:	4b10      	ldr	r3, [pc, #64]	@ (8017104 <USBD_LL_Init+0x94>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80170c8:	4b0e      	ldr	r3, [pc, #56]	@ (8017104 <USBD_LL_Init+0x94>)
 80170ca:	2200      	movs	r2, #0
 80170cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80170ce:	480d      	ldr	r0, [pc, #52]	@ (8017104 <USBD_LL_Init+0x94>)
 80170d0:	f7f6 fd53 	bl	800db7a <HAL_PCD_Init>
 80170d4:	4603      	mov	r3, r0
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d001      	beq.n	80170de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80170da:	f7f2 facb 	bl	8009674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80170de:	2180      	movs	r1, #128	@ 0x80
 80170e0:	4808      	ldr	r0, [pc, #32]	@ (8017104 <USBD_LL_Init+0x94>)
 80170e2:	f7f7 ffaa 	bl	800f03a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80170e6:	2240      	movs	r2, #64	@ 0x40
 80170e8:	2100      	movs	r1, #0
 80170ea:	4806      	ldr	r0, [pc, #24]	@ (8017104 <USBD_LL_Init+0x94>)
 80170ec:	f7f7 ff5e 	bl	800efac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80170f0:	2280      	movs	r2, #128	@ 0x80
 80170f2:	2101      	movs	r1, #1
 80170f4:	4803      	ldr	r0, [pc, #12]	@ (8017104 <USBD_LL_Init+0x94>)
 80170f6:	f7f7 ff59 	bl	800efac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80170fa:	2300      	movs	r3, #0
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	3708      	adds	r7, #8
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	20003000 	.word	0x20003000

08017108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b084      	sub	sp, #16
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017110:	2300      	movs	r3, #0
 8017112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017114:	2300      	movs	r3, #0
 8017116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801711e:	4618      	mov	r0, r3
 8017120:	f7f6 fe48 	bl	800ddb4 <HAL_PCD_Start>
 8017124:	4603      	mov	r3, r0
 8017126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017128:	7bfb      	ldrb	r3, [r7, #15]
 801712a:	4618      	mov	r0, r3
 801712c:	f000 f942 	bl	80173b4 <USBD_Get_USB_Status>
 8017130:	4603      	mov	r3, r0
 8017132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017134:	7bbb      	ldrb	r3, [r7, #14]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3710      	adds	r7, #16
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801713e:	b580      	push	{r7, lr}
 8017140:	b084      	sub	sp, #16
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]
 8017146:	4608      	mov	r0, r1
 8017148:	4611      	mov	r1, r2
 801714a:	461a      	mov	r2, r3
 801714c:	4603      	mov	r3, r0
 801714e:	70fb      	strb	r3, [r7, #3]
 8017150:	460b      	mov	r3, r1
 8017152:	70bb      	strb	r3, [r7, #2]
 8017154:	4613      	mov	r3, r2
 8017156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017158:	2300      	movs	r3, #0
 801715a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801715c:	2300      	movs	r3, #0
 801715e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017166:	78bb      	ldrb	r3, [r7, #2]
 8017168:	883a      	ldrh	r2, [r7, #0]
 801716a:	78f9      	ldrb	r1, [r7, #3]
 801716c:	f7f7 fb19 	bl	800e7a2 <HAL_PCD_EP_Open>
 8017170:	4603      	mov	r3, r0
 8017172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017174:	7bfb      	ldrb	r3, [r7, #15]
 8017176:	4618      	mov	r0, r3
 8017178:	f000 f91c 	bl	80173b4 <USBD_Get_USB_Status>
 801717c:	4603      	mov	r3, r0
 801717e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017180:	7bbb      	ldrb	r3, [r7, #14]
}
 8017182:	4618      	mov	r0, r3
 8017184:	3710      	adds	r7, #16
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}

0801718a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801718a:	b580      	push	{r7, lr}
 801718c:	b084      	sub	sp, #16
 801718e:	af00      	add	r7, sp, #0
 8017190:	6078      	str	r0, [r7, #4]
 8017192:	460b      	mov	r3, r1
 8017194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017196:	2300      	movs	r3, #0
 8017198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801719a:	2300      	movs	r3, #0
 801719c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80171a4:	78fa      	ldrb	r2, [r7, #3]
 80171a6:	4611      	mov	r1, r2
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7f7 fb62 	bl	800e872 <HAL_PCD_EP_Close>
 80171ae:	4603      	mov	r3, r0
 80171b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171b2:	7bfb      	ldrb	r3, [r7, #15]
 80171b4:	4618      	mov	r0, r3
 80171b6:	f000 f8fd 	bl	80173b4 <USBD_Get_USB_Status>
 80171ba:	4603      	mov	r3, r0
 80171bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171be:	7bbb      	ldrb	r3, [r7, #14]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3710      	adds	r7, #16
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}

080171c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b084      	sub	sp, #16
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
 80171d0:	460b      	mov	r3, r1
 80171d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171d4:	2300      	movs	r3, #0
 80171d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171d8:	2300      	movs	r3, #0
 80171da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80171e2:	78fa      	ldrb	r2, [r7, #3]
 80171e4:	4611      	mov	r1, r2
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7f7 fc3a 	bl	800ea60 <HAL_PCD_EP_SetStall>
 80171ec:	4603      	mov	r3, r0
 80171ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171f0:	7bfb      	ldrb	r3, [r7, #15]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f000 f8de 	bl	80173b4 <USBD_Get_USB_Status>
 80171f8:	4603      	mov	r3, r0
 80171fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3710      	adds	r7, #16
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}

08017206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017206:	b580      	push	{r7, lr}
 8017208:	b084      	sub	sp, #16
 801720a:	af00      	add	r7, sp, #0
 801720c:	6078      	str	r0, [r7, #4]
 801720e:	460b      	mov	r3, r1
 8017210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017212:	2300      	movs	r3, #0
 8017214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017216:	2300      	movs	r3, #0
 8017218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017220:	78fa      	ldrb	r2, [r7, #3]
 8017222:	4611      	mov	r1, r2
 8017224:	4618      	mov	r0, r3
 8017226:	f7f7 fc7f 	bl	800eb28 <HAL_PCD_EP_ClrStall>
 801722a:	4603      	mov	r3, r0
 801722c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801722e:	7bfb      	ldrb	r3, [r7, #15]
 8017230:	4618      	mov	r0, r3
 8017232:	f000 f8bf 	bl	80173b4 <USBD_Get_USB_Status>
 8017236:	4603      	mov	r3, r0
 8017238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801723a:	7bbb      	ldrb	r3, [r7, #14]
}
 801723c:	4618      	mov	r0, r3
 801723e:	3710      	adds	r7, #16
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017244:	b480      	push	{r7}
 8017246:	b085      	sub	sp, #20
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	460b      	mov	r3, r1
 801724e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801725c:	2b00      	cmp	r3, #0
 801725e:	da0b      	bge.n	8017278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017260:	78fb      	ldrb	r3, [r7, #3]
 8017262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017266:	68f9      	ldr	r1, [r7, #12]
 8017268:	4613      	mov	r3, r2
 801726a:	00db      	lsls	r3, r3, #3
 801726c:	4413      	add	r3, r2
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	440b      	add	r3, r1
 8017272:	333e      	adds	r3, #62	@ 0x3e
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	e00b      	b.n	8017290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017278:	78fb      	ldrb	r3, [r7, #3]
 801727a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801727e:	68f9      	ldr	r1, [r7, #12]
 8017280:	4613      	mov	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	4413      	add	r3, r2
 8017286:	009b      	lsls	r3, r3, #2
 8017288:	440b      	add	r3, r1
 801728a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801728e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017290:	4618      	mov	r0, r3
 8017292:	3714      	adds	r7, #20
 8017294:	46bd      	mov	sp, r7
 8017296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729a:	4770      	bx	lr

0801729c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b084      	sub	sp, #16
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	460b      	mov	r3, r1
 80172a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172a8:	2300      	movs	r3, #0
 80172aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172ac:	2300      	movs	r3, #0
 80172ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80172b6:	78fa      	ldrb	r2, [r7, #3]
 80172b8:	4611      	mov	r1, r2
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7f7 fa4c 	bl	800e758 <HAL_PCD_SetAddress>
 80172c0:	4603      	mov	r3, r0
 80172c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172c4:	7bfb      	ldrb	r3, [r7, #15]
 80172c6:	4618      	mov	r0, r3
 80172c8:	f000 f874 	bl	80173b4 <USBD_Get_USB_Status>
 80172cc:	4603      	mov	r3, r0
 80172ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3710      	adds	r7, #16
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b086      	sub	sp, #24
 80172de:	af00      	add	r7, sp, #0
 80172e0:	60f8      	str	r0, [r7, #12]
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	603b      	str	r3, [r7, #0]
 80172e6:	460b      	mov	r3, r1
 80172e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172ea:	2300      	movs	r3, #0
 80172ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172ee:	2300      	movs	r3, #0
 80172f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80172f8:	7af9      	ldrb	r1, [r7, #11]
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	687a      	ldr	r2, [r7, #4]
 80172fe:	f7f7 fb65 	bl	800e9cc <HAL_PCD_EP_Transmit>
 8017302:	4603      	mov	r3, r0
 8017304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017306:	7dfb      	ldrb	r3, [r7, #23]
 8017308:	4618      	mov	r0, r3
 801730a:	f000 f853 	bl	80173b4 <USBD_Get_USB_Status>
 801730e:	4603      	mov	r3, r0
 8017310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017312:	7dbb      	ldrb	r3, [r7, #22]
}
 8017314:	4618      	mov	r0, r3
 8017316:	3718      	adds	r7, #24
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}

0801731c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b086      	sub	sp, #24
 8017320:	af00      	add	r7, sp, #0
 8017322:	60f8      	str	r0, [r7, #12]
 8017324:	607a      	str	r2, [r7, #4]
 8017326:	603b      	str	r3, [r7, #0]
 8017328:	460b      	mov	r3, r1
 801732a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801732c:	2300      	movs	r3, #0
 801732e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017330:	2300      	movs	r3, #0
 8017332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801733a:	7af9      	ldrb	r1, [r7, #11]
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	687a      	ldr	r2, [r7, #4]
 8017340:	f7f7 fae1 	bl	800e906 <HAL_PCD_EP_Receive>
 8017344:	4603      	mov	r3, r0
 8017346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017348:	7dfb      	ldrb	r3, [r7, #23]
 801734a:	4618      	mov	r0, r3
 801734c:	f000 f832 	bl	80173b4 <USBD_Get_USB_Status>
 8017350:	4603      	mov	r3, r0
 8017352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017354:	7dbb      	ldrb	r3, [r7, #22]
}
 8017356:	4618      	mov	r0, r3
 8017358:	3718      	adds	r7, #24
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}

0801735e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801735e:	b580      	push	{r7, lr}
 8017360:	b082      	sub	sp, #8
 8017362:	af00      	add	r7, sp, #0
 8017364:	6078      	str	r0, [r7, #4]
 8017366:	460b      	mov	r3, r1
 8017368:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017370:	78fa      	ldrb	r2, [r7, #3]
 8017372:	4611      	mov	r1, r2
 8017374:	4618      	mov	r0, r3
 8017376:	f7f7 fb11 	bl	800e99c <HAL_PCD_EP_GetRxCount>
 801737a:	4603      	mov	r3, r0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017384:	b480      	push	{r7}
 8017386:	b083      	sub	sp, #12
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801738c:	4b03      	ldr	r3, [pc, #12]	@ (801739c <USBD_static_malloc+0x18>)
}
 801738e:	4618      	mov	r0, r3
 8017390:	370c      	adds	r7, #12
 8017392:	46bd      	mov	sp, r7
 8017394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017398:	4770      	bx	lr
 801739a:	bf00      	nop
 801739c:	2000350c 	.word	0x2000350c

080173a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80173a0:	b480      	push	{r7}
 80173a2:	b083      	sub	sp, #12
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]

}
 80173a8:	bf00      	nop
 80173aa:	370c      	adds	r7, #12
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b085      	sub	sp, #20
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4603      	mov	r3, r0
 80173bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173be:	2300      	movs	r3, #0
 80173c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80173c2:	79fb      	ldrb	r3, [r7, #7]
 80173c4:	2b03      	cmp	r3, #3
 80173c6:	d817      	bhi.n	80173f8 <USBD_Get_USB_Status+0x44>
 80173c8:	a201      	add	r2, pc, #4	@ (adr r2, 80173d0 <USBD_Get_USB_Status+0x1c>)
 80173ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173ce:	bf00      	nop
 80173d0:	080173e1 	.word	0x080173e1
 80173d4:	080173e7 	.word	0x080173e7
 80173d8:	080173ed 	.word	0x080173ed
 80173dc:	080173f3 	.word	0x080173f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80173e0:	2300      	movs	r3, #0
 80173e2:	73fb      	strb	r3, [r7, #15]
    break;
 80173e4:	e00b      	b.n	80173fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80173e6:	2303      	movs	r3, #3
 80173e8:	73fb      	strb	r3, [r7, #15]
    break;
 80173ea:	e008      	b.n	80173fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80173ec:	2301      	movs	r3, #1
 80173ee:	73fb      	strb	r3, [r7, #15]
    break;
 80173f0:	e005      	b.n	80173fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80173f2:	2303      	movs	r3, #3
 80173f4:	73fb      	strb	r3, [r7, #15]
    break;
 80173f6:	e002      	b.n	80173fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80173f8:	2303      	movs	r3, #3
 80173fa:	73fb      	strb	r3, [r7, #15]
    break;
 80173fc:	bf00      	nop
  }
  return usb_status;
 80173fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017400:	4618      	mov	r0, r3
 8017402:	3714      	adds	r7, #20
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <arm_pid_init_f32>:
 801740c:	edd0 6a08 	vldr	s13, [r0, #32]
 8017410:	edd0 7a06 	vldr	s15, [r0, #24]
 8017414:	ed90 7a07 	vldr	s14, [r0, #28]
 8017418:	edc0 6a02 	vstr	s13, [r0, #8]
 801741c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017420:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8017424:	eef1 7a67 	vneg.f32	s15, s15
 8017428:	ee37 7a26 	vadd.f32	s14, s14, s13
 801742c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017430:	ed80 7a00 	vstr	s14, [r0]
 8017434:	edc0 7a01 	vstr	s15, [r0, #4]
 8017438:	b161      	cbz	r1, 8017454 <arm_pid_init_f32+0x48>
 801743a:	2300      	movs	r3, #0
 801743c:	7303      	strb	r3, [r0, #12]
 801743e:	7343      	strb	r3, [r0, #13]
 8017440:	7383      	strb	r3, [r0, #14]
 8017442:	73c3      	strb	r3, [r0, #15]
 8017444:	7403      	strb	r3, [r0, #16]
 8017446:	7443      	strb	r3, [r0, #17]
 8017448:	7483      	strb	r3, [r0, #18]
 801744a:	74c3      	strb	r3, [r0, #19]
 801744c:	7503      	strb	r3, [r0, #20]
 801744e:	7543      	strb	r3, [r0, #21]
 8017450:	7583      	strb	r3, [r0, #22]
 8017452:	75c3      	strb	r3, [r0, #23]
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop

08017458 <arm_mat_sub_f32>:
 8017458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801745a:	e891 0090 	ldmia.w	r1, {r4, r7}
 801745e:	6803      	ldr	r3, [r0, #0]
 8017460:	6846      	ldr	r6, [r0, #4]
 8017462:	6855      	ldr	r5, [r2, #4]
 8017464:	42a3      	cmp	r3, r4
 8017466:	d14f      	bne.n	8017508 <arm_mat_sub_f32+0xb0>
 8017468:	6812      	ldr	r2, [r2, #0]
 801746a:	4293      	cmp	r3, r2
 801746c:	d14c      	bne.n	8017508 <arm_mat_sub_f32+0xb0>
 801746e:	8842      	ldrh	r2, [r0, #2]
 8017470:	8803      	ldrh	r3, [r0, #0]
 8017472:	fb03 f002 	mul.w	r0, r3, r2
 8017476:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 801747a:	d033      	beq.n	80174e4 <arm_mat_sub_f32+0x8c>
 801747c:	f106 0110 	add.w	r1, r6, #16
 8017480:	f107 0210 	add.w	r2, r7, #16
 8017484:	f105 0310 	add.w	r3, r5, #16
 8017488:	4674      	mov	r4, lr
 801748a:	ed51 6a03 	vldr	s13, [r1, #-12]
 801748e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8017492:	ed51 7a04 	vldr	s15, [r1, #-16]
 8017496:	ed52 5a04 	vldr	s11, [r2, #-16]
 801749a:	ed11 7a02 	vldr	s14, [r1, #-8]
 801749e:	ed12 6a02 	vldr	s12, [r2, #-8]
 80174a2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80174a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80174aa:	ed43 6a03 	vstr	s13, [r3, #-12]
 80174ae:	ed43 7a04 	vstr	s15, [r3, #-16]
 80174b2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80174b6:	ed52 6a01 	vldr	s13, [r2, #-4]
 80174ba:	ee37 7a46 	vsub.f32	s14, s14, s12
 80174be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80174c2:	3c01      	subs	r4, #1
 80174c4:	ed03 7a02 	vstr	s14, [r3, #-8]
 80174c8:	ed43 7a01 	vstr	s15, [r3, #-4]
 80174cc:	f101 0110 	add.w	r1, r1, #16
 80174d0:	f102 0210 	add.w	r2, r2, #16
 80174d4:	f103 0310 	add.w	r3, r3, #16
 80174d8:	d1d7      	bne.n	801748a <arm_mat_sub_f32+0x32>
 80174da:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80174de:	441e      	add	r6, r3
 80174e0:	441f      	add	r7, r3
 80174e2:	441d      	add	r5, r3
 80174e4:	f010 0303 	ands.w	r3, r0, #3
 80174e8:	bf18      	it	ne
 80174ea:	462a      	movne	r2, r5
 80174ec:	d009      	beq.n	8017502 <arm_mat_sub_f32+0xaa>
 80174ee:	ecf6 7a01 	vldmia	r6!, {s15}
 80174f2:	ecb7 7a01 	vldmia	r7!, {s14}
 80174f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174fa:	3b01      	subs	r3, #1
 80174fc:	ece2 7a01 	vstmia	r2!, {s15}
 8017500:	d1f5      	bne.n	80174ee <arm_mat_sub_f32+0x96>
 8017502:	2000      	movs	r0, #0
 8017504:	b240      	sxtb	r0, r0
 8017506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017508:	20fd      	movs	r0, #253	@ 0xfd
 801750a:	b240      	sxtb	r0, r0
 801750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801750e:	bf00      	nop

08017510 <arm_mat_mult_f32>:
 8017510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017514:	8843      	ldrh	r3, [r0, #2]
 8017516:	880d      	ldrh	r5, [r1, #0]
 8017518:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801751c:	6854      	ldr	r4, [r2, #4]
 801751e:	8800      	ldrh	r0, [r0, #0]
 8017520:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8017524:	b087      	sub	sp, #28
 8017526:	429d      	cmp	r5, r3
 8017528:	9003      	str	r0, [sp, #12]
 801752a:	9404      	str	r4, [sp, #16]
 801752c:	f040 808d 	bne.w	801764a <arm_mat_mult_f32+0x13a>
 8017530:	8813      	ldrh	r3, [r2, #0]
 8017532:	4283      	cmp	r3, r0
 8017534:	f040 8089 	bne.w	801764a <arm_mat_mult_f32+0x13a>
 8017538:	8853      	ldrh	r3, [r2, #2]
 801753a:	4543      	cmp	r3, r8
 801753c:	f040 8085 	bne.w	801764a <arm_mat_mult_f32+0x13a>
 8017540:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8017544:	f005 0303 	and.w	r3, r5, #3
 8017548:	461a      	mov	r2, r3
 801754a:	9301      	str	r3, [sp, #4]
 801754c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017550:	b29b      	uxth	r3, r3
 8017552:	3301      	adds	r3, #1
 8017554:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8017558:	fb0b fb03 	mul.w	fp, fp, r3
 801755c:	3a01      	subs	r2, #1
 801755e:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8017562:	00ab      	lsls	r3, r5, #2
 8017564:	b292      	uxth	r2, r2
 8017566:	9305      	str	r3, [sp, #20]
 8017568:	2300      	movs	r3, #0
 801756a:	3201      	adds	r2, #1
 801756c:	9302      	str	r3, [sp, #8]
 801756e:	460b      	mov	r3, r1
 8017570:	684c      	ldr	r4, [r1, #4]
 8017572:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8017576:	4651      	mov	r1, sl
 8017578:	ea4f 0088 	mov.w	r0, r8, lsl #2
 801757c:	46da      	mov	sl, fp
 801757e:	469b      	mov	fp, r3
 8017580:	9b04      	ldr	r3, [sp, #16]
 8017582:	9a02      	ldr	r2, [sp, #8]
 8017584:	2600      	movs	r6, #0
 8017586:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 801758a:	f10c 0510 	add.w	r5, ip, #16
 801758e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8017654 <arm_mat_mult_f32+0x144>
 8017592:	2900      	cmp	r1, #0
 8017594:	d057      	beq.n	8017646 <arm_mat_mult_f32+0x136>
 8017596:	f10e 0210 	add.w	r2, lr, #16
 801759a:	4623      	mov	r3, r4
 801759c:	ed52 5a04 	vldr	s11, [r2, #-16]
 80175a0:	edd3 6a00 	vldr	s13, [r3]
 80175a4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80175a8:	ed12 5a02 	vldr	s10, [r2, #-8]
 80175ac:	ed12 6a01 	vldr	s12, [r2, #-4]
 80175b0:	4403      	add	r3, r0
 80175b2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80175b6:	edd3 6a00 	vldr	s13, [r3]
 80175ba:	4403      	add	r3, r0
 80175bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80175c0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80175c4:	edd3 6a00 	vldr	s13, [r3]
 80175c8:	4403      	add	r3, r0
 80175ca:	ee77 5a27 	vadd.f32	s11, s14, s15
 80175ce:	ee65 7a26 	vmul.f32	s15, s10, s13
 80175d2:	edd3 6a00 	vldr	s13, [r3]
 80175d6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80175da:	3210      	adds	r2, #16
 80175dc:	ee66 7a26 	vmul.f32	s15, s12, s13
 80175e0:	42aa      	cmp	r2, r5
 80175e2:	4403      	add	r3, r0
 80175e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80175e8:	d1d8      	bne.n	801759c <arm_mat_mult_f32+0x8c>
 80175ea:	4454      	add	r4, sl
 80175ec:	4663      	mov	r3, ip
 80175ee:	9a01      	ldr	r2, [sp, #4]
 80175f0:	b162      	cbz	r2, 801760c <arm_mat_mult_f32+0xfc>
 80175f2:	eb03 0209 	add.w	r2, r3, r9
 80175f6:	ecf3 6a01 	vldmia	r3!, {s13}
 80175fa:	ed94 7a00 	vldr	s14, [r4]
 80175fe:	ee26 7a87 	vmul.f32	s14, s13, s14
 8017602:	4293      	cmp	r3, r2
 8017604:	4404      	add	r4, r0
 8017606:	ee77 7a87 	vadd.f32	s15, s15, s14
 801760a:	d1f4      	bne.n	80175f6 <arm_mat_mult_f32+0xe6>
 801760c:	ece7 7a01 	vstmia	r7!, {s15}
 8017610:	3601      	adds	r6, #1
 8017612:	b2b6      	uxth	r6, r6
 8017614:	f8db 3004 	ldr.w	r3, [fp, #4]
 8017618:	4546      	cmp	r6, r8
 801761a:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 801761e:	d1b6      	bne.n	801758e <arm_mat_mult_f32+0x7e>
 8017620:	9a03      	ldr	r2, [sp, #12]
 8017622:	9c02      	ldr	r4, [sp, #8]
 8017624:	9d05      	ldr	r5, [sp, #20]
 8017626:	3a01      	subs	r2, #1
 8017628:	4434      	add	r4, r6
 801762a:	b2a4      	uxth	r4, r4
 801762c:	b292      	uxth	r2, r2
 801762e:	9402      	str	r4, [sp, #8]
 8017630:	9203      	str	r2, [sp, #12]
 8017632:	44ae      	add	lr, r5
 8017634:	44ac      	add	ip, r5
 8017636:	461c      	mov	r4, r3
 8017638:	2a00      	cmp	r2, #0
 801763a:	d1a1      	bne.n	8017580 <arm_mat_mult_f32+0x70>
 801763c:	4610      	mov	r0, r2
 801763e:	b240      	sxtb	r0, r0
 8017640:	b007      	add	sp, #28
 8017642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017646:	4673      	mov	r3, lr
 8017648:	e7d1      	b.n	80175ee <arm_mat_mult_f32+0xde>
 801764a:	20fd      	movs	r0, #253	@ 0xfd
 801764c:	b240      	sxtb	r0, r0
 801764e:	b007      	add	sp, #28
 8017650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017654:	00000000 	.word	0x00000000

08017658 <arm_mat_inverse_f32>:
 8017658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801765c:	8803      	ldrh	r3, [r0, #0]
 801765e:	8844      	ldrh	r4, [r0, #2]
 8017660:	6845      	ldr	r5, [r0, #4]
 8017662:	684a      	ldr	r2, [r1, #4]
 8017664:	b089      	sub	sp, #36	@ 0x24
 8017666:	429c      	cmp	r4, r3
 8017668:	9202      	str	r2, [sp, #8]
 801766a:	9501      	str	r5, [sp, #4]
 801766c:	d004      	beq.n	8017678 <arm_mat_inverse_f32+0x20>
 801766e:	20fd      	movs	r0, #253	@ 0xfd
 8017670:	b240      	sxtb	r0, r0
 8017672:	b009      	add	sp, #36	@ 0x24
 8017674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017678:	880a      	ldrh	r2, [r1, #0]
 801767a:	884b      	ldrh	r3, [r1, #2]
 801767c:	4293      	cmp	r3, r2
 801767e:	d1f6      	bne.n	801766e <arm_mat_inverse_f32+0x16>
 8017680:	429c      	cmp	r4, r3
 8017682:	d1f4      	bne.n	801766e <arm_mat_inverse_f32+0x16>
 8017684:	2c00      	cmp	r4, #0
 8017686:	f000 80e4 	beq.w	8017852 <arm_mat_inverse_f32+0x1fa>
 801768a:	f104 4980 	add.w	r9, r4, #1073741824	@ 0x40000000
 801768e:	4623      	mov	r3, r4
 8017690:	f109 39ff 	add.w	r9, r9, #4294967295
 8017694:	f04f 0a00 	mov.w	sl, #0
 8017698:	1e67      	subs	r7, r4, #1
 801769a:	9007      	str	r0, [sp, #28]
 801769c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80176a0:	9e02      	ldr	r6, [sp, #8]
 80176a2:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 80176a6:	4654      	mov	r4, sl
 80176a8:	4698      	mov	r8, r3
 80176aa:	e007      	b.n	80176bc <arm_mat_inverse_f32+0x64>
 80176ac:	f001 f888 	bl	80187c0 <memset>
 80176b0:	444e      	add	r6, r9
 80176b2:	3401      	adds	r4, #1
 80176b4:	f1a9 0904 	sub.w	r9, r9, #4
 80176b8:	f10a 0a04 	add.w	sl, sl, #4
 80176bc:	4652      	mov	r2, sl
 80176be:	4630      	mov	r0, r6
 80176c0:	2100      	movs	r1, #0
 80176c2:	b114      	cbz	r4, 80176ca <arm_mat_inverse_f32+0x72>
 80176c4:	f001 f87c 	bl	80187c0 <memset>
 80176c8:	4456      	add	r6, sl
 80176ca:	f8c6 b000 	str.w	fp, [r6]
 80176ce:	42bc      	cmp	r4, r7
 80176d0:	f106 0604 	add.w	r6, r6, #4
 80176d4:	464a      	mov	r2, r9
 80176d6:	4630      	mov	r0, r6
 80176d8:	f04f 0100 	mov.w	r1, #0
 80176dc:	d1e6      	bne.n	80176ac <arm_mat_inverse_f32+0x54>
 80176de:	4643      	mov	r3, r8
 80176e0:	009e      	lsls	r6, r3, #2
 80176e2:	46a0      	mov	r8, r4
 80176e4:	2700      	movs	r7, #0
 80176e6:	461c      	mov	r4, r3
 80176e8:	f8dd c008 	ldr.w	ip, [sp, #8]
 80176ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80176f0:	1d33      	adds	r3, r6, #4
 80176f2:	9306      	str	r3, [sp, #24]
 80176f4:	46b1      	mov	r9, r6
 80176f6:	9705      	str	r7, [sp, #20]
 80176f8:	46a6      	mov	lr, r4
 80176fa:	42bc      	cmp	r4, r7
 80176fc:	edd5 6a00 	vldr	s13, [r5]
 8017700:	f000 80be 	beq.w	8017880 <arm_mat_inverse_f32+0x228>
 8017704:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80178d0 <arm_mat_inverse_f32+0x278>
 8017708:	463a      	mov	r2, r7
 801770a:	462b      	mov	r3, r5
 801770c:	edd3 7a00 	vldr	s15, [r3]
 8017710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017718:	bfd8      	it	le
 801771a:	eef1 7a67 	vnegle.f32	s15, s15
 801771e:	eef4 7a47 	vcmp.f32	s15, s14
 8017722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017726:	f102 0201 	add.w	r2, r2, #1
 801772a:	bfc8      	it	gt
 801772c:	eeb0 7a67 	vmovgt.f32	s14, s15
 8017730:	4294      	cmp	r4, r2
 8017732:	4433      	add	r3, r6
 8017734:	d1ea      	bne.n	801770c <arm_mat_inverse_f32+0xb4>
 8017736:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773e:	f000 809f 	beq.w	8017880 <arm_mat_inverse_f32+0x228>
 8017742:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774a:	bfd4      	ite	le
 801774c:	eef1 7a66 	vnegle.f32	s15, s13
 8017750:	eef0 7a66 	vmovgt.f32	s15, s13
 8017754:	eef4 7a47 	vcmp.f32	s15, s14
 8017758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775c:	d010      	beq.n	8017780 <arm_mat_inverse_f32+0x128>
 801775e:	9b03      	ldr	r3, [sp, #12]
 8017760:	b173      	cbz	r3, 8017780 <arm_mat_inverse_f32+0x128>
 8017762:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776a:	eef1 7a66 	vneg.f32	s15, s13
 801776e:	bfc8      	it	gt
 8017770:	eef0 7a66 	vmovgt.f32	s15, s13
 8017774:	eef4 7a47 	vcmp.f32	s15, s14
 8017778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801777c:	f000 8084 	beq.w	8017888 <arm_mat_inverse_f32+0x230>
 8017780:	9b05      	ldr	r3, [sp, #20]
 8017782:	b933      	cbnz	r3, 8017792 <arm_mat_inverse_f32+0x13a>
 8017784:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801778c:	d078      	beq.n	8017880 <arm_mat_inverse_f32+0x228>
 801778e:	2300      	movs	r3, #0
 8017790:	9305      	str	r3, [sp, #20]
 8017792:	eb0c 0306 	add.w	r3, ip, r6
 8017796:	9304      	str	r3, [sp, #16]
 8017798:	4672      	mov	r2, lr
 801779a:	462b      	mov	r3, r5
 801779c:	edd3 7a00 	vldr	s15, [r3]
 80177a0:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80177a4:	3a01      	subs	r2, #1
 80177a6:	ece3 7a01 	vstmia	r3!, {s15}
 80177aa:	d1f7      	bne.n	801779c <arm_mat_inverse_f32+0x144>
 80177ac:	4621      	mov	r1, r4
 80177ae:	4663      	mov	r3, ip
 80177b0:	edd3 7a00 	vldr	s15, [r3]
 80177b4:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80177b8:	3901      	subs	r1, #1
 80177ba:	ece3 7a01 	vstmia	r3!, {s15}
 80177be:	d1f7      	bne.n	80177b0 <arm_mat_inverse_f32+0x158>
 80177c0:	9802      	ldr	r0, [sp, #8]
 80177c2:	f8dd b004 	ldr.w	fp, [sp, #4]
 80177c6:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80177ca:	42b9      	cmp	r1, r7
 80177cc:	d07c      	beq.n	80178c8 <arm_mat_inverse_f32+0x270>
 80177ce:	eddb 6a00 	vldr	s13, [fp]
 80177d2:	4672      	mov	r2, lr
 80177d4:	46aa      	mov	sl, r5
 80177d6:	465b      	mov	r3, fp
 80177d8:	ecfa 7a01 	vldmia	sl!, {s15}
 80177dc:	ed93 7a00 	vldr	s14, [r3]
 80177e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177e4:	3a01      	subs	r2, #1
 80177e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80177ea:	ece3 7a01 	vstmia	r3!, {s15}
 80177ee:	d1f3      	bne.n	80177d8 <arm_mat_inverse_f32+0x180>
 80177f0:	44cb      	add	fp, r9
 80177f2:	4622      	mov	r2, r4
 80177f4:	46e2      	mov	sl, ip
 80177f6:	4603      	mov	r3, r0
 80177f8:	ecfa 7a01 	vldmia	sl!, {s15}
 80177fc:	ed93 7a00 	vldr	s14, [r3]
 8017800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017804:	3a01      	subs	r2, #1
 8017806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801780a:	ece3 7a01 	vstmia	r3!, {s15}
 801780e:	d1f3      	bne.n	80177f8 <arm_mat_inverse_f32+0x1a0>
 8017810:	4430      	add	r0, r6
 8017812:	3101      	adds	r1, #1
 8017814:	428c      	cmp	r4, r1
 8017816:	44c3      	add	fp, r8
 8017818:	d1d7      	bne.n	80177ca <arm_mat_inverse_f32+0x172>
 801781a:	9b01      	ldr	r3, [sp, #4]
 801781c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017820:	3304      	adds	r3, #4
 8017822:	9301      	str	r3, [sp, #4]
 8017824:	9b06      	ldr	r3, [sp, #24]
 8017826:	441d      	add	r5, r3
 8017828:	9b03      	ldr	r3, [sp, #12]
 801782a:	f1be 0e01 	subs.w	lr, lr, #1
 801782e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017832:	f107 0701 	add.w	r7, r7, #1
 8017836:	9303      	str	r3, [sp, #12]
 8017838:	f1a9 0904 	sub.w	r9, r9, #4
 801783c:	f47f af5d 	bne.w	80176fa <arm_mat_inverse_f32+0xa2>
 8017840:	9b05      	ldr	r3, [sp, #20]
 8017842:	b9fb      	cbnz	r3, 8017884 <arm_mat_inverse_f32+0x22c>
 8017844:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784c:	d11a      	bne.n	8017884 <arm_mat_inverse_f32+0x22c>
 801784e:	9b07      	ldr	r3, [sp, #28]
 8017850:	685d      	ldr	r5, [r3, #4]
 8017852:	fb04 f404 	mul.w	r4, r4, r4
 8017856:	b19c      	cbz	r4, 8017880 <arm_mat_inverse_f32+0x228>
 8017858:	edd5 7a00 	vldr	s15, [r5]
 801785c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017864:	d10e      	bne.n	8017884 <arm_mat_inverse_f32+0x22c>
 8017866:	3504      	adds	r5, #4
 8017868:	2300      	movs	r3, #0
 801786a:	e006      	b.n	801787a <arm_mat_inverse_f32+0x222>
 801786c:	ecf5 7a01 	vldmia	r5!, {s15}
 8017870:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017878:	d104      	bne.n	8017884 <arm_mat_inverse_f32+0x22c>
 801787a:	3301      	adds	r3, #1
 801787c:	42a3      	cmp	r3, r4
 801787e:	d1f5      	bne.n	801786c <arm_mat_inverse_f32+0x214>
 8017880:	20fb      	movs	r0, #251	@ 0xfb
 8017882:	e6f5      	b.n	8017670 <arm_mat_inverse_f32+0x18>
 8017884:	2000      	movs	r0, #0
 8017886:	e6f3      	b.n	8017670 <arm_mat_inverse_f32+0x18>
 8017888:	9b01      	ldr	r3, [sp, #4]
 801788a:	4671      	mov	r1, lr
 801788c:	462a      	mov	r2, r5
 801788e:	6810      	ldr	r0, [r2, #0]
 8017890:	f8d3 8000 	ldr.w	r8, [r3]
 8017894:	f842 8b04 	str.w	r8, [r2], #4
 8017898:	3901      	subs	r1, #1
 801789a:	f843 0b04 	str.w	r0, [r3], #4
 801789e:	d1f6      	bne.n	801788e <arm_mat_inverse_f32+0x236>
 80178a0:	eb0c 0306 	add.w	r3, ip, r6
 80178a4:	9304      	str	r3, [sp, #16]
 80178a6:	4619      	mov	r1, r3
 80178a8:	4622      	mov	r2, r4
 80178aa:	4663      	mov	r3, ip
 80178ac:	6808      	ldr	r0, [r1, #0]
 80178ae:	f8d3 8000 	ldr.w	r8, [r3]
 80178b2:	f841 8b04 	str.w	r8, [r1], #4
 80178b6:	3a01      	subs	r2, #1
 80178b8:	f843 0b04 	str.w	r0, [r3], #4
 80178bc:	d1f6      	bne.n	80178ac <arm_mat_inverse_f32+0x254>
 80178be:	2301      	movs	r3, #1
 80178c0:	edd5 6a00 	vldr	s13, [r5]
 80178c4:	9305      	str	r3, [sp, #20]
 80178c6:	e767      	b.n	8017798 <arm_mat_inverse_f32+0x140>
 80178c8:	44cb      	add	fp, r9
 80178ca:	4430      	add	r0, r6
 80178cc:	e7a1      	b.n	8017812 <arm_mat_inverse_f32+0x1ba>
 80178ce:	bf00      	nop
 80178d0:	00000000 	.word	0x00000000

080178d4 <arm_mat_init_f32>:
 80178d4:	8001      	strh	r1, [r0, #0]
 80178d6:	8042      	strh	r2, [r0, #2]
 80178d8:	6043      	str	r3, [r0, #4]
 80178da:	4770      	bx	lr

080178dc <arm_mat_add_f32>:
 80178dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178de:	e891 0090 	ldmia.w	r1, {r4, r7}
 80178e2:	6803      	ldr	r3, [r0, #0]
 80178e4:	6846      	ldr	r6, [r0, #4]
 80178e6:	6855      	ldr	r5, [r2, #4]
 80178e8:	42a3      	cmp	r3, r4
 80178ea:	d14f      	bne.n	801798c <arm_mat_add_f32+0xb0>
 80178ec:	6812      	ldr	r2, [r2, #0]
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d14c      	bne.n	801798c <arm_mat_add_f32+0xb0>
 80178f2:	8842      	ldrh	r2, [r0, #2]
 80178f4:	8803      	ldrh	r3, [r0, #0]
 80178f6:	fb03 f002 	mul.w	r0, r3, r2
 80178fa:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80178fe:	d033      	beq.n	8017968 <arm_mat_add_f32+0x8c>
 8017900:	f106 0110 	add.w	r1, r6, #16
 8017904:	f107 0210 	add.w	r2, r7, #16
 8017908:	f105 0310 	add.w	r3, r5, #16
 801790c:	4674      	mov	r4, lr
 801790e:	ed51 6a03 	vldr	s13, [r1, #-12]
 8017912:	ed12 5a03 	vldr	s10, [r2, #-12]
 8017916:	ed51 7a04 	vldr	s15, [r1, #-16]
 801791a:	ed52 5a04 	vldr	s11, [r2, #-16]
 801791e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8017922:	ed12 6a02 	vldr	s12, [r2, #-8]
 8017926:	ee76 6a85 	vadd.f32	s13, s13, s10
 801792a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801792e:	ed43 6a03 	vstr	s13, [r3, #-12]
 8017932:	ed43 7a04 	vstr	s15, [r3, #-16]
 8017936:	ed51 7a01 	vldr	s15, [r1, #-4]
 801793a:	ed52 6a01 	vldr	s13, [r2, #-4]
 801793e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017946:	3c01      	subs	r4, #1
 8017948:	ed03 7a02 	vstr	s14, [r3, #-8]
 801794c:	ed43 7a01 	vstr	s15, [r3, #-4]
 8017950:	f101 0110 	add.w	r1, r1, #16
 8017954:	f102 0210 	add.w	r2, r2, #16
 8017958:	f103 0310 	add.w	r3, r3, #16
 801795c:	d1d7      	bne.n	801790e <arm_mat_add_f32+0x32>
 801795e:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8017962:	441e      	add	r6, r3
 8017964:	441f      	add	r7, r3
 8017966:	441d      	add	r5, r3
 8017968:	f010 0303 	ands.w	r3, r0, #3
 801796c:	bf18      	it	ne
 801796e:	462a      	movne	r2, r5
 8017970:	d009      	beq.n	8017986 <arm_mat_add_f32+0xaa>
 8017972:	ecf6 7a01 	vldmia	r6!, {s15}
 8017976:	ecb7 7a01 	vldmia	r7!, {s14}
 801797a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801797e:	3b01      	subs	r3, #1
 8017980:	ece2 7a01 	vstmia	r2!, {s15}
 8017984:	d1f5      	bne.n	8017972 <arm_mat_add_f32+0x96>
 8017986:	2000      	movs	r0, #0
 8017988:	b240      	sxtb	r0, r0
 801798a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801798c:	20fd      	movs	r0, #253	@ 0xfd
 801798e:	b240      	sxtb	r0, r0
 8017990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017992:	bf00      	nop

08017994 <malloc>:
 8017994:	4b02      	ldr	r3, [pc, #8]	@ (80179a0 <malloc+0xc>)
 8017996:	4601      	mov	r1, r0
 8017998:	6818      	ldr	r0, [r3, #0]
 801799a:	f000 b825 	b.w	80179e8 <_malloc_r>
 801799e:	bf00      	nop
 80179a0:	200001fc 	.word	0x200001fc

080179a4 <sbrk_aligned>:
 80179a4:	b570      	push	{r4, r5, r6, lr}
 80179a6:	4e0f      	ldr	r6, [pc, #60]	@ (80179e4 <sbrk_aligned+0x40>)
 80179a8:	460c      	mov	r4, r1
 80179aa:	6831      	ldr	r1, [r6, #0]
 80179ac:	4605      	mov	r5, r0
 80179ae:	b911      	cbnz	r1, 80179b6 <sbrk_aligned+0x12>
 80179b0:	f000 ff46 	bl	8018840 <_sbrk_r>
 80179b4:	6030      	str	r0, [r6, #0]
 80179b6:	4621      	mov	r1, r4
 80179b8:	4628      	mov	r0, r5
 80179ba:	f000 ff41 	bl	8018840 <_sbrk_r>
 80179be:	1c43      	adds	r3, r0, #1
 80179c0:	d103      	bne.n	80179ca <sbrk_aligned+0x26>
 80179c2:	f04f 34ff 	mov.w	r4, #4294967295
 80179c6:	4620      	mov	r0, r4
 80179c8:	bd70      	pop	{r4, r5, r6, pc}
 80179ca:	1cc4      	adds	r4, r0, #3
 80179cc:	f024 0403 	bic.w	r4, r4, #3
 80179d0:	42a0      	cmp	r0, r4
 80179d2:	d0f8      	beq.n	80179c6 <sbrk_aligned+0x22>
 80179d4:	1a21      	subs	r1, r4, r0
 80179d6:	4628      	mov	r0, r5
 80179d8:	f000 ff32 	bl	8018840 <_sbrk_r>
 80179dc:	3001      	adds	r0, #1
 80179de:	d1f2      	bne.n	80179c6 <sbrk_aligned+0x22>
 80179e0:	e7ef      	b.n	80179c2 <sbrk_aligned+0x1e>
 80179e2:	bf00      	nop
 80179e4:	2000372c 	.word	0x2000372c

080179e8 <_malloc_r>:
 80179e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179ec:	1ccd      	adds	r5, r1, #3
 80179ee:	f025 0503 	bic.w	r5, r5, #3
 80179f2:	3508      	adds	r5, #8
 80179f4:	2d0c      	cmp	r5, #12
 80179f6:	bf38      	it	cc
 80179f8:	250c      	movcc	r5, #12
 80179fa:	2d00      	cmp	r5, #0
 80179fc:	4606      	mov	r6, r0
 80179fe:	db01      	blt.n	8017a04 <_malloc_r+0x1c>
 8017a00:	42a9      	cmp	r1, r5
 8017a02:	d904      	bls.n	8017a0e <_malloc_r+0x26>
 8017a04:	230c      	movs	r3, #12
 8017a06:	6033      	str	r3, [r6, #0]
 8017a08:	2000      	movs	r0, #0
 8017a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017ae4 <_malloc_r+0xfc>
 8017a12:	f000 f869 	bl	8017ae8 <__malloc_lock>
 8017a16:	f8d8 3000 	ldr.w	r3, [r8]
 8017a1a:	461c      	mov	r4, r3
 8017a1c:	bb44      	cbnz	r4, 8017a70 <_malloc_r+0x88>
 8017a1e:	4629      	mov	r1, r5
 8017a20:	4630      	mov	r0, r6
 8017a22:	f7ff ffbf 	bl	80179a4 <sbrk_aligned>
 8017a26:	1c43      	adds	r3, r0, #1
 8017a28:	4604      	mov	r4, r0
 8017a2a:	d158      	bne.n	8017ade <_malloc_r+0xf6>
 8017a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8017a30:	4627      	mov	r7, r4
 8017a32:	2f00      	cmp	r7, #0
 8017a34:	d143      	bne.n	8017abe <_malloc_r+0xd6>
 8017a36:	2c00      	cmp	r4, #0
 8017a38:	d04b      	beq.n	8017ad2 <_malloc_r+0xea>
 8017a3a:	6823      	ldr	r3, [r4, #0]
 8017a3c:	4639      	mov	r1, r7
 8017a3e:	4630      	mov	r0, r6
 8017a40:	eb04 0903 	add.w	r9, r4, r3
 8017a44:	f000 fefc 	bl	8018840 <_sbrk_r>
 8017a48:	4581      	cmp	r9, r0
 8017a4a:	d142      	bne.n	8017ad2 <_malloc_r+0xea>
 8017a4c:	6821      	ldr	r1, [r4, #0]
 8017a4e:	1a6d      	subs	r5, r5, r1
 8017a50:	4629      	mov	r1, r5
 8017a52:	4630      	mov	r0, r6
 8017a54:	f7ff ffa6 	bl	80179a4 <sbrk_aligned>
 8017a58:	3001      	adds	r0, #1
 8017a5a:	d03a      	beq.n	8017ad2 <_malloc_r+0xea>
 8017a5c:	6823      	ldr	r3, [r4, #0]
 8017a5e:	442b      	add	r3, r5
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	f8d8 3000 	ldr.w	r3, [r8]
 8017a66:	685a      	ldr	r2, [r3, #4]
 8017a68:	bb62      	cbnz	r2, 8017ac4 <_malloc_r+0xdc>
 8017a6a:	f8c8 7000 	str.w	r7, [r8]
 8017a6e:	e00f      	b.n	8017a90 <_malloc_r+0xa8>
 8017a70:	6822      	ldr	r2, [r4, #0]
 8017a72:	1b52      	subs	r2, r2, r5
 8017a74:	d420      	bmi.n	8017ab8 <_malloc_r+0xd0>
 8017a76:	2a0b      	cmp	r2, #11
 8017a78:	d917      	bls.n	8017aaa <_malloc_r+0xc2>
 8017a7a:	1961      	adds	r1, r4, r5
 8017a7c:	42a3      	cmp	r3, r4
 8017a7e:	6025      	str	r5, [r4, #0]
 8017a80:	bf18      	it	ne
 8017a82:	6059      	strne	r1, [r3, #4]
 8017a84:	6863      	ldr	r3, [r4, #4]
 8017a86:	bf08      	it	eq
 8017a88:	f8c8 1000 	streq.w	r1, [r8]
 8017a8c:	5162      	str	r2, [r4, r5]
 8017a8e:	604b      	str	r3, [r1, #4]
 8017a90:	4630      	mov	r0, r6
 8017a92:	f000 f82f 	bl	8017af4 <__malloc_unlock>
 8017a96:	f104 000b 	add.w	r0, r4, #11
 8017a9a:	1d23      	adds	r3, r4, #4
 8017a9c:	f020 0007 	bic.w	r0, r0, #7
 8017aa0:	1ac2      	subs	r2, r0, r3
 8017aa2:	bf1c      	itt	ne
 8017aa4:	1a1b      	subne	r3, r3, r0
 8017aa6:	50a3      	strne	r3, [r4, r2]
 8017aa8:	e7af      	b.n	8017a0a <_malloc_r+0x22>
 8017aaa:	6862      	ldr	r2, [r4, #4]
 8017aac:	42a3      	cmp	r3, r4
 8017aae:	bf0c      	ite	eq
 8017ab0:	f8c8 2000 	streq.w	r2, [r8]
 8017ab4:	605a      	strne	r2, [r3, #4]
 8017ab6:	e7eb      	b.n	8017a90 <_malloc_r+0xa8>
 8017ab8:	4623      	mov	r3, r4
 8017aba:	6864      	ldr	r4, [r4, #4]
 8017abc:	e7ae      	b.n	8017a1c <_malloc_r+0x34>
 8017abe:	463c      	mov	r4, r7
 8017ac0:	687f      	ldr	r7, [r7, #4]
 8017ac2:	e7b6      	b.n	8017a32 <_malloc_r+0x4a>
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	685b      	ldr	r3, [r3, #4]
 8017ac8:	42a3      	cmp	r3, r4
 8017aca:	d1fb      	bne.n	8017ac4 <_malloc_r+0xdc>
 8017acc:	2300      	movs	r3, #0
 8017ace:	6053      	str	r3, [r2, #4]
 8017ad0:	e7de      	b.n	8017a90 <_malloc_r+0xa8>
 8017ad2:	230c      	movs	r3, #12
 8017ad4:	6033      	str	r3, [r6, #0]
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	f000 f80c 	bl	8017af4 <__malloc_unlock>
 8017adc:	e794      	b.n	8017a08 <_malloc_r+0x20>
 8017ade:	6005      	str	r5, [r0, #0]
 8017ae0:	e7d6      	b.n	8017a90 <_malloc_r+0xa8>
 8017ae2:	bf00      	nop
 8017ae4:	20003730 	.word	0x20003730

08017ae8 <__malloc_lock>:
 8017ae8:	4801      	ldr	r0, [pc, #4]	@ (8017af0 <__malloc_lock+0x8>)
 8017aea:	f000 bef6 	b.w	80188da <__retarget_lock_acquire_recursive>
 8017aee:	bf00      	nop
 8017af0:	20003874 	.word	0x20003874

08017af4 <__malloc_unlock>:
 8017af4:	4801      	ldr	r0, [pc, #4]	@ (8017afc <__malloc_unlock+0x8>)
 8017af6:	f000 bef1 	b.w	80188dc <__retarget_lock_release_recursive>
 8017afa:	bf00      	nop
 8017afc:	20003874 	.word	0x20003874

08017b00 <__cvt>:
 8017b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b04:	ec57 6b10 	vmov	r6, r7, d0
 8017b08:	2f00      	cmp	r7, #0
 8017b0a:	460c      	mov	r4, r1
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	463b      	mov	r3, r7
 8017b10:	bfbb      	ittet	lt
 8017b12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8017b16:	461f      	movlt	r7, r3
 8017b18:	2300      	movge	r3, #0
 8017b1a:	232d      	movlt	r3, #45	@ 0x2d
 8017b1c:	700b      	strb	r3, [r1, #0]
 8017b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017b20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8017b24:	4691      	mov	r9, r2
 8017b26:	f023 0820 	bic.w	r8, r3, #32
 8017b2a:	bfbc      	itt	lt
 8017b2c:	4632      	movlt	r2, r6
 8017b2e:	4616      	movlt	r6, r2
 8017b30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017b34:	d005      	beq.n	8017b42 <__cvt+0x42>
 8017b36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8017b3a:	d100      	bne.n	8017b3e <__cvt+0x3e>
 8017b3c:	3401      	adds	r4, #1
 8017b3e:	2102      	movs	r1, #2
 8017b40:	e000      	b.n	8017b44 <__cvt+0x44>
 8017b42:	2103      	movs	r1, #3
 8017b44:	ab03      	add	r3, sp, #12
 8017b46:	9301      	str	r3, [sp, #4]
 8017b48:	ab02      	add	r3, sp, #8
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	ec47 6b10 	vmov	d0, r6, r7
 8017b50:	4653      	mov	r3, sl
 8017b52:	4622      	mov	r2, r4
 8017b54:	f000 ff68 	bl	8018a28 <_dtoa_r>
 8017b58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017b5c:	4605      	mov	r5, r0
 8017b5e:	d119      	bne.n	8017b94 <__cvt+0x94>
 8017b60:	f019 0f01 	tst.w	r9, #1
 8017b64:	d00e      	beq.n	8017b84 <__cvt+0x84>
 8017b66:	eb00 0904 	add.w	r9, r0, r4
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	4630      	mov	r0, r6
 8017b70:	4639      	mov	r1, r7
 8017b72:	f7e8 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b76:	b108      	cbz	r0, 8017b7c <__cvt+0x7c>
 8017b78:	f8cd 900c 	str.w	r9, [sp, #12]
 8017b7c:	2230      	movs	r2, #48	@ 0x30
 8017b7e:	9b03      	ldr	r3, [sp, #12]
 8017b80:	454b      	cmp	r3, r9
 8017b82:	d31e      	bcc.n	8017bc2 <__cvt+0xc2>
 8017b84:	9b03      	ldr	r3, [sp, #12]
 8017b86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b88:	1b5b      	subs	r3, r3, r5
 8017b8a:	4628      	mov	r0, r5
 8017b8c:	6013      	str	r3, [r2, #0]
 8017b8e:	b004      	add	sp, #16
 8017b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017b98:	eb00 0904 	add.w	r9, r0, r4
 8017b9c:	d1e5      	bne.n	8017b6a <__cvt+0x6a>
 8017b9e:	7803      	ldrb	r3, [r0, #0]
 8017ba0:	2b30      	cmp	r3, #48	@ 0x30
 8017ba2:	d10a      	bne.n	8017bba <__cvt+0xba>
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	4630      	mov	r0, r6
 8017baa:	4639      	mov	r1, r7
 8017bac:	f7e8 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bb0:	b918      	cbnz	r0, 8017bba <__cvt+0xba>
 8017bb2:	f1c4 0401 	rsb	r4, r4, #1
 8017bb6:	f8ca 4000 	str.w	r4, [sl]
 8017bba:	f8da 3000 	ldr.w	r3, [sl]
 8017bbe:	4499      	add	r9, r3
 8017bc0:	e7d3      	b.n	8017b6a <__cvt+0x6a>
 8017bc2:	1c59      	adds	r1, r3, #1
 8017bc4:	9103      	str	r1, [sp, #12]
 8017bc6:	701a      	strb	r2, [r3, #0]
 8017bc8:	e7d9      	b.n	8017b7e <__cvt+0x7e>

08017bca <__exponent>:
 8017bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bcc:	2900      	cmp	r1, #0
 8017bce:	bfba      	itte	lt
 8017bd0:	4249      	neglt	r1, r1
 8017bd2:	232d      	movlt	r3, #45	@ 0x2d
 8017bd4:	232b      	movge	r3, #43	@ 0x2b
 8017bd6:	2909      	cmp	r1, #9
 8017bd8:	7002      	strb	r2, [r0, #0]
 8017bda:	7043      	strb	r3, [r0, #1]
 8017bdc:	dd29      	ble.n	8017c32 <__exponent+0x68>
 8017bde:	f10d 0307 	add.w	r3, sp, #7
 8017be2:	461d      	mov	r5, r3
 8017be4:	270a      	movs	r7, #10
 8017be6:	461a      	mov	r2, r3
 8017be8:	fbb1 f6f7 	udiv	r6, r1, r7
 8017bec:	fb07 1416 	mls	r4, r7, r6, r1
 8017bf0:	3430      	adds	r4, #48	@ 0x30
 8017bf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017bf6:	460c      	mov	r4, r1
 8017bf8:	2c63      	cmp	r4, #99	@ 0x63
 8017bfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8017bfe:	4631      	mov	r1, r6
 8017c00:	dcf1      	bgt.n	8017be6 <__exponent+0x1c>
 8017c02:	3130      	adds	r1, #48	@ 0x30
 8017c04:	1e94      	subs	r4, r2, #2
 8017c06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017c0a:	1c41      	adds	r1, r0, #1
 8017c0c:	4623      	mov	r3, r4
 8017c0e:	42ab      	cmp	r3, r5
 8017c10:	d30a      	bcc.n	8017c28 <__exponent+0x5e>
 8017c12:	f10d 0309 	add.w	r3, sp, #9
 8017c16:	1a9b      	subs	r3, r3, r2
 8017c18:	42ac      	cmp	r4, r5
 8017c1a:	bf88      	it	hi
 8017c1c:	2300      	movhi	r3, #0
 8017c1e:	3302      	adds	r3, #2
 8017c20:	4403      	add	r3, r0
 8017c22:	1a18      	subs	r0, r3, r0
 8017c24:	b003      	add	sp, #12
 8017c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017c2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017c30:	e7ed      	b.n	8017c0e <__exponent+0x44>
 8017c32:	2330      	movs	r3, #48	@ 0x30
 8017c34:	3130      	adds	r1, #48	@ 0x30
 8017c36:	7083      	strb	r3, [r0, #2]
 8017c38:	70c1      	strb	r1, [r0, #3]
 8017c3a:	1d03      	adds	r3, r0, #4
 8017c3c:	e7f1      	b.n	8017c22 <__exponent+0x58>
	...

08017c40 <_printf_float>:
 8017c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c44:	b08d      	sub	sp, #52	@ 0x34
 8017c46:	460c      	mov	r4, r1
 8017c48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017c4c:	4616      	mov	r6, r2
 8017c4e:	461f      	mov	r7, r3
 8017c50:	4605      	mov	r5, r0
 8017c52:	f000 fdbd 	bl	80187d0 <_localeconv_r>
 8017c56:	6803      	ldr	r3, [r0, #0]
 8017c58:	9304      	str	r3, [sp, #16]
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7e8 fb08 	bl	8000270 <strlen>
 8017c60:	2300      	movs	r3, #0
 8017c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c64:	f8d8 3000 	ldr.w	r3, [r8]
 8017c68:	9005      	str	r0, [sp, #20]
 8017c6a:	3307      	adds	r3, #7
 8017c6c:	f023 0307 	bic.w	r3, r3, #7
 8017c70:	f103 0208 	add.w	r2, r3, #8
 8017c74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017c78:	f8d4 b000 	ldr.w	fp, [r4]
 8017c7c:	f8c8 2000 	str.w	r2, [r8]
 8017c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017c84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017c88:	9307      	str	r3, [sp, #28]
 8017c8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8017c8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8017c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c96:	4b9c      	ldr	r3, [pc, #624]	@ (8017f08 <_printf_float+0x2c8>)
 8017c98:	f04f 32ff 	mov.w	r2, #4294967295
 8017c9c:	f7e8 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8017ca0:	bb70      	cbnz	r0, 8017d00 <_printf_float+0xc0>
 8017ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017ca6:	4b98      	ldr	r3, [pc, #608]	@ (8017f08 <_printf_float+0x2c8>)
 8017ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8017cac:	f7e8 ff20 	bl	8000af0 <__aeabi_dcmple>
 8017cb0:	bb30      	cbnz	r0, 8017d00 <_printf_float+0xc0>
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	4640      	mov	r0, r8
 8017cb8:	4649      	mov	r1, r9
 8017cba:	f7e8 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8017cbe:	b110      	cbz	r0, 8017cc6 <_printf_float+0x86>
 8017cc0:	232d      	movs	r3, #45	@ 0x2d
 8017cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017cc6:	4a91      	ldr	r2, [pc, #580]	@ (8017f0c <_printf_float+0x2cc>)
 8017cc8:	4b91      	ldr	r3, [pc, #580]	@ (8017f10 <_printf_float+0x2d0>)
 8017cca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017cce:	bf8c      	ite	hi
 8017cd0:	4690      	movhi	r8, r2
 8017cd2:	4698      	movls	r8, r3
 8017cd4:	2303      	movs	r3, #3
 8017cd6:	6123      	str	r3, [r4, #16]
 8017cd8:	f02b 0304 	bic.w	r3, fp, #4
 8017cdc:	6023      	str	r3, [r4, #0]
 8017cde:	f04f 0900 	mov.w	r9, #0
 8017ce2:	9700      	str	r7, [sp, #0]
 8017ce4:	4633      	mov	r3, r6
 8017ce6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017ce8:	4621      	mov	r1, r4
 8017cea:	4628      	mov	r0, r5
 8017cec:	f000 f9d2 	bl	8018094 <_printf_common>
 8017cf0:	3001      	adds	r0, #1
 8017cf2:	f040 808d 	bne.w	8017e10 <_printf_float+0x1d0>
 8017cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cfa:	b00d      	add	sp, #52	@ 0x34
 8017cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d00:	4642      	mov	r2, r8
 8017d02:	464b      	mov	r3, r9
 8017d04:	4640      	mov	r0, r8
 8017d06:	4649      	mov	r1, r9
 8017d08:	f7e8 ff10 	bl	8000b2c <__aeabi_dcmpun>
 8017d0c:	b140      	cbz	r0, 8017d20 <_printf_float+0xe0>
 8017d0e:	464b      	mov	r3, r9
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	bfbc      	itt	lt
 8017d14:	232d      	movlt	r3, #45	@ 0x2d
 8017d16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8017f14 <_printf_float+0x2d4>)
 8017d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8017f18 <_printf_float+0x2d8>)
 8017d1e:	e7d4      	b.n	8017cca <_printf_float+0x8a>
 8017d20:	6863      	ldr	r3, [r4, #4]
 8017d22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8017d26:	9206      	str	r2, [sp, #24]
 8017d28:	1c5a      	adds	r2, r3, #1
 8017d2a:	d13b      	bne.n	8017da4 <_printf_float+0x164>
 8017d2c:	2306      	movs	r3, #6
 8017d2e:	6063      	str	r3, [r4, #4]
 8017d30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017d34:	2300      	movs	r3, #0
 8017d36:	6022      	str	r2, [r4, #0]
 8017d38:	9303      	str	r3, [sp, #12]
 8017d3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8017d3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017d40:	ab09      	add	r3, sp, #36	@ 0x24
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	6861      	ldr	r1, [r4, #4]
 8017d46:	ec49 8b10 	vmov	d0, r8, r9
 8017d4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017d4e:	4628      	mov	r0, r5
 8017d50:	f7ff fed6 	bl	8017b00 <__cvt>
 8017d54:	9b06      	ldr	r3, [sp, #24]
 8017d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017d58:	2b47      	cmp	r3, #71	@ 0x47
 8017d5a:	4680      	mov	r8, r0
 8017d5c:	d129      	bne.n	8017db2 <_printf_float+0x172>
 8017d5e:	1cc8      	adds	r0, r1, #3
 8017d60:	db02      	blt.n	8017d68 <_printf_float+0x128>
 8017d62:	6863      	ldr	r3, [r4, #4]
 8017d64:	4299      	cmp	r1, r3
 8017d66:	dd41      	ble.n	8017dec <_printf_float+0x1ac>
 8017d68:	f1aa 0a02 	sub.w	sl, sl, #2
 8017d6c:	fa5f fa8a 	uxtb.w	sl, sl
 8017d70:	3901      	subs	r1, #1
 8017d72:	4652      	mov	r2, sl
 8017d74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017d78:	9109      	str	r1, [sp, #36]	@ 0x24
 8017d7a:	f7ff ff26 	bl	8017bca <__exponent>
 8017d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017d80:	1813      	adds	r3, r2, r0
 8017d82:	2a01      	cmp	r2, #1
 8017d84:	4681      	mov	r9, r0
 8017d86:	6123      	str	r3, [r4, #16]
 8017d88:	dc02      	bgt.n	8017d90 <_printf_float+0x150>
 8017d8a:	6822      	ldr	r2, [r4, #0]
 8017d8c:	07d2      	lsls	r2, r2, #31
 8017d8e:	d501      	bpl.n	8017d94 <_printf_float+0x154>
 8017d90:	3301      	adds	r3, #1
 8017d92:	6123      	str	r3, [r4, #16]
 8017d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d0a2      	beq.n	8017ce2 <_printf_float+0xa2>
 8017d9c:	232d      	movs	r3, #45	@ 0x2d
 8017d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017da2:	e79e      	b.n	8017ce2 <_printf_float+0xa2>
 8017da4:	9a06      	ldr	r2, [sp, #24]
 8017da6:	2a47      	cmp	r2, #71	@ 0x47
 8017da8:	d1c2      	bne.n	8017d30 <_printf_float+0xf0>
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d1c0      	bne.n	8017d30 <_printf_float+0xf0>
 8017dae:	2301      	movs	r3, #1
 8017db0:	e7bd      	b.n	8017d2e <_printf_float+0xee>
 8017db2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017db6:	d9db      	bls.n	8017d70 <_printf_float+0x130>
 8017db8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017dbc:	d118      	bne.n	8017df0 <_printf_float+0x1b0>
 8017dbe:	2900      	cmp	r1, #0
 8017dc0:	6863      	ldr	r3, [r4, #4]
 8017dc2:	dd0b      	ble.n	8017ddc <_printf_float+0x19c>
 8017dc4:	6121      	str	r1, [r4, #16]
 8017dc6:	b913      	cbnz	r3, 8017dce <_printf_float+0x18e>
 8017dc8:	6822      	ldr	r2, [r4, #0]
 8017dca:	07d0      	lsls	r0, r2, #31
 8017dcc:	d502      	bpl.n	8017dd4 <_printf_float+0x194>
 8017dce:	3301      	adds	r3, #1
 8017dd0:	440b      	add	r3, r1
 8017dd2:	6123      	str	r3, [r4, #16]
 8017dd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017dd6:	f04f 0900 	mov.w	r9, #0
 8017dda:	e7db      	b.n	8017d94 <_printf_float+0x154>
 8017ddc:	b913      	cbnz	r3, 8017de4 <_printf_float+0x1a4>
 8017dde:	6822      	ldr	r2, [r4, #0]
 8017de0:	07d2      	lsls	r2, r2, #31
 8017de2:	d501      	bpl.n	8017de8 <_printf_float+0x1a8>
 8017de4:	3302      	adds	r3, #2
 8017de6:	e7f4      	b.n	8017dd2 <_printf_float+0x192>
 8017de8:	2301      	movs	r3, #1
 8017dea:	e7f2      	b.n	8017dd2 <_printf_float+0x192>
 8017dec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017df2:	4299      	cmp	r1, r3
 8017df4:	db05      	blt.n	8017e02 <_printf_float+0x1c2>
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	6121      	str	r1, [r4, #16]
 8017dfa:	07d8      	lsls	r0, r3, #31
 8017dfc:	d5ea      	bpl.n	8017dd4 <_printf_float+0x194>
 8017dfe:	1c4b      	adds	r3, r1, #1
 8017e00:	e7e7      	b.n	8017dd2 <_printf_float+0x192>
 8017e02:	2900      	cmp	r1, #0
 8017e04:	bfd4      	ite	le
 8017e06:	f1c1 0202 	rsble	r2, r1, #2
 8017e0a:	2201      	movgt	r2, #1
 8017e0c:	4413      	add	r3, r2
 8017e0e:	e7e0      	b.n	8017dd2 <_printf_float+0x192>
 8017e10:	6823      	ldr	r3, [r4, #0]
 8017e12:	055a      	lsls	r2, r3, #21
 8017e14:	d407      	bmi.n	8017e26 <_printf_float+0x1e6>
 8017e16:	6923      	ldr	r3, [r4, #16]
 8017e18:	4642      	mov	r2, r8
 8017e1a:	4631      	mov	r1, r6
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	47b8      	blx	r7
 8017e20:	3001      	adds	r0, #1
 8017e22:	d12b      	bne.n	8017e7c <_printf_float+0x23c>
 8017e24:	e767      	b.n	8017cf6 <_printf_float+0xb6>
 8017e26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017e2a:	f240 80dd 	bls.w	8017fe8 <_printf_float+0x3a8>
 8017e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017e32:	2200      	movs	r2, #0
 8017e34:	2300      	movs	r3, #0
 8017e36:	f7e8 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d033      	beq.n	8017ea6 <_printf_float+0x266>
 8017e3e:	4a37      	ldr	r2, [pc, #220]	@ (8017f1c <_printf_float+0x2dc>)
 8017e40:	2301      	movs	r3, #1
 8017e42:	4631      	mov	r1, r6
 8017e44:	4628      	mov	r0, r5
 8017e46:	47b8      	blx	r7
 8017e48:	3001      	adds	r0, #1
 8017e4a:	f43f af54 	beq.w	8017cf6 <_printf_float+0xb6>
 8017e4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017e52:	4543      	cmp	r3, r8
 8017e54:	db02      	blt.n	8017e5c <_printf_float+0x21c>
 8017e56:	6823      	ldr	r3, [r4, #0]
 8017e58:	07d8      	lsls	r0, r3, #31
 8017e5a:	d50f      	bpl.n	8017e7c <_printf_float+0x23c>
 8017e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017e60:	4631      	mov	r1, r6
 8017e62:	4628      	mov	r0, r5
 8017e64:	47b8      	blx	r7
 8017e66:	3001      	adds	r0, #1
 8017e68:	f43f af45 	beq.w	8017cf6 <_printf_float+0xb6>
 8017e6c:	f04f 0900 	mov.w	r9, #0
 8017e70:	f108 38ff 	add.w	r8, r8, #4294967295
 8017e74:	f104 0a1a 	add.w	sl, r4, #26
 8017e78:	45c8      	cmp	r8, r9
 8017e7a:	dc09      	bgt.n	8017e90 <_printf_float+0x250>
 8017e7c:	6823      	ldr	r3, [r4, #0]
 8017e7e:	079b      	lsls	r3, r3, #30
 8017e80:	f100 8103 	bmi.w	801808a <_printf_float+0x44a>
 8017e84:	68e0      	ldr	r0, [r4, #12]
 8017e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e88:	4298      	cmp	r0, r3
 8017e8a:	bfb8      	it	lt
 8017e8c:	4618      	movlt	r0, r3
 8017e8e:	e734      	b.n	8017cfa <_printf_float+0xba>
 8017e90:	2301      	movs	r3, #1
 8017e92:	4652      	mov	r2, sl
 8017e94:	4631      	mov	r1, r6
 8017e96:	4628      	mov	r0, r5
 8017e98:	47b8      	blx	r7
 8017e9a:	3001      	adds	r0, #1
 8017e9c:	f43f af2b 	beq.w	8017cf6 <_printf_float+0xb6>
 8017ea0:	f109 0901 	add.w	r9, r9, #1
 8017ea4:	e7e8      	b.n	8017e78 <_printf_float+0x238>
 8017ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	dc39      	bgt.n	8017f20 <_printf_float+0x2e0>
 8017eac:	4a1b      	ldr	r2, [pc, #108]	@ (8017f1c <_printf_float+0x2dc>)
 8017eae:	2301      	movs	r3, #1
 8017eb0:	4631      	mov	r1, r6
 8017eb2:	4628      	mov	r0, r5
 8017eb4:	47b8      	blx	r7
 8017eb6:	3001      	adds	r0, #1
 8017eb8:	f43f af1d 	beq.w	8017cf6 <_printf_float+0xb6>
 8017ebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017ec0:	ea59 0303 	orrs.w	r3, r9, r3
 8017ec4:	d102      	bne.n	8017ecc <_printf_float+0x28c>
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	07d9      	lsls	r1, r3, #31
 8017eca:	d5d7      	bpl.n	8017e7c <_printf_float+0x23c>
 8017ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017ed0:	4631      	mov	r1, r6
 8017ed2:	4628      	mov	r0, r5
 8017ed4:	47b8      	blx	r7
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	f43f af0d 	beq.w	8017cf6 <_printf_float+0xb6>
 8017edc:	f04f 0a00 	mov.w	sl, #0
 8017ee0:	f104 0b1a 	add.w	fp, r4, #26
 8017ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ee6:	425b      	negs	r3, r3
 8017ee8:	4553      	cmp	r3, sl
 8017eea:	dc01      	bgt.n	8017ef0 <_printf_float+0x2b0>
 8017eec:	464b      	mov	r3, r9
 8017eee:	e793      	b.n	8017e18 <_printf_float+0x1d8>
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	465a      	mov	r2, fp
 8017ef4:	4631      	mov	r1, r6
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	47b8      	blx	r7
 8017efa:	3001      	adds	r0, #1
 8017efc:	f43f aefb 	beq.w	8017cf6 <_printf_float+0xb6>
 8017f00:	f10a 0a01 	add.w	sl, sl, #1
 8017f04:	e7ee      	b.n	8017ee4 <_printf_float+0x2a4>
 8017f06:	bf00      	nop
 8017f08:	7fefffff 	.word	0x7fefffff
 8017f0c:	0801d598 	.word	0x0801d598
 8017f10:	0801d594 	.word	0x0801d594
 8017f14:	0801d5a0 	.word	0x0801d5a0
 8017f18:	0801d59c 	.word	0x0801d59c
 8017f1c:	0801d5a4 	.word	0x0801d5a4
 8017f20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017f22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017f26:	4553      	cmp	r3, sl
 8017f28:	bfa8      	it	ge
 8017f2a:	4653      	movge	r3, sl
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	4699      	mov	r9, r3
 8017f30:	dc36      	bgt.n	8017fa0 <_printf_float+0x360>
 8017f32:	f04f 0b00 	mov.w	fp, #0
 8017f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f3a:	f104 021a 	add.w	r2, r4, #26
 8017f3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017f40:	9306      	str	r3, [sp, #24]
 8017f42:	eba3 0309 	sub.w	r3, r3, r9
 8017f46:	455b      	cmp	r3, fp
 8017f48:	dc31      	bgt.n	8017fae <_printf_float+0x36e>
 8017f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f4c:	459a      	cmp	sl, r3
 8017f4e:	dc3a      	bgt.n	8017fc6 <_printf_float+0x386>
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	07da      	lsls	r2, r3, #31
 8017f54:	d437      	bmi.n	8017fc6 <_printf_float+0x386>
 8017f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f58:	ebaa 0903 	sub.w	r9, sl, r3
 8017f5c:	9b06      	ldr	r3, [sp, #24]
 8017f5e:	ebaa 0303 	sub.w	r3, sl, r3
 8017f62:	4599      	cmp	r9, r3
 8017f64:	bfa8      	it	ge
 8017f66:	4699      	movge	r9, r3
 8017f68:	f1b9 0f00 	cmp.w	r9, #0
 8017f6c:	dc33      	bgt.n	8017fd6 <_printf_float+0x396>
 8017f6e:	f04f 0800 	mov.w	r8, #0
 8017f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f76:	f104 0b1a 	add.w	fp, r4, #26
 8017f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8017f80:	eba3 0309 	sub.w	r3, r3, r9
 8017f84:	4543      	cmp	r3, r8
 8017f86:	f77f af79 	ble.w	8017e7c <_printf_float+0x23c>
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	465a      	mov	r2, fp
 8017f8e:	4631      	mov	r1, r6
 8017f90:	4628      	mov	r0, r5
 8017f92:	47b8      	blx	r7
 8017f94:	3001      	adds	r0, #1
 8017f96:	f43f aeae 	beq.w	8017cf6 <_printf_float+0xb6>
 8017f9a:	f108 0801 	add.w	r8, r8, #1
 8017f9e:	e7ec      	b.n	8017f7a <_printf_float+0x33a>
 8017fa0:	4642      	mov	r2, r8
 8017fa2:	4631      	mov	r1, r6
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	47b8      	blx	r7
 8017fa8:	3001      	adds	r0, #1
 8017faa:	d1c2      	bne.n	8017f32 <_printf_float+0x2f2>
 8017fac:	e6a3      	b.n	8017cf6 <_printf_float+0xb6>
 8017fae:	2301      	movs	r3, #1
 8017fb0:	4631      	mov	r1, r6
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	9206      	str	r2, [sp, #24]
 8017fb6:	47b8      	blx	r7
 8017fb8:	3001      	adds	r0, #1
 8017fba:	f43f ae9c 	beq.w	8017cf6 <_printf_float+0xb6>
 8017fbe:	9a06      	ldr	r2, [sp, #24]
 8017fc0:	f10b 0b01 	add.w	fp, fp, #1
 8017fc4:	e7bb      	b.n	8017f3e <_printf_float+0x2fe>
 8017fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017fca:	4631      	mov	r1, r6
 8017fcc:	4628      	mov	r0, r5
 8017fce:	47b8      	blx	r7
 8017fd0:	3001      	adds	r0, #1
 8017fd2:	d1c0      	bne.n	8017f56 <_printf_float+0x316>
 8017fd4:	e68f      	b.n	8017cf6 <_printf_float+0xb6>
 8017fd6:	9a06      	ldr	r2, [sp, #24]
 8017fd8:	464b      	mov	r3, r9
 8017fda:	4442      	add	r2, r8
 8017fdc:	4631      	mov	r1, r6
 8017fde:	4628      	mov	r0, r5
 8017fe0:	47b8      	blx	r7
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	d1c3      	bne.n	8017f6e <_printf_float+0x32e>
 8017fe6:	e686      	b.n	8017cf6 <_printf_float+0xb6>
 8017fe8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017fec:	f1ba 0f01 	cmp.w	sl, #1
 8017ff0:	dc01      	bgt.n	8017ff6 <_printf_float+0x3b6>
 8017ff2:	07db      	lsls	r3, r3, #31
 8017ff4:	d536      	bpl.n	8018064 <_printf_float+0x424>
 8017ff6:	2301      	movs	r3, #1
 8017ff8:	4642      	mov	r2, r8
 8017ffa:	4631      	mov	r1, r6
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	47b8      	blx	r7
 8018000:	3001      	adds	r0, #1
 8018002:	f43f ae78 	beq.w	8017cf6 <_printf_float+0xb6>
 8018006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801800a:	4631      	mov	r1, r6
 801800c:	4628      	mov	r0, r5
 801800e:	47b8      	blx	r7
 8018010:	3001      	adds	r0, #1
 8018012:	f43f ae70 	beq.w	8017cf6 <_printf_float+0xb6>
 8018016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801801a:	2200      	movs	r2, #0
 801801c:	2300      	movs	r3, #0
 801801e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018022:	f7e8 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8018026:	b9c0      	cbnz	r0, 801805a <_printf_float+0x41a>
 8018028:	4653      	mov	r3, sl
 801802a:	f108 0201 	add.w	r2, r8, #1
 801802e:	4631      	mov	r1, r6
 8018030:	4628      	mov	r0, r5
 8018032:	47b8      	blx	r7
 8018034:	3001      	adds	r0, #1
 8018036:	d10c      	bne.n	8018052 <_printf_float+0x412>
 8018038:	e65d      	b.n	8017cf6 <_printf_float+0xb6>
 801803a:	2301      	movs	r3, #1
 801803c:	465a      	mov	r2, fp
 801803e:	4631      	mov	r1, r6
 8018040:	4628      	mov	r0, r5
 8018042:	47b8      	blx	r7
 8018044:	3001      	adds	r0, #1
 8018046:	f43f ae56 	beq.w	8017cf6 <_printf_float+0xb6>
 801804a:	f108 0801 	add.w	r8, r8, #1
 801804e:	45d0      	cmp	r8, sl
 8018050:	dbf3      	blt.n	801803a <_printf_float+0x3fa>
 8018052:	464b      	mov	r3, r9
 8018054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018058:	e6df      	b.n	8017e1a <_printf_float+0x1da>
 801805a:	f04f 0800 	mov.w	r8, #0
 801805e:	f104 0b1a 	add.w	fp, r4, #26
 8018062:	e7f4      	b.n	801804e <_printf_float+0x40e>
 8018064:	2301      	movs	r3, #1
 8018066:	4642      	mov	r2, r8
 8018068:	e7e1      	b.n	801802e <_printf_float+0x3ee>
 801806a:	2301      	movs	r3, #1
 801806c:	464a      	mov	r2, r9
 801806e:	4631      	mov	r1, r6
 8018070:	4628      	mov	r0, r5
 8018072:	47b8      	blx	r7
 8018074:	3001      	adds	r0, #1
 8018076:	f43f ae3e 	beq.w	8017cf6 <_printf_float+0xb6>
 801807a:	f108 0801 	add.w	r8, r8, #1
 801807e:	68e3      	ldr	r3, [r4, #12]
 8018080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018082:	1a5b      	subs	r3, r3, r1
 8018084:	4543      	cmp	r3, r8
 8018086:	dcf0      	bgt.n	801806a <_printf_float+0x42a>
 8018088:	e6fc      	b.n	8017e84 <_printf_float+0x244>
 801808a:	f04f 0800 	mov.w	r8, #0
 801808e:	f104 0919 	add.w	r9, r4, #25
 8018092:	e7f4      	b.n	801807e <_printf_float+0x43e>

08018094 <_printf_common>:
 8018094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018098:	4616      	mov	r6, r2
 801809a:	4698      	mov	r8, r3
 801809c:	688a      	ldr	r2, [r1, #8]
 801809e:	690b      	ldr	r3, [r1, #16]
 80180a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80180a4:	4293      	cmp	r3, r2
 80180a6:	bfb8      	it	lt
 80180a8:	4613      	movlt	r3, r2
 80180aa:	6033      	str	r3, [r6, #0]
 80180ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80180b0:	4607      	mov	r7, r0
 80180b2:	460c      	mov	r4, r1
 80180b4:	b10a      	cbz	r2, 80180ba <_printf_common+0x26>
 80180b6:	3301      	adds	r3, #1
 80180b8:	6033      	str	r3, [r6, #0]
 80180ba:	6823      	ldr	r3, [r4, #0]
 80180bc:	0699      	lsls	r1, r3, #26
 80180be:	bf42      	ittt	mi
 80180c0:	6833      	ldrmi	r3, [r6, #0]
 80180c2:	3302      	addmi	r3, #2
 80180c4:	6033      	strmi	r3, [r6, #0]
 80180c6:	6825      	ldr	r5, [r4, #0]
 80180c8:	f015 0506 	ands.w	r5, r5, #6
 80180cc:	d106      	bne.n	80180dc <_printf_common+0x48>
 80180ce:	f104 0a19 	add.w	sl, r4, #25
 80180d2:	68e3      	ldr	r3, [r4, #12]
 80180d4:	6832      	ldr	r2, [r6, #0]
 80180d6:	1a9b      	subs	r3, r3, r2
 80180d8:	42ab      	cmp	r3, r5
 80180da:	dc26      	bgt.n	801812a <_printf_common+0x96>
 80180dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80180e0:	6822      	ldr	r2, [r4, #0]
 80180e2:	3b00      	subs	r3, #0
 80180e4:	bf18      	it	ne
 80180e6:	2301      	movne	r3, #1
 80180e8:	0692      	lsls	r2, r2, #26
 80180ea:	d42b      	bmi.n	8018144 <_printf_common+0xb0>
 80180ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80180f0:	4641      	mov	r1, r8
 80180f2:	4638      	mov	r0, r7
 80180f4:	47c8      	blx	r9
 80180f6:	3001      	adds	r0, #1
 80180f8:	d01e      	beq.n	8018138 <_printf_common+0xa4>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	6922      	ldr	r2, [r4, #16]
 80180fe:	f003 0306 	and.w	r3, r3, #6
 8018102:	2b04      	cmp	r3, #4
 8018104:	bf02      	ittt	eq
 8018106:	68e5      	ldreq	r5, [r4, #12]
 8018108:	6833      	ldreq	r3, [r6, #0]
 801810a:	1aed      	subeq	r5, r5, r3
 801810c:	68a3      	ldr	r3, [r4, #8]
 801810e:	bf0c      	ite	eq
 8018110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018114:	2500      	movne	r5, #0
 8018116:	4293      	cmp	r3, r2
 8018118:	bfc4      	itt	gt
 801811a:	1a9b      	subgt	r3, r3, r2
 801811c:	18ed      	addgt	r5, r5, r3
 801811e:	2600      	movs	r6, #0
 8018120:	341a      	adds	r4, #26
 8018122:	42b5      	cmp	r5, r6
 8018124:	d11a      	bne.n	801815c <_printf_common+0xc8>
 8018126:	2000      	movs	r0, #0
 8018128:	e008      	b.n	801813c <_printf_common+0xa8>
 801812a:	2301      	movs	r3, #1
 801812c:	4652      	mov	r2, sl
 801812e:	4641      	mov	r1, r8
 8018130:	4638      	mov	r0, r7
 8018132:	47c8      	blx	r9
 8018134:	3001      	adds	r0, #1
 8018136:	d103      	bne.n	8018140 <_printf_common+0xac>
 8018138:	f04f 30ff 	mov.w	r0, #4294967295
 801813c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018140:	3501      	adds	r5, #1
 8018142:	e7c6      	b.n	80180d2 <_printf_common+0x3e>
 8018144:	18e1      	adds	r1, r4, r3
 8018146:	1c5a      	adds	r2, r3, #1
 8018148:	2030      	movs	r0, #48	@ 0x30
 801814a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801814e:	4422      	add	r2, r4
 8018150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018158:	3302      	adds	r3, #2
 801815a:	e7c7      	b.n	80180ec <_printf_common+0x58>
 801815c:	2301      	movs	r3, #1
 801815e:	4622      	mov	r2, r4
 8018160:	4641      	mov	r1, r8
 8018162:	4638      	mov	r0, r7
 8018164:	47c8      	blx	r9
 8018166:	3001      	adds	r0, #1
 8018168:	d0e6      	beq.n	8018138 <_printf_common+0xa4>
 801816a:	3601      	adds	r6, #1
 801816c:	e7d9      	b.n	8018122 <_printf_common+0x8e>
	...

08018170 <_printf_i>:
 8018170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018174:	7e0f      	ldrb	r7, [r1, #24]
 8018176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018178:	2f78      	cmp	r7, #120	@ 0x78
 801817a:	4691      	mov	r9, r2
 801817c:	4680      	mov	r8, r0
 801817e:	460c      	mov	r4, r1
 8018180:	469a      	mov	sl, r3
 8018182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018186:	d807      	bhi.n	8018198 <_printf_i+0x28>
 8018188:	2f62      	cmp	r7, #98	@ 0x62
 801818a:	d80a      	bhi.n	80181a2 <_printf_i+0x32>
 801818c:	2f00      	cmp	r7, #0
 801818e:	f000 80d1 	beq.w	8018334 <_printf_i+0x1c4>
 8018192:	2f58      	cmp	r7, #88	@ 0x58
 8018194:	f000 80b8 	beq.w	8018308 <_printf_i+0x198>
 8018198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801819c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80181a0:	e03a      	b.n	8018218 <_printf_i+0xa8>
 80181a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80181a6:	2b15      	cmp	r3, #21
 80181a8:	d8f6      	bhi.n	8018198 <_printf_i+0x28>
 80181aa:	a101      	add	r1, pc, #4	@ (adr r1, 80181b0 <_printf_i+0x40>)
 80181ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181b0:	08018209 	.word	0x08018209
 80181b4:	0801821d 	.word	0x0801821d
 80181b8:	08018199 	.word	0x08018199
 80181bc:	08018199 	.word	0x08018199
 80181c0:	08018199 	.word	0x08018199
 80181c4:	08018199 	.word	0x08018199
 80181c8:	0801821d 	.word	0x0801821d
 80181cc:	08018199 	.word	0x08018199
 80181d0:	08018199 	.word	0x08018199
 80181d4:	08018199 	.word	0x08018199
 80181d8:	08018199 	.word	0x08018199
 80181dc:	0801831b 	.word	0x0801831b
 80181e0:	08018247 	.word	0x08018247
 80181e4:	080182d5 	.word	0x080182d5
 80181e8:	08018199 	.word	0x08018199
 80181ec:	08018199 	.word	0x08018199
 80181f0:	0801833d 	.word	0x0801833d
 80181f4:	08018199 	.word	0x08018199
 80181f8:	08018247 	.word	0x08018247
 80181fc:	08018199 	.word	0x08018199
 8018200:	08018199 	.word	0x08018199
 8018204:	080182dd 	.word	0x080182dd
 8018208:	6833      	ldr	r3, [r6, #0]
 801820a:	1d1a      	adds	r2, r3, #4
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	6032      	str	r2, [r6, #0]
 8018210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018218:	2301      	movs	r3, #1
 801821a:	e09c      	b.n	8018356 <_printf_i+0x1e6>
 801821c:	6833      	ldr	r3, [r6, #0]
 801821e:	6820      	ldr	r0, [r4, #0]
 8018220:	1d19      	adds	r1, r3, #4
 8018222:	6031      	str	r1, [r6, #0]
 8018224:	0606      	lsls	r6, r0, #24
 8018226:	d501      	bpl.n	801822c <_printf_i+0xbc>
 8018228:	681d      	ldr	r5, [r3, #0]
 801822a:	e003      	b.n	8018234 <_printf_i+0xc4>
 801822c:	0645      	lsls	r5, r0, #25
 801822e:	d5fb      	bpl.n	8018228 <_printf_i+0xb8>
 8018230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018234:	2d00      	cmp	r5, #0
 8018236:	da03      	bge.n	8018240 <_printf_i+0xd0>
 8018238:	232d      	movs	r3, #45	@ 0x2d
 801823a:	426d      	negs	r5, r5
 801823c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018240:	4858      	ldr	r0, [pc, #352]	@ (80183a4 <_printf_i+0x234>)
 8018242:	230a      	movs	r3, #10
 8018244:	e011      	b.n	801826a <_printf_i+0xfa>
 8018246:	6821      	ldr	r1, [r4, #0]
 8018248:	6833      	ldr	r3, [r6, #0]
 801824a:	0608      	lsls	r0, r1, #24
 801824c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018250:	d402      	bmi.n	8018258 <_printf_i+0xe8>
 8018252:	0649      	lsls	r1, r1, #25
 8018254:	bf48      	it	mi
 8018256:	b2ad      	uxthmi	r5, r5
 8018258:	2f6f      	cmp	r7, #111	@ 0x6f
 801825a:	4852      	ldr	r0, [pc, #328]	@ (80183a4 <_printf_i+0x234>)
 801825c:	6033      	str	r3, [r6, #0]
 801825e:	bf14      	ite	ne
 8018260:	230a      	movne	r3, #10
 8018262:	2308      	moveq	r3, #8
 8018264:	2100      	movs	r1, #0
 8018266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801826a:	6866      	ldr	r6, [r4, #4]
 801826c:	60a6      	str	r6, [r4, #8]
 801826e:	2e00      	cmp	r6, #0
 8018270:	db05      	blt.n	801827e <_printf_i+0x10e>
 8018272:	6821      	ldr	r1, [r4, #0]
 8018274:	432e      	orrs	r6, r5
 8018276:	f021 0104 	bic.w	r1, r1, #4
 801827a:	6021      	str	r1, [r4, #0]
 801827c:	d04b      	beq.n	8018316 <_printf_i+0x1a6>
 801827e:	4616      	mov	r6, r2
 8018280:	fbb5 f1f3 	udiv	r1, r5, r3
 8018284:	fb03 5711 	mls	r7, r3, r1, r5
 8018288:	5dc7      	ldrb	r7, [r0, r7]
 801828a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801828e:	462f      	mov	r7, r5
 8018290:	42bb      	cmp	r3, r7
 8018292:	460d      	mov	r5, r1
 8018294:	d9f4      	bls.n	8018280 <_printf_i+0x110>
 8018296:	2b08      	cmp	r3, #8
 8018298:	d10b      	bne.n	80182b2 <_printf_i+0x142>
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	07df      	lsls	r7, r3, #31
 801829e:	d508      	bpl.n	80182b2 <_printf_i+0x142>
 80182a0:	6923      	ldr	r3, [r4, #16]
 80182a2:	6861      	ldr	r1, [r4, #4]
 80182a4:	4299      	cmp	r1, r3
 80182a6:	bfde      	ittt	le
 80182a8:	2330      	movle	r3, #48	@ 0x30
 80182aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80182b2:	1b92      	subs	r2, r2, r6
 80182b4:	6122      	str	r2, [r4, #16]
 80182b6:	f8cd a000 	str.w	sl, [sp]
 80182ba:	464b      	mov	r3, r9
 80182bc:	aa03      	add	r2, sp, #12
 80182be:	4621      	mov	r1, r4
 80182c0:	4640      	mov	r0, r8
 80182c2:	f7ff fee7 	bl	8018094 <_printf_common>
 80182c6:	3001      	adds	r0, #1
 80182c8:	d14a      	bne.n	8018360 <_printf_i+0x1f0>
 80182ca:	f04f 30ff 	mov.w	r0, #4294967295
 80182ce:	b004      	add	sp, #16
 80182d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182d4:	6823      	ldr	r3, [r4, #0]
 80182d6:	f043 0320 	orr.w	r3, r3, #32
 80182da:	6023      	str	r3, [r4, #0]
 80182dc:	4832      	ldr	r0, [pc, #200]	@ (80183a8 <_printf_i+0x238>)
 80182de:	2778      	movs	r7, #120	@ 0x78
 80182e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80182e4:	6823      	ldr	r3, [r4, #0]
 80182e6:	6831      	ldr	r1, [r6, #0]
 80182e8:	061f      	lsls	r7, r3, #24
 80182ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80182ee:	d402      	bmi.n	80182f6 <_printf_i+0x186>
 80182f0:	065f      	lsls	r7, r3, #25
 80182f2:	bf48      	it	mi
 80182f4:	b2ad      	uxthmi	r5, r5
 80182f6:	6031      	str	r1, [r6, #0]
 80182f8:	07d9      	lsls	r1, r3, #31
 80182fa:	bf44      	itt	mi
 80182fc:	f043 0320 	orrmi.w	r3, r3, #32
 8018300:	6023      	strmi	r3, [r4, #0]
 8018302:	b11d      	cbz	r5, 801830c <_printf_i+0x19c>
 8018304:	2310      	movs	r3, #16
 8018306:	e7ad      	b.n	8018264 <_printf_i+0xf4>
 8018308:	4826      	ldr	r0, [pc, #152]	@ (80183a4 <_printf_i+0x234>)
 801830a:	e7e9      	b.n	80182e0 <_printf_i+0x170>
 801830c:	6823      	ldr	r3, [r4, #0]
 801830e:	f023 0320 	bic.w	r3, r3, #32
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	e7f6      	b.n	8018304 <_printf_i+0x194>
 8018316:	4616      	mov	r6, r2
 8018318:	e7bd      	b.n	8018296 <_printf_i+0x126>
 801831a:	6833      	ldr	r3, [r6, #0]
 801831c:	6825      	ldr	r5, [r4, #0]
 801831e:	6961      	ldr	r1, [r4, #20]
 8018320:	1d18      	adds	r0, r3, #4
 8018322:	6030      	str	r0, [r6, #0]
 8018324:	062e      	lsls	r6, r5, #24
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	d501      	bpl.n	801832e <_printf_i+0x1be>
 801832a:	6019      	str	r1, [r3, #0]
 801832c:	e002      	b.n	8018334 <_printf_i+0x1c4>
 801832e:	0668      	lsls	r0, r5, #25
 8018330:	d5fb      	bpl.n	801832a <_printf_i+0x1ba>
 8018332:	8019      	strh	r1, [r3, #0]
 8018334:	2300      	movs	r3, #0
 8018336:	6123      	str	r3, [r4, #16]
 8018338:	4616      	mov	r6, r2
 801833a:	e7bc      	b.n	80182b6 <_printf_i+0x146>
 801833c:	6833      	ldr	r3, [r6, #0]
 801833e:	1d1a      	adds	r2, r3, #4
 8018340:	6032      	str	r2, [r6, #0]
 8018342:	681e      	ldr	r6, [r3, #0]
 8018344:	6862      	ldr	r2, [r4, #4]
 8018346:	2100      	movs	r1, #0
 8018348:	4630      	mov	r0, r6
 801834a:	f7e7 ff41 	bl	80001d0 <memchr>
 801834e:	b108      	cbz	r0, 8018354 <_printf_i+0x1e4>
 8018350:	1b80      	subs	r0, r0, r6
 8018352:	6060      	str	r0, [r4, #4]
 8018354:	6863      	ldr	r3, [r4, #4]
 8018356:	6123      	str	r3, [r4, #16]
 8018358:	2300      	movs	r3, #0
 801835a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801835e:	e7aa      	b.n	80182b6 <_printf_i+0x146>
 8018360:	6923      	ldr	r3, [r4, #16]
 8018362:	4632      	mov	r2, r6
 8018364:	4649      	mov	r1, r9
 8018366:	4640      	mov	r0, r8
 8018368:	47d0      	blx	sl
 801836a:	3001      	adds	r0, #1
 801836c:	d0ad      	beq.n	80182ca <_printf_i+0x15a>
 801836e:	6823      	ldr	r3, [r4, #0]
 8018370:	079b      	lsls	r3, r3, #30
 8018372:	d413      	bmi.n	801839c <_printf_i+0x22c>
 8018374:	68e0      	ldr	r0, [r4, #12]
 8018376:	9b03      	ldr	r3, [sp, #12]
 8018378:	4298      	cmp	r0, r3
 801837a:	bfb8      	it	lt
 801837c:	4618      	movlt	r0, r3
 801837e:	e7a6      	b.n	80182ce <_printf_i+0x15e>
 8018380:	2301      	movs	r3, #1
 8018382:	4632      	mov	r2, r6
 8018384:	4649      	mov	r1, r9
 8018386:	4640      	mov	r0, r8
 8018388:	47d0      	blx	sl
 801838a:	3001      	adds	r0, #1
 801838c:	d09d      	beq.n	80182ca <_printf_i+0x15a>
 801838e:	3501      	adds	r5, #1
 8018390:	68e3      	ldr	r3, [r4, #12]
 8018392:	9903      	ldr	r1, [sp, #12]
 8018394:	1a5b      	subs	r3, r3, r1
 8018396:	42ab      	cmp	r3, r5
 8018398:	dcf2      	bgt.n	8018380 <_printf_i+0x210>
 801839a:	e7eb      	b.n	8018374 <_printf_i+0x204>
 801839c:	2500      	movs	r5, #0
 801839e:	f104 0619 	add.w	r6, r4, #25
 80183a2:	e7f5      	b.n	8018390 <_printf_i+0x220>
 80183a4:	0801d5a6 	.word	0x0801d5a6
 80183a8:	0801d5b7 	.word	0x0801d5b7

080183ac <std>:
 80183ac:	2300      	movs	r3, #0
 80183ae:	b510      	push	{r4, lr}
 80183b0:	4604      	mov	r4, r0
 80183b2:	e9c0 3300 	strd	r3, r3, [r0]
 80183b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80183ba:	6083      	str	r3, [r0, #8]
 80183bc:	8181      	strh	r1, [r0, #12]
 80183be:	6643      	str	r3, [r0, #100]	@ 0x64
 80183c0:	81c2      	strh	r2, [r0, #14]
 80183c2:	6183      	str	r3, [r0, #24]
 80183c4:	4619      	mov	r1, r3
 80183c6:	2208      	movs	r2, #8
 80183c8:	305c      	adds	r0, #92	@ 0x5c
 80183ca:	f000 f9f9 	bl	80187c0 <memset>
 80183ce:	4b0d      	ldr	r3, [pc, #52]	@ (8018404 <std+0x58>)
 80183d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80183d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018408 <std+0x5c>)
 80183d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80183d6:	4b0d      	ldr	r3, [pc, #52]	@ (801840c <std+0x60>)
 80183d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80183da:	4b0d      	ldr	r3, [pc, #52]	@ (8018410 <std+0x64>)
 80183dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80183de:	4b0d      	ldr	r3, [pc, #52]	@ (8018414 <std+0x68>)
 80183e0:	6224      	str	r4, [r4, #32]
 80183e2:	429c      	cmp	r4, r3
 80183e4:	d006      	beq.n	80183f4 <std+0x48>
 80183e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80183ea:	4294      	cmp	r4, r2
 80183ec:	d002      	beq.n	80183f4 <std+0x48>
 80183ee:	33d0      	adds	r3, #208	@ 0xd0
 80183f0:	429c      	cmp	r4, r3
 80183f2:	d105      	bne.n	8018400 <std+0x54>
 80183f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80183f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183fc:	f000 ba6c 	b.w	80188d8 <__retarget_lock_init_recursive>
 8018400:	bd10      	pop	{r4, pc}
 8018402:	bf00      	nop
 8018404:	08018611 	.word	0x08018611
 8018408:	08018633 	.word	0x08018633
 801840c:	0801866b 	.word	0x0801866b
 8018410:	0801868f 	.word	0x0801868f
 8018414:	20003734 	.word	0x20003734

08018418 <stdio_exit_handler>:
 8018418:	4a02      	ldr	r2, [pc, #8]	@ (8018424 <stdio_exit_handler+0xc>)
 801841a:	4903      	ldr	r1, [pc, #12]	@ (8018428 <stdio_exit_handler+0x10>)
 801841c:	4803      	ldr	r0, [pc, #12]	@ (801842c <stdio_exit_handler+0x14>)
 801841e:	f000 b869 	b.w	80184f4 <_fwalk_sglue>
 8018422:	bf00      	nop
 8018424:	200001f0 	.word	0x200001f0
 8018428:	0801a0dd 	.word	0x0801a0dd
 801842c:	20000200 	.word	0x20000200

08018430 <cleanup_stdio>:
 8018430:	6841      	ldr	r1, [r0, #4]
 8018432:	4b0c      	ldr	r3, [pc, #48]	@ (8018464 <cleanup_stdio+0x34>)
 8018434:	4299      	cmp	r1, r3
 8018436:	b510      	push	{r4, lr}
 8018438:	4604      	mov	r4, r0
 801843a:	d001      	beq.n	8018440 <cleanup_stdio+0x10>
 801843c:	f001 fe4e 	bl	801a0dc <_fflush_r>
 8018440:	68a1      	ldr	r1, [r4, #8]
 8018442:	4b09      	ldr	r3, [pc, #36]	@ (8018468 <cleanup_stdio+0x38>)
 8018444:	4299      	cmp	r1, r3
 8018446:	d002      	beq.n	801844e <cleanup_stdio+0x1e>
 8018448:	4620      	mov	r0, r4
 801844a:	f001 fe47 	bl	801a0dc <_fflush_r>
 801844e:	68e1      	ldr	r1, [r4, #12]
 8018450:	4b06      	ldr	r3, [pc, #24]	@ (801846c <cleanup_stdio+0x3c>)
 8018452:	4299      	cmp	r1, r3
 8018454:	d004      	beq.n	8018460 <cleanup_stdio+0x30>
 8018456:	4620      	mov	r0, r4
 8018458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801845c:	f001 be3e 	b.w	801a0dc <_fflush_r>
 8018460:	bd10      	pop	{r4, pc}
 8018462:	bf00      	nop
 8018464:	20003734 	.word	0x20003734
 8018468:	2000379c 	.word	0x2000379c
 801846c:	20003804 	.word	0x20003804

08018470 <global_stdio_init.part.0>:
 8018470:	b510      	push	{r4, lr}
 8018472:	4b0b      	ldr	r3, [pc, #44]	@ (80184a0 <global_stdio_init.part.0+0x30>)
 8018474:	4c0b      	ldr	r4, [pc, #44]	@ (80184a4 <global_stdio_init.part.0+0x34>)
 8018476:	4a0c      	ldr	r2, [pc, #48]	@ (80184a8 <global_stdio_init.part.0+0x38>)
 8018478:	601a      	str	r2, [r3, #0]
 801847a:	4620      	mov	r0, r4
 801847c:	2200      	movs	r2, #0
 801847e:	2104      	movs	r1, #4
 8018480:	f7ff ff94 	bl	80183ac <std>
 8018484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018488:	2201      	movs	r2, #1
 801848a:	2109      	movs	r1, #9
 801848c:	f7ff ff8e 	bl	80183ac <std>
 8018490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018494:	2202      	movs	r2, #2
 8018496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801849a:	2112      	movs	r1, #18
 801849c:	f7ff bf86 	b.w	80183ac <std>
 80184a0:	2000386c 	.word	0x2000386c
 80184a4:	20003734 	.word	0x20003734
 80184a8:	08018419 	.word	0x08018419

080184ac <__sfp_lock_acquire>:
 80184ac:	4801      	ldr	r0, [pc, #4]	@ (80184b4 <__sfp_lock_acquire+0x8>)
 80184ae:	f000 ba14 	b.w	80188da <__retarget_lock_acquire_recursive>
 80184b2:	bf00      	nop
 80184b4:	20003875 	.word	0x20003875

080184b8 <__sfp_lock_release>:
 80184b8:	4801      	ldr	r0, [pc, #4]	@ (80184c0 <__sfp_lock_release+0x8>)
 80184ba:	f000 ba0f 	b.w	80188dc <__retarget_lock_release_recursive>
 80184be:	bf00      	nop
 80184c0:	20003875 	.word	0x20003875

080184c4 <__sinit>:
 80184c4:	b510      	push	{r4, lr}
 80184c6:	4604      	mov	r4, r0
 80184c8:	f7ff fff0 	bl	80184ac <__sfp_lock_acquire>
 80184cc:	6a23      	ldr	r3, [r4, #32]
 80184ce:	b11b      	cbz	r3, 80184d8 <__sinit+0x14>
 80184d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184d4:	f7ff bff0 	b.w	80184b8 <__sfp_lock_release>
 80184d8:	4b04      	ldr	r3, [pc, #16]	@ (80184ec <__sinit+0x28>)
 80184da:	6223      	str	r3, [r4, #32]
 80184dc:	4b04      	ldr	r3, [pc, #16]	@ (80184f0 <__sinit+0x2c>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d1f5      	bne.n	80184d0 <__sinit+0xc>
 80184e4:	f7ff ffc4 	bl	8018470 <global_stdio_init.part.0>
 80184e8:	e7f2      	b.n	80184d0 <__sinit+0xc>
 80184ea:	bf00      	nop
 80184ec:	08018431 	.word	0x08018431
 80184f0:	2000386c 	.word	0x2000386c

080184f4 <_fwalk_sglue>:
 80184f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f8:	4607      	mov	r7, r0
 80184fa:	4688      	mov	r8, r1
 80184fc:	4614      	mov	r4, r2
 80184fe:	2600      	movs	r6, #0
 8018500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018504:	f1b9 0901 	subs.w	r9, r9, #1
 8018508:	d505      	bpl.n	8018516 <_fwalk_sglue+0x22>
 801850a:	6824      	ldr	r4, [r4, #0]
 801850c:	2c00      	cmp	r4, #0
 801850e:	d1f7      	bne.n	8018500 <_fwalk_sglue+0xc>
 8018510:	4630      	mov	r0, r6
 8018512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018516:	89ab      	ldrh	r3, [r5, #12]
 8018518:	2b01      	cmp	r3, #1
 801851a:	d907      	bls.n	801852c <_fwalk_sglue+0x38>
 801851c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018520:	3301      	adds	r3, #1
 8018522:	d003      	beq.n	801852c <_fwalk_sglue+0x38>
 8018524:	4629      	mov	r1, r5
 8018526:	4638      	mov	r0, r7
 8018528:	47c0      	blx	r8
 801852a:	4306      	orrs	r6, r0
 801852c:	3568      	adds	r5, #104	@ 0x68
 801852e:	e7e9      	b.n	8018504 <_fwalk_sglue+0x10>

08018530 <iprintf>:
 8018530:	b40f      	push	{r0, r1, r2, r3}
 8018532:	b507      	push	{r0, r1, r2, lr}
 8018534:	4906      	ldr	r1, [pc, #24]	@ (8018550 <iprintf+0x20>)
 8018536:	ab04      	add	r3, sp, #16
 8018538:	6808      	ldr	r0, [r1, #0]
 801853a:	f853 2b04 	ldr.w	r2, [r3], #4
 801853e:	6881      	ldr	r1, [r0, #8]
 8018540:	9301      	str	r3, [sp, #4]
 8018542:	f001 fc2f 	bl	8019da4 <_vfiprintf_r>
 8018546:	b003      	add	sp, #12
 8018548:	f85d eb04 	ldr.w	lr, [sp], #4
 801854c:	b004      	add	sp, #16
 801854e:	4770      	bx	lr
 8018550:	200001fc 	.word	0x200001fc

08018554 <_puts_r>:
 8018554:	6a03      	ldr	r3, [r0, #32]
 8018556:	b570      	push	{r4, r5, r6, lr}
 8018558:	6884      	ldr	r4, [r0, #8]
 801855a:	4605      	mov	r5, r0
 801855c:	460e      	mov	r6, r1
 801855e:	b90b      	cbnz	r3, 8018564 <_puts_r+0x10>
 8018560:	f7ff ffb0 	bl	80184c4 <__sinit>
 8018564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018566:	07db      	lsls	r3, r3, #31
 8018568:	d405      	bmi.n	8018576 <_puts_r+0x22>
 801856a:	89a3      	ldrh	r3, [r4, #12]
 801856c:	0598      	lsls	r0, r3, #22
 801856e:	d402      	bmi.n	8018576 <_puts_r+0x22>
 8018570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018572:	f000 f9b2 	bl	80188da <__retarget_lock_acquire_recursive>
 8018576:	89a3      	ldrh	r3, [r4, #12]
 8018578:	0719      	lsls	r1, r3, #28
 801857a:	d502      	bpl.n	8018582 <_puts_r+0x2e>
 801857c:	6923      	ldr	r3, [r4, #16]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d135      	bne.n	80185ee <_puts_r+0x9a>
 8018582:	4621      	mov	r1, r4
 8018584:	4628      	mov	r0, r5
 8018586:	f000 f8c5 	bl	8018714 <__swsetup_r>
 801858a:	b380      	cbz	r0, 80185ee <_puts_r+0x9a>
 801858c:	f04f 35ff 	mov.w	r5, #4294967295
 8018590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018592:	07da      	lsls	r2, r3, #31
 8018594:	d405      	bmi.n	80185a2 <_puts_r+0x4e>
 8018596:	89a3      	ldrh	r3, [r4, #12]
 8018598:	059b      	lsls	r3, r3, #22
 801859a:	d402      	bmi.n	80185a2 <_puts_r+0x4e>
 801859c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801859e:	f000 f99d 	bl	80188dc <__retarget_lock_release_recursive>
 80185a2:	4628      	mov	r0, r5
 80185a4:	bd70      	pop	{r4, r5, r6, pc}
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	da04      	bge.n	80185b4 <_puts_r+0x60>
 80185aa:	69a2      	ldr	r2, [r4, #24]
 80185ac:	429a      	cmp	r2, r3
 80185ae:	dc17      	bgt.n	80185e0 <_puts_r+0x8c>
 80185b0:	290a      	cmp	r1, #10
 80185b2:	d015      	beq.n	80185e0 <_puts_r+0x8c>
 80185b4:	6823      	ldr	r3, [r4, #0]
 80185b6:	1c5a      	adds	r2, r3, #1
 80185b8:	6022      	str	r2, [r4, #0]
 80185ba:	7019      	strb	r1, [r3, #0]
 80185bc:	68a3      	ldr	r3, [r4, #8]
 80185be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80185c2:	3b01      	subs	r3, #1
 80185c4:	60a3      	str	r3, [r4, #8]
 80185c6:	2900      	cmp	r1, #0
 80185c8:	d1ed      	bne.n	80185a6 <_puts_r+0x52>
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	da11      	bge.n	80185f2 <_puts_r+0x9e>
 80185ce:	4622      	mov	r2, r4
 80185d0:	210a      	movs	r1, #10
 80185d2:	4628      	mov	r0, r5
 80185d4:	f000 f85f 	bl	8018696 <__swbuf_r>
 80185d8:	3001      	adds	r0, #1
 80185da:	d0d7      	beq.n	801858c <_puts_r+0x38>
 80185dc:	250a      	movs	r5, #10
 80185de:	e7d7      	b.n	8018590 <_puts_r+0x3c>
 80185e0:	4622      	mov	r2, r4
 80185e2:	4628      	mov	r0, r5
 80185e4:	f000 f857 	bl	8018696 <__swbuf_r>
 80185e8:	3001      	adds	r0, #1
 80185ea:	d1e7      	bne.n	80185bc <_puts_r+0x68>
 80185ec:	e7ce      	b.n	801858c <_puts_r+0x38>
 80185ee:	3e01      	subs	r6, #1
 80185f0:	e7e4      	b.n	80185bc <_puts_r+0x68>
 80185f2:	6823      	ldr	r3, [r4, #0]
 80185f4:	1c5a      	adds	r2, r3, #1
 80185f6:	6022      	str	r2, [r4, #0]
 80185f8:	220a      	movs	r2, #10
 80185fa:	701a      	strb	r2, [r3, #0]
 80185fc:	e7ee      	b.n	80185dc <_puts_r+0x88>
	...

08018600 <puts>:
 8018600:	4b02      	ldr	r3, [pc, #8]	@ (801860c <puts+0xc>)
 8018602:	4601      	mov	r1, r0
 8018604:	6818      	ldr	r0, [r3, #0]
 8018606:	f7ff bfa5 	b.w	8018554 <_puts_r>
 801860a:	bf00      	nop
 801860c:	200001fc 	.word	0x200001fc

08018610 <__sread>:
 8018610:	b510      	push	{r4, lr}
 8018612:	460c      	mov	r4, r1
 8018614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018618:	f000 f900 	bl	801881c <_read_r>
 801861c:	2800      	cmp	r0, #0
 801861e:	bfab      	itete	ge
 8018620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018622:	89a3      	ldrhlt	r3, [r4, #12]
 8018624:	181b      	addge	r3, r3, r0
 8018626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801862a:	bfac      	ite	ge
 801862c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801862e:	81a3      	strhlt	r3, [r4, #12]
 8018630:	bd10      	pop	{r4, pc}

08018632 <__swrite>:
 8018632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018636:	461f      	mov	r7, r3
 8018638:	898b      	ldrh	r3, [r1, #12]
 801863a:	05db      	lsls	r3, r3, #23
 801863c:	4605      	mov	r5, r0
 801863e:	460c      	mov	r4, r1
 8018640:	4616      	mov	r6, r2
 8018642:	d505      	bpl.n	8018650 <__swrite+0x1e>
 8018644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018648:	2302      	movs	r3, #2
 801864a:	2200      	movs	r2, #0
 801864c:	f000 f8d4 	bl	80187f8 <_lseek_r>
 8018650:	89a3      	ldrh	r3, [r4, #12]
 8018652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801865a:	81a3      	strh	r3, [r4, #12]
 801865c:	4632      	mov	r2, r6
 801865e:	463b      	mov	r3, r7
 8018660:	4628      	mov	r0, r5
 8018662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018666:	f000 b8fb 	b.w	8018860 <_write_r>

0801866a <__sseek>:
 801866a:	b510      	push	{r4, lr}
 801866c:	460c      	mov	r4, r1
 801866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018672:	f000 f8c1 	bl	80187f8 <_lseek_r>
 8018676:	1c43      	adds	r3, r0, #1
 8018678:	89a3      	ldrh	r3, [r4, #12]
 801867a:	bf15      	itete	ne
 801867c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801867e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018686:	81a3      	strheq	r3, [r4, #12]
 8018688:	bf18      	it	ne
 801868a:	81a3      	strhne	r3, [r4, #12]
 801868c:	bd10      	pop	{r4, pc}

0801868e <__sclose>:
 801868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018692:	f000 b8a1 	b.w	80187d8 <_close_r>

08018696 <__swbuf_r>:
 8018696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018698:	460e      	mov	r6, r1
 801869a:	4614      	mov	r4, r2
 801869c:	4605      	mov	r5, r0
 801869e:	b118      	cbz	r0, 80186a8 <__swbuf_r+0x12>
 80186a0:	6a03      	ldr	r3, [r0, #32]
 80186a2:	b90b      	cbnz	r3, 80186a8 <__swbuf_r+0x12>
 80186a4:	f7ff ff0e 	bl	80184c4 <__sinit>
 80186a8:	69a3      	ldr	r3, [r4, #24]
 80186aa:	60a3      	str	r3, [r4, #8]
 80186ac:	89a3      	ldrh	r3, [r4, #12]
 80186ae:	071a      	lsls	r2, r3, #28
 80186b0:	d501      	bpl.n	80186b6 <__swbuf_r+0x20>
 80186b2:	6923      	ldr	r3, [r4, #16]
 80186b4:	b943      	cbnz	r3, 80186c8 <__swbuf_r+0x32>
 80186b6:	4621      	mov	r1, r4
 80186b8:	4628      	mov	r0, r5
 80186ba:	f000 f82b 	bl	8018714 <__swsetup_r>
 80186be:	b118      	cbz	r0, 80186c8 <__swbuf_r+0x32>
 80186c0:	f04f 37ff 	mov.w	r7, #4294967295
 80186c4:	4638      	mov	r0, r7
 80186c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186c8:	6823      	ldr	r3, [r4, #0]
 80186ca:	6922      	ldr	r2, [r4, #16]
 80186cc:	1a98      	subs	r0, r3, r2
 80186ce:	6963      	ldr	r3, [r4, #20]
 80186d0:	b2f6      	uxtb	r6, r6
 80186d2:	4283      	cmp	r3, r0
 80186d4:	4637      	mov	r7, r6
 80186d6:	dc05      	bgt.n	80186e4 <__swbuf_r+0x4e>
 80186d8:	4621      	mov	r1, r4
 80186da:	4628      	mov	r0, r5
 80186dc:	f001 fcfe 	bl	801a0dc <_fflush_r>
 80186e0:	2800      	cmp	r0, #0
 80186e2:	d1ed      	bne.n	80186c0 <__swbuf_r+0x2a>
 80186e4:	68a3      	ldr	r3, [r4, #8]
 80186e6:	3b01      	subs	r3, #1
 80186e8:	60a3      	str	r3, [r4, #8]
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	1c5a      	adds	r2, r3, #1
 80186ee:	6022      	str	r2, [r4, #0]
 80186f0:	701e      	strb	r6, [r3, #0]
 80186f2:	6962      	ldr	r2, [r4, #20]
 80186f4:	1c43      	adds	r3, r0, #1
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d004      	beq.n	8018704 <__swbuf_r+0x6e>
 80186fa:	89a3      	ldrh	r3, [r4, #12]
 80186fc:	07db      	lsls	r3, r3, #31
 80186fe:	d5e1      	bpl.n	80186c4 <__swbuf_r+0x2e>
 8018700:	2e0a      	cmp	r6, #10
 8018702:	d1df      	bne.n	80186c4 <__swbuf_r+0x2e>
 8018704:	4621      	mov	r1, r4
 8018706:	4628      	mov	r0, r5
 8018708:	f001 fce8 	bl	801a0dc <_fflush_r>
 801870c:	2800      	cmp	r0, #0
 801870e:	d0d9      	beq.n	80186c4 <__swbuf_r+0x2e>
 8018710:	e7d6      	b.n	80186c0 <__swbuf_r+0x2a>
	...

08018714 <__swsetup_r>:
 8018714:	b538      	push	{r3, r4, r5, lr}
 8018716:	4b29      	ldr	r3, [pc, #164]	@ (80187bc <__swsetup_r+0xa8>)
 8018718:	4605      	mov	r5, r0
 801871a:	6818      	ldr	r0, [r3, #0]
 801871c:	460c      	mov	r4, r1
 801871e:	b118      	cbz	r0, 8018728 <__swsetup_r+0x14>
 8018720:	6a03      	ldr	r3, [r0, #32]
 8018722:	b90b      	cbnz	r3, 8018728 <__swsetup_r+0x14>
 8018724:	f7ff fece 	bl	80184c4 <__sinit>
 8018728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801872c:	0719      	lsls	r1, r3, #28
 801872e:	d422      	bmi.n	8018776 <__swsetup_r+0x62>
 8018730:	06da      	lsls	r2, r3, #27
 8018732:	d407      	bmi.n	8018744 <__swsetup_r+0x30>
 8018734:	2209      	movs	r2, #9
 8018736:	602a      	str	r2, [r5, #0]
 8018738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801873c:	81a3      	strh	r3, [r4, #12]
 801873e:	f04f 30ff 	mov.w	r0, #4294967295
 8018742:	e033      	b.n	80187ac <__swsetup_r+0x98>
 8018744:	0758      	lsls	r0, r3, #29
 8018746:	d512      	bpl.n	801876e <__swsetup_r+0x5a>
 8018748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801874a:	b141      	cbz	r1, 801875e <__swsetup_r+0x4a>
 801874c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018750:	4299      	cmp	r1, r3
 8018752:	d002      	beq.n	801875a <__swsetup_r+0x46>
 8018754:	4628      	mov	r0, r5
 8018756:	f000 ff37 	bl	80195c8 <_free_r>
 801875a:	2300      	movs	r3, #0
 801875c:	6363      	str	r3, [r4, #52]	@ 0x34
 801875e:	89a3      	ldrh	r3, [r4, #12]
 8018760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018764:	81a3      	strh	r3, [r4, #12]
 8018766:	2300      	movs	r3, #0
 8018768:	6063      	str	r3, [r4, #4]
 801876a:	6923      	ldr	r3, [r4, #16]
 801876c:	6023      	str	r3, [r4, #0]
 801876e:	89a3      	ldrh	r3, [r4, #12]
 8018770:	f043 0308 	orr.w	r3, r3, #8
 8018774:	81a3      	strh	r3, [r4, #12]
 8018776:	6923      	ldr	r3, [r4, #16]
 8018778:	b94b      	cbnz	r3, 801878e <__swsetup_r+0x7a>
 801877a:	89a3      	ldrh	r3, [r4, #12]
 801877c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018784:	d003      	beq.n	801878e <__swsetup_r+0x7a>
 8018786:	4621      	mov	r1, r4
 8018788:	4628      	mov	r0, r5
 801878a:	f001 fcf5 	bl	801a178 <__smakebuf_r>
 801878e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018792:	f013 0201 	ands.w	r2, r3, #1
 8018796:	d00a      	beq.n	80187ae <__swsetup_r+0x9a>
 8018798:	2200      	movs	r2, #0
 801879a:	60a2      	str	r2, [r4, #8]
 801879c:	6962      	ldr	r2, [r4, #20]
 801879e:	4252      	negs	r2, r2
 80187a0:	61a2      	str	r2, [r4, #24]
 80187a2:	6922      	ldr	r2, [r4, #16]
 80187a4:	b942      	cbnz	r2, 80187b8 <__swsetup_r+0xa4>
 80187a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187aa:	d1c5      	bne.n	8018738 <__swsetup_r+0x24>
 80187ac:	bd38      	pop	{r3, r4, r5, pc}
 80187ae:	0799      	lsls	r1, r3, #30
 80187b0:	bf58      	it	pl
 80187b2:	6962      	ldrpl	r2, [r4, #20]
 80187b4:	60a2      	str	r2, [r4, #8]
 80187b6:	e7f4      	b.n	80187a2 <__swsetup_r+0x8e>
 80187b8:	2000      	movs	r0, #0
 80187ba:	e7f7      	b.n	80187ac <__swsetup_r+0x98>
 80187bc:	200001fc 	.word	0x200001fc

080187c0 <memset>:
 80187c0:	4402      	add	r2, r0
 80187c2:	4603      	mov	r3, r0
 80187c4:	4293      	cmp	r3, r2
 80187c6:	d100      	bne.n	80187ca <memset+0xa>
 80187c8:	4770      	bx	lr
 80187ca:	f803 1b01 	strb.w	r1, [r3], #1
 80187ce:	e7f9      	b.n	80187c4 <memset+0x4>

080187d0 <_localeconv_r>:
 80187d0:	4800      	ldr	r0, [pc, #0]	@ (80187d4 <_localeconv_r+0x4>)
 80187d2:	4770      	bx	lr
 80187d4:	2000033c 	.word	0x2000033c

080187d8 <_close_r>:
 80187d8:	b538      	push	{r3, r4, r5, lr}
 80187da:	4d06      	ldr	r5, [pc, #24]	@ (80187f4 <_close_r+0x1c>)
 80187dc:	2300      	movs	r3, #0
 80187de:	4604      	mov	r4, r0
 80187e0:	4608      	mov	r0, r1
 80187e2:	602b      	str	r3, [r5, #0]
 80187e4:	f7f1 fe9a 	bl	800a51c <_close>
 80187e8:	1c43      	adds	r3, r0, #1
 80187ea:	d102      	bne.n	80187f2 <_close_r+0x1a>
 80187ec:	682b      	ldr	r3, [r5, #0]
 80187ee:	b103      	cbz	r3, 80187f2 <_close_r+0x1a>
 80187f0:	6023      	str	r3, [r4, #0]
 80187f2:	bd38      	pop	{r3, r4, r5, pc}
 80187f4:	20003870 	.word	0x20003870

080187f8 <_lseek_r>:
 80187f8:	b538      	push	{r3, r4, r5, lr}
 80187fa:	4d07      	ldr	r5, [pc, #28]	@ (8018818 <_lseek_r+0x20>)
 80187fc:	4604      	mov	r4, r0
 80187fe:	4608      	mov	r0, r1
 8018800:	4611      	mov	r1, r2
 8018802:	2200      	movs	r2, #0
 8018804:	602a      	str	r2, [r5, #0]
 8018806:	461a      	mov	r2, r3
 8018808:	f7f1 feaf 	bl	800a56a <_lseek>
 801880c:	1c43      	adds	r3, r0, #1
 801880e:	d102      	bne.n	8018816 <_lseek_r+0x1e>
 8018810:	682b      	ldr	r3, [r5, #0]
 8018812:	b103      	cbz	r3, 8018816 <_lseek_r+0x1e>
 8018814:	6023      	str	r3, [r4, #0]
 8018816:	bd38      	pop	{r3, r4, r5, pc}
 8018818:	20003870 	.word	0x20003870

0801881c <_read_r>:
 801881c:	b538      	push	{r3, r4, r5, lr}
 801881e:	4d07      	ldr	r5, [pc, #28]	@ (801883c <_read_r+0x20>)
 8018820:	4604      	mov	r4, r0
 8018822:	4608      	mov	r0, r1
 8018824:	4611      	mov	r1, r2
 8018826:	2200      	movs	r2, #0
 8018828:	602a      	str	r2, [r5, #0]
 801882a:	461a      	mov	r2, r3
 801882c:	f7f1 fe3d 	bl	800a4aa <_read>
 8018830:	1c43      	adds	r3, r0, #1
 8018832:	d102      	bne.n	801883a <_read_r+0x1e>
 8018834:	682b      	ldr	r3, [r5, #0]
 8018836:	b103      	cbz	r3, 801883a <_read_r+0x1e>
 8018838:	6023      	str	r3, [r4, #0]
 801883a:	bd38      	pop	{r3, r4, r5, pc}
 801883c:	20003870 	.word	0x20003870

08018840 <_sbrk_r>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	4d06      	ldr	r5, [pc, #24]	@ (801885c <_sbrk_r+0x1c>)
 8018844:	2300      	movs	r3, #0
 8018846:	4604      	mov	r4, r0
 8018848:	4608      	mov	r0, r1
 801884a:	602b      	str	r3, [r5, #0]
 801884c:	f7f1 fe9a 	bl	800a584 <_sbrk>
 8018850:	1c43      	adds	r3, r0, #1
 8018852:	d102      	bne.n	801885a <_sbrk_r+0x1a>
 8018854:	682b      	ldr	r3, [r5, #0]
 8018856:	b103      	cbz	r3, 801885a <_sbrk_r+0x1a>
 8018858:	6023      	str	r3, [r4, #0]
 801885a:	bd38      	pop	{r3, r4, r5, pc}
 801885c:	20003870 	.word	0x20003870

08018860 <_write_r>:
 8018860:	b538      	push	{r3, r4, r5, lr}
 8018862:	4d07      	ldr	r5, [pc, #28]	@ (8018880 <_write_r+0x20>)
 8018864:	4604      	mov	r4, r0
 8018866:	4608      	mov	r0, r1
 8018868:	4611      	mov	r1, r2
 801886a:	2200      	movs	r2, #0
 801886c:	602a      	str	r2, [r5, #0]
 801886e:	461a      	mov	r2, r3
 8018870:	f7f1 fe38 	bl	800a4e4 <_write>
 8018874:	1c43      	adds	r3, r0, #1
 8018876:	d102      	bne.n	801887e <_write_r+0x1e>
 8018878:	682b      	ldr	r3, [r5, #0]
 801887a:	b103      	cbz	r3, 801887e <_write_r+0x1e>
 801887c:	6023      	str	r3, [r4, #0]
 801887e:	bd38      	pop	{r3, r4, r5, pc}
 8018880:	20003870 	.word	0x20003870

08018884 <__errno>:
 8018884:	4b01      	ldr	r3, [pc, #4]	@ (801888c <__errno+0x8>)
 8018886:	6818      	ldr	r0, [r3, #0]
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	200001fc 	.word	0x200001fc

08018890 <__libc_init_array>:
 8018890:	b570      	push	{r4, r5, r6, lr}
 8018892:	4d0d      	ldr	r5, [pc, #52]	@ (80188c8 <__libc_init_array+0x38>)
 8018894:	4c0d      	ldr	r4, [pc, #52]	@ (80188cc <__libc_init_array+0x3c>)
 8018896:	1b64      	subs	r4, r4, r5
 8018898:	10a4      	asrs	r4, r4, #2
 801889a:	2600      	movs	r6, #0
 801889c:	42a6      	cmp	r6, r4
 801889e:	d109      	bne.n	80188b4 <__libc_init_array+0x24>
 80188a0:	4d0b      	ldr	r5, [pc, #44]	@ (80188d0 <__libc_init_array+0x40>)
 80188a2:	4c0c      	ldr	r4, [pc, #48]	@ (80188d4 <__libc_init_array+0x44>)
 80188a4:	f004 fdb4 	bl	801d410 <_init>
 80188a8:	1b64      	subs	r4, r4, r5
 80188aa:	10a4      	asrs	r4, r4, #2
 80188ac:	2600      	movs	r6, #0
 80188ae:	42a6      	cmp	r6, r4
 80188b0:	d105      	bne.n	80188be <__libc_init_array+0x2e>
 80188b2:	bd70      	pop	{r4, r5, r6, pc}
 80188b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80188b8:	4798      	blx	r3
 80188ba:	3601      	adds	r6, #1
 80188bc:	e7ee      	b.n	801889c <__libc_init_array+0xc>
 80188be:	f855 3b04 	ldr.w	r3, [r5], #4
 80188c2:	4798      	blx	r3
 80188c4:	3601      	adds	r6, #1
 80188c6:	e7f2      	b.n	80188ae <__libc_init_array+0x1e>
 80188c8:	0801dba0 	.word	0x0801dba0
 80188cc:	0801dba0 	.word	0x0801dba0
 80188d0:	0801dba0 	.word	0x0801dba0
 80188d4:	0801dba4 	.word	0x0801dba4

080188d8 <__retarget_lock_init_recursive>:
 80188d8:	4770      	bx	lr

080188da <__retarget_lock_acquire_recursive>:
 80188da:	4770      	bx	lr

080188dc <__retarget_lock_release_recursive>:
 80188dc:	4770      	bx	lr

080188de <memcpy>:
 80188de:	440a      	add	r2, r1
 80188e0:	4291      	cmp	r1, r2
 80188e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80188e6:	d100      	bne.n	80188ea <memcpy+0xc>
 80188e8:	4770      	bx	lr
 80188ea:	b510      	push	{r4, lr}
 80188ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80188f4:	4291      	cmp	r1, r2
 80188f6:	d1f9      	bne.n	80188ec <memcpy+0xe>
 80188f8:	bd10      	pop	{r4, pc}

080188fa <copysign>:
 80188fa:	ec51 0b10 	vmov	r0, r1, d0
 80188fe:	b082      	sub	sp, #8
 8018900:	ed8d 1b00 	vstr	d1, [sp]
 8018904:	4602      	mov	r2, r0
 8018906:	9801      	ldr	r0, [sp, #4]
 8018908:	f361 001e 	bfi	r0, r1, #0, #31
 801890c:	4603      	mov	r3, r0
 801890e:	ec43 2b10 	vmov	d0, r2, r3
 8018912:	b002      	add	sp, #8
 8018914:	4770      	bx	lr

08018916 <quorem>:
 8018916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891a:	6903      	ldr	r3, [r0, #16]
 801891c:	690c      	ldr	r4, [r1, #16]
 801891e:	42a3      	cmp	r3, r4
 8018920:	4607      	mov	r7, r0
 8018922:	db7e      	blt.n	8018a22 <quorem+0x10c>
 8018924:	3c01      	subs	r4, #1
 8018926:	f101 0814 	add.w	r8, r1, #20
 801892a:	00a3      	lsls	r3, r4, #2
 801892c:	f100 0514 	add.w	r5, r0, #20
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018936:	9301      	str	r3, [sp, #4]
 8018938:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801893c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018940:	3301      	adds	r3, #1
 8018942:	429a      	cmp	r2, r3
 8018944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018948:	fbb2 f6f3 	udiv	r6, r2, r3
 801894c:	d32e      	bcc.n	80189ac <quorem+0x96>
 801894e:	f04f 0a00 	mov.w	sl, #0
 8018952:	46c4      	mov	ip, r8
 8018954:	46ae      	mov	lr, r5
 8018956:	46d3      	mov	fp, sl
 8018958:	f85c 3b04 	ldr.w	r3, [ip], #4
 801895c:	b298      	uxth	r0, r3
 801895e:	fb06 a000 	mla	r0, r6, r0, sl
 8018962:	0c02      	lsrs	r2, r0, #16
 8018964:	0c1b      	lsrs	r3, r3, #16
 8018966:	fb06 2303 	mla	r3, r6, r3, r2
 801896a:	f8de 2000 	ldr.w	r2, [lr]
 801896e:	b280      	uxth	r0, r0
 8018970:	b292      	uxth	r2, r2
 8018972:	1a12      	subs	r2, r2, r0
 8018974:	445a      	add	r2, fp
 8018976:	f8de 0000 	ldr.w	r0, [lr]
 801897a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801897e:	b29b      	uxth	r3, r3
 8018980:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018984:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018988:	b292      	uxth	r2, r2
 801898a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801898e:	45e1      	cmp	r9, ip
 8018990:	f84e 2b04 	str.w	r2, [lr], #4
 8018994:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018998:	d2de      	bcs.n	8018958 <quorem+0x42>
 801899a:	9b00      	ldr	r3, [sp, #0]
 801899c:	58eb      	ldr	r3, [r5, r3]
 801899e:	b92b      	cbnz	r3, 80189ac <quorem+0x96>
 80189a0:	9b01      	ldr	r3, [sp, #4]
 80189a2:	3b04      	subs	r3, #4
 80189a4:	429d      	cmp	r5, r3
 80189a6:	461a      	mov	r2, r3
 80189a8:	d32f      	bcc.n	8018a0a <quorem+0xf4>
 80189aa:	613c      	str	r4, [r7, #16]
 80189ac:	4638      	mov	r0, r7
 80189ae:	f001 f8c7 	bl	8019b40 <__mcmp>
 80189b2:	2800      	cmp	r0, #0
 80189b4:	db25      	blt.n	8018a02 <quorem+0xec>
 80189b6:	4629      	mov	r1, r5
 80189b8:	2000      	movs	r0, #0
 80189ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80189be:	f8d1 c000 	ldr.w	ip, [r1]
 80189c2:	fa1f fe82 	uxth.w	lr, r2
 80189c6:	fa1f f38c 	uxth.w	r3, ip
 80189ca:	eba3 030e 	sub.w	r3, r3, lr
 80189ce:	4403      	add	r3, r0
 80189d0:	0c12      	lsrs	r2, r2, #16
 80189d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80189d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80189da:	b29b      	uxth	r3, r3
 80189dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189e0:	45c1      	cmp	r9, r8
 80189e2:	f841 3b04 	str.w	r3, [r1], #4
 80189e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80189ea:	d2e6      	bcs.n	80189ba <quorem+0xa4>
 80189ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80189f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80189f4:	b922      	cbnz	r2, 8018a00 <quorem+0xea>
 80189f6:	3b04      	subs	r3, #4
 80189f8:	429d      	cmp	r5, r3
 80189fa:	461a      	mov	r2, r3
 80189fc:	d30b      	bcc.n	8018a16 <quorem+0x100>
 80189fe:	613c      	str	r4, [r7, #16]
 8018a00:	3601      	adds	r6, #1
 8018a02:	4630      	mov	r0, r6
 8018a04:	b003      	add	sp, #12
 8018a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a0a:	6812      	ldr	r2, [r2, #0]
 8018a0c:	3b04      	subs	r3, #4
 8018a0e:	2a00      	cmp	r2, #0
 8018a10:	d1cb      	bne.n	80189aa <quorem+0x94>
 8018a12:	3c01      	subs	r4, #1
 8018a14:	e7c6      	b.n	80189a4 <quorem+0x8e>
 8018a16:	6812      	ldr	r2, [r2, #0]
 8018a18:	3b04      	subs	r3, #4
 8018a1a:	2a00      	cmp	r2, #0
 8018a1c:	d1ef      	bne.n	80189fe <quorem+0xe8>
 8018a1e:	3c01      	subs	r4, #1
 8018a20:	e7ea      	b.n	80189f8 <quorem+0xe2>
 8018a22:	2000      	movs	r0, #0
 8018a24:	e7ee      	b.n	8018a04 <quorem+0xee>
	...

08018a28 <_dtoa_r>:
 8018a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a2c:	69c7      	ldr	r7, [r0, #28]
 8018a2e:	b097      	sub	sp, #92	@ 0x5c
 8018a30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018a34:	ec55 4b10 	vmov	r4, r5, d0
 8018a38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8018a3a:	9107      	str	r1, [sp, #28]
 8018a3c:	4681      	mov	r9, r0
 8018a3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018a40:	9311      	str	r3, [sp, #68]	@ 0x44
 8018a42:	b97f      	cbnz	r7, 8018a64 <_dtoa_r+0x3c>
 8018a44:	2010      	movs	r0, #16
 8018a46:	f7fe ffa5 	bl	8017994 <malloc>
 8018a4a:	4602      	mov	r2, r0
 8018a4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8018a50:	b920      	cbnz	r0, 8018a5c <_dtoa_r+0x34>
 8018a52:	4ba9      	ldr	r3, [pc, #676]	@ (8018cf8 <_dtoa_r+0x2d0>)
 8018a54:	21ef      	movs	r1, #239	@ 0xef
 8018a56:	48a9      	ldr	r0, [pc, #676]	@ (8018cfc <_dtoa_r+0x2d4>)
 8018a58:	f001 fbec 	bl	801a234 <__assert_func>
 8018a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018a60:	6007      	str	r7, [r0, #0]
 8018a62:	60c7      	str	r7, [r0, #12]
 8018a64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018a68:	6819      	ldr	r1, [r3, #0]
 8018a6a:	b159      	cbz	r1, 8018a84 <_dtoa_r+0x5c>
 8018a6c:	685a      	ldr	r2, [r3, #4]
 8018a6e:	604a      	str	r2, [r1, #4]
 8018a70:	2301      	movs	r3, #1
 8018a72:	4093      	lsls	r3, r2
 8018a74:	608b      	str	r3, [r1, #8]
 8018a76:	4648      	mov	r0, r9
 8018a78:	f000 fe30 	bl	80196dc <_Bfree>
 8018a7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018a80:	2200      	movs	r2, #0
 8018a82:	601a      	str	r2, [r3, #0]
 8018a84:	1e2b      	subs	r3, r5, #0
 8018a86:	bfb9      	ittee	lt
 8018a88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018a8c:	9305      	strlt	r3, [sp, #20]
 8018a8e:	2300      	movge	r3, #0
 8018a90:	6033      	strge	r3, [r6, #0]
 8018a92:	9f05      	ldr	r7, [sp, #20]
 8018a94:	4b9a      	ldr	r3, [pc, #616]	@ (8018d00 <_dtoa_r+0x2d8>)
 8018a96:	bfbc      	itt	lt
 8018a98:	2201      	movlt	r2, #1
 8018a9a:	6032      	strlt	r2, [r6, #0]
 8018a9c:	43bb      	bics	r3, r7
 8018a9e:	d112      	bne.n	8018ac6 <_dtoa_r+0x9e>
 8018aa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018aa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018aa6:	6013      	str	r3, [r2, #0]
 8018aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018aac:	4323      	orrs	r3, r4
 8018aae:	f000 855a 	beq.w	8019566 <_dtoa_r+0xb3e>
 8018ab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018ab4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8018d14 <_dtoa_r+0x2ec>
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	f000 855c 	beq.w	8019576 <_dtoa_r+0xb4e>
 8018abe:	f10a 0303 	add.w	r3, sl, #3
 8018ac2:	f000 bd56 	b.w	8019572 <_dtoa_r+0xb4a>
 8018ac6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8018aca:	2200      	movs	r2, #0
 8018acc:	ec51 0b17 	vmov	r0, r1, d7
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8018ad6:	f7e7 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8018ada:	4680      	mov	r8, r0
 8018adc:	b158      	cbz	r0, 8018af6 <_dtoa_r+0xce>
 8018ade:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	6013      	str	r3, [r2, #0]
 8018ae4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018ae6:	b113      	cbz	r3, 8018aee <_dtoa_r+0xc6>
 8018ae8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018aea:	4b86      	ldr	r3, [pc, #536]	@ (8018d04 <_dtoa_r+0x2dc>)
 8018aec:	6013      	str	r3, [r2, #0]
 8018aee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8018d18 <_dtoa_r+0x2f0>
 8018af2:	f000 bd40 	b.w	8019576 <_dtoa_r+0xb4e>
 8018af6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8018afa:	aa14      	add	r2, sp, #80	@ 0x50
 8018afc:	a915      	add	r1, sp, #84	@ 0x54
 8018afe:	4648      	mov	r0, r9
 8018b00:	f001 f8ce 	bl	8019ca0 <__d2b>
 8018b04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018b08:	9002      	str	r0, [sp, #8]
 8018b0a:	2e00      	cmp	r6, #0
 8018b0c:	d078      	beq.n	8018c00 <_dtoa_r+0x1d8>
 8018b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8018b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018b1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018b20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018b24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018b28:	4619      	mov	r1, r3
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	4b76      	ldr	r3, [pc, #472]	@ (8018d08 <_dtoa_r+0x2e0>)
 8018b2e:	f7e7 fbab 	bl	8000288 <__aeabi_dsub>
 8018b32:	a36b      	add	r3, pc, #428	@ (adr r3, 8018ce0 <_dtoa_r+0x2b8>)
 8018b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b38:	f7e7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8018b3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8018ce8 <_dtoa_r+0x2c0>)
 8018b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b42:	f7e7 fba3 	bl	800028c <__adddf3>
 8018b46:	4604      	mov	r4, r0
 8018b48:	4630      	mov	r0, r6
 8018b4a:	460d      	mov	r5, r1
 8018b4c:	f7e7 fcea 	bl	8000524 <__aeabi_i2d>
 8018b50:	a367      	add	r3, pc, #412	@ (adr r3, 8018cf0 <_dtoa_r+0x2c8>)
 8018b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b56:	f7e7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	4620      	mov	r0, r4
 8018b60:	4629      	mov	r1, r5
 8018b62:	f7e7 fb93 	bl	800028c <__adddf3>
 8018b66:	4604      	mov	r4, r0
 8018b68:	460d      	mov	r5, r1
 8018b6a:	f7e7 fff5 	bl	8000b58 <__aeabi_d2iz>
 8018b6e:	2200      	movs	r2, #0
 8018b70:	4607      	mov	r7, r0
 8018b72:	2300      	movs	r3, #0
 8018b74:	4620      	mov	r0, r4
 8018b76:	4629      	mov	r1, r5
 8018b78:	f7e7 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8018b7c:	b140      	cbz	r0, 8018b90 <_dtoa_r+0x168>
 8018b7e:	4638      	mov	r0, r7
 8018b80:	f7e7 fcd0 	bl	8000524 <__aeabi_i2d>
 8018b84:	4622      	mov	r2, r4
 8018b86:	462b      	mov	r3, r5
 8018b88:	f7e7 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8018b8c:	b900      	cbnz	r0, 8018b90 <_dtoa_r+0x168>
 8018b8e:	3f01      	subs	r7, #1
 8018b90:	2f16      	cmp	r7, #22
 8018b92:	d852      	bhi.n	8018c3a <_dtoa_r+0x212>
 8018b94:	4b5d      	ldr	r3, [pc, #372]	@ (8018d0c <_dtoa_r+0x2e4>)
 8018b96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018ba2:	f7e7 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	d049      	beq.n	8018c3e <_dtoa_r+0x216>
 8018baa:	3f01      	subs	r7, #1
 8018bac:	2300      	movs	r3, #0
 8018bae:	9310      	str	r3, [sp, #64]	@ 0x40
 8018bb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018bb2:	1b9b      	subs	r3, r3, r6
 8018bb4:	1e5a      	subs	r2, r3, #1
 8018bb6:	bf45      	ittet	mi
 8018bb8:	f1c3 0301 	rsbmi	r3, r3, #1
 8018bbc:	9300      	strmi	r3, [sp, #0]
 8018bbe:	2300      	movpl	r3, #0
 8018bc0:	2300      	movmi	r3, #0
 8018bc2:	9206      	str	r2, [sp, #24]
 8018bc4:	bf54      	ite	pl
 8018bc6:	9300      	strpl	r3, [sp, #0]
 8018bc8:	9306      	strmi	r3, [sp, #24]
 8018bca:	2f00      	cmp	r7, #0
 8018bcc:	db39      	blt.n	8018c42 <_dtoa_r+0x21a>
 8018bce:	9b06      	ldr	r3, [sp, #24]
 8018bd0:	970d      	str	r7, [sp, #52]	@ 0x34
 8018bd2:	443b      	add	r3, r7
 8018bd4:	9306      	str	r3, [sp, #24]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	9308      	str	r3, [sp, #32]
 8018bda:	9b07      	ldr	r3, [sp, #28]
 8018bdc:	2b09      	cmp	r3, #9
 8018bde:	d863      	bhi.n	8018ca8 <_dtoa_r+0x280>
 8018be0:	2b05      	cmp	r3, #5
 8018be2:	bfc4      	itt	gt
 8018be4:	3b04      	subgt	r3, #4
 8018be6:	9307      	strgt	r3, [sp, #28]
 8018be8:	9b07      	ldr	r3, [sp, #28]
 8018bea:	f1a3 0302 	sub.w	r3, r3, #2
 8018bee:	bfcc      	ite	gt
 8018bf0:	2400      	movgt	r4, #0
 8018bf2:	2401      	movle	r4, #1
 8018bf4:	2b03      	cmp	r3, #3
 8018bf6:	d863      	bhi.n	8018cc0 <_dtoa_r+0x298>
 8018bf8:	e8df f003 	tbb	[pc, r3]
 8018bfc:	2b375452 	.word	0x2b375452
 8018c00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8018c04:	441e      	add	r6, r3
 8018c06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018c0a:	2b20      	cmp	r3, #32
 8018c0c:	bfc1      	itttt	gt
 8018c0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018c12:	409f      	lslgt	r7, r3
 8018c14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018c18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018c1c:	bfd6      	itet	le
 8018c1e:	f1c3 0320 	rsble	r3, r3, #32
 8018c22:	ea47 0003 	orrgt.w	r0, r7, r3
 8018c26:	fa04 f003 	lslle.w	r0, r4, r3
 8018c2a:	f7e7 fc6b 	bl	8000504 <__aeabi_ui2d>
 8018c2e:	2201      	movs	r2, #1
 8018c30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018c34:	3e01      	subs	r6, #1
 8018c36:	9212      	str	r2, [sp, #72]	@ 0x48
 8018c38:	e776      	b.n	8018b28 <_dtoa_r+0x100>
 8018c3a:	2301      	movs	r3, #1
 8018c3c:	e7b7      	b.n	8018bae <_dtoa_r+0x186>
 8018c3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8018c40:	e7b6      	b.n	8018bb0 <_dtoa_r+0x188>
 8018c42:	9b00      	ldr	r3, [sp, #0]
 8018c44:	1bdb      	subs	r3, r3, r7
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	427b      	negs	r3, r7
 8018c4a:	9308      	str	r3, [sp, #32]
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018c50:	e7c3      	b.n	8018bda <_dtoa_r+0x1b2>
 8018c52:	2301      	movs	r3, #1
 8018c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c58:	eb07 0b03 	add.w	fp, r7, r3
 8018c5c:	f10b 0301 	add.w	r3, fp, #1
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	9303      	str	r3, [sp, #12]
 8018c64:	bfb8      	it	lt
 8018c66:	2301      	movlt	r3, #1
 8018c68:	e006      	b.n	8018c78 <_dtoa_r+0x250>
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	dd28      	ble.n	8018cc6 <_dtoa_r+0x29e>
 8018c74:	469b      	mov	fp, r3
 8018c76:	9303      	str	r3, [sp, #12]
 8018c78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8018c7c:	2100      	movs	r1, #0
 8018c7e:	2204      	movs	r2, #4
 8018c80:	f102 0514 	add.w	r5, r2, #20
 8018c84:	429d      	cmp	r5, r3
 8018c86:	d926      	bls.n	8018cd6 <_dtoa_r+0x2ae>
 8018c88:	6041      	str	r1, [r0, #4]
 8018c8a:	4648      	mov	r0, r9
 8018c8c:	f000 fce6 	bl	801965c <_Balloc>
 8018c90:	4682      	mov	sl, r0
 8018c92:	2800      	cmp	r0, #0
 8018c94:	d142      	bne.n	8018d1c <_dtoa_r+0x2f4>
 8018c96:	4b1e      	ldr	r3, [pc, #120]	@ (8018d10 <_dtoa_r+0x2e8>)
 8018c98:	4602      	mov	r2, r0
 8018c9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8018c9e:	e6da      	b.n	8018a56 <_dtoa_r+0x2e>
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	e7e3      	b.n	8018c6c <_dtoa_r+0x244>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	e7d5      	b.n	8018c54 <_dtoa_r+0x22c>
 8018ca8:	2401      	movs	r4, #1
 8018caa:	2300      	movs	r3, #0
 8018cac:	9307      	str	r3, [sp, #28]
 8018cae:	9409      	str	r4, [sp, #36]	@ 0x24
 8018cb0:	f04f 3bff 	mov.w	fp, #4294967295
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	f8cd b00c 	str.w	fp, [sp, #12]
 8018cba:	2312      	movs	r3, #18
 8018cbc:	920c      	str	r2, [sp, #48]	@ 0x30
 8018cbe:	e7db      	b.n	8018c78 <_dtoa_r+0x250>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cc4:	e7f4      	b.n	8018cb0 <_dtoa_r+0x288>
 8018cc6:	f04f 0b01 	mov.w	fp, #1
 8018cca:	f8cd b00c 	str.w	fp, [sp, #12]
 8018cce:	465b      	mov	r3, fp
 8018cd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8018cd4:	e7d0      	b.n	8018c78 <_dtoa_r+0x250>
 8018cd6:	3101      	adds	r1, #1
 8018cd8:	0052      	lsls	r2, r2, #1
 8018cda:	e7d1      	b.n	8018c80 <_dtoa_r+0x258>
 8018cdc:	f3af 8000 	nop.w
 8018ce0:	636f4361 	.word	0x636f4361
 8018ce4:	3fd287a7 	.word	0x3fd287a7
 8018ce8:	8b60c8b3 	.word	0x8b60c8b3
 8018cec:	3fc68a28 	.word	0x3fc68a28
 8018cf0:	509f79fb 	.word	0x509f79fb
 8018cf4:	3fd34413 	.word	0x3fd34413
 8018cf8:	0801d5d5 	.word	0x0801d5d5
 8018cfc:	0801d5ec 	.word	0x0801d5ec
 8018d00:	7ff00000 	.word	0x7ff00000
 8018d04:	0801d5a5 	.word	0x0801d5a5
 8018d08:	3ff80000 	.word	0x3ff80000
 8018d0c:	0801d740 	.word	0x0801d740
 8018d10:	0801d644 	.word	0x0801d644
 8018d14:	0801d5d1 	.word	0x0801d5d1
 8018d18:	0801d5a4 	.word	0x0801d5a4
 8018d1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018d20:	6018      	str	r0, [r3, #0]
 8018d22:	9b03      	ldr	r3, [sp, #12]
 8018d24:	2b0e      	cmp	r3, #14
 8018d26:	f200 80a1 	bhi.w	8018e6c <_dtoa_r+0x444>
 8018d2a:	2c00      	cmp	r4, #0
 8018d2c:	f000 809e 	beq.w	8018e6c <_dtoa_r+0x444>
 8018d30:	2f00      	cmp	r7, #0
 8018d32:	dd33      	ble.n	8018d9c <_dtoa_r+0x374>
 8018d34:	4b9c      	ldr	r3, [pc, #624]	@ (8018fa8 <_dtoa_r+0x580>)
 8018d36:	f007 020f 	and.w	r2, r7, #15
 8018d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d3e:	ed93 7b00 	vldr	d7, [r3]
 8018d42:	05f8      	lsls	r0, r7, #23
 8018d44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8018d48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018d4c:	d516      	bpl.n	8018d7c <_dtoa_r+0x354>
 8018d4e:	4b97      	ldr	r3, [pc, #604]	@ (8018fac <_dtoa_r+0x584>)
 8018d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018d58:	f7e7 fd78 	bl	800084c <__aeabi_ddiv>
 8018d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d60:	f004 040f 	and.w	r4, r4, #15
 8018d64:	2603      	movs	r6, #3
 8018d66:	4d91      	ldr	r5, [pc, #580]	@ (8018fac <_dtoa_r+0x584>)
 8018d68:	b954      	cbnz	r4, 8018d80 <_dtoa_r+0x358>
 8018d6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018d6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d72:	f7e7 fd6b 	bl	800084c <__aeabi_ddiv>
 8018d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d7a:	e028      	b.n	8018dce <_dtoa_r+0x3a6>
 8018d7c:	2602      	movs	r6, #2
 8018d7e:	e7f2      	b.n	8018d66 <_dtoa_r+0x33e>
 8018d80:	07e1      	lsls	r1, r4, #31
 8018d82:	d508      	bpl.n	8018d96 <_dtoa_r+0x36e>
 8018d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018d8c:	f7e7 fc34 	bl	80005f8 <__aeabi_dmul>
 8018d90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018d94:	3601      	adds	r6, #1
 8018d96:	1064      	asrs	r4, r4, #1
 8018d98:	3508      	adds	r5, #8
 8018d9a:	e7e5      	b.n	8018d68 <_dtoa_r+0x340>
 8018d9c:	f000 80af 	beq.w	8018efe <_dtoa_r+0x4d6>
 8018da0:	427c      	negs	r4, r7
 8018da2:	4b81      	ldr	r3, [pc, #516]	@ (8018fa8 <_dtoa_r+0x580>)
 8018da4:	4d81      	ldr	r5, [pc, #516]	@ (8018fac <_dtoa_r+0x584>)
 8018da6:	f004 020f 	and.w	r2, r4, #15
 8018daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018db6:	f7e7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8018dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018dbe:	1124      	asrs	r4, r4, #4
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	2602      	movs	r6, #2
 8018dc4:	2c00      	cmp	r4, #0
 8018dc6:	f040 808f 	bne.w	8018ee8 <_dtoa_r+0x4c0>
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d1d3      	bne.n	8018d76 <_dtoa_r+0x34e>
 8018dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018dd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	f000 8094 	beq.w	8018f02 <_dtoa_r+0x4da>
 8018dda:	4b75      	ldr	r3, [pc, #468]	@ (8018fb0 <_dtoa_r+0x588>)
 8018ddc:	2200      	movs	r2, #0
 8018dde:	4620      	mov	r0, r4
 8018de0:	4629      	mov	r1, r5
 8018de2:	f7e7 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8018de6:	2800      	cmp	r0, #0
 8018de8:	f000 808b 	beq.w	8018f02 <_dtoa_r+0x4da>
 8018dec:	9b03      	ldr	r3, [sp, #12]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	f000 8087 	beq.w	8018f02 <_dtoa_r+0x4da>
 8018df4:	f1bb 0f00 	cmp.w	fp, #0
 8018df8:	dd34      	ble.n	8018e64 <_dtoa_r+0x43c>
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8018fb4 <_dtoa_r+0x58c>)
 8018dfe:	2200      	movs	r2, #0
 8018e00:	4629      	mov	r1, r5
 8018e02:	f7e7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8018e06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8018e0e:	3601      	adds	r6, #1
 8018e10:	465c      	mov	r4, fp
 8018e12:	4630      	mov	r0, r6
 8018e14:	f7e7 fb86 	bl	8000524 <__aeabi_i2d>
 8018e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e1c:	f7e7 fbec 	bl	80005f8 <__aeabi_dmul>
 8018e20:	4b65      	ldr	r3, [pc, #404]	@ (8018fb8 <_dtoa_r+0x590>)
 8018e22:	2200      	movs	r2, #0
 8018e24:	f7e7 fa32 	bl	800028c <__adddf3>
 8018e28:	4605      	mov	r5, r0
 8018e2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018e2e:	2c00      	cmp	r4, #0
 8018e30:	d16a      	bne.n	8018f08 <_dtoa_r+0x4e0>
 8018e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e36:	4b61      	ldr	r3, [pc, #388]	@ (8018fbc <_dtoa_r+0x594>)
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f7e7 fa25 	bl	8000288 <__aeabi_dsub>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	460b      	mov	r3, r1
 8018e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018e46:	462a      	mov	r2, r5
 8018e48:	4633      	mov	r3, r6
 8018e4a:	f7e7 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	f040 8298 	bne.w	8019384 <_dtoa_r+0x95c>
 8018e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e58:	462a      	mov	r2, r5
 8018e5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018e5e:	f7e7 fe3d 	bl	8000adc <__aeabi_dcmplt>
 8018e62:	bb38      	cbnz	r0, 8018eb4 <_dtoa_r+0x48c>
 8018e64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8018e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8018e6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	f2c0 8157 	blt.w	8019122 <_dtoa_r+0x6fa>
 8018e74:	2f0e      	cmp	r7, #14
 8018e76:	f300 8154 	bgt.w	8019122 <_dtoa_r+0x6fa>
 8018e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8018fa8 <_dtoa_r+0x580>)
 8018e7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018e80:	ed93 7b00 	vldr	d7, [r3]
 8018e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	ed8d 7b00 	vstr	d7, [sp]
 8018e8c:	f280 80e5 	bge.w	801905a <_dtoa_r+0x632>
 8018e90:	9b03      	ldr	r3, [sp, #12]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	f300 80e1 	bgt.w	801905a <_dtoa_r+0x632>
 8018e98:	d10c      	bne.n	8018eb4 <_dtoa_r+0x48c>
 8018e9a:	4b48      	ldr	r3, [pc, #288]	@ (8018fbc <_dtoa_r+0x594>)
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	ec51 0b17 	vmov	r0, r1, d7
 8018ea2:	f7e7 fba9 	bl	80005f8 <__aeabi_dmul>
 8018ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018eaa:	f7e7 fe2b 	bl	8000b04 <__aeabi_dcmpge>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	f000 8266 	beq.w	8019380 <_dtoa_r+0x958>
 8018eb4:	2400      	movs	r4, #0
 8018eb6:	4625      	mov	r5, r4
 8018eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018eba:	4656      	mov	r6, sl
 8018ebc:	ea6f 0803 	mvn.w	r8, r3
 8018ec0:	2700      	movs	r7, #0
 8018ec2:	4621      	mov	r1, r4
 8018ec4:	4648      	mov	r0, r9
 8018ec6:	f000 fc09 	bl	80196dc <_Bfree>
 8018eca:	2d00      	cmp	r5, #0
 8018ecc:	f000 80bd 	beq.w	801904a <_dtoa_r+0x622>
 8018ed0:	b12f      	cbz	r7, 8018ede <_dtoa_r+0x4b6>
 8018ed2:	42af      	cmp	r7, r5
 8018ed4:	d003      	beq.n	8018ede <_dtoa_r+0x4b6>
 8018ed6:	4639      	mov	r1, r7
 8018ed8:	4648      	mov	r0, r9
 8018eda:	f000 fbff 	bl	80196dc <_Bfree>
 8018ede:	4629      	mov	r1, r5
 8018ee0:	4648      	mov	r0, r9
 8018ee2:	f000 fbfb 	bl	80196dc <_Bfree>
 8018ee6:	e0b0      	b.n	801904a <_dtoa_r+0x622>
 8018ee8:	07e2      	lsls	r2, r4, #31
 8018eea:	d505      	bpl.n	8018ef8 <_dtoa_r+0x4d0>
 8018eec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018ef0:	f7e7 fb82 	bl	80005f8 <__aeabi_dmul>
 8018ef4:	3601      	adds	r6, #1
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	1064      	asrs	r4, r4, #1
 8018efa:	3508      	adds	r5, #8
 8018efc:	e762      	b.n	8018dc4 <_dtoa_r+0x39c>
 8018efe:	2602      	movs	r6, #2
 8018f00:	e765      	b.n	8018dce <_dtoa_r+0x3a6>
 8018f02:	9c03      	ldr	r4, [sp, #12]
 8018f04:	46b8      	mov	r8, r7
 8018f06:	e784      	b.n	8018e12 <_dtoa_r+0x3ea>
 8018f08:	4b27      	ldr	r3, [pc, #156]	@ (8018fa8 <_dtoa_r+0x580>)
 8018f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018f0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018f14:	4454      	add	r4, sl
 8018f16:	2900      	cmp	r1, #0
 8018f18:	d054      	beq.n	8018fc4 <_dtoa_r+0x59c>
 8018f1a:	4929      	ldr	r1, [pc, #164]	@ (8018fc0 <_dtoa_r+0x598>)
 8018f1c:	2000      	movs	r0, #0
 8018f1e:	f7e7 fc95 	bl	800084c <__aeabi_ddiv>
 8018f22:	4633      	mov	r3, r6
 8018f24:	462a      	mov	r2, r5
 8018f26:	f7e7 f9af 	bl	8000288 <__aeabi_dsub>
 8018f2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018f2e:	4656      	mov	r6, sl
 8018f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f34:	f7e7 fe10 	bl	8000b58 <__aeabi_d2iz>
 8018f38:	4605      	mov	r5, r0
 8018f3a:	f7e7 faf3 	bl	8000524 <__aeabi_i2d>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	460b      	mov	r3, r1
 8018f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f46:	f7e7 f99f 	bl	8000288 <__aeabi_dsub>
 8018f4a:	3530      	adds	r5, #48	@ 0x30
 8018f4c:	4602      	mov	r2, r0
 8018f4e:	460b      	mov	r3, r1
 8018f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018f54:	f806 5b01 	strb.w	r5, [r6], #1
 8018f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018f5c:	f7e7 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8018f60:	2800      	cmp	r0, #0
 8018f62:	d172      	bne.n	801904a <_dtoa_r+0x622>
 8018f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018f68:	4911      	ldr	r1, [pc, #68]	@ (8018fb0 <_dtoa_r+0x588>)
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	f7e7 f98c 	bl	8000288 <__aeabi_dsub>
 8018f70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018f74:	f7e7 fdb2 	bl	8000adc <__aeabi_dcmplt>
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	f040 80b4 	bne.w	80190e6 <_dtoa_r+0x6be>
 8018f7e:	42a6      	cmp	r6, r4
 8018f80:	f43f af70 	beq.w	8018e64 <_dtoa_r+0x43c>
 8018f84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018f88:	4b0a      	ldr	r3, [pc, #40]	@ (8018fb4 <_dtoa_r+0x58c>)
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f7e7 fb34 	bl	80005f8 <__aeabi_dmul>
 8018f90:	4b08      	ldr	r3, [pc, #32]	@ (8018fb4 <_dtoa_r+0x58c>)
 8018f92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018f96:	2200      	movs	r2, #0
 8018f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f9c:	f7e7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8018fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018fa4:	e7c4      	b.n	8018f30 <_dtoa_r+0x508>
 8018fa6:	bf00      	nop
 8018fa8:	0801d740 	.word	0x0801d740
 8018fac:	0801d718 	.word	0x0801d718
 8018fb0:	3ff00000 	.word	0x3ff00000
 8018fb4:	40240000 	.word	0x40240000
 8018fb8:	401c0000 	.word	0x401c0000
 8018fbc:	40140000 	.word	0x40140000
 8018fc0:	3fe00000 	.word	0x3fe00000
 8018fc4:	4631      	mov	r1, r6
 8018fc6:	4628      	mov	r0, r5
 8018fc8:	f7e7 fb16 	bl	80005f8 <__aeabi_dmul>
 8018fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018fd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8018fd2:	4656      	mov	r6, sl
 8018fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018fd8:	f7e7 fdbe 	bl	8000b58 <__aeabi_d2iz>
 8018fdc:	4605      	mov	r5, r0
 8018fde:	f7e7 faa1 	bl	8000524 <__aeabi_i2d>
 8018fe2:	4602      	mov	r2, r0
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018fea:	f7e7 f94d 	bl	8000288 <__aeabi_dsub>
 8018fee:	3530      	adds	r5, #48	@ 0x30
 8018ff0:	f806 5b01 	strb.w	r5, [r6], #1
 8018ff4:	4602      	mov	r2, r0
 8018ff6:	460b      	mov	r3, r1
 8018ff8:	42a6      	cmp	r6, r4
 8018ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018ffe:	f04f 0200 	mov.w	r2, #0
 8019002:	d124      	bne.n	801904e <_dtoa_r+0x626>
 8019004:	4baf      	ldr	r3, [pc, #700]	@ (80192c4 <_dtoa_r+0x89c>)
 8019006:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801900a:	f7e7 f93f 	bl	800028c <__adddf3>
 801900e:	4602      	mov	r2, r0
 8019010:	460b      	mov	r3, r1
 8019012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019016:	f7e7 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 801901a:	2800      	cmp	r0, #0
 801901c:	d163      	bne.n	80190e6 <_dtoa_r+0x6be>
 801901e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019022:	49a8      	ldr	r1, [pc, #672]	@ (80192c4 <_dtoa_r+0x89c>)
 8019024:	2000      	movs	r0, #0
 8019026:	f7e7 f92f 	bl	8000288 <__aeabi_dsub>
 801902a:	4602      	mov	r2, r0
 801902c:	460b      	mov	r3, r1
 801902e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019032:	f7e7 fd53 	bl	8000adc <__aeabi_dcmplt>
 8019036:	2800      	cmp	r0, #0
 8019038:	f43f af14 	beq.w	8018e64 <_dtoa_r+0x43c>
 801903c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801903e:	1e73      	subs	r3, r6, #1
 8019040:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019042:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019046:	2b30      	cmp	r3, #48	@ 0x30
 8019048:	d0f8      	beq.n	801903c <_dtoa_r+0x614>
 801904a:	4647      	mov	r7, r8
 801904c:	e03b      	b.n	80190c6 <_dtoa_r+0x69e>
 801904e:	4b9e      	ldr	r3, [pc, #632]	@ (80192c8 <_dtoa_r+0x8a0>)
 8019050:	f7e7 fad2 	bl	80005f8 <__aeabi_dmul>
 8019054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019058:	e7bc      	b.n	8018fd4 <_dtoa_r+0x5ac>
 801905a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801905e:	4656      	mov	r6, sl
 8019060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019064:	4620      	mov	r0, r4
 8019066:	4629      	mov	r1, r5
 8019068:	f7e7 fbf0 	bl	800084c <__aeabi_ddiv>
 801906c:	f7e7 fd74 	bl	8000b58 <__aeabi_d2iz>
 8019070:	4680      	mov	r8, r0
 8019072:	f7e7 fa57 	bl	8000524 <__aeabi_i2d>
 8019076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801907a:	f7e7 fabd 	bl	80005f8 <__aeabi_dmul>
 801907e:	4602      	mov	r2, r0
 8019080:	460b      	mov	r3, r1
 8019082:	4620      	mov	r0, r4
 8019084:	4629      	mov	r1, r5
 8019086:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801908a:	f7e7 f8fd 	bl	8000288 <__aeabi_dsub>
 801908e:	f806 4b01 	strb.w	r4, [r6], #1
 8019092:	9d03      	ldr	r5, [sp, #12]
 8019094:	eba6 040a 	sub.w	r4, r6, sl
 8019098:	42a5      	cmp	r5, r4
 801909a:	4602      	mov	r2, r0
 801909c:	460b      	mov	r3, r1
 801909e:	d133      	bne.n	8019108 <_dtoa_r+0x6e0>
 80190a0:	f7e7 f8f4 	bl	800028c <__adddf3>
 80190a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80190a8:	4604      	mov	r4, r0
 80190aa:	460d      	mov	r5, r1
 80190ac:	f7e7 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80190b0:	b9c0      	cbnz	r0, 80190e4 <_dtoa_r+0x6bc>
 80190b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80190b6:	4620      	mov	r0, r4
 80190b8:	4629      	mov	r1, r5
 80190ba:	f7e7 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80190be:	b110      	cbz	r0, 80190c6 <_dtoa_r+0x69e>
 80190c0:	f018 0f01 	tst.w	r8, #1
 80190c4:	d10e      	bne.n	80190e4 <_dtoa_r+0x6bc>
 80190c6:	9902      	ldr	r1, [sp, #8]
 80190c8:	4648      	mov	r0, r9
 80190ca:	f000 fb07 	bl	80196dc <_Bfree>
 80190ce:	2300      	movs	r3, #0
 80190d0:	7033      	strb	r3, [r6, #0]
 80190d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80190d4:	3701      	adds	r7, #1
 80190d6:	601f      	str	r7, [r3, #0]
 80190d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80190da:	2b00      	cmp	r3, #0
 80190dc:	f000 824b 	beq.w	8019576 <_dtoa_r+0xb4e>
 80190e0:	601e      	str	r6, [r3, #0]
 80190e2:	e248      	b.n	8019576 <_dtoa_r+0xb4e>
 80190e4:	46b8      	mov	r8, r7
 80190e6:	4633      	mov	r3, r6
 80190e8:	461e      	mov	r6, r3
 80190ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190ee:	2a39      	cmp	r2, #57	@ 0x39
 80190f0:	d106      	bne.n	8019100 <_dtoa_r+0x6d8>
 80190f2:	459a      	cmp	sl, r3
 80190f4:	d1f8      	bne.n	80190e8 <_dtoa_r+0x6c0>
 80190f6:	2230      	movs	r2, #48	@ 0x30
 80190f8:	f108 0801 	add.w	r8, r8, #1
 80190fc:	f88a 2000 	strb.w	r2, [sl]
 8019100:	781a      	ldrb	r2, [r3, #0]
 8019102:	3201      	adds	r2, #1
 8019104:	701a      	strb	r2, [r3, #0]
 8019106:	e7a0      	b.n	801904a <_dtoa_r+0x622>
 8019108:	4b6f      	ldr	r3, [pc, #444]	@ (80192c8 <_dtoa_r+0x8a0>)
 801910a:	2200      	movs	r2, #0
 801910c:	f7e7 fa74 	bl	80005f8 <__aeabi_dmul>
 8019110:	2200      	movs	r2, #0
 8019112:	2300      	movs	r3, #0
 8019114:	4604      	mov	r4, r0
 8019116:	460d      	mov	r5, r1
 8019118:	f7e7 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801911c:	2800      	cmp	r0, #0
 801911e:	d09f      	beq.n	8019060 <_dtoa_r+0x638>
 8019120:	e7d1      	b.n	80190c6 <_dtoa_r+0x69e>
 8019122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019124:	2a00      	cmp	r2, #0
 8019126:	f000 80ea 	beq.w	80192fe <_dtoa_r+0x8d6>
 801912a:	9a07      	ldr	r2, [sp, #28]
 801912c:	2a01      	cmp	r2, #1
 801912e:	f300 80cd 	bgt.w	80192cc <_dtoa_r+0x8a4>
 8019132:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019134:	2a00      	cmp	r2, #0
 8019136:	f000 80c1 	beq.w	80192bc <_dtoa_r+0x894>
 801913a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801913e:	9c08      	ldr	r4, [sp, #32]
 8019140:	9e00      	ldr	r6, [sp, #0]
 8019142:	9a00      	ldr	r2, [sp, #0]
 8019144:	441a      	add	r2, r3
 8019146:	9200      	str	r2, [sp, #0]
 8019148:	9a06      	ldr	r2, [sp, #24]
 801914a:	2101      	movs	r1, #1
 801914c:	441a      	add	r2, r3
 801914e:	4648      	mov	r0, r9
 8019150:	9206      	str	r2, [sp, #24]
 8019152:	f000 fb77 	bl	8019844 <__i2b>
 8019156:	4605      	mov	r5, r0
 8019158:	b166      	cbz	r6, 8019174 <_dtoa_r+0x74c>
 801915a:	9b06      	ldr	r3, [sp, #24]
 801915c:	2b00      	cmp	r3, #0
 801915e:	dd09      	ble.n	8019174 <_dtoa_r+0x74c>
 8019160:	42b3      	cmp	r3, r6
 8019162:	9a00      	ldr	r2, [sp, #0]
 8019164:	bfa8      	it	ge
 8019166:	4633      	movge	r3, r6
 8019168:	1ad2      	subs	r2, r2, r3
 801916a:	9200      	str	r2, [sp, #0]
 801916c:	9a06      	ldr	r2, [sp, #24]
 801916e:	1af6      	subs	r6, r6, r3
 8019170:	1ad3      	subs	r3, r2, r3
 8019172:	9306      	str	r3, [sp, #24]
 8019174:	9b08      	ldr	r3, [sp, #32]
 8019176:	b30b      	cbz	r3, 80191bc <_dtoa_r+0x794>
 8019178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801917a:	2b00      	cmp	r3, #0
 801917c:	f000 80c6 	beq.w	801930c <_dtoa_r+0x8e4>
 8019180:	2c00      	cmp	r4, #0
 8019182:	f000 80c0 	beq.w	8019306 <_dtoa_r+0x8de>
 8019186:	4629      	mov	r1, r5
 8019188:	4622      	mov	r2, r4
 801918a:	4648      	mov	r0, r9
 801918c:	f000 fc12 	bl	80199b4 <__pow5mult>
 8019190:	9a02      	ldr	r2, [sp, #8]
 8019192:	4601      	mov	r1, r0
 8019194:	4605      	mov	r5, r0
 8019196:	4648      	mov	r0, r9
 8019198:	f000 fb6a 	bl	8019870 <__multiply>
 801919c:	9902      	ldr	r1, [sp, #8]
 801919e:	4680      	mov	r8, r0
 80191a0:	4648      	mov	r0, r9
 80191a2:	f000 fa9b 	bl	80196dc <_Bfree>
 80191a6:	9b08      	ldr	r3, [sp, #32]
 80191a8:	1b1b      	subs	r3, r3, r4
 80191aa:	9308      	str	r3, [sp, #32]
 80191ac:	f000 80b1 	beq.w	8019312 <_dtoa_r+0x8ea>
 80191b0:	9a08      	ldr	r2, [sp, #32]
 80191b2:	4641      	mov	r1, r8
 80191b4:	4648      	mov	r0, r9
 80191b6:	f000 fbfd 	bl	80199b4 <__pow5mult>
 80191ba:	9002      	str	r0, [sp, #8]
 80191bc:	2101      	movs	r1, #1
 80191be:	4648      	mov	r0, r9
 80191c0:	f000 fb40 	bl	8019844 <__i2b>
 80191c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80191c6:	4604      	mov	r4, r0
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	f000 81d8 	beq.w	801957e <_dtoa_r+0xb56>
 80191ce:	461a      	mov	r2, r3
 80191d0:	4601      	mov	r1, r0
 80191d2:	4648      	mov	r0, r9
 80191d4:	f000 fbee 	bl	80199b4 <__pow5mult>
 80191d8:	9b07      	ldr	r3, [sp, #28]
 80191da:	2b01      	cmp	r3, #1
 80191dc:	4604      	mov	r4, r0
 80191de:	f300 809f 	bgt.w	8019320 <_dtoa_r+0x8f8>
 80191e2:	9b04      	ldr	r3, [sp, #16]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f040 8097 	bne.w	8019318 <_dtoa_r+0x8f0>
 80191ea:	9b05      	ldr	r3, [sp, #20]
 80191ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	f040 8093 	bne.w	801931c <_dtoa_r+0x8f4>
 80191f6:	9b05      	ldr	r3, [sp, #20]
 80191f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80191fc:	0d1b      	lsrs	r3, r3, #20
 80191fe:	051b      	lsls	r3, r3, #20
 8019200:	b133      	cbz	r3, 8019210 <_dtoa_r+0x7e8>
 8019202:	9b00      	ldr	r3, [sp, #0]
 8019204:	3301      	adds	r3, #1
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	9b06      	ldr	r3, [sp, #24]
 801920a:	3301      	adds	r3, #1
 801920c:	9306      	str	r3, [sp, #24]
 801920e:	2301      	movs	r3, #1
 8019210:	9308      	str	r3, [sp, #32]
 8019212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019214:	2b00      	cmp	r3, #0
 8019216:	f000 81b8 	beq.w	801958a <_dtoa_r+0xb62>
 801921a:	6923      	ldr	r3, [r4, #16]
 801921c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019220:	6918      	ldr	r0, [r3, #16]
 8019222:	f000 fac3 	bl	80197ac <__hi0bits>
 8019226:	f1c0 0020 	rsb	r0, r0, #32
 801922a:	9b06      	ldr	r3, [sp, #24]
 801922c:	4418      	add	r0, r3
 801922e:	f010 001f 	ands.w	r0, r0, #31
 8019232:	f000 8082 	beq.w	801933a <_dtoa_r+0x912>
 8019236:	f1c0 0320 	rsb	r3, r0, #32
 801923a:	2b04      	cmp	r3, #4
 801923c:	dd73      	ble.n	8019326 <_dtoa_r+0x8fe>
 801923e:	9b00      	ldr	r3, [sp, #0]
 8019240:	f1c0 001c 	rsb	r0, r0, #28
 8019244:	4403      	add	r3, r0
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	9b06      	ldr	r3, [sp, #24]
 801924a:	4403      	add	r3, r0
 801924c:	4406      	add	r6, r0
 801924e:	9306      	str	r3, [sp, #24]
 8019250:	9b00      	ldr	r3, [sp, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	dd05      	ble.n	8019262 <_dtoa_r+0x83a>
 8019256:	9902      	ldr	r1, [sp, #8]
 8019258:	461a      	mov	r2, r3
 801925a:	4648      	mov	r0, r9
 801925c:	f000 fc04 	bl	8019a68 <__lshift>
 8019260:	9002      	str	r0, [sp, #8]
 8019262:	9b06      	ldr	r3, [sp, #24]
 8019264:	2b00      	cmp	r3, #0
 8019266:	dd05      	ble.n	8019274 <_dtoa_r+0x84c>
 8019268:	4621      	mov	r1, r4
 801926a:	461a      	mov	r2, r3
 801926c:	4648      	mov	r0, r9
 801926e:	f000 fbfb 	bl	8019a68 <__lshift>
 8019272:	4604      	mov	r4, r0
 8019274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019276:	2b00      	cmp	r3, #0
 8019278:	d061      	beq.n	801933e <_dtoa_r+0x916>
 801927a:	9802      	ldr	r0, [sp, #8]
 801927c:	4621      	mov	r1, r4
 801927e:	f000 fc5f 	bl	8019b40 <__mcmp>
 8019282:	2800      	cmp	r0, #0
 8019284:	da5b      	bge.n	801933e <_dtoa_r+0x916>
 8019286:	2300      	movs	r3, #0
 8019288:	9902      	ldr	r1, [sp, #8]
 801928a:	220a      	movs	r2, #10
 801928c:	4648      	mov	r0, r9
 801928e:	f000 fa47 	bl	8019720 <__multadd>
 8019292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019294:	9002      	str	r0, [sp, #8]
 8019296:	f107 38ff 	add.w	r8, r7, #4294967295
 801929a:	2b00      	cmp	r3, #0
 801929c:	f000 8177 	beq.w	801958e <_dtoa_r+0xb66>
 80192a0:	4629      	mov	r1, r5
 80192a2:	2300      	movs	r3, #0
 80192a4:	220a      	movs	r2, #10
 80192a6:	4648      	mov	r0, r9
 80192a8:	f000 fa3a 	bl	8019720 <__multadd>
 80192ac:	f1bb 0f00 	cmp.w	fp, #0
 80192b0:	4605      	mov	r5, r0
 80192b2:	dc6f      	bgt.n	8019394 <_dtoa_r+0x96c>
 80192b4:	9b07      	ldr	r3, [sp, #28]
 80192b6:	2b02      	cmp	r3, #2
 80192b8:	dc49      	bgt.n	801934e <_dtoa_r+0x926>
 80192ba:	e06b      	b.n	8019394 <_dtoa_r+0x96c>
 80192bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80192be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80192c2:	e73c      	b.n	801913e <_dtoa_r+0x716>
 80192c4:	3fe00000 	.word	0x3fe00000
 80192c8:	40240000 	.word	0x40240000
 80192cc:	9b03      	ldr	r3, [sp, #12]
 80192ce:	1e5c      	subs	r4, r3, #1
 80192d0:	9b08      	ldr	r3, [sp, #32]
 80192d2:	42a3      	cmp	r3, r4
 80192d4:	db09      	blt.n	80192ea <_dtoa_r+0x8c2>
 80192d6:	1b1c      	subs	r4, r3, r4
 80192d8:	9b03      	ldr	r3, [sp, #12]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	f6bf af30 	bge.w	8019140 <_dtoa_r+0x718>
 80192e0:	9b00      	ldr	r3, [sp, #0]
 80192e2:	9a03      	ldr	r2, [sp, #12]
 80192e4:	1a9e      	subs	r6, r3, r2
 80192e6:	2300      	movs	r3, #0
 80192e8:	e72b      	b.n	8019142 <_dtoa_r+0x71a>
 80192ea:	9b08      	ldr	r3, [sp, #32]
 80192ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80192ee:	9408      	str	r4, [sp, #32]
 80192f0:	1ae3      	subs	r3, r4, r3
 80192f2:	441a      	add	r2, r3
 80192f4:	9e00      	ldr	r6, [sp, #0]
 80192f6:	9b03      	ldr	r3, [sp, #12]
 80192f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80192fa:	2400      	movs	r4, #0
 80192fc:	e721      	b.n	8019142 <_dtoa_r+0x71a>
 80192fe:	9c08      	ldr	r4, [sp, #32]
 8019300:	9e00      	ldr	r6, [sp, #0]
 8019302:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019304:	e728      	b.n	8019158 <_dtoa_r+0x730>
 8019306:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801930a:	e751      	b.n	80191b0 <_dtoa_r+0x788>
 801930c:	9a08      	ldr	r2, [sp, #32]
 801930e:	9902      	ldr	r1, [sp, #8]
 8019310:	e750      	b.n	80191b4 <_dtoa_r+0x78c>
 8019312:	f8cd 8008 	str.w	r8, [sp, #8]
 8019316:	e751      	b.n	80191bc <_dtoa_r+0x794>
 8019318:	2300      	movs	r3, #0
 801931a:	e779      	b.n	8019210 <_dtoa_r+0x7e8>
 801931c:	9b04      	ldr	r3, [sp, #16]
 801931e:	e777      	b.n	8019210 <_dtoa_r+0x7e8>
 8019320:	2300      	movs	r3, #0
 8019322:	9308      	str	r3, [sp, #32]
 8019324:	e779      	b.n	801921a <_dtoa_r+0x7f2>
 8019326:	d093      	beq.n	8019250 <_dtoa_r+0x828>
 8019328:	9a00      	ldr	r2, [sp, #0]
 801932a:	331c      	adds	r3, #28
 801932c:	441a      	add	r2, r3
 801932e:	9200      	str	r2, [sp, #0]
 8019330:	9a06      	ldr	r2, [sp, #24]
 8019332:	441a      	add	r2, r3
 8019334:	441e      	add	r6, r3
 8019336:	9206      	str	r2, [sp, #24]
 8019338:	e78a      	b.n	8019250 <_dtoa_r+0x828>
 801933a:	4603      	mov	r3, r0
 801933c:	e7f4      	b.n	8019328 <_dtoa_r+0x900>
 801933e:	9b03      	ldr	r3, [sp, #12]
 8019340:	2b00      	cmp	r3, #0
 8019342:	46b8      	mov	r8, r7
 8019344:	dc20      	bgt.n	8019388 <_dtoa_r+0x960>
 8019346:	469b      	mov	fp, r3
 8019348:	9b07      	ldr	r3, [sp, #28]
 801934a:	2b02      	cmp	r3, #2
 801934c:	dd1e      	ble.n	801938c <_dtoa_r+0x964>
 801934e:	f1bb 0f00 	cmp.w	fp, #0
 8019352:	f47f adb1 	bne.w	8018eb8 <_dtoa_r+0x490>
 8019356:	4621      	mov	r1, r4
 8019358:	465b      	mov	r3, fp
 801935a:	2205      	movs	r2, #5
 801935c:	4648      	mov	r0, r9
 801935e:	f000 f9df 	bl	8019720 <__multadd>
 8019362:	4601      	mov	r1, r0
 8019364:	4604      	mov	r4, r0
 8019366:	9802      	ldr	r0, [sp, #8]
 8019368:	f000 fbea 	bl	8019b40 <__mcmp>
 801936c:	2800      	cmp	r0, #0
 801936e:	f77f ada3 	ble.w	8018eb8 <_dtoa_r+0x490>
 8019372:	4656      	mov	r6, sl
 8019374:	2331      	movs	r3, #49	@ 0x31
 8019376:	f806 3b01 	strb.w	r3, [r6], #1
 801937a:	f108 0801 	add.w	r8, r8, #1
 801937e:	e59f      	b.n	8018ec0 <_dtoa_r+0x498>
 8019380:	9c03      	ldr	r4, [sp, #12]
 8019382:	46b8      	mov	r8, r7
 8019384:	4625      	mov	r5, r4
 8019386:	e7f4      	b.n	8019372 <_dtoa_r+0x94a>
 8019388:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801938c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801938e:	2b00      	cmp	r3, #0
 8019390:	f000 8101 	beq.w	8019596 <_dtoa_r+0xb6e>
 8019394:	2e00      	cmp	r6, #0
 8019396:	dd05      	ble.n	80193a4 <_dtoa_r+0x97c>
 8019398:	4629      	mov	r1, r5
 801939a:	4632      	mov	r2, r6
 801939c:	4648      	mov	r0, r9
 801939e:	f000 fb63 	bl	8019a68 <__lshift>
 80193a2:	4605      	mov	r5, r0
 80193a4:	9b08      	ldr	r3, [sp, #32]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d05c      	beq.n	8019464 <_dtoa_r+0xa3c>
 80193aa:	6869      	ldr	r1, [r5, #4]
 80193ac:	4648      	mov	r0, r9
 80193ae:	f000 f955 	bl	801965c <_Balloc>
 80193b2:	4606      	mov	r6, r0
 80193b4:	b928      	cbnz	r0, 80193c2 <_dtoa_r+0x99a>
 80193b6:	4b82      	ldr	r3, [pc, #520]	@ (80195c0 <_dtoa_r+0xb98>)
 80193b8:	4602      	mov	r2, r0
 80193ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80193be:	f7ff bb4a 	b.w	8018a56 <_dtoa_r+0x2e>
 80193c2:	692a      	ldr	r2, [r5, #16]
 80193c4:	3202      	adds	r2, #2
 80193c6:	0092      	lsls	r2, r2, #2
 80193c8:	f105 010c 	add.w	r1, r5, #12
 80193cc:	300c      	adds	r0, #12
 80193ce:	f7ff fa86 	bl	80188de <memcpy>
 80193d2:	2201      	movs	r2, #1
 80193d4:	4631      	mov	r1, r6
 80193d6:	4648      	mov	r0, r9
 80193d8:	f000 fb46 	bl	8019a68 <__lshift>
 80193dc:	f10a 0301 	add.w	r3, sl, #1
 80193e0:	9300      	str	r3, [sp, #0]
 80193e2:	eb0a 030b 	add.w	r3, sl, fp
 80193e6:	9308      	str	r3, [sp, #32]
 80193e8:	9b04      	ldr	r3, [sp, #16]
 80193ea:	f003 0301 	and.w	r3, r3, #1
 80193ee:	462f      	mov	r7, r5
 80193f0:	9306      	str	r3, [sp, #24]
 80193f2:	4605      	mov	r5, r0
 80193f4:	9b00      	ldr	r3, [sp, #0]
 80193f6:	9802      	ldr	r0, [sp, #8]
 80193f8:	4621      	mov	r1, r4
 80193fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80193fe:	f7ff fa8a 	bl	8018916 <quorem>
 8019402:	4603      	mov	r3, r0
 8019404:	3330      	adds	r3, #48	@ 0x30
 8019406:	9003      	str	r0, [sp, #12]
 8019408:	4639      	mov	r1, r7
 801940a:	9802      	ldr	r0, [sp, #8]
 801940c:	9309      	str	r3, [sp, #36]	@ 0x24
 801940e:	f000 fb97 	bl	8019b40 <__mcmp>
 8019412:	462a      	mov	r2, r5
 8019414:	9004      	str	r0, [sp, #16]
 8019416:	4621      	mov	r1, r4
 8019418:	4648      	mov	r0, r9
 801941a:	f000 fbad 	bl	8019b78 <__mdiff>
 801941e:	68c2      	ldr	r2, [r0, #12]
 8019420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019422:	4606      	mov	r6, r0
 8019424:	bb02      	cbnz	r2, 8019468 <_dtoa_r+0xa40>
 8019426:	4601      	mov	r1, r0
 8019428:	9802      	ldr	r0, [sp, #8]
 801942a:	f000 fb89 	bl	8019b40 <__mcmp>
 801942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019430:	4602      	mov	r2, r0
 8019432:	4631      	mov	r1, r6
 8019434:	4648      	mov	r0, r9
 8019436:	920c      	str	r2, [sp, #48]	@ 0x30
 8019438:	9309      	str	r3, [sp, #36]	@ 0x24
 801943a:	f000 f94f 	bl	80196dc <_Bfree>
 801943e:	9b07      	ldr	r3, [sp, #28]
 8019440:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019442:	9e00      	ldr	r6, [sp, #0]
 8019444:	ea42 0103 	orr.w	r1, r2, r3
 8019448:	9b06      	ldr	r3, [sp, #24]
 801944a:	4319      	orrs	r1, r3
 801944c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801944e:	d10d      	bne.n	801946c <_dtoa_r+0xa44>
 8019450:	2b39      	cmp	r3, #57	@ 0x39
 8019452:	d027      	beq.n	80194a4 <_dtoa_r+0xa7c>
 8019454:	9a04      	ldr	r2, [sp, #16]
 8019456:	2a00      	cmp	r2, #0
 8019458:	dd01      	ble.n	801945e <_dtoa_r+0xa36>
 801945a:	9b03      	ldr	r3, [sp, #12]
 801945c:	3331      	adds	r3, #49	@ 0x31
 801945e:	f88b 3000 	strb.w	r3, [fp]
 8019462:	e52e      	b.n	8018ec2 <_dtoa_r+0x49a>
 8019464:	4628      	mov	r0, r5
 8019466:	e7b9      	b.n	80193dc <_dtoa_r+0x9b4>
 8019468:	2201      	movs	r2, #1
 801946a:	e7e2      	b.n	8019432 <_dtoa_r+0xa0a>
 801946c:	9904      	ldr	r1, [sp, #16]
 801946e:	2900      	cmp	r1, #0
 8019470:	db04      	blt.n	801947c <_dtoa_r+0xa54>
 8019472:	9807      	ldr	r0, [sp, #28]
 8019474:	4301      	orrs	r1, r0
 8019476:	9806      	ldr	r0, [sp, #24]
 8019478:	4301      	orrs	r1, r0
 801947a:	d120      	bne.n	80194be <_dtoa_r+0xa96>
 801947c:	2a00      	cmp	r2, #0
 801947e:	ddee      	ble.n	801945e <_dtoa_r+0xa36>
 8019480:	9902      	ldr	r1, [sp, #8]
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	2201      	movs	r2, #1
 8019486:	4648      	mov	r0, r9
 8019488:	f000 faee 	bl	8019a68 <__lshift>
 801948c:	4621      	mov	r1, r4
 801948e:	9002      	str	r0, [sp, #8]
 8019490:	f000 fb56 	bl	8019b40 <__mcmp>
 8019494:	2800      	cmp	r0, #0
 8019496:	9b00      	ldr	r3, [sp, #0]
 8019498:	dc02      	bgt.n	80194a0 <_dtoa_r+0xa78>
 801949a:	d1e0      	bne.n	801945e <_dtoa_r+0xa36>
 801949c:	07da      	lsls	r2, r3, #31
 801949e:	d5de      	bpl.n	801945e <_dtoa_r+0xa36>
 80194a0:	2b39      	cmp	r3, #57	@ 0x39
 80194a2:	d1da      	bne.n	801945a <_dtoa_r+0xa32>
 80194a4:	2339      	movs	r3, #57	@ 0x39
 80194a6:	f88b 3000 	strb.w	r3, [fp]
 80194aa:	4633      	mov	r3, r6
 80194ac:	461e      	mov	r6, r3
 80194ae:	3b01      	subs	r3, #1
 80194b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80194b4:	2a39      	cmp	r2, #57	@ 0x39
 80194b6:	d04e      	beq.n	8019556 <_dtoa_r+0xb2e>
 80194b8:	3201      	adds	r2, #1
 80194ba:	701a      	strb	r2, [r3, #0]
 80194bc:	e501      	b.n	8018ec2 <_dtoa_r+0x49a>
 80194be:	2a00      	cmp	r2, #0
 80194c0:	dd03      	ble.n	80194ca <_dtoa_r+0xaa2>
 80194c2:	2b39      	cmp	r3, #57	@ 0x39
 80194c4:	d0ee      	beq.n	80194a4 <_dtoa_r+0xa7c>
 80194c6:	3301      	adds	r3, #1
 80194c8:	e7c9      	b.n	801945e <_dtoa_r+0xa36>
 80194ca:	9a00      	ldr	r2, [sp, #0]
 80194cc:	9908      	ldr	r1, [sp, #32]
 80194ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80194d2:	428a      	cmp	r2, r1
 80194d4:	d028      	beq.n	8019528 <_dtoa_r+0xb00>
 80194d6:	9902      	ldr	r1, [sp, #8]
 80194d8:	2300      	movs	r3, #0
 80194da:	220a      	movs	r2, #10
 80194dc:	4648      	mov	r0, r9
 80194de:	f000 f91f 	bl	8019720 <__multadd>
 80194e2:	42af      	cmp	r7, r5
 80194e4:	9002      	str	r0, [sp, #8]
 80194e6:	f04f 0300 	mov.w	r3, #0
 80194ea:	f04f 020a 	mov.w	r2, #10
 80194ee:	4639      	mov	r1, r7
 80194f0:	4648      	mov	r0, r9
 80194f2:	d107      	bne.n	8019504 <_dtoa_r+0xadc>
 80194f4:	f000 f914 	bl	8019720 <__multadd>
 80194f8:	4607      	mov	r7, r0
 80194fa:	4605      	mov	r5, r0
 80194fc:	9b00      	ldr	r3, [sp, #0]
 80194fe:	3301      	adds	r3, #1
 8019500:	9300      	str	r3, [sp, #0]
 8019502:	e777      	b.n	80193f4 <_dtoa_r+0x9cc>
 8019504:	f000 f90c 	bl	8019720 <__multadd>
 8019508:	4629      	mov	r1, r5
 801950a:	4607      	mov	r7, r0
 801950c:	2300      	movs	r3, #0
 801950e:	220a      	movs	r2, #10
 8019510:	4648      	mov	r0, r9
 8019512:	f000 f905 	bl	8019720 <__multadd>
 8019516:	4605      	mov	r5, r0
 8019518:	e7f0      	b.n	80194fc <_dtoa_r+0xad4>
 801951a:	f1bb 0f00 	cmp.w	fp, #0
 801951e:	bfcc      	ite	gt
 8019520:	465e      	movgt	r6, fp
 8019522:	2601      	movle	r6, #1
 8019524:	4456      	add	r6, sl
 8019526:	2700      	movs	r7, #0
 8019528:	9902      	ldr	r1, [sp, #8]
 801952a:	9300      	str	r3, [sp, #0]
 801952c:	2201      	movs	r2, #1
 801952e:	4648      	mov	r0, r9
 8019530:	f000 fa9a 	bl	8019a68 <__lshift>
 8019534:	4621      	mov	r1, r4
 8019536:	9002      	str	r0, [sp, #8]
 8019538:	f000 fb02 	bl	8019b40 <__mcmp>
 801953c:	2800      	cmp	r0, #0
 801953e:	dcb4      	bgt.n	80194aa <_dtoa_r+0xa82>
 8019540:	d102      	bne.n	8019548 <_dtoa_r+0xb20>
 8019542:	9b00      	ldr	r3, [sp, #0]
 8019544:	07db      	lsls	r3, r3, #31
 8019546:	d4b0      	bmi.n	80194aa <_dtoa_r+0xa82>
 8019548:	4633      	mov	r3, r6
 801954a:	461e      	mov	r6, r3
 801954c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019550:	2a30      	cmp	r2, #48	@ 0x30
 8019552:	d0fa      	beq.n	801954a <_dtoa_r+0xb22>
 8019554:	e4b5      	b.n	8018ec2 <_dtoa_r+0x49a>
 8019556:	459a      	cmp	sl, r3
 8019558:	d1a8      	bne.n	80194ac <_dtoa_r+0xa84>
 801955a:	2331      	movs	r3, #49	@ 0x31
 801955c:	f108 0801 	add.w	r8, r8, #1
 8019560:	f88a 3000 	strb.w	r3, [sl]
 8019564:	e4ad      	b.n	8018ec2 <_dtoa_r+0x49a>
 8019566:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019568:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80195c4 <_dtoa_r+0xb9c>
 801956c:	b11b      	cbz	r3, 8019576 <_dtoa_r+0xb4e>
 801956e:	f10a 0308 	add.w	r3, sl, #8
 8019572:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019574:	6013      	str	r3, [r2, #0]
 8019576:	4650      	mov	r0, sl
 8019578:	b017      	add	sp, #92	@ 0x5c
 801957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801957e:	9b07      	ldr	r3, [sp, #28]
 8019580:	2b01      	cmp	r3, #1
 8019582:	f77f ae2e 	ble.w	80191e2 <_dtoa_r+0x7ba>
 8019586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019588:	9308      	str	r3, [sp, #32]
 801958a:	2001      	movs	r0, #1
 801958c:	e64d      	b.n	801922a <_dtoa_r+0x802>
 801958e:	f1bb 0f00 	cmp.w	fp, #0
 8019592:	f77f aed9 	ble.w	8019348 <_dtoa_r+0x920>
 8019596:	4656      	mov	r6, sl
 8019598:	9802      	ldr	r0, [sp, #8]
 801959a:	4621      	mov	r1, r4
 801959c:	f7ff f9bb 	bl	8018916 <quorem>
 80195a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80195a4:	f806 3b01 	strb.w	r3, [r6], #1
 80195a8:	eba6 020a 	sub.w	r2, r6, sl
 80195ac:	4593      	cmp	fp, r2
 80195ae:	ddb4      	ble.n	801951a <_dtoa_r+0xaf2>
 80195b0:	9902      	ldr	r1, [sp, #8]
 80195b2:	2300      	movs	r3, #0
 80195b4:	220a      	movs	r2, #10
 80195b6:	4648      	mov	r0, r9
 80195b8:	f000 f8b2 	bl	8019720 <__multadd>
 80195bc:	9002      	str	r0, [sp, #8]
 80195be:	e7eb      	b.n	8019598 <_dtoa_r+0xb70>
 80195c0:	0801d644 	.word	0x0801d644
 80195c4:	0801d5c8 	.word	0x0801d5c8

080195c8 <_free_r>:
 80195c8:	b538      	push	{r3, r4, r5, lr}
 80195ca:	4605      	mov	r5, r0
 80195cc:	2900      	cmp	r1, #0
 80195ce:	d041      	beq.n	8019654 <_free_r+0x8c>
 80195d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195d4:	1f0c      	subs	r4, r1, #4
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	bfb8      	it	lt
 80195da:	18e4      	addlt	r4, r4, r3
 80195dc:	f7fe fa84 	bl	8017ae8 <__malloc_lock>
 80195e0:	4a1d      	ldr	r2, [pc, #116]	@ (8019658 <_free_r+0x90>)
 80195e2:	6813      	ldr	r3, [r2, #0]
 80195e4:	b933      	cbnz	r3, 80195f4 <_free_r+0x2c>
 80195e6:	6063      	str	r3, [r4, #4]
 80195e8:	6014      	str	r4, [r2, #0]
 80195ea:	4628      	mov	r0, r5
 80195ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195f0:	f7fe ba80 	b.w	8017af4 <__malloc_unlock>
 80195f4:	42a3      	cmp	r3, r4
 80195f6:	d908      	bls.n	801960a <_free_r+0x42>
 80195f8:	6820      	ldr	r0, [r4, #0]
 80195fa:	1821      	adds	r1, r4, r0
 80195fc:	428b      	cmp	r3, r1
 80195fe:	bf01      	itttt	eq
 8019600:	6819      	ldreq	r1, [r3, #0]
 8019602:	685b      	ldreq	r3, [r3, #4]
 8019604:	1809      	addeq	r1, r1, r0
 8019606:	6021      	streq	r1, [r4, #0]
 8019608:	e7ed      	b.n	80195e6 <_free_r+0x1e>
 801960a:	461a      	mov	r2, r3
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	b10b      	cbz	r3, 8019614 <_free_r+0x4c>
 8019610:	42a3      	cmp	r3, r4
 8019612:	d9fa      	bls.n	801960a <_free_r+0x42>
 8019614:	6811      	ldr	r1, [r2, #0]
 8019616:	1850      	adds	r0, r2, r1
 8019618:	42a0      	cmp	r0, r4
 801961a:	d10b      	bne.n	8019634 <_free_r+0x6c>
 801961c:	6820      	ldr	r0, [r4, #0]
 801961e:	4401      	add	r1, r0
 8019620:	1850      	adds	r0, r2, r1
 8019622:	4283      	cmp	r3, r0
 8019624:	6011      	str	r1, [r2, #0]
 8019626:	d1e0      	bne.n	80195ea <_free_r+0x22>
 8019628:	6818      	ldr	r0, [r3, #0]
 801962a:	685b      	ldr	r3, [r3, #4]
 801962c:	6053      	str	r3, [r2, #4]
 801962e:	4408      	add	r0, r1
 8019630:	6010      	str	r0, [r2, #0]
 8019632:	e7da      	b.n	80195ea <_free_r+0x22>
 8019634:	d902      	bls.n	801963c <_free_r+0x74>
 8019636:	230c      	movs	r3, #12
 8019638:	602b      	str	r3, [r5, #0]
 801963a:	e7d6      	b.n	80195ea <_free_r+0x22>
 801963c:	6820      	ldr	r0, [r4, #0]
 801963e:	1821      	adds	r1, r4, r0
 8019640:	428b      	cmp	r3, r1
 8019642:	bf04      	itt	eq
 8019644:	6819      	ldreq	r1, [r3, #0]
 8019646:	685b      	ldreq	r3, [r3, #4]
 8019648:	6063      	str	r3, [r4, #4]
 801964a:	bf04      	itt	eq
 801964c:	1809      	addeq	r1, r1, r0
 801964e:	6021      	streq	r1, [r4, #0]
 8019650:	6054      	str	r4, [r2, #4]
 8019652:	e7ca      	b.n	80195ea <_free_r+0x22>
 8019654:	bd38      	pop	{r3, r4, r5, pc}
 8019656:	bf00      	nop
 8019658:	20003730 	.word	0x20003730

0801965c <_Balloc>:
 801965c:	b570      	push	{r4, r5, r6, lr}
 801965e:	69c6      	ldr	r6, [r0, #28]
 8019660:	4604      	mov	r4, r0
 8019662:	460d      	mov	r5, r1
 8019664:	b976      	cbnz	r6, 8019684 <_Balloc+0x28>
 8019666:	2010      	movs	r0, #16
 8019668:	f7fe f994 	bl	8017994 <malloc>
 801966c:	4602      	mov	r2, r0
 801966e:	61e0      	str	r0, [r4, #28]
 8019670:	b920      	cbnz	r0, 801967c <_Balloc+0x20>
 8019672:	4b18      	ldr	r3, [pc, #96]	@ (80196d4 <_Balloc+0x78>)
 8019674:	4818      	ldr	r0, [pc, #96]	@ (80196d8 <_Balloc+0x7c>)
 8019676:	216b      	movs	r1, #107	@ 0x6b
 8019678:	f000 fddc 	bl	801a234 <__assert_func>
 801967c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019680:	6006      	str	r6, [r0, #0]
 8019682:	60c6      	str	r6, [r0, #12]
 8019684:	69e6      	ldr	r6, [r4, #28]
 8019686:	68f3      	ldr	r3, [r6, #12]
 8019688:	b183      	cbz	r3, 80196ac <_Balloc+0x50>
 801968a:	69e3      	ldr	r3, [r4, #28]
 801968c:	68db      	ldr	r3, [r3, #12]
 801968e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019692:	b9b8      	cbnz	r0, 80196c4 <_Balloc+0x68>
 8019694:	2101      	movs	r1, #1
 8019696:	fa01 f605 	lsl.w	r6, r1, r5
 801969a:	1d72      	adds	r2, r6, #5
 801969c:	0092      	lsls	r2, r2, #2
 801969e:	4620      	mov	r0, r4
 80196a0:	f000 fde6 	bl	801a270 <_calloc_r>
 80196a4:	b160      	cbz	r0, 80196c0 <_Balloc+0x64>
 80196a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80196aa:	e00e      	b.n	80196ca <_Balloc+0x6e>
 80196ac:	2221      	movs	r2, #33	@ 0x21
 80196ae:	2104      	movs	r1, #4
 80196b0:	4620      	mov	r0, r4
 80196b2:	f000 fddd 	bl	801a270 <_calloc_r>
 80196b6:	69e3      	ldr	r3, [r4, #28]
 80196b8:	60f0      	str	r0, [r6, #12]
 80196ba:	68db      	ldr	r3, [r3, #12]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d1e4      	bne.n	801968a <_Balloc+0x2e>
 80196c0:	2000      	movs	r0, #0
 80196c2:	bd70      	pop	{r4, r5, r6, pc}
 80196c4:	6802      	ldr	r2, [r0, #0]
 80196c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80196ca:	2300      	movs	r3, #0
 80196cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80196d0:	e7f7      	b.n	80196c2 <_Balloc+0x66>
 80196d2:	bf00      	nop
 80196d4:	0801d5d5 	.word	0x0801d5d5
 80196d8:	0801d655 	.word	0x0801d655

080196dc <_Bfree>:
 80196dc:	b570      	push	{r4, r5, r6, lr}
 80196de:	69c6      	ldr	r6, [r0, #28]
 80196e0:	4605      	mov	r5, r0
 80196e2:	460c      	mov	r4, r1
 80196e4:	b976      	cbnz	r6, 8019704 <_Bfree+0x28>
 80196e6:	2010      	movs	r0, #16
 80196e8:	f7fe f954 	bl	8017994 <malloc>
 80196ec:	4602      	mov	r2, r0
 80196ee:	61e8      	str	r0, [r5, #28]
 80196f0:	b920      	cbnz	r0, 80196fc <_Bfree+0x20>
 80196f2:	4b09      	ldr	r3, [pc, #36]	@ (8019718 <_Bfree+0x3c>)
 80196f4:	4809      	ldr	r0, [pc, #36]	@ (801971c <_Bfree+0x40>)
 80196f6:	218f      	movs	r1, #143	@ 0x8f
 80196f8:	f000 fd9c 	bl	801a234 <__assert_func>
 80196fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019700:	6006      	str	r6, [r0, #0]
 8019702:	60c6      	str	r6, [r0, #12]
 8019704:	b13c      	cbz	r4, 8019716 <_Bfree+0x3a>
 8019706:	69eb      	ldr	r3, [r5, #28]
 8019708:	6862      	ldr	r2, [r4, #4]
 801970a:	68db      	ldr	r3, [r3, #12]
 801970c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019710:	6021      	str	r1, [r4, #0]
 8019712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019716:	bd70      	pop	{r4, r5, r6, pc}
 8019718:	0801d5d5 	.word	0x0801d5d5
 801971c:	0801d655 	.word	0x0801d655

08019720 <__multadd>:
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	690d      	ldr	r5, [r1, #16]
 8019726:	4607      	mov	r7, r0
 8019728:	460c      	mov	r4, r1
 801972a:	461e      	mov	r6, r3
 801972c:	f101 0c14 	add.w	ip, r1, #20
 8019730:	2000      	movs	r0, #0
 8019732:	f8dc 3000 	ldr.w	r3, [ip]
 8019736:	b299      	uxth	r1, r3
 8019738:	fb02 6101 	mla	r1, r2, r1, r6
 801973c:	0c1e      	lsrs	r6, r3, #16
 801973e:	0c0b      	lsrs	r3, r1, #16
 8019740:	fb02 3306 	mla	r3, r2, r6, r3
 8019744:	b289      	uxth	r1, r1
 8019746:	3001      	adds	r0, #1
 8019748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801974c:	4285      	cmp	r5, r0
 801974e:	f84c 1b04 	str.w	r1, [ip], #4
 8019752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019756:	dcec      	bgt.n	8019732 <__multadd+0x12>
 8019758:	b30e      	cbz	r6, 801979e <__multadd+0x7e>
 801975a:	68a3      	ldr	r3, [r4, #8]
 801975c:	42ab      	cmp	r3, r5
 801975e:	dc19      	bgt.n	8019794 <__multadd+0x74>
 8019760:	6861      	ldr	r1, [r4, #4]
 8019762:	4638      	mov	r0, r7
 8019764:	3101      	adds	r1, #1
 8019766:	f7ff ff79 	bl	801965c <_Balloc>
 801976a:	4680      	mov	r8, r0
 801976c:	b928      	cbnz	r0, 801977a <__multadd+0x5a>
 801976e:	4602      	mov	r2, r0
 8019770:	4b0c      	ldr	r3, [pc, #48]	@ (80197a4 <__multadd+0x84>)
 8019772:	480d      	ldr	r0, [pc, #52]	@ (80197a8 <__multadd+0x88>)
 8019774:	21ba      	movs	r1, #186	@ 0xba
 8019776:	f000 fd5d 	bl	801a234 <__assert_func>
 801977a:	6922      	ldr	r2, [r4, #16]
 801977c:	3202      	adds	r2, #2
 801977e:	f104 010c 	add.w	r1, r4, #12
 8019782:	0092      	lsls	r2, r2, #2
 8019784:	300c      	adds	r0, #12
 8019786:	f7ff f8aa 	bl	80188de <memcpy>
 801978a:	4621      	mov	r1, r4
 801978c:	4638      	mov	r0, r7
 801978e:	f7ff ffa5 	bl	80196dc <_Bfree>
 8019792:	4644      	mov	r4, r8
 8019794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019798:	3501      	adds	r5, #1
 801979a:	615e      	str	r6, [r3, #20]
 801979c:	6125      	str	r5, [r4, #16]
 801979e:	4620      	mov	r0, r4
 80197a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197a4:	0801d644 	.word	0x0801d644
 80197a8:	0801d655 	.word	0x0801d655

080197ac <__hi0bits>:
 80197ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80197b0:	4603      	mov	r3, r0
 80197b2:	bf36      	itet	cc
 80197b4:	0403      	lslcc	r3, r0, #16
 80197b6:	2000      	movcs	r0, #0
 80197b8:	2010      	movcc	r0, #16
 80197ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80197be:	bf3c      	itt	cc
 80197c0:	021b      	lslcc	r3, r3, #8
 80197c2:	3008      	addcc	r0, #8
 80197c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80197c8:	bf3c      	itt	cc
 80197ca:	011b      	lslcc	r3, r3, #4
 80197cc:	3004      	addcc	r0, #4
 80197ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80197d2:	bf3c      	itt	cc
 80197d4:	009b      	lslcc	r3, r3, #2
 80197d6:	3002      	addcc	r0, #2
 80197d8:	2b00      	cmp	r3, #0
 80197da:	db05      	blt.n	80197e8 <__hi0bits+0x3c>
 80197dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80197e0:	f100 0001 	add.w	r0, r0, #1
 80197e4:	bf08      	it	eq
 80197e6:	2020      	moveq	r0, #32
 80197e8:	4770      	bx	lr

080197ea <__lo0bits>:
 80197ea:	6803      	ldr	r3, [r0, #0]
 80197ec:	4602      	mov	r2, r0
 80197ee:	f013 0007 	ands.w	r0, r3, #7
 80197f2:	d00b      	beq.n	801980c <__lo0bits+0x22>
 80197f4:	07d9      	lsls	r1, r3, #31
 80197f6:	d421      	bmi.n	801983c <__lo0bits+0x52>
 80197f8:	0798      	lsls	r0, r3, #30
 80197fa:	bf49      	itett	mi
 80197fc:	085b      	lsrmi	r3, r3, #1
 80197fe:	089b      	lsrpl	r3, r3, #2
 8019800:	2001      	movmi	r0, #1
 8019802:	6013      	strmi	r3, [r2, #0]
 8019804:	bf5c      	itt	pl
 8019806:	6013      	strpl	r3, [r2, #0]
 8019808:	2002      	movpl	r0, #2
 801980a:	4770      	bx	lr
 801980c:	b299      	uxth	r1, r3
 801980e:	b909      	cbnz	r1, 8019814 <__lo0bits+0x2a>
 8019810:	0c1b      	lsrs	r3, r3, #16
 8019812:	2010      	movs	r0, #16
 8019814:	b2d9      	uxtb	r1, r3
 8019816:	b909      	cbnz	r1, 801981c <__lo0bits+0x32>
 8019818:	3008      	adds	r0, #8
 801981a:	0a1b      	lsrs	r3, r3, #8
 801981c:	0719      	lsls	r1, r3, #28
 801981e:	bf04      	itt	eq
 8019820:	091b      	lsreq	r3, r3, #4
 8019822:	3004      	addeq	r0, #4
 8019824:	0799      	lsls	r1, r3, #30
 8019826:	bf04      	itt	eq
 8019828:	089b      	lsreq	r3, r3, #2
 801982a:	3002      	addeq	r0, #2
 801982c:	07d9      	lsls	r1, r3, #31
 801982e:	d403      	bmi.n	8019838 <__lo0bits+0x4e>
 8019830:	085b      	lsrs	r3, r3, #1
 8019832:	f100 0001 	add.w	r0, r0, #1
 8019836:	d003      	beq.n	8019840 <__lo0bits+0x56>
 8019838:	6013      	str	r3, [r2, #0]
 801983a:	4770      	bx	lr
 801983c:	2000      	movs	r0, #0
 801983e:	4770      	bx	lr
 8019840:	2020      	movs	r0, #32
 8019842:	4770      	bx	lr

08019844 <__i2b>:
 8019844:	b510      	push	{r4, lr}
 8019846:	460c      	mov	r4, r1
 8019848:	2101      	movs	r1, #1
 801984a:	f7ff ff07 	bl	801965c <_Balloc>
 801984e:	4602      	mov	r2, r0
 8019850:	b928      	cbnz	r0, 801985e <__i2b+0x1a>
 8019852:	4b05      	ldr	r3, [pc, #20]	@ (8019868 <__i2b+0x24>)
 8019854:	4805      	ldr	r0, [pc, #20]	@ (801986c <__i2b+0x28>)
 8019856:	f240 1145 	movw	r1, #325	@ 0x145
 801985a:	f000 fceb 	bl	801a234 <__assert_func>
 801985e:	2301      	movs	r3, #1
 8019860:	6144      	str	r4, [r0, #20]
 8019862:	6103      	str	r3, [r0, #16]
 8019864:	bd10      	pop	{r4, pc}
 8019866:	bf00      	nop
 8019868:	0801d644 	.word	0x0801d644
 801986c:	0801d655 	.word	0x0801d655

08019870 <__multiply>:
 8019870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019874:	4617      	mov	r7, r2
 8019876:	690a      	ldr	r2, [r1, #16]
 8019878:	693b      	ldr	r3, [r7, #16]
 801987a:	429a      	cmp	r2, r3
 801987c:	bfa8      	it	ge
 801987e:	463b      	movge	r3, r7
 8019880:	4689      	mov	r9, r1
 8019882:	bfa4      	itt	ge
 8019884:	460f      	movge	r7, r1
 8019886:	4699      	movge	r9, r3
 8019888:	693d      	ldr	r5, [r7, #16]
 801988a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	6879      	ldr	r1, [r7, #4]
 8019892:	eb05 060a 	add.w	r6, r5, sl
 8019896:	42b3      	cmp	r3, r6
 8019898:	b085      	sub	sp, #20
 801989a:	bfb8      	it	lt
 801989c:	3101      	addlt	r1, #1
 801989e:	f7ff fedd 	bl	801965c <_Balloc>
 80198a2:	b930      	cbnz	r0, 80198b2 <__multiply+0x42>
 80198a4:	4602      	mov	r2, r0
 80198a6:	4b41      	ldr	r3, [pc, #260]	@ (80199ac <__multiply+0x13c>)
 80198a8:	4841      	ldr	r0, [pc, #260]	@ (80199b0 <__multiply+0x140>)
 80198aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80198ae:	f000 fcc1 	bl	801a234 <__assert_func>
 80198b2:	f100 0414 	add.w	r4, r0, #20
 80198b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80198ba:	4623      	mov	r3, r4
 80198bc:	2200      	movs	r2, #0
 80198be:	4573      	cmp	r3, lr
 80198c0:	d320      	bcc.n	8019904 <__multiply+0x94>
 80198c2:	f107 0814 	add.w	r8, r7, #20
 80198c6:	f109 0114 	add.w	r1, r9, #20
 80198ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80198ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80198d2:	9302      	str	r3, [sp, #8]
 80198d4:	1beb      	subs	r3, r5, r7
 80198d6:	3b15      	subs	r3, #21
 80198d8:	f023 0303 	bic.w	r3, r3, #3
 80198dc:	3304      	adds	r3, #4
 80198de:	3715      	adds	r7, #21
 80198e0:	42bd      	cmp	r5, r7
 80198e2:	bf38      	it	cc
 80198e4:	2304      	movcc	r3, #4
 80198e6:	9301      	str	r3, [sp, #4]
 80198e8:	9b02      	ldr	r3, [sp, #8]
 80198ea:	9103      	str	r1, [sp, #12]
 80198ec:	428b      	cmp	r3, r1
 80198ee:	d80c      	bhi.n	801990a <__multiply+0x9a>
 80198f0:	2e00      	cmp	r6, #0
 80198f2:	dd03      	ble.n	80198fc <__multiply+0x8c>
 80198f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d055      	beq.n	80199a8 <__multiply+0x138>
 80198fc:	6106      	str	r6, [r0, #16]
 80198fe:	b005      	add	sp, #20
 8019900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019904:	f843 2b04 	str.w	r2, [r3], #4
 8019908:	e7d9      	b.n	80198be <__multiply+0x4e>
 801990a:	f8b1 a000 	ldrh.w	sl, [r1]
 801990e:	f1ba 0f00 	cmp.w	sl, #0
 8019912:	d01f      	beq.n	8019954 <__multiply+0xe4>
 8019914:	46c4      	mov	ip, r8
 8019916:	46a1      	mov	r9, r4
 8019918:	2700      	movs	r7, #0
 801991a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801991e:	f8d9 3000 	ldr.w	r3, [r9]
 8019922:	fa1f fb82 	uxth.w	fp, r2
 8019926:	b29b      	uxth	r3, r3
 8019928:	fb0a 330b 	mla	r3, sl, fp, r3
 801992c:	443b      	add	r3, r7
 801992e:	f8d9 7000 	ldr.w	r7, [r9]
 8019932:	0c12      	lsrs	r2, r2, #16
 8019934:	0c3f      	lsrs	r7, r7, #16
 8019936:	fb0a 7202 	mla	r2, sl, r2, r7
 801993a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801993e:	b29b      	uxth	r3, r3
 8019940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019944:	4565      	cmp	r5, ip
 8019946:	f849 3b04 	str.w	r3, [r9], #4
 801994a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801994e:	d8e4      	bhi.n	801991a <__multiply+0xaa>
 8019950:	9b01      	ldr	r3, [sp, #4]
 8019952:	50e7      	str	r7, [r4, r3]
 8019954:	9b03      	ldr	r3, [sp, #12]
 8019956:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801995a:	3104      	adds	r1, #4
 801995c:	f1b9 0f00 	cmp.w	r9, #0
 8019960:	d020      	beq.n	80199a4 <__multiply+0x134>
 8019962:	6823      	ldr	r3, [r4, #0]
 8019964:	4647      	mov	r7, r8
 8019966:	46a4      	mov	ip, r4
 8019968:	f04f 0a00 	mov.w	sl, #0
 801996c:	f8b7 b000 	ldrh.w	fp, [r7]
 8019970:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8019974:	fb09 220b 	mla	r2, r9, fp, r2
 8019978:	4452      	add	r2, sl
 801997a:	b29b      	uxth	r3, r3
 801997c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019980:	f84c 3b04 	str.w	r3, [ip], #4
 8019984:	f857 3b04 	ldr.w	r3, [r7], #4
 8019988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801998c:	f8bc 3000 	ldrh.w	r3, [ip]
 8019990:	fb09 330a 	mla	r3, r9, sl, r3
 8019994:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8019998:	42bd      	cmp	r5, r7
 801999a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801999e:	d8e5      	bhi.n	801996c <__multiply+0xfc>
 80199a0:	9a01      	ldr	r2, [sp, #4]
 80199a2:	50a3      	str	r3, [r4, r2]
 80199a4:	3404      	adds	r4, #4
 80199a6:	e79f      	b.n	80198e8 <__multiply+0x78>
 80199a8:	3e01      	subs	r6, #1
 80199aa:	e7a1      	b.n	80198f0 <__multiply+0x80>
 80199ac:	0801d644 	.word	0x0801d644
 80199b0:	0801d655 	.word	0x0801d655

080199b4 <__pow5mult>:
 80199b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199b8:	4615      	mov	r5, r2
 80199ba:	f012 0203 	ands.w	r2, r2, #3
 80199be:	4607      	mov	r7, r0
 80199c0:	460e      	mov	r6, r1
 80199c2:	d007      	beq.n	80199d4 <__pow5mult+0x20>
 80199c4:	4c25      	ldr	r4, [pc, #148]	@ (8019a5c <__pow5mult+0xa8>)
 80199c6:	3a01      	subs	r2, #1
 80199c8:	2300      	movs	r3, #0
 80199ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80199ce:	f7ff fea7 	bl	8019720 <__multadd>
 80199d2:	4606      	mov	r6, r0
 80199d4:	10ad      	asrs	r5, r5, #2
 80199d6:	d03d      	beq.n	8019a54 <__pow5mult+0xa0>
 80199d8:	69fc      	ldr	r4, [r7, #28]
 80199da:	b97c      	cbnz	r4, 80199fc <__pow5mult+0x48>
 80199dc:	2010      	movs	r0, #16
 80199de:	f7fd ffd9 	bl	8017994 <malloc>
 80199e2:	4602      	mov	r2, r0
 80199e4:	61f8      	str	r0, [r7, #28]
 80199e6:	b928      	cbnz	r0, 80199f4 <__pow5mult+0x40>
 80199e8:	4b1d      	ldr	r3, [pc, #116]	@ (8019a60 <__pow5mult+0xac>)
 80199ea:	481e      	ldr	r0, [pc, #120]	@ (8019a64 <__pow5mult+0xb0>)
 80199ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80199f0:	f000 fc20 	bl	801a234 <__assert_func>
 80199f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80199f8:	6004      	str	r4, [r0, #0]
 80199fa:	60c4      	str	r4, [r0, #12]
 80199fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a04:	b94c      	cbnz	r4, 8019a1a <__pow5mult+0x66>
 8019a06:	f240 2171 	movw	r1, #625	@ 0x271
 8019a0a:	4638      	mov	r0, r7
 8019a0c:	f7ff ff1a 	bl	8019844 <__i2b>
 8019a10:	2300      	movs	r3, #0
 8019a12:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a16:	4604      	mov	r4, r0
 8019a18:	6003      	str	r3, [r0, #0]
 8019a1a:	f04f 0900 	mov.w	r9, #0
 8019a1e:	07eb      	lsls	r3, r5, #31
 8019a20:	d50a      	bpl.n	8019a38 <__pow5mult+0x84>
 8019a22:	4631      	mov	r1, r6
 8019a24:	4622      	mov	r2, r4
 8019a26:	4638      	mov	r0, r7
 8019a28:	f7ff ff22 	bl	8019870 <__multiply>
 8019a2c:	4631      	mov	r1, r6
 8019a2e:	4680      	mov	r8, r0
 8019a30:	4638      	mov	r0, r7
 8019a32:	f7ff fe53 	bl	80196dc <_Bfree>
 8019a36:	4646      	mov	r6, r8
 8019a38:	106d      	asrs	r5, r5, #1
 8019a3a:	d00b      	beq.n	8019a54 <__pow5mult+0xa0>
 8019a3c:	6820      	ldr	r0, [r4, #0]
 8019a3e:	b938      	cbnz	r0, 8019a50 <__pow5mult+0x9c>
 8019a40:	4622      	mov	r2, r4
 8019a42:	4621      	mov	r1, r4
 8019a44:	4638      	mov	r0, r7
 8019a46:	f7ff ff13 	bl	8019870 <__multiply>
 8019a4a:	6020      	str	r0, [r4, #0]
 8019a4c:	f8c0 9000 	str.w	r9, [r0]
 8019a50:	4604      	mov	r4, r0
 8019a52:	e7e4      	b.n	8019a1e <__pow5mult+0x6a>
 8019a54:	4630      	mov	r0, r6
 8019a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a5a:	bf00      	nop
 8019a5c:	0801d708 	.word	0x0801d708
 8019a60:	0801d5d5 	.word	0x0801d5d5
 8019a64:	0801d655 	.word	0x0801d655

08019a68 <__lshift>:
 8019a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a6c:	460c      	mov	r4, r1
 8019a6e:	6849      	ldr	r1, [r1, #4]
 8019a70:	6923      	ldr	r3, [r4, #16]
 8019a72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a76:	68a3      	ldr	r3, [r4, #8]
 8019a78:	4607      	mov	r7, r0
 8019a7a:	4691      	mov	r9, r2
 8019a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a80:	f108 0601 	add.w	r6, r8, #1
 8019a84:	42b3      	cmp	r3, r6
 8019a86:	db0b      	blt.n	8019aa0 <__lshift+0x38>
 8019a88:	4638      	mov	r0, r7
 8019a8a:	f7ff fde7 	bl	801965c <_Balloc>
 8019a8e:	4605      	mov	r5, r0
 8019a90:	b948      	cbnz	r0, 8019aa6 <__lshift+0x3e>
 8019a92:	4602      	mov	r2, r0
 8019a94:	4b28      	ldr	r3, [pc, #160]	@ (8019b38 <__lshift+0xd0>)
 8019a96:	4829      	ldr	r0, [pc, #164]	@ (8019b3c <__lshift+0xd4>)
 8019a98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019a9c:	f000 fbca 	bl	801a234 <__assert_func>
 8019aa0:	3101      	adds	r1, #1
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	e7ee      	b.n	8019a84 <__lshift+0x1c>
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	f100 0114 	add.w	r1, r0, #20
 8019aac:	f100 0210 	add.w	r2, r0, #16
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	4553      	cmp	r3, sl
 8019ab4:	db33      	blt.n	8019b1e <__lshift+0xb6>
 8019ab6:	6920      	ldr	r0, [r4, #16]
 8019ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019abc:	f104 0314 	add.w	r3, r4, #20
 8019ac0:	f019 091f 	ands.w	r9, r9, #31
 8019ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019acc:	d02b      	beq.n	8019b26 <__lshift+0xbe>
 8019ace:	f1c9 0e20 	rsb	lr, r9, #32
 8019ad2:	468a      	mov	sl, r1
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	6818      	ldr	r0, [r3, #0]
 8019ad8:	fa00 f009 	lsl.w	r0, r0, r9
 8019adc:	4310      	orrs	r0, r2
 8019ade:	f84a 0b04 	str.w	r0, [sl], #4
 8019ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ae6:	459c      	cmp	ip, r3
 8019ae8:	fa22 f20e 	lsr.w	r2, r2, lr
 8019aec:	d8f3      	bhi.n	8019ad6 <__lshift+0x6e>
 8019aee:	ebac 0304 	sub.w	r3, ip, r4
 8019af2:	3b15      	subs	r3, #21
 8019af4:	f023 0303 	bic.w	r3, r3, #3
 8019af8:	3304      	adds	r3, #4
 8019afa:	f104 0015 	add.w	r0, r4, #21
 8019afe:	4560      	cmp	r0, ip
 8019b00:	bf88      	it	hi
 8019b02:	2304      	movhi	r3, #4
 8019b04:	50ca      	str	r2, [r1, r3]
 8019b06:	b10a      	cbz	r2, 8019b0c <__lshift+0xa4>
 8019b08:	f108 0602 	add.w	r6, r8, #2
 8019b0c:	3e01      	subs	r6, #1
 8019b0e:	4638      	mov	r0, r7
 8019b10:	612e      	str	r6, [r5, #16]
 8019b12:	4621      	mov	r1, r4
 8019b14:	f7ff fde2 	bl	80196dc <_Bfree>
 8019b18:	4628      	mov	r0, r5
 8019b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b22:	3301      	adds	r3, #1
 8019b24:	e7c5      	b.n	8019ab2 <__lshift+0x4a>
 8019b26:	3904      	subs	r1, #4
 8019b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b30:	459c      	cmp	ip, r3
 8019b32:	d8f9      	bhi.n	8019b28 <__lshift+0xc0>
 8019b34:	e7ea      	b.n	8019b0c <__lshift+0xa4>
 8019b36:	bf00      	nop
 8019b38:	0801d644 	.word	0x0801d644
 8019b3c:	0801d655 	.word	0x0801d655

08019b40 <__mcmp>:
 8019b40:	690a      	ldr	r2, [r1, #16]
 8019b42:	4603      	mov	r3, r0
 8019b44:	6900      	ldr	r0, [r0, #16]
 8019b46:	1a80      	subs	r0, r0, r2
 8019b48:	b530      	push	{r4, r5, lr}
 8019b4a:	d10e      	bne.n	8019b6a <__mcmp+0x2a>
 8019b4c:	3314      	adds	r3, #20
 8019b4e:	3114      	adds	r1, #20
 8019b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019b60:	4295      	cmp	r5, r2
 8019b62:	d003      	beq.n	8019b6c <__mcmp+0x2c>
 8019b64:	d205      	bcs.n	8019b72 <__mcmp+0x32>
 8019b66:	f04f 30ff 	mov.w	r0, #4294967295
 8019b6a:	bd30      	pop	{r4, r5, pc}
 8019b6c:	42a3      	cmp	r3, r4
 8019b6e:	d3f3      	bcc.n	8019b58 <__mcmp+0x18>
 8019b70:	e7fb      	b.n	8019b6a <__mcmp+0x2a>
 8019b72:	2001      	movs	r0, #1
 8019b74:	e7f9      	b.n	8019b6a <__mcmp+0x2a>
	...

08019b78 <__mdiff>:
 8019b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b7c:	4689      	mov	r9, r1
 8019b7e:	4606      	mov	r6, r0
 8019b80:	4611      	mov	r1, r2
 8019b82:	4648      	mov	r0, r9
 8019b84:	4614      	mov	r4, r2
 8019b86:	f7ff ffdb 	bl	8019b40 <__mcmp>
 8019b8a:	1e05      	subs	r5, r0, #0
 8019b8c:	d112      	bne.n	8019bb4 <__mdiff+0x3c>
 8019b8e:	4629      	mov	r1, r5
 8019b90:	4630      	mov	r0, r6
 8019b92:	f7ff fd63 	bl	801965c <_Balloc>
 8019b96:	4602      	mov	r2, r0
 8019b98:	b928      	cbnz	r0, 8019ba6 <__mdiff+0x2e>
 8019b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8019c98 <__mdiff+0x120>)
 8019b9c:	f240 2137 	movw	r1, #567	@ 0x237
 8019ba0:	483e      	ldr	r0, [pc, #248]	@ (8019c9c <__mdiff+0x124>)
 8019ba2:	f000 fb47 	bl	801a234 <__assert_func>
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bac:	4610      	mov	r0, r2
 8019bae:	b003      	add	sp, #12
 8019bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb4:	bfbc      	itt	lt
 8019bb6:	464b      	movlt	r3, r9
 8019bb8:	46a1      	movlt	r9, r4
 8019bba:	4630      	mov	r0, r6
 8019bbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019bc0:	bfba      	itte	lt
 8019bc2:	461c      	movlt	r4, r3
 8019bc4:	2501      	movlt	r5, #1
 8019bc6:	2500      	movge	r5, #0
 8019bc8:	f7ff fd48 	bl	801965c <_Balloc>
 8019bcc:	4602      	mov	r2, r0
 8019bce:	b918      	cbnz	r0, 8019bd8 <__mdiff+0x60>
 8019bd0:	4b31      	ldr	r3, [pc, #196]	@ (8019c98 <__mdiff+0x120>)
 8019bd2:	f240 2145 	movw	r1, #581	@ 0x245
 8019bd6:	e7e3      	b.n	8019ba0 <__mdiff+0x28>
 8019bd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019bdc:	6926      	ldr	r6, [r4, #16]
 8019bde:	60c5      	str	r5, [r0, #12]
 8019be0:	f109 0310 	add.w	r3, r9, #16
 8019be4:	f109 0514 	add.w	r5, r9, #20
 8019be8:	f104 0e14 	add.w	lr, r4, #20
 8019bec:	f100 0b14 	add.w	fp, r0, #20
 8019bf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019bf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019bf8:	9301      	str	r3, [sp, #4]
 8019bfa:	46d9      	mov	r9, fp
 8019bfc:	f04f 0c00 	mov.w	ip, #0
 8019c00:	9b01      	ldr	r3, [sp, #4]
 8019c02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019c06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019c0a:	9301      	str	r3, [sp, #4]
 8019c0c:	fa1f f38a 	uxth.w	r3, sl
 8019c10:	4619      	mov	r1, r3
 8019c12:	b283      	uxth	r3, r0
 8019c14:	1acb      	subs	r3, r1, r3
 8019c16:	0c00      	lsrs	r0, r0, #16
 8019c18:	4463      	add	r3, ip
 8019c1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019c1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019c22:	b29b      	uxth	r3, r3
 8019c24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019c28:	4576      	cmp	r6, lr
 8019c2a:	f849 3b04 	str.w	r3, [r9], #4
 8019c2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c32:	d8e5      	bhi.n	8019c00 <__mdiff+0x88>
 8019c34:	1b33      	subs	r3, r6, r4
 8019c36:	3b15      	subs	r3, #21
 8019c38:	f023 0303 	bic.w	r3, r3, #3
 8019c3c:	3415      	adds	r4, #21
 8019c3e:	3304      	adds	r3, #4
 8019c40:	42a6      	cmp	r6, r4
 8019c42:	bf38      	it	cc
 8019c44:	2304      	movcc	r3, #4
 8019c46:	441d      	add	r5, r3
 8019c48:	445b      	add	r3, fp
 8019c4a:	461e      	mov	r6, r3
 8019c4c:	462c      	mov	r4, r5
 8019c4e:	4544      	cmp	r4, r8
 8019c50:	d30e      	bcc.n	8019c70 <__mdiff+0xf8>
 8019c52:	f108 0103 	add.w	r1, r8, #3
 8019c56:	1b49      	subs	r1, r1, r5
 8019c58:	f021 0103 	bic.w	r1, r1, #3
 8019c5c:	3d03      	subs	r5, #3
 8019c5e:	45a8      	cmp	r8, r5
 8019c60:	bf38      	it	cc
 8019c62:	2100      	movcc	r1, #0
 8019c64:	440b      	add	r3, r1
 8019c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019c6a:	b191      	cbz	r1, 8019c92 <__mdiff+0x11a>
 8019c6c:	6117      	str	r7, [r2, #16]
 8019c6e:	e79d      	b.n	8019bac <__mdiff+0x34>
 8019c70:	f854 1b04 	ldr.w	r1, [r4], #4
 8019c74:	46e6      	mov	lr, ip
 8019c76:	0c08      	lsrs	r0, r1, #16
 8019c78:	fa1c fc81 	uxtah	ip, ip, r1
 8019c7c:	4471      	add	r1, lr
 8019c7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019c82:	b289      	uxth	r1, r1
 8019c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019c88:	f846 1b04 	str.w	r1, [r6], #4
 8019c8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c90:	e7dd      	b.n	8019c4e <__mdiff+0xd6>
 8019c92:	3f01      	subs	r7, #1
 8019c94:	e7e7      	b.n	8019c66 <__mdiff+0xee>
 8019c96:	bf00      	nop
 8019c98:	0801d644 	.word	0x0801d644
 8019c9c:	0801d655 	.word	0x0801d655

08019ca0 <__d2b>:
 8019ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ca4:	460f      	mov	r7, r1
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	ec59 8b10 	vmov	r8, r9, d0
 8019cac:	4616      	mov	r6, r2
 8019cae:	f7ff fcd5 	bl	801965c <_Balloc>
 8019cb2:	4604      	mov	r4, r0
 8019cb4:	b930      	cbnz	r0, 8019cc4 <__d2b+0x24>
 8019cb6:	4602      	mov	r2, r0
 8019cb8:	4b23      	ldr	r3, [pc, #140]	@ (8019d48 <__d2b+0xa8>)
 8019cba:	4824      	ldr	r0, [pc, #144]	@ (8019d4c <__d2b+0xac>)
 8019cbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8019cc0:	f000 fab8 	bl	801a234 <__assert_func>
 8019cc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019ccc:	b10d      	cbz	r5, 8019cd2 <__d2b+0x32>
 8019cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019cd2:	9301      	str	r3, [sp, #4]
 8019cd4:	f1b8 0300 	subs.w	r3, r8, #0
 8019cd8:	d023      	beq.n	8019d22 <__d2b+0x82>
 8019cda:	4668      	mov	r0, sp
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	f7ff fd84 	bl	80197ea <__lo0bits>
 8019ce2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019ce6:	b1d0      	cbz	r0, 8019d1e <__d2b+0x7e>
 8019ce8:	f1c0 0320 	rsb	r3, r0, #32
 8019cec:	fa02 f303 	lsl.w	r3, r2, r3
 8019cf0:	430b      	orrs	r3, r1
 8019cf2:	40c2      	lsrs	r2, r0
 8019cf4:	6163      	str	r3, [r4, #20]
 8019cf6:	9201      	str	r2, [sp, #4]
 8019cf8:	9b01      	ldr	r3, [sp, #4]
 8019cfa:	61a3      	str	r3, [r4, #24]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	bf0c      	ite	eq
 8019d00:	2201      	moveq	r2, #1
 8019d02:	2202      	movne	r2, #2
 8019d04:	6122      	str	r2, [r4, #16]
 8019d06:	b1a5      	cbz	r5, 8019d32 <__d2b+0x92>
 8019d08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019d0c:	4405      	add	r5, r0
 8019d0e:	603d      	str	r5, [r7, #0]
 8019d10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019d14:	6030      	str	r0, [r6, #0]
 8019d16:	4620      	mov	r0, r4
 8019d18:	b003      	add	sp, #12
 8019d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d1e:	6161      	str	r1, [r4, #20]
 8019d20:	e7ea      	b.n	8019cf8 <__d2b+0x58>
 8019d22:	a801      	add	r0, sp, #4
 8019d24:	f7ff fd61 	bl	80197ea <__lo0bits>
 8019d28:	9b01      	ldr	r3, [sp, #4]
 8019d2a:	6163      	str	r3, [r4, #20]
 8019d2c:	3020      	adds	r0, #32
 8019d2e:	2201      	movs	r2, #1
 8019d30:	e7e8      	b.n	8019d04 <__d2b+0x64>
 8019d32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019d3a:	6038      	str	r0, [r7, #0]
 8019d3c:	6918      	ldr	r0, [r3, #16]
 8019d3e:	f7ff fd35 	bl	80197ac <__hi0bits>
 8019d42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019d46:	e7e5      	b.n	8019d14 <__d2b+0x74>
 8019d48:	0801d644 	.word	0x0801d644
 8019d4c:	0801d655 	.word	0x0801d655

08019d50 <__sfputc_r>:
 8019d50:	6893      	ldr	r3, [r2, #8]
 8019d52:	3b01      	subs	r3, #1
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	b410      	push	{r4}
 8019d58:	6093      	str	r3, [r2, #8]
 8019d5a:	da08      	bge.n	8019d6e <__sfputc_r+0x1e>
 8019d5c:	6994      	ldr	r4, [r2, #24]
 8019d5e:	42a3      	cmp	r3, r4
 8019d60:	db01      	blt.n	8019d66 <__sfputc_r+0x16>
 8019d62:	290a      	cmp	r1, #10
 8019d64:	d103      	bne.n	8019d6e <__sfputc_r+0x1e>
 8019d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d6a:	f7fe bc94 	b.w	8018696 <__swbuf_r>
 8019d6e:	6813      	ldr	r3, [r2, #0]
 8019d70:	1c58      	adds	r0, r3, #1
 8019d72:	6010      	str	r0, [r2, #0]
 8019d74:	7019      	strb	r1, [r3, #0]
 8019d76:	4608      	mov	r0, r1
 8019d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d7c:	4770      	bx	lr

08019d7e <__sfputs_r>:
 8019d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d80:	4606      	mov	r6, r0
 8019d82:	460f      	mov	r7, r1
 8019d84:	4614      	mov	r4, r2
 8019d86:	18d5      	adds	r5, r2, r3
 8019d88:	42ac      	cmp	r4, r5
 8019d8a:	d101      	bne.n	8019d90 <__sfputs_r+0x12>
 8019d8c:	2000      	movs	r0, #0
 8019d8e:	e007      	b.n	8019da0 <__sfputs_r+0x22>
 8019d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d94:	463a      	mov	r2, r7
 8019d96:	4630      	mov	r0, r6
 8019d98:	f7ff ffda 	bl	8019d50 <__sfputc_r>
 8019d9c:	1c43      	adds	r3, r0, #1
 8019d9e:	d1f3      	bne.n	8019d88 <__sfputs_r+0xa>
 8019da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019da4 <_vfiprintf_r>:
 8019da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	460d      	mov	r5, r1
 8019daa:	b09d      	sub	sp, #116	@ 0x74
 8019dac:	4614      	mov	r4, r2
 8019dae:	4698      	mov	r8, r3
 8019db0:	4606      	mov	r6, r0
 8019db2:	b118      	cbz	r0, 8019dbc <_vfiprintf_r+0x18>
 8019db4:	6a03      	ldr	r3, [r0, #32]
 8019db6:	b90b      	cbnz	r3, 8019dbc <_vfiprintf_r+0x18>
 8019db8:	f7fe fb84 	bl	80184c4 <__sinit>
 8019dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019dbe:	07d9      	lsls	r1, r3, #31
 8019dc0:	d405      	bmi.n	8019dce <_vfiprintf_r+0x2a>
 8019dc2:	89ab      	ldrh	r3, [r5, #12]
 8019dc4:	059a      	lsls	r2, r3, #22
 8019dc6:	d402      	bmi.n	8019dce <_vfiprintf_r+0x2a>
 8019dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019dca:	f7fe fd86 	bl	80188da <__retarget_lock_acquire_recursive>
 8019dce:	89ab      	ldrh	r3, [r5, #12]
 8019dd0:	071b      	lsls	r3, r3, #28
 8019dd2:	d501      	bpl.n	8019dd8 <_vfiprintf_r+0x34>
 8019dd4:	692b      	ldr	r3, [r5, #16]
 8019dd6:	b99b      	cbnz	r3, 8019e00 <_vfiprintf_r+0x5c>
 8019dd8:	4629      	mov	r1, r5
 8019dda:	4630      	mov	r0, r6
 8019ddc:	f7fe fc9a 	bl	8018714 <__swsetup_r>
 8019de0:	b170      	cbz	r0, 8019e00 <_vfiprintf_r+0x5c>
 8019de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019de4:	07dc      	lsls	r4, r3, #31
 8019de6:	d504      	bpl.n	8019df2 <_vfiprintf_r+0x4e>
 8019de8:	f04f 30ff 	mov.w	r0, #4294967295
 8019dec:	b01d      	add	sp, #116	@ 0x74
 8019dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df2:	89ab      	ldrh	r3, [r5, #12]
 8019df4:	0598      	lsls	r0, r3, #22
 8019df6:	d4f7      	bmi.n	8019de8 <_vfiprintf_r+0x44>
 8019df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019dfa:	f7fe fd6f 	bl	80188dc <__retarget_lock_release_recursive>
 8019dfe:	e7f3      	b.n	8019de8 <_vfiprintf_r+0x44>
 8019e00:	2300      	movs	r3, #0
 8019e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e04:	2320      	movs	r3, #32
 8019e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e0e:	2330      	movs	r3, #48	@ 0x30
 8019e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019fc0 <_vfiprintf_r+0x21c>
 8019e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019e18:	f04f 0901 	mov.w	r9, #1
 8019e1c:	4623      	mov	r3, r4
 8019e1e:	469a      	mov	sl, r3
 8019e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e24:	b10a      	cbz	r2, 8019e2a <_vfiprintf_r+0x86>
 8019e26:	2a25      	cmp	r2, #37	@ 0x25
 8019e28:	d1f9      	bne.n	8019e1e <_vfiprintf_r+0x7a>
 8019e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8019e2e:	d00b      	beq.n	8019e48 <_vfiprintf_r+0xa4>
 8019e30:	465b      	mov	r3, fp
 8019e32:	4622      	mov	r2, r4
 8019e34:	4629      	mov	r1, r5
 8019e36:	4630      	mov	r0, r6
 8019e38:	f7ff ffa1 	bl	8019d7e <__sfputs_r>
 8019e3c:	3001      	adds	r0, #1
 8019e3e:	f000 80a7 	beq.w	8019f90 <_vfiprintf_r+0x1ec>
 8019e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e44:	445a      	add	r2, fp
 8019e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e48:	f89a 3000 	ldrb.w	r3, [sl]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	f000 809f 	beq.w	8019f90 <_vfiprintf_r+0x1ec>
 8019e52:	2300      	movs	r3, #0
 8019e54:	f04f 32ff 	mov.w	r2, #4294967295
 8019e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e5c:	f10a 0a01 	add.w	sl, sl, #1
 8019e60:	9304      	str	r3, [sp, #16]
 8019e62:	9307      	str	r3, [sp, #28]
 8019e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e6a:	4654      	mov	r4, sl
 8019e6c:	2205      	movs	r2, #5
 8019e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e72:	4853      	ldr	r0, [pc, #332]	@ (8019fc0 <_vfiprintf_r+0x21c>)
 8019e74:	f7e6 f9ac 	bl	80001d0 <memchr>
 8019e78:	9a04      	ldr	r2, [sp, #16]
 8019e7a:	b9d8      	cbnz	r0, 8019eb4 <_vfiprintf_r+0x110>
 8019e7c:	06d1      	lsls	r1, r2, #27
 8019e7e:	bf44      	itt	mi
 8019e80:	2320      	movmi	r3, #32
 8019e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e86:	0713      	lsls	r3, r2, #28
 8019e88:	bf44      	itt	mi
 8019e8a:	232b      	movmi	r3, #43	@ 0x2b
 8019e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e90:	f89a 3000 	ldrb.w	r3, [sl]
 8019e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e96:	d015      	beq.n	8019ec4 <_vfiprintf_r+0x120>
 8019e98:	9a07      	ldr	r2, [sp, #28]
 8019e9a:	4654      	mov	r4, sl
 8019e9c:	2000      	movs	r0, #0
 8019e9e:	f04f 0c0a 	mov.w	ip, #10
 8019ea2:	4621      	mov	r1, r4
 8019ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ea8:	3b30      	subs	r3, #48	@ 0x30
 8019eaa:	2b09      	cmp	r3, #9
 8019eac:	d94b      	bls.n	8019f46 <_vfiprintf_r+0x1a2>
 8019eae:	b1b0      	cbz	r0, 8019ede <_vfiprintf_r+0x13a>
 8019eb0:	9207      	str	r2, [sp, #28]
 8019eb2:	e014      	b.n	8019ede <_vfiprintf_r+0x13a>
 8019eb4:	eba0 0308 	sub.w	r3, r0, r8
 8019eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8019ebc:	4313      	orrs	r3, r2
 8019ebe:	9304      	str	r3, [sp, #16]
 8019ec0:	46a2      	mov	sl, r4
 8019ec2:	e7d2      	b.n	8019e6a <_vfiprintf_r+0xc6>
 8019ec4:	9b03      	ldr	r3, [sp, #12]
 8019ec6:	1d19      	adds	r1, r3, #4
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	9103      	str	r1, [sp, #12]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	bfbb      	ittet	lt
 8019ed0:	425b      	neglt	r3, r3
 8019ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8019ed6:	9307      	strge	r3, [sp, #28]
 8019ed8:	9307      	strlt	r3, [sp, #28]
 8019eda:	bfb8      	it	lt
 8019edc:	9204      	strlt	r2, [sp, #16]
 8019ede:	7823      	ldrb	r3, [r4, #0]
 8019ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ee2:	d10a      	bne.n	8019efa <_vfiprintf_r+0x156>
 8019ee4:	7863      	ldrb	r3, [r4, #1]
 8019ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ee8:	d132      	bne.n	8019f50 <_vfiprintf_r+0x1ac>
 8019eea:	9b03      	ldr	r3, [sp, #12]
 8019eec:	1d1a      	adds	r2, r3, #4
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	9203      	str	r2, [sp, #12]
 8019ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ef6:	3402      	adds	r4, #2
 8019ef8:	9305      	str	r3, [sp, #20]
 8019efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019fd0 <_vfiprintf_r+0x22c>
 8019efe:	7821      	ldrb	r1, [r4, #0]
 8019f00:	2203      	movs	r2, #3
 8019f02:	4650      	mov	r0, sl
 8019f04:	f7e6 f964 	bl	80001d0 <memchr>
 8019f08:	b138      	cbz	r0, 8019f1a <_vfiprintf_r+0x176>
 8019f0a:	9b04      	ldr	r3, [sp, #16]
 8019f0c:	eba0 000a 	sub.w	r0, r0, sl
 8019f10:	2240      	movs	r2, #64	@ 0x40
 8019f12:	4082      	lsls	r2, r0
 8019f14:	4313      	orrs	r3, r2
 8019f16:	3401      	adds	r4, #1
 8019f18:	9304      	str	r3, [sp, #16]
 8019f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f1e:	4829      	ldr	r0, [pc, #164]	@ (8019fc4 <_vfiprintf_r+0x220>)
 8019f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019f24:	2206      	movs	r2, #6
 8019f26:	f7e6 f953 	bl	80001d0 <memchr>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d03f      	beq.n	8019fae <_vfiprintf_r+0x20a>
 8019f2e:	4b26      	ldr	r3, [pc, #152]	@ (8019fc8 <_vfiprintf_r+0x224>)
 8019f30:	bb1b      	cbnz	r3, 8019f7a <_vfiprintf_r+0x1d6>
 8019f32:	9b03      	ldr	r3, [sp, #12]
 8019f34:	3307      	adds	r3, #7
 8019f36:	f023 0307 	bic.w	r3, r3, #7
 8019f3a:	3308      	adds	r3, #8
 8019f3c:	9303      	str	r3, [sp, #12]
 8019f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f40:	443b      	add	r3, r7
 8019f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f44:	e76a      	b.n	8019e1c <_vfiprintf_r+0x78>
 8019f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	2001      	movs	r0, #1
 8019f4e:	e7a8      	b.n	8019ea2 <_vfiprintf_r+0xfe>
 8019f50:	2300      	movs	r3, #0
 8019f52:	3401      	adds	r4, #1
 8019f54:	9305      	str	r3, [sp, #20]
 8019f56:	4619      	mov	r1, r3
 8019f58:	f04f 0c0a 	mov.w	ip, #10
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f62:	3a30      	subs	r2, #48	@ 0x30
 8019f64:	2a09      	cmp	r2, #9
 8019f66:	d903      	bls.n	8019f70 <_vfiprintf_r+0x1cc>
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d0c6      	beq.n	8019efa <_vfiprintf_r+0x156>
 8019f6c:	9105      	str	r1, [sp, #20]
 8019f6e:	e7c4      	b.n	8019efa <_vfiprintf_r+0x156>
 8019f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f74:	4604      	mov	r4, r0
 8019f76:	2301      	movs	r3, #1
 8019f78:	e7f0      	b.n	8019f5c <_vfiprintf_r+0x1b8>
 8019f7a:	ab03      	add	r3, sp, #12
 8019f7c:	9300      	str	r3, [sp, #0]
 8019f7e:	462a      	mov	r2, r5
 8019f80:	4b12      	ldr	r3, [pc, #72]	@ (8019fcc <_vfiprintf_r+0x228>)
 8019f82:	a904      	add	r1, sp, #16
 8019f84:	4630      	mov	r0, r6
 8019f86:	f7fd fe5b 	bl	8017c40 <_printf_float>
 8019f8a:	4607      	mov	r7, r0
 8019f8c:	1c78      	adds	r0, r7, #1
 8019f8e:	d1d6      	bne.n	8019f3e <_vfiprintf_r+0x19a>
 8019f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f92:	07d9      	lsls	r1, r3, #31
 8019f94:	d405      	bmi.n	8019fa2 <_vfiprintf_r+0x1fe>
 8019f96:	89ab      	ldrh	r3, [r5, #12]
 8019f98:	059a      	lsls	r2, r3, #22
 8019f9a:	d402      	bmi.n	8019fa2 <_vfiprintf_r+0x1fe>
 8019f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019f9e:	f7fe fc9d 	bl	80188dc <__retarget_lock_release_recursive>
 8019fa2:	89ab      	ldrh	r3, [r5, #12]
 8019fa4:	065b      	lsls	r3, r3, #25
 8019fa6:	f53f af1f 	bmi.w	8019de8 <_vfiprintf_r+0x44>
 8019faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019fac:	e71e      	b.n	8019dec <_vfiprintf_r+0x48>
 8019fae:	ab03      	add	r3, sp, #12
 8019fb0:	9300      	str	r3, [sp, #0]
 8019fb2:	462a      	mov	r2, r5
 8019fb4:	4b05      	ldr	r3, [pc, #20]	@ (8019fcc <_vfiprintf_r+0x228>)
 8019fb6:	a904      	add	r1, sp, #16
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7fe f8d9 	bl	8018170 <_printf_i>
 8019fbe:	e7e4      	b.n	8019f8a <_vfiprintf_r+0x1e6>
 8019fc0:	0801d6ae 	.word	0x0801d6ae
 8019fc4:	0801d6b8 	.word	0x0801d6b8
 8019fc8:	08017c41 	.word	0x08017c41
 8019fcc:	08019d7f 	.word	0x08019d7f
 8019fd0:	0801d6b4 	.word	0x0801d6b4

08019fd4 <__sflush_r>:
 8019fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fdc:	0716      	lsls	r6, r2, #28
 8019fde:	4605      	mov	r5, r0
 8019fe0:	460c      	mov	r4, r1
 8019fe2:	d454      	bmi.n	801a08e <__sflush_r+0xba>
 8019fe4:	684b      	ldr	r3, [r1, #4]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	dc02      	bgt.n	8019ff0 <__sflush_r+0x1c>
 8019fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	dd48      	ble.n	801a082 <__sflush_r+0xae>
 8019ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019ff2:	2e00      	cmp	r6, #0
 8019ff4:	d045      	beq.n	801a082 <__sflush_r+0xae>
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019ffc:	682f      	ldr	r7, [r5, #0]
 8019ffe:	6a21      	ldr	r1, [r4, #32]
 801a000:	602b      	str	r3, [r5, #0]
 801a002:	d030      	beq.n	801a066 <__sflush_r+0x92>
 801a004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a006:	89a3      	ldrh	r3, [r4, #12]
 801a008:	0759      	lsls	r1, r3, #29
 801a00a:	d505      	bpl.n	801a018 <__sflush_r+0x44>
 801a00c:	6863      	ldr	r3, [r4, #4]
 801a00e:	1ad2      	subs	r2, r2, r3
 801a010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a012:	b10b      	cbz	r3, 801a018 <__sflush_r+0x44>
 801a014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a016:	1ad2      	subs	r2, r2, r3
 801a018:	2300      	movs	r3, #0
 801a01a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a01c:	6a21      	ldr	r1, [r4, #32]
 801a01e:	4628      	mov	r0, r5
 801a020:	47b0      	blx	r6
 801a022:	1c43      	adds	r3, r0, #1
 801a024:	89a3      	ldrh	r3, [r4, #12]
 801a026:	d106      	bne.n	801a036 <__sflush_r+0x62>
 801a028:	6829      	ldr	r1, [r5, #0]
 801a02a:	291d      	cmp	r1, #29
 801a02c:	d82b      	bhi.n	801a086 <__sflush_r+0xb2>
 801a02e:	4a2a      	ldr	r2, [pc, #168]	@ (801a0d8 <__sflush_r+0x104>)
 801a030:	40ca      	lsrs	r2, r1
 801a032:	07d6      	lsls	r6, r2, #31
 801a034:	d527      	bpl.n	801a086 <__sflush_r+0xb2>
 801a036:	2200      	movs	r2, #0
 801a038:	6062      	str	r2, [r4, #4]
 801a03a:	04d9      	lsls	r1, r3, #19
 801a03c:	6922      	ldr	r2, [r4, #16]
 801a03e:	6022      	str	r2, [r4, #0]
 801a040:	d504      	bpl.n	801a04c <__sflush_r+0x78>
 801a042:	1c42      	adds	r2, r0, #1
 801a044:	d101      	bne.n	801a04a <__sflush_r+0x76>
 801a046:	682b      	ldr	r3, [r5, #0]
 801a048:	b903      	cbnz	r3, 801a04c <__sflush_r+0x78>
 801a04a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a04e:	602f      	str	r7, [r5, #0]
 801a050:	b1b9      	cbz	r1, 801a082 <__sflush_r+0xae>
 801a052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a056:	4299      	cmp	r1, r3
 801a058:	d002      	beq.n	801a060 <__sflush_r+0x8c>
 801a05a:	4628      	mov	r0, r5
 801a05c:	f7ff fab4 	bl	80195c8 <_free_r>
 801a060:	2300      	movs	r3, #0
 801a062:	6363      	str	r3, [r4, #52]	@ 0x34
 801a064:	e00d      	b.n	801a082 <__sflush_r+0xae>
 801a066:	2301      	movs	r3, #1
 801a068:	4628      	mov	r0, r5
 801a06a:	47b0      	blx	r6
 801a06c:	4602      	mov	r2, r0
 801a06e:	1c50      	adds	r0, r2, #1
 801a070:	d1c9      	bne.n	801a006 <__sflush_r+0x32>
 801a072:	682b      	ldr	r3, [r5, #0]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d0c6      	beq.n	801a006 <__sflush_r+0x32>
 801a078:	2b1d      	cmp	r3, #29
 801a07a:	d001      	beq.n	801a080 <__sflush_r+0xac>
 801a07c:	2b16      	cmp	r3, #22
 801a07e:	d11e      	bne.n	801a0be <__sflush_r+0xea>
 801a080:	602f      	str	r7, [r5, #0]
 801a082:	2000      	movs	r0, #0
 801a084:	e022      	b.n	801a0cc <__sflush_r+0xf8>
 801a086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a08a:	b21b      	sxth	r3, r3
 801a08c:	e01b      	b.n	801a0c6 <__sflush_r+0xf2>
 801a08e:	690f      	ldr	r7, [r1, #16]
 801a090:	2f00      	cmp	r7, #0
 801a092:	d0f6      	beq.n	801a082 <__sflush_r+0xae>
 801a094:	0793      	lsls	r3, r2, #30
 801a096:	680e      	ldr	r6, [r1, #0]
 801a098:	bf08      	it	eq
 801a09a:	694b      	ldreq	r3, [r1, #20]
 801a09c:	600f      	str	r7, [r1, #0]
 801a09e:	bf18      	it	ne
 801a0a0:	2300      	movne	r3, #0
 801a0a2:	eba6 0807 	sub.w	r8, r6, r7
 801a0a6:	608b      	str	r3, [r1, #8]
 801a0a8:	f1b8 0f00 	cmp.w	r8, #0
 801a0ac:	dde9      	ble.n	801a082 <__sflush_r+0xae>
 801a0ae:	6a21      	ldr	r1, [r4, #32]
 801a0b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a0b2:	4643      	mov	r3, r8
 801a0b4:	463a      	mov	r2, r7
 801a0b6:	4628      	mov	r0, r5
 801a0b8:	47b0      	blx	r6
 801a0ba:	2800      	cmp	r0, #0
 801a0bc:	dc08      	bgt.n	801a0d0 <__sflush_r+0xfc>
 801a0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0c6:	81a3      	strh	r3, [r4, #12]
 801a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0d0:	4407      	add	r7, r0
 801a0d2:	eba8 0800 	sub.w	r8, r8, r0
 801a0d6:	e7e7      	b.n	801a0a8 <__sflush_r+0xd4>
 801a0d8:	20400001 	.word	0x20400001

0801a0dc <_fflush_r>:
 801a0dc:	b538      	push	{r3, r4, r5, lr}
 801a0de:	690b      	ldr	r3, [r1, #16]
 801a0e0:	4605      	mov	r5, r0
 801a0e2:	460c      	mov	r4, r1
 801a0e4:	b913      	cbnz	r3, 801a0ec <_fflush_r+0x10>
 801a0e6:	2500      	movs	r5, #0
 801a0e8:	4628      	mov	r0, r5
 801a0ea:	bd38      	pop	{r3, r4, r5, pc}
 801a0ec:	b118      	cbz	r0, 801a0f6 <_fflush_r+0x1a>
 801a0ee:	6a03      	ldr	r3, [r0, #32]
 801a0f0:	b90b      	cbnz	r3, 801a0f6 <_fflush_r+0x1a>
 801a0f2:	f7fe f9e7 	bl	80184c4 <__sinit>
 801a0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d0f3      	beq.n	801a0e6 <_fflush_r+0xa>
 801a0fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a100:	07d0      	lsls	r0, r2, #31
 801a102:	d404      	bmi.n	801a10e <_fflush_r+0x32>
 801a104:	0599      	lsls	r1, r3, #22
 801a106:	d402      	bmi.n	801a10e <_fflush_r+0x32>
 801a108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a10a:	f7fe fbe6 	bl	80188da <__retarget_lock_acquire_recursive>
 801a10e:	4628      	mov	r0, r5
 801a110:	4621      	mov	r1, r4
 801a112:	f7ff ff5f 	bl	8019fd4 <__sflush_r>
 801a116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a118:	07da      	lsls	r2, r3, #31
 801a11a:	4605      	mov	r5, r0
 801a11c:	d4e4      	bmi.n	801a0e8 <_fflush_r+0xc>
 801a11e:	89a3      	ldrh	r3, [r4, #12]
 801a120:	059b      	lsls	r3, r3, #22
 801a122:	d4e1      	bmi.n	801a0e8 <_fflush_r+0xc>
 801a124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a126:	f7fe fbd9 	bl	80188dc <__retarget_lock_release_recursive>
 801a12a:	e7dd      	b.n	801a0e8 <_fflush_r+0xc>

0801a12c <__swhatbuf_r>:
 801a12c:	b570      	push	{r4, r5, r6, lr}
 801a12e:	460c      	mov	r4, r1
 801a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a134:	2900      	cmp	r1, #0
 801a136:	b096      	sub	sp, #88	@ 0x58
 801a138:	4615      	mov	r5, r2
 801a13a:	461e      	mov	r6, r3
 801a13c:	da0d      	bge.n	801a15a <__swhatbuf_r+0x2e>
 801a13e:	89a3      	ldrh	r3, [r4, #12]
 801a140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a144:	f04f 0100 	mov.w	r1, #0
 801a148:	bf14      	ite	ne
 801a14a:	2340      	movne	r3, #64	@ 0x40
 801a14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a150:	2000      	movs	r0, #0
 801a152:	6031      	str	r1, [r6, #0]
 801a154:	602b      	str	r3, [r5, #0]
 801a156:	b016      	add	sp, #88	@ 0x58
 801a158:	bd70      	pop	{r4, r5, r6, pc}
 801a15a:	466a      	mov	r2, sp
 801a15c:	f000 f848 	bl	801a1f0 <_fstat_r>
 801a160:	2800      	cmp	r0, #0
 801a162:	dbec      	blt.n	801a13e <__swhatbuf_r+0x12>
 801a164:	9901      	ldr	r1, [sp, #4]
 801a166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a16e:	4259      	negs	r1, r3
 801a170:	4159      	adcs	r1, r3
 801a172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a176:	e7eb      	b.n	801a150 <__swhatbuf_r+0x24>

0801a178 <__smakebuf_r>:
 801a178:	898b      	ldrh	r3, [r1, #12]
 801a17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a17c:	079d      	lsls	r5, r3, #30
 801a17e:	4606      	mov	r6, r0
 801a180:	460c      	mov	r4, r1
 801a182:	d507      	bpl.n	801a194 <__smakebuf_r+0x1c>
 801a184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a188:	6023      	str	r3, [r4, #0]
 801a18a:	6123      	str	r3, [r4, #16]
 801a18c:	2301      	movs	r3, #1
 801a18e:	6163      	str	r3, [r4, #20]
 801a190:	b003      	add	sp, #12
 801a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a194:	ab01      	add	r3, sp, #4
 801a196:	466a      	mov	r2, sp
 801a198:	f7ff ffc8 	bl	801a12c <__swhatbuf_r>
 801a19c:	9f00      	ldr	r7, [sp, #0]
 801a19e:	4605      	mov	r5, r0
 801a1a0:	4639      	mov	r1, r7
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f7fd fc20 	bl	80179e8 <_malloc_r>
 801a1a8:	b948      	cbnz	r0, 801a1be <__smakebuf_r+0x46>
 801a1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1ae:	059a      	lsls	r2, r3, #22
 801a1b0:	d4ee      	bmi.n	801a190 <__smakebuf_r+0x18>
 801a1b2:	f023 0303 	bic.w	r3, r3, #3
 801a1b6:	f043 0302 	orr.w	r3, r3, #2
 801a1ba:	81a3      	strh	r3, [r4, #12]
 801a1bc:	e7e2      	b.n	801a184 <__smakebuf_r+0xc>
 801a1be:	89a3      	ldrh	r3, [r4, #12]
 801a1c0:	6020      	str	r0, [r4, #0]
 801a1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a1c6:	81a3      	strh	r3, [r4, #12]
 801a1c8:	9b01      	ldr	r3, [sp, #4]
 801a1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a1ce:	b15b      	cbz	r3, 801a1e8 <__smakebuf_r+0x70>
 801a1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	f000 f81d 	bl	801a214 <_isatty_r>
 801a1da:	b128      	cbz	r0, 801a1e8 <__smakebuf_r+0x70>
 801a1dc:	89a3      	ldrh	r3, [r4, #12]
 801a1de:	f023 0303 	bic.w	r3, r3, #3
 801a1e2:	f043 0301 	orr.w	r3, r3, #1
 801a1e6:	81a3      	strh	r3, [r4, #12]
 801a1e8:	89a3      	ldrh	r3, [r4, #12]
 801a1ea:	431d      	orrs	r5, r3
 801a1ec:	81a5      	strh	r5, [r4, #12]
 801a1ee:	e7cf      	b.n	801a190 <__smakebuf_r+0x18>

0801a1f0 <_fstat_r>:
 801a1f0:	b538      	push	{r3, r4, r5, lr}
 801a1f2:	4d07      	ldr	r5, [pc, #28]	@ (801a210 <_fstat_r+0x20>)
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	4608      	mov	r0, r1
 801a1fa:	4611      	mov	r1, r2
 801a1fc:	602b      	str	r3, [r5, #0]
 801a1fe:	f7f0 f999 	bl	800a534 <_fstat>
 801a202:	1c43      	adds	r3, r0, #1
 801a204:	d102      	bne.n	801a20c <_fstat_r+0x1c>
 801a206:	682b      	ldr	r3, [r5, #0]
 801a208:	b103      	cbz	r3, 801a20c <_fstat_r+0x1c>
 801a20a:	6023      	str	r3, [r4, #0]
 801a20c:	bd38      	pop	{r3, r4, r5, pc}
 801a20e:	bf00      	nop
 801a210:	20003870 	.word	0x20003870

0801a214 <_isatty_r>:
 801a214:	b538      	push	{r3, r4, r5, lr}
 801a216:	4d06      	ldr	r5, [pc, #24]	@ (801a230 <_isatty_r+0x1c>)
 801a218:	2300      	movs	r3, #0
 801a21a:	4604      	mov	r4, r0
 801a21c:	4608      	mov	r0, r1
 801a21e:	602b      	str	r3, [r5, #0]
 801a220:	f7f0 f998 	bl	800a554 <_isatty>
 801a224:	1c43      	adds	r3, r0, #1
 801a226:	d102      	bne.n	801a22e <_isatty_r+0x1a>
 801a228:	682b      	ldr	r3, [r5, #0]
 801a22a:	b103      	cbz	r3, 801a22e <_isatty_r+0x1a>
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	bd38      	pop	{r3, r4, r5, pc}
 801a230:	20003870 	.word	0x20003870

0801a234 <__assert_func>:
 801a234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a236:	4614      	mov	r4, r2
 801a238:	461a      	mov	r2, r3
 801a23a:	4b09      	ldr	r3, [pc, #36]	@ (801a260 <__assert_func+0x2c>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4605      	mov	r5, r0
 801a240:	68d8      	ldr	r0, [r3, #12]
 801a242:	b14c      	cbz	r4, 801a258 <__assert_func+0x24>
 801a244:	4b07      	ldr	r3, [pc, #28]	@ (801a264 <__assert_func+0x30>)
 801a246:	9100      	str	r1, [sp, #0]
 801a248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a24c:	4906      	ldr	r1, [pc, #24]	@ (801a268 <__assert_func+0x34>)
 801a24e:	462b      	mov	r3, r5
 801a250:	f000 f842 	bl	801a2d8 <fiprintf>
 801a254:	f000 f852 	bl	801a2fc <abort>
 801a258:	4b04      	ldr	r3, [pc, #16]	@ (801a26c <__assert_func+0x38>)
 801a25a:	461c      	mov	r4, r3
 801a25c:	e7f3      	b.n	801a246 <__assert_func+0x12>
 801a25e:	bf00      	nop
 801a260:	200001fc 	.word	0x200001fc
 801a264:	0801d6c9 	.word	0x0801d6c9
 801a268:	0801d6d6 	.word	0x0801d6d6
 801a26c:	0801d704 	.word	0x0801d704

0801a270 <_calloc_r>:
 801a270:	b570      	push	{r4, r5, r6, lr}
 801a272:	fba1 5402 	umull	r5, r4, r1, r2
 801a276:	b934      	cbnz	r4, 801a286 <_calloc_r+0x16>
 801a278:	4629      	mov	r1, r5
 801a27a:	f7fd fbb5 	bl	80179e8 <_malloc_r>
 801a27e:	4606      	mov	r6, r0
 801a280:	b928      	cbnz	r0, 801a28e <_calloc_r+0x1e>
 801a282:	4630      	mov	r0, r6
 801a284:	bd70      	pop	{r4, r5, r6, pc}
 801a286:	220c      	movs	r2, #12
 801a288:	6002      	str	r2, [r0, #0]
 801a28a:	2600      	movs	r6, #0
 801a28c:	e7f9      	b.n	801a282 <_calloc_r+0x12>
 801a28e:	462a      	mov	r2, r5
 801a290:	4621      	mov	r1, r4
 801a292:	f7fe fa95 	bl	80187c0 <memset>
 801a296:	e7f4      	b.n	801a282 <_calloc_r+0x12>

0801a298 <__ascii_mbtowc>:
 801a298:	b082      	sub	sp, #8
 801a29a:	b901      	cbnz	r1, 801a29e <__ascii_mbtowc+0x6>
 801a29c:	a901      	add	r1, sp, #4
 801a29e:	b142      	cbz	r2, 801a2b2 <__ascii_mbtowc+0x1a>
 801a2a0:	b14b      	cbz	r3, 801a2b6 <__ascii_mbtowc+0x1e>
 801a2a2:	7813      	ldrb	r3, [r2, #0]
 801a2a4:	600b      	str	r3, [r1, #0]
 801a2a6:	7812      	ldrb	r2, [r2, #0]
 801a2a8:	1e10      	subs	r0, r2, #0
 801a2aa:	bf18      	it	ne
 801a2ac:	2001      	movne	r0, #1
 801a2ae:	b002      	add	sp, #8
 801a2b0:	4770      	bx	lr
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	e7fb      	b.n	801a2ae <__ascii_mbtowc+0x16>
 801a2b6:	f06f 0001 	mvn.w	r0, #1
 801a2ba:	e7f8      	b.n	801a2ae <__ascii_mbtowc+0x16>

0801a2bc <__ascii_wctomb>:
 801a2bc:	4603      	mov	r3, r0
 801a2be:	4608      	mov	r0, r1
 801a2c0:	b141      	cbz	r1, 801a2d4 <__ascii_wctomb+0x18>
 801a2c2:	2aff      	cmp	r2, #255	@ 0xff
 801a2c4:	d904      	bls.n	801a2d0 <__ascii_wctomb+0x14>
 801a2c6:	228a      	movs	r2, #138	@ 0x8a
 801a2c8:	601a      	str	r2, [r3, #0]
 801a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ce:	4770      	bx	lr
 801a2d0:	700a      	strb	r2, [r1, #0]
 801a2d2:	2001      	movs	r0, #1
 801a2d4:	4770      	bx	lr
	...

0801a2d8 <fiprintf>:
 801a2d8:	b40e      	push	{r1, r2, r3}
 801a2da:	b503      	push	{r0, r1, lr}
 801a2dc:	4601      	mov	r1, r0
 801a2de:	ab03      	add	r3, sp, #12
 801a2e0:	4805      	ldr	r0, [pc, #20]	@ (801a2f8 <fiprintf+0x20>)
 801a2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2e6:	6800      	ldr	r0, [r0, #0]
 801a2e8:	9301      	str	r3, [sp, #4]
 801a2ea:	f7ff fd5b 	bl	8019da4 <_vfiprintf_r>
 801a2ee:	b002      	add	sp, #8
 801a2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2f4:	b003      	add	sp, #12
 801a2f6:	4770      	bx	lr
 801a2f8:	200001fc 	.word	0x200001fc

0801a2fc <abort>:
 801a2fc:	b508      	push	{r3, lr}
 801a2fe:	2006      	movs	r0, #6
 801a300:	f000 f82c 	bl	801a35c <raise>
 801a304:	2001      	movs	r0, #1
 801a306:	f7f0 f8c5 	bl	800a494 <_exit>

0801a30a <_raise_r>:
 801a30a:	291f      	cmp	r1, #31
 801a30c:	b538      	push	{r3, r4, r5, lr}
 801a30e:	4605      	mov	r5, r0
 801a310:	460c      	mov	r4, r1
 801a312:	d904      	bls.n	801a31e <_raise_r+0x14>
 801a314:	2316      	movs	r3, #22
 801a316:	6003      	str	r3, [r0, #0]
 801a318:	f04f 30ff 	mov.w	r0, #4294967295
 801a31c:	bd38      	pop	{r3, r4, r5, pc}
 801a31e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a320:	b112      	cbz	r2, 801a328 <_raise_r+0x1e>
 801a322:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a326:	b94b      	cbnz	r3, 801a33c <_raise_r+0x32>
 801a328:	4628      	mov	r0, r5
 801a32a:	f000 f831 	bl	801a390 <_getpid_r>
 801a32e:	4622      	mov	r2, r4
 801a330:	4601      	mov	r1, r0
 801a332:	4628      	mov	r0, r5
 801a334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a338:	f000 b818 	b.w	801a36c <_kill_r>
 801a33c:	2b01      	cmp	r3, #1
 801a33e:	d00a      	beq.n	801a356 <_raise_r+0x4c>
 801a340:	1c59      	adds	r1, r3, #1
 801a342:	d103      	bne.n	801a34c <_raise_r+0x42>
 801a344:	2316      	movs	r3, #22
 801a346:	6003      	str	r3, [r0, #0]
 801a348:	2001      	movs	r0, #1
 801a34a:	e7e7      	b.n	801a31c <_raise_r+0x12>
 801a34c:	2100      	movs	r1, #0
 801a34e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a352:	4620      	mov	r0, r4
 801a354:	4798      	blx	r3
 801a356:	2000      	movs	r0, #0
 801a358:	e7e0      	b.n	801a31c <_raise_r+0x12>
	...

0801a35c <raise>:
 801a35c:	4b02      	ldr	r3, [pc, #8]	@ (801a368 <raise+0xc>)
 801a35e:	4601      	mov	r1, r0
 801a360:	6818      	ldr	r0, [r3, #0]
 801a362:	f7ff bfd2 	b.w	801a30a <_raise_r>
 801a366:	bf00      	nop
 801a368:	200001fc 	.word	0x200001fc

0801a36c <_kill_r>:
 801a36c:	b538      	push	{r3, r4, r5, lr}
 801a36e:	4d07      	ldr	r5, [pc, #28]	@ (801a38c <_kill_r+0x20>)
 801a370:	2300      	movs	r3, #0
 801a372:	4604      	mov	r4, r0
 801a374:	4608      	mov	r0, r1
 801a376:	4611      	mov	r1, r2
 801a378:	602b      	str	r3, [r5, #0]
 801a37a:	f7f0 f87b 	bl	800a474 <_kill>
 801a37e:	1c43      	adds	r3, r0, #1
 801a380:	d102      	bne.n	801a388 <_kill_r+0x1c>
 801a382:	682b      	ldr	r3, [r5, #0]
 801a384:	b103      	cbz	r3, 801a388 <_kill_r+0x1c>
 801a386:	6023      	str	r3, [r4, #0]
 801a388:	bd38      	pop	{r3, r4, r5, pc}
 801a38a:	bf00      	nop
 801a38c:	20003870 	.word	0x20003870

0801a390 <_getpid_r>:
 801a390:	f7f0 b868 	b.w	800a464 <_getpid>

0801a394 <acos>:
 801a394:	b538      	push	{r3, r4, r5, lr}
 801a396:	ed2d 8b02 	vpush	{d8}
 801a39a:	ec55 4b10 	vmov	r4, r5, d0
 801a39e:	f000 fe2f 	bl	801b000 <__ieee754_acos>
 801a3a2:	4622      	mov	r2, r4
 801a3a4:	462b      	mov	r3, r5
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	4629      	mov	r1, r5
 801a3aa:	eeb0 8a40 	vmov.f32	s16, s0
 801a3ae:	eef0 8a60 	vmov.f32	s17, s1
 801a3b2:	f7e6 fbbb 	bl	8000b2c <__aeabi_dcmpun>
 801a3b6:	b9a8      	cbnz	r0, 801a3e4 <acos+0x50>
 801a3b8:	ec45 4b10 	vmov	d0, r4, r5
 801a3bc:	f000 fb10 	bl	801a9e0 <fabs>
 801a3c0:	4b0c      	ldr	r3, [pc, #48]	@ (801a3f4 <acos+0x60>)
 801a3c2:	ec51 0b10 	vmov	r0, r1, d0
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	f7e6 fba6 	bl	8000b18 <__aeabi_dcmpgt>
 801a3cc:	b150      	cbz	r0, 801a3e4 <acos+0x50>
 801a3ce:	f7fe fa59 	bl	8018884 <__errno>
 801a3d2:	ecbd 8b02 	vpop	{d8}
 801a3d6:	2321      	movs	r3, #33	@ 0x21
 801a3d8:	6003      	str	r3, [r0, #0]
 801a3da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3de:	4806      	ldr	r0, [pc, #24]	@ (801a3f8 <acos+0x64>)
 801a3e0:	f000 bb66 	b.w	801aab0 <nan>
 801a3e4:	eeb0 0a48 	vmov.f32	s0, s16
 801a3e8:	eef0 0a68 	vmov.f32	s1, s17
 801a3ec:	ecbd 8b02 	vpop	{d8}
 801a3f0:	bd38      	pop	{r3, r4, r5, pc}
 801a3f2:	bf00      	nop
 801a3f4:	3ff00000 	.word	0x3ff00000
 801a3f8:	0801d704 	.word	0x0801d704

0801a3fc <asin>:
 801a3fc:	b538      	push	{r3, r4, r5, lr}
 801a3fe:	ed2d 8b02 	vpush	{d8}
 801a402:	ec55 4b10 	vmov	r4, r5, d0
 801a406:	f001 f857 	bl	801b4b8 <__ieee754_asin>
 801a40a:	4622      	mov	r2, r4
 801a40c:	462b      	mov	r3, r5
 801a40e:	4620      	mov	r0, r4
 801a410:	4629      	mov	r1, r5
 801a412:	eeb0 8a40 	vmov.f32	s16, s0
 801a416:	eef0 8a60 	vmov.f32	s17, s1
 801a41a:	f7e6 fb87 	bl	8000b2c <__aeabi_dcmpun>
 801a41e:	b9a8      	cbnz	r0, 801a44c <asin+0x50>
 801a420:	ec45 4b10 	vmov	d0, r4, r5
 801a424:	f000 fadc 	bl	801a9e0 <fabs>
 801a428:	4b0c      	ldr	r3, [pc, #48]	@ (801a45c <asin+0x60>)
 801a42a:	ec51 0b10 	vmov	r0, r1, d0
 801a42e:	2200      	movs	r2, #0
 801a430:	f7e6 fb72 	bl	8000b18 <__aeabi_dcmpgt>
 801a434:	b150      	cbz	r0, 801a44c <asin+0x50>
 801a436:	f7fe fa25 	bl	8018884 <__errno>
 801a43a:	ecbd 8b02 	vpop	{d8}
 801a43e:	2321      	movs	r3, #33	@ 0x21
 801a440:	6003      	str	r3, [r0, #0]
 801a442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a446:	4806      	ldr	r0, [pc, #24]	@ (801a460 <asin+0x64>)
 801a448:	f000 bb32 	b.w	801aab0 <nan>
 801a44c:	eeb0 0a48 	vmov.f32	s0, s16
 801a450:	eef0 0a68 	vmov.f32	s1, s17
 801a454:	ecbd 8b02 	vpop	{d8}
 801a458:	bd38      	pop	{r3, r4, r5, pc}
 801a45a:	bf00      	nop
 801a45c:	3ff00000 	.word	0x3ff00000
 801a460:	0801d704 	.word	0x0801d704

0801a464 <atan2>:
 801a464:	f001 ba2c 	b.w	801b8c0 <__ieee754_atan2>

0801a468 <hypot>:
 801a468:	b508      	push	{r3, lr}
 801a46a:	ed2d 8b06 	vpush	{d8-d10}
 801a46e:	eeb0 aa40 	vmov.f32	s20, s0
 801a472:	eef0 aa60 	vmov.f32	s21, s1
 801a476:	eeb0 9a41 	vmov.f32	s18, s2
 801a47a:	eef0 9a61 	vmov.f32	s19, s3
 801a47e:	f001 fae5 	bl	801ba4c <__ieee754_hypot>
 801a482:	eeb0 8a40 	vmov.f32	s16, s0
 801a486:	eef0 8a60 	vmov.f32	s17, s1
 801a48a:	f000 fb05 	bl	801aa98 <finite>
 801a48e:	b998      	cbnz	r0, 801a4b8 <hypot+0x50>
 801a490:	eeb0 0a4a 	vmov.f32	s0, s20
 801a494:	eef0 0a6a 	vmov.f32	s1, s21
 801a498:	f000 fafe 	bl	801aa98 <finite>
 801a49c:	b160      	cbz	r0, 801a4b8 <hypot+0x50>
 801a49e:	eeb0 0a49 	vmov.f32	s0, s18
 801a4a2:	eef0 0a69 	vmov.f32	s1, s19
 801a4a6:	f000 faf7 	bl	801aa98 <finite>
 801a4aa:	b128      	cbz	r0, 801a4b8 <hypot+0x50>
 801a4ac:	f7fe f9ea 	bl	8018884 <__errno>
 801a4b0:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 801a4c8 <hypot+0x60>
 801a4b4:	2322      	movs	r3, #34	@ 0x22
 801a4b6:	6003      	str	r3, [r0, #0]
 801a4b8:	eeb0 0a48 	vmov.f32	s0, s16
 801a4bc:	eef0 0a68 	vmov.f32	s1, s17
 801a4c0:	ecbd 8b06 	vpop	{d8-d10}
 801a4c4:	bd08      	pop	{r3, pc}
 801a4c6:	bf00      	nop
 801a4c8:	00000000 	.word	0x00000000
 801a4cc:	7ff00000 	.word	0x7ff00000

0801a4d0 <pow>:
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d2:	ed2d 8b02 	vpush	{d8}
 801a4d6:	eeb0 8a40 	vmov.f32	s16, s0
 801a4da:	eef0 8a60 	vmov.f32	s17, s1
 801a4de:	ec55 4b11 	vmov	r4, r5, d1
 801a4e2:	f001 fbc9 	bl	801bc78 <__ieee754_pow>
 801a4e6:	4622      	mov	r2, r4
 801a4e8:	462b      	mov	r3, r5
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	4629      	mov	r1, r5
 801a4ee:	ec57 6b10 	vmov	r6, r7, d0
 801a4f2:	f7e6 fb1b 	bl	8000b2c <__aeabi_dcmpun>
 801a4f6:	2800      	cmp	r0, #0
 801a4f8:	d13b      	bne.n	801a572 <pow+0xa2>
 801a4fa:	ec51 0b18 	vmov	r0, r1, d8
 801a4fe:	2200      	movs	r2, #0
 801a500:	2300      	movs	r3, #0
 801a502:	f7e6 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 801a506:	b1b8      	cbz	r0, 801a538 <pow+0x68>
 801a508:	2200      	movs	r2, #0
 801a50a:	2300      	movs	r3, #0
 801a50c:	4620      	mov	r0, r4
 801a50e:	4629      	mov	r1, r5
 801a510:	f7e6 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 801a514:	2800      	cmp	r0, #0
 801a516:	d146      	bne.n	801a5a6 <pow+0xd6>
 801a518:	ec45 4b10 	vmov	d0, r4, r5
 801a51c:	f000 fabc 	bl	801aa98 <finite>
 801a520:	b338      	cbz	r0, 801a572 <pow+0xa2>
 801a522:	2200      	movs	r2, #0
 801a524:	2300      	movs	r3, #0
 801a526:	4620      	mov	r0, r4
 801a528:	4629      	mov	r1, r5
 801a52a:	f7e6 fad7 	bl	8000adc <__aeabi_dcmplt>
 801a52e:	b300      	cbz	r0, 801a572 <pow+0xa2>
 801a530:	f7fe f9a8 	bl	8018884 <__errno>
 801a534:	2322      	movs	r3, #34	@ 0x22
 801a536:	e01b      	b.n	801a570 <pow+0xa0>
 801a538:	ec47 6b10 	vmov	d0, r6, r7
 801a53c:	f000 faac 	bl	801aa98 <finite>
 801a540:	b9e0      	cbnz	r0, 801a57c <pow+0xac>
 801a542:	eeb0 0a48 	vmov.f32	s0, s16
 801a546:	eef0 0a68 	vmov.f32	s1, s17
 801a54a:	f000 faa5 	bl	801aa98 <finite>
 801a54e:	b1a8      	cbz	r0, 801a57c <pow+0xac>
 801a550:	ec45 4b10 	vmov	d0, r4, r5
 801a554:	f000 faa0 	bl	801aa98 <finite>
 801a558:	b180      	cbz	r0, 801a57c <pow+0xac>
 801a55a:	4632      	mov	r2, r6
 801a55c:	463b      	mov	r3, r7
 801a55e:	4630      	mov	r0, r6
 801a560:	4639      	mov	r1, r7
 801a562:	f7e6 fae3 	bl	8000b2c <__aeabi_dcmpun>
 801a566:	2800      	cmp	r0, #0
 801a568:	d0e2      	beq.n	801a530 <pow+0x60>
 801a56a:	f7fe f98b 	bl	8018884 <__errno>
 801a56e:	2321      	movs	r3, #33	@ 0x21
 801a570:	6003      	str	r3, [r0, #0]
 801a572:	ecbd 8b02 	vpop	{d8}
 801a576:	ec47 6b10 	vmov	d0, r6, r7
 801a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a57c:	2200      	movs	r2, #0
 801a57e:	2300      	movs	r3, #0
 801a580:	4630      	mov	r0, r6
 801a582:	4639      	mov	r1, r7
 801a584:	f7e6 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 801a588:	2800      	cmp	r0, #0
 801a58a:	d0f2      	beq.n	801a572 <pow+0xa2>
 801a58c:	eeb0 0a48 	vmov.f32	s0, s16
 801a590:	eef0 0a68 	vmov.f32	s1, s17
 801a594:	f000 fa80 	bl	801aa98 <finite>
 801a598:	2800      	cmp	r0, #0
 801a59a:	d0ea      	beq.n	801a572 <pow+0xa2>
 801a59c:	ec45 4b10 	vmov	d0, r4, r5
 801a5a0:	f000 fa7a 	bl	801aa98 <finite>
 801a5a4:	e7c3      	b.n	801a52e <pow+0x5e>
 801a5a6:	4f01      	ldr	r7, [pc, #4]	@ (801a5ac <pow+0xdc>)
 801a5a8:	2600      	movs	r6, #0
 801a5aa:	e7e2      	b.n	801a572 <pow+0xa2>
 801a5ac:	3ff00000 	.word	0x3ff00000

0801a5b0 <sqrt>:
 801a5b0:	b538      	push	{r3, r4, r5, lr}
 801a5b2:	ed2d 8b02 	vpush	{d8}
 801a5b6:	ec55 4b10 	vmov	r4, r5, d0
 801a5ba:	f000 fa81 	bl	801aac0 <__ieee754_sqrt>
 801a5be:	4622      	mov	r2, r4
 801a5c0:	462b      	mov	r3, r5
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	4629      	mov	r1, r5
 801a5c6:	eeb0 8a40 	vmov.f32	s16, s0
 801a5ca:	eef0 8a60 	vmov.f32	s17, s1
 801a5ce:	f7e6 faad 	bl	8000b2c <__aeabi_dcmpun>
 801a5d2:	b990      	cbnz	r0, 801a5fa <sqrt+0x4a>
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	4620      	mov	r0, r4
 801a5da:	4629      	mov	r1, r5
 801a5dc:	f7e6 fa7e 	bl	8000adc <__aeabi_dcmplt>
 801a5e0:	b158      	cbz	r0, 801a5fa <sqrt+0x4a>
 801a5e2:	f7fe f94f 	bl	8018884 <__errno>
 801a5e6:	2321      	movs	r3, #33	@ 0x21
 801a5e8:	6003      	str	r3, [r0, #0]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	4610      	mov	r0, r2
 801a5f0:	4619      	mov	r1, r3
 801a5f2:	f7e6 f92b 	bl	800084c <__aeabi_ddiv>
 801a5f6:	ec41 0b18 	vmov	d8, r0, r1
 801a5fa:	eeb0 0a48 	vmov.f32	s0, s16
 801a5fe:	eef0 0a68 	vmov.f32	s1, s17
 801a602:	ecbd 8b02 	vpop	{d8}
 801a606:	bd38      	pop	{r3, r4, r5, pc}

0801a608 <atan>:
 801a608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60c:	ec55 4b10 	vmov	r4, r5, d0
 801a610:	4bbf      	ldr	r3, [pc, #764]	@ (801a910 <atan+0x308>)
 801a612:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a616:	429e      	cmp	r6, r3
 801a618:	46ab      	mov	fp, r5
 801a61a:	d918      	bls.n	801a64e <atan+0x46>
 801a61c:	4bbd      	ldr	r3, [pc, #756]	@ (801a914 <atan+0x30c>)
 801a61e:	429e      	cmp	r6, r3
 801a620:	d801      	bhi.n	801a626 <atan+0x1e>
 801a622:	d109      	bne.n	801a638 <atan+0x30>
 801a624:	b144      	cbz	r4, 801a638 <atan+0x30>
 801a626:	4622      	mov	r2, r4
 801a628:	462b      	mov	r3, r5
 801a62a:	4620      	mov	r0, r4
 801a62c:	4629      	mov	r1, r5
 801a62e:	f7e5 fe2d 	bl	800028c <__adddf3>
 801a632:	4604      	mov	r4, r0
 801a634:	460d      	mov	r5, r1
 801a636:	e006      	b.n	801a646 <atan+0x3e>
 801a638:	f1bb 0f00 	cmp.w	fp, #0
 801a63c:	f340 812b 	ble.w	801a896 <atan+0x28e>
 801a640:	a597      	add	r5, pc, #604	@ (adr r5, 801a8a0 <atan+0x298>)
 801a642:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a646:	ec45 4b10 	vmov	d0, r4, r5
 801a64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a64e:	4bb2      	ldr	r3, [pc, #712]	@ (801a918 <atan+0x310>)
 801a650:	429e      	cmp	r6, r3
 801a652:	d813      	bhi.n	801a67c <atan+0x74>
 801a654:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a658:	429e      	cmp	r6, r3
 801a65a:	d80c      	bhi.n	801a676 <atan+0x6e>
 801a65c:	a392      	add	r3, pc, #584	@ (adr r3, 801a8a8 <atan+0x2a0>)
 801a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a662:	4620      	mov	r0, r4
 801a664:	4629      	mov	r1, r5
 801a666:	f7e5 fe11 	bl	800028c <__adddf3>
 801a66a:	4bac      	ldr	r3, [pc, #688]	@ (801a91c <atan+0x314>)
 801a66c:	2200      	movs	r2, #0
 801a66e:	f7e6 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 801a672:	2800      	cmp	r0, #0
 801a674:	d1e7      	bne.n	801a646 <atan+0x3e>
 801a676:	f04f 3aff 	mov.w	sl, #4294967295
 801a67a:	e029      	b.n	801a6d0 <atan+0xc8>
 801a67c:	f000 f9b0 	bl	801a9e0 <fabs>
 801a680:	4ba7      	ldr	r3, [pc, #668]	@ (801a920 <atan+0x318>)
 801a682:	429e      	cmp	r6, r3
 801a684:	ec55 4b10 	vmov	r4, r5, d0
 801a688:	f200 80bc 	bhi.w	801a804 <atan+0x1fc>
 801a68c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a690:	429e      	cmp	r6, r3
 801a692:	f200 809e 	bhi.w	801a7d2 <atan+0x1ca>
 801a696:	4622      	mov	r2, r4
 801a698:	462b      	mov	r3, r5
 801a69a:	4620      	mov	r0, r4
 801a69c:	4629      	mov	r1, r5
 801a69e:	f7e5 fdf5 	bl	800028c <__adddf3>
 801a6a2:	4b9e      	ldr	r3, [pc, #632]	@ (801a91c <atan+0x314>)
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	f7e5 fdef 	bl	8000288 <__aeabi_dsub>
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	4606      	mov	r6, r0
 801a6ae:	460f      	mov	r7, r1
 801a6b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	4629      	mov	r1, r5
 801a6b8:	f7e5 fde8 	bl	800028c <__adddf3>
 801a6bc:	4602      	mov	r2, r0
 801a6be:	460b      	mov	r3, r1
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	4639      	mov	r1, r7
 801a6c4:	f7e6 f8c2 	bl	800084c <__aeabi_ddiv>
 801a6c8:	f04f 0a00 	mov.w	sl, #0
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	460d      	mov	r5, r1
 801a6d0:	4622      	mov	r2, r4
 801a6d2:	462b      	mov	r3, r5
 801a6d4:	4620      	mov	r0, r4
 801a6d6:	4629      	mov	r1, r5
 801a6d8:	f7e5 ff8e 	bl	80005f8 <__aeabi_dmul>
 801a6dc:	4602      	mov	r2, r0
 801a6de:	460b      	mov	r3, r1
 801a6e0:	4680      	mov	r8, r0
 801a6e2:	4689      	mov	r9, r1
 801a6e4:	f7e5 ff88 	bl	80005f8 <__aeabi_dmul>
 801a6e8:	a371      	add	r3, pc, #452	@ (adr r3, 801a8b0 <atan+0x2a8>)
 801a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	460f      	mov	r7, r1
 801a6f2:	f7e5 ff81 	bl	80005f8 <__aeabi_dmul>
 801a6f6:	a370      	add	r3, pc, #448	@ (adr r3, 801a8b8 <atan+0x2b0>)
 801a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fc:	f7e5 fdc6 	bl	800028c <__adddf3>
 801a700:	4632      	mov	r2, r6
 801a702:	463b      	mov	r3, r7
 801a704:	f7e5 ff78 	bl	80005f8 <__aeabi_dmul>
 801a708:	a36d      	add	r3, pc, #436	@ (adr r3, 801a8c0 <atan+0x2b8>)
 801a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70e:	f7e5 fdbd 	bl	800028c <__adddf3>
 801a712:	4632      	mov	r2, r6
 801a714:	463b      	mov	r3, r7
 801a716:	f7e5 ff6f 	bl	80005f8 <__aeabi_dmul>
 801a71a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a8c8 <atan+0x2c0>)
 801a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a720:	f7e5 fdb4 	bl	800028c <__adddf3>
 801a724:	4632      	mov	r2, r6
 801a726:	463b      	mov	r3, r7
 801a728:	f7e5 ff66 	bl	80005f8 <__aeabi_dmul>
 801a72c:	a368      	add	r3, pc, #416	@ (adr r3, 801a8d0 <atan+0x2c8>)
 801a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a732:	f7e5 fdab 	bl	800028c <__adddf3>
 801a736:	4632      	mov	r2, r6
 801a738:	463b      	mov	r3, r7
 801a73a:	f7e5 ff5d 	bl	80005f8 <__aeabi_dmul>
 801a73e:	a366      	add	r3, pc, #408	@ (adr r3, 801a8d8 <atan+0x2d0>)
 801a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a744:	f7e5 fda2 	bl	800028c <__adddf3>
 801a748:	4642      	mov	r2, r8
 801a74a:	464b      	mov	r3, r9
 801a74c:	f7e5 ff54 	bl	80005f8 <__aeabi_dmul>
 801a750:	a363      	add	r3, pc, #396	@ (adr r3, 801a8e0 <atan+0x2d8>)
 801a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a756:	4680      	mov	r8, r0
 801a758:	4689      	mov	r9, r1
 801a75a:	4630      	mov	r0, r6
 801a75c:	4639      	mov	r1, r7
 801a75e:	f7e5 ff4b 	bl	80005f8 <__aeabi_dmul>
 801a762:	a361      	add	r3, pc, #388	@ (adr r3, 801a8e8 <atan+0x2e0>)
 801a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a768:	f7e5 fd8e 	bl	8000288 <__aeabi_dsub>
 801a76c:	4632      	mov	r2, r6
 801a76e:	463b      	mov	r3, r7
 801a770:	f7e5 ff42 	bl	80005f8 <__aeabi_dmul>
 801a774:	a35e      	add	r3, pc, #376	@ (adr r3, 801a8f0 <atan+0x2e8>)
 801a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77a:	f7e5 fd85 	bl	8000288 <__aeabi_dsub>
 801a77e:	4632      	mov	r2, r6
 801a780:	463b      	mov	r3, r7
 801a782:	f7e5 ff39 	bl	80005f8 <__aeabi_dmul>
 801a786:	a35c      	add	r3, pc, #368	@ (adr r3, 801a8f8 <atan+0x2f0>)
 801a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a78c:	f7e5 fd7c 	bl	8000288 <__aeabi_dsub>
 801a790:	4632      	mov	r2, r6
 801a792:	463b      	mov	r3, r7
 801a794:	f7e5 ff30 	bl	80005f8 <__aeabi_dmul>
 801a798:	a359      	add	r3, pc, #356	@ (adr r3, 801a900 <atan+0x2f8>)
 801a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a79e:	f7e5 fd73 	bl	8000288 <__aeabi_dsub>
 801a7a2:	4632      	mov	r2, r6
 801a7a4:	463b      	mov	r3, r7
 801a7a6:	f7e5 ff27 	bl	80005f8 <__aeabi_dmul>
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	460b      	mov	r3, r1
 801a7ae:	4640      	mov	r0, r8
 801a7b0:	4649      	mov	r1, r9
 801a7b2:	f7e5 fd6b 	bl	800028c <__adddf3>
 801a7b6:	4622      	mov	r2, r4
 801a7b8:	462b      	mov	r3, r5
 801a7ba:	f7e5 ff1d 	bl	80005f8 <__aeabi_dmul>
 801a7be:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a7c2:	4602      	mov	r2, r0
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	d148      	bne.n	801a85a <atan+0x252>
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	4629      	mov	r1, r5
 801a7cc:	f7e5 fd5c 	bl	8000288 <__aeabi_dsub>
 801a7d0:	e72f      	b.n	801a632 <atan+0x2a>
 801a7d2:	4b52      	ldr	r3, [pc, #328]	@ (801a91c <atan+0x314>)
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	4629      	mov	r1, r5
 801a7da:	f7e5 fd55 	bl	8000288 <__aeabi_dsub>
 801a7de:	4b4f      	ldr	r3, [pc, #316]	@ (801a91c <atan+0x314>)
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	460f      	mov	r7, r1
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	4629      	mov	r1, r5
 801a7ea:	f7e5 fd4f 	bl	800028c <__adddf3>
 801a7ee:	4602      	mov	r2, r0
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	4639      	mov	r1, r7
 801a7f6:	f7e6 f829 	bl	800084c <__aeabi_ddiv>
 801a7fa:	f04f 0a01 	mov.w	sl, #1
 801a7fe:	4604      	mov	r4, r0
 801a800:	460d      	mov	r5, r1
 801a802:	e765      	b.n	801a6d0 <atan+0xc8>
 801a804:	4b47      	ldr	r3, [pc, #284]	@ (801a924 <atan+0x31c>)
 801a806:	429e      	cmp	r6, r3
 801a808:	d21c      	bcs.n	801a844 <atan+0x23c>
 801a80a:	4b47      	ldr	r3, [pc, #284]	@ (801a928 <atan+0x320>)
 801a80c:	2200      	movs	r2, #0
 801a80e:	4620      	mov	r0, r4
 801a810:	4629      	mov	r1, r5
 801a812:	f7e5 fd39 	bl	8000288 <__aeabi_dsub>
 801a816:	4b44      	ldr	r3, [pc, #272]	@ (801a928 <atan+0x320>)
 801a818:	4606      	mov	r6, r0
 801a81a:	460f      	mov	r7, r1
 801a81c:	2200      	movs	r2, #0
 801a81e:	4620      	mov	r0, r4
 801a820:	4629      	mov	r1, r5
 801a822:	f7e5 fee9 	bl	80005f8 <__aeabi_dmul>
 801a826:	4b3d      	ldr	r3, [pc, #244]	@ (801a91c <atan+0x314>)
 801a828:	2200      	movs	r2, #0
 801a82a:	f7e5 fd2f 	bl	800028c <__adddf3>
 801a82e:	4602      	mov	r2, r0
 801a830:	460b      	mov	r3, r1
 801a832:	4630      	mov	r0, r6
 801a834:	4639      	mov	r1, r7
 801a836:	f7e6 f809 	bl	800084c <__aeabi_ddiv>
 801a83a:	f04f 0a02 	mov.w	sl, #2
 801a83e:	4604      	mov	r4, r0
 801a840:	460d      	mov	r5, r1
 801a842:	e745      	b.n	801a6d0 <atan+0xc8>
 801a844:	4622      	mov	r2, r4
 801a846:	462b      	mov	r3, r5
 801a848:	4938      	ldr	r1, [pc, #224]	@ (801a92c <atan+0x324>)
 801a84a:	2000      	movs	r0, #0
 801a84c:	f7e5 fffe 	bl	800084c <__aeabi_ddiv>
 801a850:	f04f 0a03 	mov.w	sl, #3
 801a854:	4604      	mov	r4, r0
 801a856:	460d      	mov	r5, r1
 801a858:	e73a      	b.n	801a6d0 <atan+0xc8>
 801a85a:	4b35      	ldr	r3, [pc, #212]	@ (801a930 <atan+0x328>)
 801a85c:	4e35      	ldr	r6, [pc, #212]	@ (801a934 <atan+0x32c>)
 801a85e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a866:	f7e5 fd0f 	bl	8000288 <__aeabi_dsub>
 801a86a:	4622      	mov	r2, r4
 801a86c:	462b      	mov	r3, r5
 801a86e:	f7e5 fd0b 	bl	8000288 <__aeabi_dsub>
 801a872:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a876:	4602      	mov	r2, r0
 801a878:	460b      	mov	r3, r1
 801a87a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a87e:	f7e5 fd03 	bl	8000288 <__aeabi_dsub>
 801a882:	f1bb 0f00 	cmp.w	fp, #0
 801a886:	4604      	mov	r4, r0
 801a888:	460d      	mov	r5, r1
 801a88a:	f6bf aedc 	bge.w	801a646 <atan+0x3e>
 801a88e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a892:	461d      	mov	r5, r3
 801a894:	e6d7      	b.n	801a646 <atan+0x3e>
 801a896:	a51c      	add	r5, pc, #112	@ (adr r5, 801a908 <atan+0x300>)
 801a898:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a89c:	e6d3      	b.n	801a646 <atan+0x3e>
 801a89e:	bf00      	nop
 801a8a0:	54442d18 	.word	0x54442d18
 801a8a4:	3ff921fb 	.word	0x3ff921fb
 801a8a8:	8800759c 	.word	0x8800759c
 801a8ac:	7e37e43c 	.word	0x7e37e43c
 801a8b0:	e322da11 	.word	0xe322da11
 801a8b4:	3f90ad3a 	.word	0x3f90ad3a
 801a8b8:	24760deb 	.word	0x24760deb
 801a8bc:	3fa97b4b 	.word	0x3fa97b4b
 801a8c0:	a0d03d51 	.word	0xa0d03d51
 801a8c4:	3fb10d66 	.word	0x3fb10d66
 801a8c8:	c54c206e 	.word	0xc54c206e
 801a8cc:	3fb745cd 	.word	0x3fb745cd
 801a8d0:	920083ff 	.word	0x920083ff
 801a8d4:	3fc24924 	.word	0x3fc24924
 801a8d8:	5555550d 	.word	0x5555550d
 801a8dc:	3fd55555 	.word	0x3fd55555
 801a8e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801a8e4:	bfa2b444 	.word	0xbfa2b444
 801a8e8:	52defd9a 	.word	0x52defd9a
 801a8ec:	3fadde2d 	.word	0x3fadde2d
 801a8f0:	af749a6d 	.word	0xaf749a6d
 801a8f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801a8f8:	fe231671 	.word	0xfe231671
 801a8fc:	3fbc71c6 	.word	0x3fbc71c6
 801a900:	9998ebc4 	.word	0x9998ebc4
 801a904:	3fc99999 	.word	0x3fc99999
 801a908:	54442d18 	.word	0x54442d18
 801a90c:	bff921fb 	.word	0xbff921fb
 801a910:	440fffff 	.word	0x440fffff
 801a914:	7ff00000 	.word	0x7ff00000
 801a918:	3fdbffff 	.word	0x3fdbffff
 801a91c:	3ff00000 	.word	0x3ff00000
 801a920:	3ff2ffff 	.word	0x3ff2ffff
 801a924:	40038000 	.word	0x40038000
 801a928:	3ff80000 	.word	0x3ff80000
 801a92c:	bff00000 	.word	0xbff00000
 801a930:	0801d910 	.word	0x0801d910
 801a934:	0801d930 	.word	0x0801d930

0801a938 <cos>:
 801a938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a93a:	ec53 2b10 	vmov	r2, r3, d0
 801a93e:	4826      	ldr	r0, [pc, #152]	@ (801a9d8 <cos+0xa0>)
 801a940:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a944:	4281      	cmp	r1, r0
 801a946:	d806      	bhi.n	801a956 <cos+0x1e>
 801a948:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801a9d0 <cos+0x98>
 801a94c:	b005      	add	sp, #20
 801a94e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a952:	f000 b9d1 	b.w	801acf8 <__kernel_cos>
 801a956:	4821      	ldr	r0, [pc, #132]	@ (801a9dc <cos+0xa4>)
 801a958:	4281      	cmp	r1, r0
 801a95a:	d908      	bls.n	801a96e <cos+0x36>
 801a95c:	4610      	mov	r0, r2
 801a95e:	4619      	mov	r1, r3
 801a960:	f7e5 fc92 	bl	8000288 <__aeabi_dsub>
 801a964:	ec41 0b10 	vmov	d0, r0, r1
 801a968:	b005      	add	sp, #20
 801a96a:	f85d fb04 	ldr.w	pc, [sp], #4
 801a96e:	4668      	mov	r0, sp
 801a970:	f001 fece 	bl	801c710 <__ieee754_rem_pio2>
 801a974:	f000 0003 	and.w	r0, r0, #3
 801a978:	2801      	cmp	r0, #1
 801a97a:	d00b      	beq.n	801a994 <cos+0x5c>
 801a97c:	2802      	cmp	r0, #2
 801a97e:	d015      	beq.n	801a9ac <cos+0x74>
 801a980:	b9d8      	cbnz	r0, 801a9ba <cos+0x82>
 801a982:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a986:	ed9d 0b00 	vldr	d0, [sp]
 801a98a:	f000 f9b5 	bl	801acf8 <__kernel_cos>
 801a98e:	ec51 0b10 	vmov	r0, r1, d0
 801a992:	e7e7      	b.n	801a964 <cos+0x2c>
 801a994:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a998:	ed9d 0b00 	vldr	d0, [sp]
 801a99c:	f000 fa74 	bl	801ae88 <__kernel_sin>
 801a9a0:	ec53 2b10 	vmov	r2, r3, d0
 801a9a4:	4610      	mov	r0, r2
 801a9a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801a9aa:	e7db      	b.n	801a964 <cos+0x2c>
 801a9ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9b0:	ed9d 0b00 	vldr	d0, [sp]
 801a9b4:	f000 f9a0 	bl	801acf8 <__kernel_cos>
 801a9b8:	e7f2      	b.n	801a9a0 <cos+0x68>
 801a9ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9be:	ed9d 0b00 	vldr	d0, [sp]
 801a9c2:	2001      	movs	r0, #1
 801a9c4:	f000 fa60 	bl	801ae88 <__kernel_sin>
 801a9c8:	e7e1      	b.n	801a98e <cos+0x56>
 801a9ca:	bf00      	nop
 801a9cc:	f3af 8000 	nop.w
	...
 801a9d8:	3fe921fb 	.word	0x3fe921fb
 801a9dc:	7fefffff 	.word	0x7fefffff

0801a9e0 <fabs>:
 801a9e0:	ec51 0b10 	vmov	r0, r1, d0
 801a9e4:	4602      	mov	r2, r0
 801a9e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a9ea:	ec43 2b10 	vmov	d0, r2, r3
 801a9ee:	4770      	bx	lr

0801a9f0 <sin>:
 801a9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a9f2:	ec53 2b10 	vmov	r2, r3, d0
 801a9f6:	4826      	ldr	r0, [pc, #152]	@ (801aa90 <sin+0xa0>)
 801a9f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a9fc:	4281      	cmp	r1, r0
 801a9fe:	d807      	bhi.n	801aa10 <sin+0x20>
 801aa00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801aa88 <sin+0x98>
 801aa04:	2000      	movs	r0, #0
 801aa06:	b005      	add	sp, #20
 801aa08:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa0c:	f000 ba3c 	b.w	801ae88 <__kernel_sin>
 801aa10:	4820      	ldr	r0, [pc, #128]	@ (801aa94 <sin+0xa4>)
 801aa12:	4281      	cmp	r1, r0
 801aa14:	d908      	bls.n	801aa28 <sin+0x38>
 801aa16:	4610      	mov	r0, r2
 801aa18:	4619      	mov	r1, r3
 801aa1a:	f7e5 fc35 	bl	8000288 <__aeabi_dsub>
 801aa1e:	ec41 0b10 	vmov	d0, r0, r1
 801aa22:	b005      	add	sp, #20
 801aa24:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa28:	4668      	mov	r0, sp
 801aa2a:	f001 fe71 	bl	801c710 <__ieee754_rem_pio2>
 801aa2e:	f000 0003 	and.w	r0, r0, #3
 801aa32:	2801      	cmp	r0, #1
 801aa34:	d00c      	beq.n	801aa50 <sin+0x60>
 801aa36:	2802      	cmp	r0, #2
 801aa38:	d011      	beq.n	801aa5e <sin+0x6e>
 801aa3a:	b9e8      	cbnz	r0, 801aa78 <sin+0x88>
 801aa3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa40:	ed9d 0b00 	vldr	d0, [sp]
 801aa44:	2001      	movs	r0, #1
 801aa46:	f000 fa1f 	bl	801ae88 <__kernel_sin>
 801aa4a:	ec51 0b10 	vmov	r0, r1, d0
 801aa4e:	e7e6      	b.n	801aa1e <sin+0x2e>
 801aa50:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa54:	ed9d 0b00 	vldr	d0, [sp]
 801aa58:	f000 f94e 	bl	801acf8 <__kernel_cos>
 801aa5c:	e7f5      	b.n	801aa4a <sin+0x5a>
 801aa5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa62:	ed9d 0b00 	vldr	d0, [sp]
 801aa66:	2001      	movs	r0, #1
 801aa68:	f000 fa0e 	bl	801ae88 <__kernel_sin>
 801aa6c:	ec53 2b10 	vmov	r2, r3, d0
 801aa70:	4610      	mov	r0, r2
 801aa72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801aa76:	e7d2      	b.n	801aa1e <sin+0x2e>
 801aa78:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa7c:	ed9d 0b00 	vldr	d0, [sp]
 801aa80:	f000 f93a 	bl	801acf8 <__kernel_cos>
 801aa84:	e7f2      	b.n	801aa6c <sin+0x7c>
 801aa86:	bf00      	nop
	...
 801aa90:	3fe921fb 	.word	0x3fe921fb
 801aa94:	7fefffff 	.word	0x7fefffff

0801aa98 <finite>:
 801aa98:	b082      	sub	sp, #8
 801aa9a:	ed8d 0b00 	vstr	d0, [sp]
 801aa9e:	9801      	ldr	r0, [sp, #4]
 801aaa0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801aaa4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801aaa8:	0fc0      	lsrs	r0, r0, #31
 801aaaa:	b002      	add	sp, #8
 801aaac:	4770      	bx	lr
	...

0801aab0 <nan>:
 801aab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801aab8 <nan+0x8>
 801aab4:	4770      	bx	lr
 801aab6:	bf00      	nop
 801aab8:	00000000 	.word	0x00000000
 801aabc:	7ff80000 	.word	0x7ff80000

0801aac0 <__ieee754_sqrt>:
 801aac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac4:	4a66      	ldr	r2, [pc, #408]	@ (801ac60 <__ieee754_sqrt+0x1a0>)
 801aac6:	ec55 4b10 	vmov	r4, r5, d0
 801aaca:	43aa      	bics	r2, r5
 801aacc:	462b      	mov	r3, r5
 801aace:	4621      	mov	r1, r4
 801aad0:	d110      	bne.n	801aaf4 <__ieee754_sqrt+0x34>
 801aad2:	4622      	mov	r2, r4
 801aad4:	4620      	mov	r0, r4
 801aad6:	4629      	mov	r1, r5
 801aad8:	f7e5 fd8e 	bl	80005f8 <__aeabi_dmul>
 801aadc:	4602      	mov	r2, r0
 801aade:	460b      	mov	r3, r1
 801aae0:	4620      	mov	r0, r4
 801aae2:	4629      	mov	r1, r5
 801aae4:	f7e5 fbd2 	bl	800028c <__adddf3>
 801aae8:	4604      	mov	r4, r0
 801aaea:	460d      	mov	r5, r1
 801aaec:	ec45 4b10 	vmov	d0, r4, r5
 801aaf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf4:	2d00      	cmp	r5, #0
 801aaf6:	dc0e      	bgt.n	801ab16 <__ieee754_sqrt+0x56>
 801aaf8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801aafc:	4322      	orrs	r2, r4
 801aafe:	d0f5      	beq.n	801aaec <__ieee754_sqrt+0x2c>
 801ab00:	b19d      	cbz	r5, 801ab2a <__ieee754_sqrt+0x6a>
 801ab02:	4622      	mov	r2, r4
 801ab04:	4620      	mov	r0, r4
 801ab06:	4629      	mov	r1, r5
 801ab08:	f7e5 fbbe 	bl	8000288 <__aeabi_dsub>
 801ab0c:	4602      	mov	r2, r0
 801ab0e:	460b      	mov	r3, r1
 801ab10:	f7e5 fe9c 	bl	800084c <__aeabi_ddiv>
 801ab14:	e7e8      	b.n	801aae8 <__ieee754_sqrt+0x28>
 801ab16:	152a      	asrs	r2, r5, #20
 801ab18:	d115      	bne.n	801ab46 <__ieee754_sqrt+0x86>
 801ab1a:	2000      	movs	r0, #0
 801ab1c:	e009      	b.n	801ab32 <__ieee754_sqrt+0x72>
 801ab1e:	0acb      	lsrs	r3, r1, #11
 801ab20:	3a15      	subs	r2, #21
 801ab22:	0549      	lsls	r1, r1, #21
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d0fa      	beq.n	801ab1e <__ieee754_sqrt+0x5e>
 801ab28:	e7f7      	b.n	801ab1a <__ieee754_sqrt+0x5a>
 801ab2a:	462a      	mov	r2, r5
 801ab2c:	e7fa      	b.n	801ab24 <__ieee754_sqrt+0x64>
 801ab2e:	005b      	lsls	r3, r3, #1
 801ab30:	3001      	adds	r0, #1
 801ab32:	02dc      	lsls	r4, r3, #11
 801ab34:	d5fb      	bpl.n	801ab2e <__ieee754_sqrt+0x6e>
 801ab36:	1e44      	subs	r4, r0, #1
 801ab38:	1b12      	subs	r2, r2, r4
 801ab3a:	f1c0 0420 	rsb	r4, r0, #32
 801ab3e:	fa21 f404 	lsr.w	r4, r1, r4
 801ab42:	4323      	orrs	r3, r4
 801ab44:	4081      	lsls	r1, r0
 801ab46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ab4a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801ab4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ab52:	07d2      	lsls	r2, r2, #31
 801ab54:	bf5c      	itt	pl
 801ab56:	005b      	lslpl	r3, r3, #1
 801ab58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ab5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ab60:	bf58      	it	pl
 801ab62:	0049      	lslpl	r1, r1, #1
 801ab64:	2600      	movs	r6, #0
 801ab66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ab6a:	107f      	asrs	r7, r7, #1
 801ab6c:	0049      	lsls	r1, r1, #1
 801ab6e:	2016      	movs	r0, #22
 801ab70:	4632      	mov	r2, r6
 801ab72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ab76:	1915      	adds	r5, r2, r4
 801ab78:	429d      	cmp	r5, r3
 801ab7a:	bfde      	ittt	le
 801ab7c:	192a      	addle	r2, r5, r4
 801ab7e:	1b5b      	suble	r3, r3, r5
 801ab80:	1936      	addle	r6, r6, r4
 801ab82:	0fcd      	lsrs	r5, r1, #31
 801ab84:	3801      	subs	r0, #1
 801ab86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801ab8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ab8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ab92:	d1f0      	bne.n	801ab76 <__ieee754_sqrt+0xb6>
 801ab94:	4605      	mov	r5, r0
 801ab96:	2420      	movs	r4, #32
 801ab98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	eb0c 0e00 	add.w	lr, ip, r0
 801aba2:	dc02      	bgt.n	801abaa <__ieee754_sqrt+0xea>
 801aba4:	d113      	bne.n	801abce <__ieee754_sqrt+0x10e>
 801aba6:	458e      	cmp	lr, r1
 801aba8:	d811      	bhi.n	801abce <__ieee754_sqrt+0x10e>
 801abaa:	f1be 0f00 	cmp.w	lr, #0
 801abae:	eb0e 000c 	add.w	r0, lr, ip
 801abb2:	da3f      	bge.n	801ac34 <__ieee754_sqrt+0x174>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	db3d      	blt.n	801ac34 <__ieee754_sqrt+0x174>
 801abb8:	f102 0801 	add.w	r8, r2, #1
 801abbc:	1a9b      	subs	r3, r3, r2
 801abbe:	458e      	cmp	lr, r1
 801abc0:	bf88      	it	hi
 801abc2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801abc6:	eba1 010e 	sub.w	r1, r1, lr
 801abca:	4465      	add	r5, ip
 801abcc:	4642      	mov	r2, r8
 801abce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801abd2:	3c01      	subs	r4, #1
 801abd4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801abd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801abdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801abe0:	d1dc      	bne.n	801ab9c <__ieee754_sqrt+0xdc>
 801abe2:	4319      	orrs	r1, r3
 801abe4:	d01b      	beq.n	801ac1e <__ieee754_sqrt+0x15e>
 801abe6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801ac64 <__ieee754_sqrt+0x1a4>
 801abea:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801ac68 <__ieee754_sqrt+0x1a8>
 801abee:	e9da 0100 	ldrd	r0, r1, [sl]
 801abf2:	e9db 2300 	ldrd	r2, r3, [fp]
 801abf6:	f7e5 fb47 	bl	8000288 <__aeabi_dsub>
 801abfa:	e9da 8900 	ldrd	r8, r9, [sl]
 801abfe:	4602      	mov	r2, r0
 801ac00:	460b      	mov	r3, r1
 801ac02:	4640      	mov	r0, r8
 801ac04:	4649      	mov	r1, r9
 801ac06:	f7e5 ff73 	bl	8000af0 <__aeabi_dcmple>
 801ac0a:	b140      	cbz	r0, 801ac1e <__ieee754_sqrt+0x15e>
 801ac0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 801ac10:	e9da 0100 	ldrd	r0, r1, [sl]
 801ac14:	e9db 2300 	ldrd	r2, r3, [fp]
 801ac18:	d10e      	bne.n	801ac38 <__ieee754_sqrt+0x178>
 801ac1a:	3601      	adds	r6, #1
 801ac1c:	4625      	mov	r5, r4
 801ac1e:	1073      	asrs	r3, r6, #1
 801ac20:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801ac24:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801ac28:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801ac2c:	086b      	lsrs	r3, r5, #1
 801ac2e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801ac32:	e759      	b.n	801aae8 <__ieee754_sqrt+0x28>
 801ac34:	4690      	mov	r8, r2
 801ac36:	e7c1      	b.n	801abbc <__ieee754_sqrt+0xfc>
 801ac38:	f7e5 fb28 	bl	800028c <__adddf3>
 801ac3c:	e9da 8900 	ldrd	r8, r9, [sl]
 801ac40:	4602      	mov	r2, r0
 801ac42:	460b      	mov	r3, r1
 801ac44:	4640      	mov	r0, r8
 801ac46:	4649      	mov	r1, r9
 801ac48:	f7e5 ff48 	bl	8000adc <__aeabi_dcmplt>
 801ac4c:	b120      	cbz	r0, 801ac58 <__ieee754_sqrt+0x198>
 801ac4e:	1cab      	adds	r3, r5, #2
 801ac50:	bf08      	it	eq
 801ac52:	3601      	addeq	r6, #1
 801ac54:	3502      	adds	r5, #2
 801ac56:	e7e2      	b.n	801ac1e <__ieee754_sqrt+0x15e>
 801ac58:	1c6b      	adds	r3, r5, #1
 801ac5a:	f023 0501 	bic.w	r5, r3, #1
 801ac5e:	e7de      	b.n	801ac1e <__ieee754_sqrt+0x15e>
 801ac60:	7ff00000 	.word	0x7ff00000
 801ac64:	0801d958 	.word	0x0801d958
 801ac68:	0801d950 	.word	0x0801d950

0801ac6c <floorf>:
 801ac6c:	ee10 3a10 	vmov	r3, s0
 801ac70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ac74:	3a7f      	subs	r2, #127	@ 0x7f
 801ac76:	2a16      	cmp	r2, #22
 801ac78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ac7c:	dc2b      	bgt.n	801acd6 <floorf+0x6a>
 801ac7e:	2a00      	cmp	r2, #0
 801ac80:	da12      	bge.n	801aca8 <floorf+0x3c>
 801ac82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ace8 <floorf+0x7c>
 801ac86:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ac8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ac8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac92:	dd06      	ble.n	801aca2 <floorf+0x36>
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	da24      	bge.n	801ace2 <floorf+0x76>
 801ac98:	2900      	cmp	r1, #0
 801ac9a:	4b14      	ldr	r3, [pc, #80]	@ (801acec <floorf+0x80>)
 801ac9c:	bf08      	it	eq
 801ac9e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801aca2:	ee00 3a10 	vmov	s0, r3
 801aca6:	4770      	bx	lr
 801aca8:	4911      	ldr	r1, [pc, #68]	@ (801acf0 <floorf+0x84>)
 801acaa:	4111      	asrs	r1, r2
 801acac:	420b      	tst	r3, r1
 801acae:	d0fa      	beq.n	801aca6 <floorf+0x3a>
 801acb0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801ace8 <floorf+0x7c>
 801acb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801acb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801acbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acc0:	ddef      	ble.n	801aca2 <floorf+0x36>
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	bfbe      	ittt	lt
 801acc6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801acca:	fa40 f202 	asrlt.w	r2, r0, r2
 801acce:	189b      	addlt	r3, r3, r2
 801acd0:	ea23 0301 	bic.w	r3, r3, r1
 801acd4:	e7e5      	b.n	801aca2 <floorf+0x36>
 801acd6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801acda:	d3e4      	bcc.n	801aca6 <floorf+0x3a>
 801acdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ace0:	4770      	bx	lr
 801ace2:	2300      	movs	r3, #0
 801ace4:	e7dd      	b.n	801aca2 <floorf+0x36>
 801ace6:	bf00      	nop
 801ace8:	7149f2ca 	.word	0x7149f2ca
 801acec:	bf800000 	.word	0xbf800000
 801acf0:	007fffff 	.word	0x007fffff
 801acf4:	00000000 	.word	0x00000000

0801acf8 <__kernel_cos>:
 801acf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acfc:	ec57 6b10 	vmov	r6, r7, d0
 801ad00:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801ad04:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801ad08:	ed8d 1b00 	vstr	d1, [sp]
 801ad0c:	d206      	bcs.n	801ad1c <__kernel_cos+0x24>
 801ad0e:	4630      	mov	r0, r6
 801ad10:	4639      	mov	r1, r7
 801ad12:	f7e5 ff21 	bl	8000b58 <__aeabi_d2iz>
 801ad16:	2800      	cmp	r0, #0
 801ad18:	f000 8088 	beq.w	801ae2c <__kernel_cos+0x134>
 801ad1c:	4632      	mov	r2, r6
 801ad1e:	463b      	mov	r3, r7
 801ad20:	4630      	mov	r0, r6
 801ad22:	4639      	mov	r1, r7
 801ad24:	f7e5 fc68 	bl	80005f8 <__aeabi_dmul>
 801ad28:	4b51      	ldr	r3, [pc, #324]	@ (801ae70 <__kernel_cos+0x178>)
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	4604      	mov	r4, r0
 801ad2e:	460d      	mov	r5, r1
 801ad30:	f7e5 fc62 	bl	80005f8 <__aeabi_dmul>
 801ad34:	a340      	add	r3, pc, #256	@ (adr r3, 801ae38 <__kernel_cos+0x140>)
 801ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3a:	4682      	mov	sl, r0
 801ad3c:	468b      	mov	fp, r1
 801ad3e:	4620      	mov	r0, r4
 801ad40:	4629      	mov	r1, r5
 801ad42:	f7e5 fc59 	bl	80005f8 <__aeabi_dmul>
 801ad46:	a33e      	add	r3, pc, #248	@ (adr r3, 801ae40 <__kernel_cos+0x148>)
 801ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad4c:	f7e5 fa9e 	bl	800028c <__adddf3>
 801ad50:	4622      	mov	r2, r4
 801ad52:	462b      	mov	r3, r5
 801ad54:	f7e5 fc50 	bl	80005f8 <__aeabi_dmul>
 801ad58:	a33b      	add	r3, pc, #236	@ (adr r3, 801ae48 <__kernel_cos+0x150>)
 801ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad5e:	f7e5 fa93 	bl	8000288 <__aeabi_dsub>
 801ad62:	4622      	mov	r2, r4
 801ad64:	462b      	mov	r3, r5
 801ad66:	f7e5 fc47 	bl	80005f8 <__aeabi_dmul>
 801ad6a:	a339      	add	r3, pc, #228	@ (adr r3, 801ae50 <__kernel_cos+0x158>)
 801ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad70:	f7e5 fa8c 	bl	800028c <__adddf3>
 801ad74:	4622      	mov	r2, r4
 801ad76:	462b      	mov	r3, r5
 801ad78:	f7e5 fc3e 	bl	80005f8 <__aeabi_dmul>
 801ad7c:	a336      	add	r3, pc, #216	@ (adr r3, 801ae58 <__kernel_cos+0x160>)
 801ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad82:	f7e5 fa81 	bl	8000288 <__aeabi_dsub>
 801ad86:	4622      	mov	r2, r4
 801ad88:	462b      	mov	r3, r5
 801ad8a:	f7e5 fc35 	bl	80005f8 <__aeabi_dmul>
 801ad8e:	a334      	add	r3, pc, #208	@ (adr r3, 801ae60 <__kernel_cos+0x168>)
 801ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad94:	f7e5 fa7a 	bl	800028c <__adddf3>
 801ad98:	4622      	mov	r2, r4
 801ad9a:	462b      	mov	r3, r5
 801ad9c:	f7e5 fc2c 	bl	80005f8 <__aeabi_dmul>
 801ada0:	4622      	mov	r2, r4
 801ada2:	462b      	mov	r3, r5
 801ada4:	f7e5 fc28 	bl	80005f8 <__aeabi_dmul>
 801ada8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801adac:	4604      	mov	r4, r0
 801adae:	460d      	mov	r5, r1
 801adb0:	4630      	mov	r0, r6
 801adb2:	4639      	mov	r1, r7
 801adb4:	f7e5 fc20 	bl	80005f8 <__aeabi_dmul>
 801adb8:	460b      	mov	r3, r1
 801adba:	4602      	mov	r2, r0
 801adbc:	4629      	mov	r1, r5
 801adbe:	4620      	mov	r0, r4
 801adc0:	f7e5 fa62 	bl	8000288 <__aeabi_dsub>
 801adc4:	4b2b      	ldr	r3, [pc, #172]	@ (801ae74 <__kernel_cos+0x17c>)
 801adc6:	4598      	cmp	r8, r3
 801adc8:	4606      	mov	r6, r0
 801adca:	460f      	mov	r7, r1
 801adcc:	d810      	bhi.n	801adf0 <__kernel_cos+0xf8>
 801adce:	4602      	mov	r2, r0
 801add0:	460b      	mov	r3, r1
 801add2:	4650      	mov	r0, sl
 801add4:	4659      	mov	r1, fp
 801add6:	f7e5 fa57 	bl	8000288 <__aeabi_dsub>
 801adda:	460b      	mov	r3, r1
 801addc:	4926      	ldr	r1, [pc, #152]	@ (801ae78 <__kernel_cos+0x180>)
 801adde:	4602      	mov	r2, r0
 801ade0:	2000      	movs	r0, #0
 801ade2:	f7e5 fa51 	bl	8000288 <__aeabi_dsub>
 801ade6:	ec41 0b10 	vmov	d0, r0, r1
 801adea:	b003      	add	sp, #12
 801adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adf0:	4b22      	ldr	r3, [pc, #136]	@ (801ae7c <__kernel_cos+0x184>)
 801adf2:	4921      	ldr	r1, [pc, #132]	@ (801ae78 <__kernel_cos+0x180>)
 801adf4:	4598      	cmp	r8, r3
 801adf6:	bf8c      	ite	hi
 801adf8:	4d21      	ldrhi	r5, [pc, #132]	@ (801ae80 <__kernel_cos+0x188>)
 801adfa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801adfe:	2400      	movs	r4, #0
 801ae00:	4622      	mov	r2, r4
 801ae02:	462b      	mov	r3, r5
 801ae04:	2000      	movs	r0, #0
 801ae06:	f7e5 fa3f 	bl	8000288 <__aeabi_dsub>
 801ae0a:	4622      	mov	r2, r4
 801ae0c:	4680      	mov	r8, r0
 801ae0e:	4689      	mov	r9, r1
 801ae10:	462b      	mov	r3, r5
 801ae12:	4650      	mov	r0, sl
 801ae14:	4659      	mov	r1, fp
 801ae16:	f7e5 fa37 	bl	8000288 <__aeabi_dsub>
 801ae1a:	4632      	mov	r2, r6
 801ae1c:	463b      	mov	r3, r7
 801ae1e:	f7e5 fa33 	bl	8000288 <__aeabi_dsub>
 801ae22:	4602      	mov	r2, r0
 801ae24:	460b      	mov	r3, r1
 801ae26:	4640      	mov	r0, r8
 801ae28:	4649      	mov	r1, r9
 801ae2a:	e7da      	b.n	801ade2 <__kernel_cos+0xea>
 801ae2c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801ae68 <__kernel_cos+0x170>
 801ae30:	e7db      	b.n	801adea <__kernel_cos+0xf2>
 801ae32:	bf00      	nop
 801ae34:	f3af 8000 	nop.w
 801ae38:	be8838d4 	.word	0xbe8838d4
 801ae3c:	bda8fae9 	.word	0xbda8fae9
 801ae40:	bdb4b1c4 	.word	0xbdb4b1c4
 801ae44:	3e21ee9e 	.word	0x3e21ee9e
 801ae48:	809c52ad 	.word	0x809c52ad
 801ae4c:	3e927e4f 	.word	0x3e927e4f
 801ae50:	19cb1590 	.word	0x19cb1590
 801ae54:	3efa01a0 	.word	0x3efa01a0
 801ae58:	16c15177 	.word	0x16c15177
 801ae5c:	3f56c16c 	.word	0x3f56c16c
 801ae60:	5555554c 	.word	0x5555554c
 801ae64:	3fa55555 	.word	0x3fa55555
 801ae68:	00000000 	.word	0x00000000
 801ae6c:	3ff00000 	.word	0x3ff00000
 801ae70:	3fe00000 	.word	0x3fe00000
 801ae74:	3fd33332 	.word	0x3fd33332
 801ae78:	3ff00000 	.word	0x3ff00000
 801ae7c:	3fe90000 	.word	0x3fe90000
 801ae80:	3fd20000 	.word	0x3fd20000
 801ae84:	00000000 	.word	0x00000000

0801ae88 <__kernel_sin>:
 801ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae8c:	ec55 4b10 	vmov	r4, r5, d0
 801ae90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ae94:	b085      	sub	sp, #20
 801ae96:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801ae9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801ae9e:	4680      	mov	r8, r0
 801aea0:	d205      	bcs.n	801aeae <__kernel_sin+0x26>
 801aea2:	4620      	mov	r0, r4
 801aea4:	4629      	mov	r1, r5
 801aea6:	f7e5 fe57 	bl	8000b58 <__aeabi_d2iz>
 801aeaa:	2800      	cmp	r0, #0
 801aeac:	d052      	beq.n	801af54 <__kernel_sin+0xcc>
 801aeae:	4622      	mov	r2, r4
 801aeb0:	462b      	mov	r3, r5
 801aeb2:	4620      	mov	r0, r4
 801aeb4:	4629      	mov	r1, r5
 801aeb6:	f7e5 fb9f 	bl	80005f8 <__aeabi_dmul>
 801aeba:	4682      	mov	sl, r0
 801aebc:	468b      	mov	fp, r1
 801aebe:	4602      	mov	r2, r0
 801aec0:	460b      	mov	r3, r1
 801aec2:	4620      	mov	r0, r4
 801aec4:	4629      	mov	r1, r5
 801aec6:	f7e5 fb97 	bl	80005f8 <__aeabi_dmul>
 801aeca:	a342      	add	r3, pc, #264	@ (adr r3, 801afd4 <__kernel_sin+0x14c>)
 801aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed0:	e9cd 0100 	strd	r0, r1, [sp]
 801aed4:	4650      	mov	r0, sl
 801aed6:	4659      	mov	r1, fp
 801aed8:	f7e5 fb8e 	bl	80005f8 <__aeabi_dmul>
 801aedc:	a33f      	add	r3, pc, #252	@ (adr r3, 801afdc <__kernel_sin+0x154>)
 801aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee2:	f7e5 f9d1 	bl	8000288 <__aeabi_dsub>
 801aee6:	4652      	mov	r2, sl
 801aee8:	465b      	mov	r3, fp
 801aeea:	f7e5 fb85 	bl	80005f8 <__aeabi_dmul>
 801aeee:	a33d      	add	r3, pc, #244	@ (adr r3, 801afe4 <__kernel_sin+0x15c>)
 801aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef4:	f7e5 f9ca 	bl	800028c <__adddf3>
 801aef8:	4652      	mov	r2, sl
 801aefa:	465b      	mov	r3, fp
 801aefc:	f7e5 fb7c 	bl	80005f8 <__aeabi_dmul>
 801af00:	a33a      	add	r3, pc, #232	@ (adr r3, 801afec <__kernel_sin+0x164>)
 801af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af06:	f7e5 f9bf 	bl	8000288 <__aeabi_dsub>
 801af0a:	4652      	mov	r2, sl
 801af0c:	465b      	mov	r3, fp
 801af0e:	f7e5 fb73 	bl	80005f8 <__aeabi_dmul>
 801af12:	a338      	add	r3, pc, #224	@ (adr r3, 801aff4 <__kernel_sin+0x16c>)
 801af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af18:	f7e5 f9b8 	bl	800028c <__adddf3>
 801af1c:	4606      	mov	r6, r0
 801af1e:	460f      	mov	r7, r1
 801af20:	f1b8 0f00 	cmp.w	r8, #0
 801af24:	d11b      	bne.n	801af5e <__kernel_sin+0xd6>
 801af26:	4602      	mov	r2, r0
 801af28:	460b      	mov	r3, r1
 801af2a:	4650      	mov	r0, sl
 801af2c:	4659      	mov	r1, fp
 801af2e:	f7e5 fb63 	bl	80005f8 <__aeabi_dmul>
 801af32:	a325      	add	r3, pc, #148	@ (adr r3, 801afc8 <__kernel_sin+0x140>)
 801af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af38:	f7e5 f9a6 	bl	8000288 <__aeabi_dsub>
 801af3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af40:	f7e5 fb5a 	bl	80005f8 <__aeabi_dmul>
 801af44:	4602      	mov	r2, r0
 801af46:	460b      	mov	r3, r1
 801af48:	4620      	mov	r0, r4
 801af4a:	4629      	mov	r1, r5
 801af4c:	f7e5 f99e 	bl	800028c <__adddf3>
 801af50:	4604      	mov	r4, r0
 801af52:	460d      	mov	r5, r1
 801af54:	ec45 4b10 	vmov	d0, r4, r5
 801af58:	b005      	add	sp, #20
 801af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af62:	4b1b      	ldr	r3, [pc, #108]	@ (801afd0 <__kernel_sin+0x148>)
 801af64:	2200      	movs	r2, #0
 801af66:	f7e5 fb47 	bl	80005f8 <__aeabi_dmul>
 801af6a:	4632      	mov	r2, r6
 801af6c:	4680      	mov	r8, r0
 801af6e:	4689      	mov	r9, r1
 801af70:	463b      	mov	r3, r7
 801af72:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af76:	f7e5 fb3f 	bl	80005f8 <__aeabi_dmul>
 801af7a:	4602      	mov	r2, r0
 801af7c:	460b      	mov	r3, r1
 801af7e:	4640      	mov	r0, r8
 801af80:	4649      	mov	r1, r9
 801af82:	f7e5 f981 	bl	8000288 <__aeabi_dsub>
 801af86:	4652      	mov	r2, sl
 801af88:	465b      	mov	r3, fp
 801af8a:	f7e5 fb35 	bl	80005f8 <__aeabi_dmul>
 801af8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801af92:	f7e5 f979 	bl	8000288 <__aeabi_dsub>
 801af96:	a30c      	add	r3, pc, #48	@ (adr r3, 801afc8 <__kernel_sin+0x140>)
 801af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9c:	4606      	mov	r6, r0
 801af9e:	460f      	mov	r7, r1
 801afa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801afa4:	f7e5 fb28 	bl	80005f8 <__aeabi_dmul>
 801afa8:	4602      	mov	r2, r0
 801afaa:	460b      	mov	r3, r1
 801afac:	4630      	mov	r0, r6
 801afae:	4639      	mov	r1, r7
 801afb0:	f7e5 f96c 	bl	800028c <__adddf3>
 801afb4:	4602      	mov	r2, r0
 801afb6:	460b      	mov	r3, r1
 801afb8:	4620      	mov	r0, r4
 801afba:	4629      	mov	r1, r5
 801afbc:	f7e5 f964 	bl	8000288 <__aeabi_dsub>
 801afc0:	e7c6      	b.n	801af50 <__kernel_sin+0xc8>
 801afc2:	bf00      	nop
 801afc4:	f3af 8000 	nop.w
 801afc8:	55555549 	.word	0x55555549
 801afcc:	3fc55555 	.word	0x3fc55555
 801afd0:	3fe00000 	.word	0x3fe00000
 801afd4:	5acfd57c 	.word	0x5acfd57c
 801afd8:	3de5d93a 	.word	0x3de5d93a
 801afdc:	8a2b9ceb 	.word	0x8a2b9ceb
 801afe0:	3e5ae5e6 	.word	0x3e5ae5e6
 801afe4:	57b1fe7d 	.word	0x57b1fe7d
 801afe8:	3ec71de3 	.word	0x3ec71de3
 801afec:	19c161d5 	.word	0x19c161d5
 801aff0:	3f2a01a0 	.word	0x3f2a01a0
 801aff4:	1110f8a6 	.word	0x1110f8a6
 801aff8:	3f811111 	.word	0x3f811111
 801affc:	00000000 	.word	0x00000000

0801b000 <__ieee754_acos>:
 801b000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b004:	ec55 4b10 	vmov	r4, r5, d0
 801b008:	49b7      	ldr	r1, [pc, #732]	@ (801b2e8 <__ieee754_acos+0x2e8>)
 801b00a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801b00e:	428b      	cmp	r3, r1
 801b010:	d919      	bls.n	801b046 <__ieee754_acos+0x46>
 801b012:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801b016:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801b01a:	4323      	orrs	r3, r4
 801b01c:	d106      	bne.n	801b02c <__ieee754_acos+0x2c>
 801b01e:	2d00      	cmp	r5, #0
 801b020:	f340 8210 	ble.w	801b444 <__ieee754_acos+0x444>
 801b024:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801b278 <__ieee754_acos+0x278>
 801b028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b02c:	4622      	mov	r2, r4
 801b02e:	462b      	mov	r3, r5
 801b030:	4620      	mov	r0, r4
 801b032:	4629      	mov	r1, r5
 801b034:	f7e5 f928 	bl	8000288 <__aeabi_dsub>
 801b038:	4602      	mov	r2, r0
 801b03a:	460b      	mov	r3, r1
 801b03c:	f7e5 fc06 	bl	800084c <__aeabi_ddiv>
 801b040:	ec41 0b10 	vmov	d0, r0, r1
 801b044:	e7f0      	b.n	801b028 <__ieee754_acos+0x28>
 801b046:	49a9      	ldr	r1, [pc, #676]	@ (801b2ec <__ieee754_acos+0x2ec>)
 801b048:	428b      	cmp	r3, r1
 801b04a:	f200 8085 	bhi.w	801b158 <__ieee754_acos+0x158>
 801b04e:	4aa8      	ldr	r2, [pc, #672]	@ (801b2f0 <__ieee754_acos+0x2f0>)
 801b050:	4293      	cmp	r3, r2
 801b052:	f240 81fa 	bls.w	801b44a <__ieee754_acos+0x44a>
 801b056:	4622      	mov	r2, r4
 801b058:	462b      	mov	r3, r5
 801b05a:	4620      	mov	r0, r4
 801b05c:	4629      	mov	r1, r5
 801b05e:	f7e5 facb 	bl	80005f8 <__aeabi_dmul>
 801b062:	a387      	add	r3, pc, #540	@ (adr r3, 801b280 <__ieee754_acos+0x280>)
 801b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b068:	4606      	mov	r6, r0
 801b06a:	460f      	mov	r7, r1
 801b06c:	f7e5 fac4 	bl	80005f8 <__aeabi_dmul>
 801b070:	a385      	add	r3, pc, #532	@ (adr r3, 801b288 <__ieee754_acos+0x288>)
 801b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b076:	f7e5 f909 	bl	800028c <__adddf3>
 801b07a:	4632      	mov	r2, r6
 801b07c:	463b      	mov	r3, r7
 801b07e:	f7e5 fabb 	bl	80005f8 <__aeabi_dmul>
 801b082:	a383      	add	r3, pc, #524	@ (adr r3, 801b290 <__ieee754_acos+0x290>)
 801b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b088:	f7e5 f8fe 	bl	8000288 <__aeabi_dsub>
 801b08c:	4632      	mov	r2, r6
 801b08e:	463b      	mov	r3, r7
 801b090:	f7e5 fab2 	bl	80005f8 <__aeabi_dmul>
 801b094:	a380      	add	r3, pc, #512	@ (adr r3, 801b298 <__ieee754_acos+0x298>)
 801b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b09a:	f7e5 f8f7 	bl	800028c <__adddf3>
 801b09e:	4632      	mov	r2, r6
 801b0a0:	463b      	mov	r3, r7
 801b0a2:	f7e5 faa9 	bl	80005f8 <__aeabi_dmul>
 801b0a6:	a37e      	add	r3, pc, #504	@ (adr r3, 801b2a0 <__ieee754_acos+0x2a0>)
 801b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ac:	f7e5 f8ec 	bl	8000288 <__aeabi_dsub>
 801b0b0:	4632      	mov	r2, r6
 801b0b2:	463b      	mov	r3, r7
 801b0b4:	f7e5 faa0 	bl	80005f8 <__aeabi_dmul>
 801b0b8:	a37b      	add	r3, pc, #492	@ (adr r3, 801b2a8 <__ieee754_acos+0x2a8>)
 801b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0be:	f7e5 f8e5 	bl	800028c <__adddf3>
 801b0c2:	4632      	mov	r2, r6
 801b0c4:	463b      	mov	r3, r7
 801b0c6:	f7e5 fa97 	bl	80005f8 <__aeabi_dmul>
 801b0ca:	a379      	add	r3, pc, #484	@ (adr r3, 801b2b0 <__ieee754_acos+0x2b0>)
 801b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d0:	4680      	mov	r8, r0
 801b0d2:	4689      	mov	r9, r1
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	4639      	mov	r1, r7
 801b0d8:	f7e5 fa8e 	bl	80005f8 <__aeabi_dmul>
 801b0dc:	a376      	add	r3, pc, #472	@ (adr r3, 801b2b8 <__ieee754_acos+0x2b8>)
 801b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e2:	f7e5 f8d1 	bl	8000288 <__aeabi_dsub>
 801b0e6:	4632      	mov	r2, r6
 801b0e8:	463b      	mov	r3, r7
 801b0ea:	f7e5 fa85 	bl	80005f8 <__aeabi_dmul>
 801b0ee:	a374      	add	r3, pc, #464	@ (adr r3, 801b2c0 <__ieee754_acos+0x2c0>)
 801b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f4:	f7e5 f8ca 	bl	800028c <__adddf3>
 801b0f8:	4632      	mov	r2, r6
 801b0fa:	463b      	mov	r3, r7
 801b0fc:	f7e5 fa7c 	bl	80005f8 <__aeabi_dmul>
 801b100:	a371      	add	r3, pc, #452	@ (adr r3, 801b2c8 <__ieee754_acos+0x2c8>)
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	f7e5 f8bf 	bl	8000288 <__aeabi_dsub>
 801b10a:	4632      	mov	r2, r6
 801b10c:	463b      	mov	r3, r7
 801b10e:	f7e5 fa73 	bl	80005f8 <__aeabi_dmul>
 801b112:	4b78      	ldr	r3, [pc, #480]	@ (801b2f4 <__ieee754_acos+0x2f4>)
 801b114:	2200      	movs	r2, #0
 801b116:	f7e5 f8b9 	bl	800028c <__adddf3>
 801b11a:	4602      	mov	r2, r0
 801b11c:	460b      	mov	r3, r1
 801b11e:	4640      	mov	r0, r8
 801b120:	4649      	mov	r1, r9
 801b122:	f7e5 fb93 	bl	800084c <__aeabi_ddiv>
 801b126:	4622      	mov	r2, r4
 801b128:	462b      	mov	r3, r5
 801b12a:	f7e5 fa65 	bl	80005f8 <__aeabi_dmul>
 801b12e:	4602      	mov	r2, r0
 801b130:	460b      	mov	r3, r1
 801b132:	a167      	add	r1, pc, #412	@ (adr r1, 801b2d0 <__ieee754_acos+0x2d0>)
 801b134:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b138:	f7e5 f8a6 	bl	8000288 <__aeabi_dsub>
 801b13c:	4602      	mov	r2, r0
 801b13e:	460b      	mov	r3, r1
 801b140:	4620      	mov	r0, r4
 801b142:	4629      	mov	r1, r5
 801b144:	f7e5 f8a0 	bl	8000288 <__aeabi_dsub>
 801b148:	4602      	mov	r2, r0
 801b14a:	460b      	mov	r3, r1
 801b14c:	a162      	add	r1, pc, #392	@ (adr r1, 801b2d8 <__ieee754_acos+0x2d8>)
 801b14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b152:	f7e5 f899 	bl	8000288 <__aeabi_dsub>
 801b156:	e773      	b.n	801b040 <__ieee754_acos+0x40>
 801b158:	2d00      	cmp	r5, #0
 801b15a:	f280 80cf 	bge.w	801b2fc <__ieee754_acos+0x2fc>
 801b15e:	4b65      	ldr	r3, [pc, #404]	@ (801b2f4 <__ieee754_acos+0x2f4>)
 801b160:	2200      	movs	r2, #0
 801b162:	4620      	mov	r0, r4
 801b164:	4629      	mov	r1, r5
 801b166:	f7e5 f891 	bl	800028c <__adddf3>
 801b16a:	4b63      	ldr	r3, [pc, #396]	@ (801b2f8 <__ieee754_acos+0x2f8>)
 801b16c:	2200      	movs	r2, #0
 801b16e:	f7e5 fa43 	bl	80005f8 <__aeabi_dmul>
 801b172:	a343      	add	r3, pc, #268	@ (adr r3, 801b280 <__ieee754_acos+0x280>)
 801b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b178:	4604      	mov	r4, r0
 801b17a:	460d      	mov	r5, r1
 801b17c:	f7e5 fa3c 	bl	80005f8 <__aeabi_dmul>
 801b180:	a341      	add	r3, pc, #260	@ (adr r3, 801b288 <__ieee754_acos+0x288>)
 801b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b186:	f7e5 f881 	bl	800028c <__adddf3>
 801b18a:	4622      	mov	r2, r4
 801b18c:	462b      	mov	r3, r5
 801b18e:	f7e5 fa33 	bl	80005f8 <__aeabi_dmul>
 801b192:	a33f      	add	r3, pc, #252	@ (adr r3, 801b290 <__ieee754_acos+0x290>)
 801b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b198:	f7e5 f876 	bl	8000288 <__aeabi_dsub>
 801b19c:	4622      	mov	r2, r4
 801b19e:	462b      	mov	r3, r5
 801b1a0:	f7e5 fa2a 	bl	80005f8 <__aeabi_dmul>
 801b1a4:	a33c      	add	r3, pc, #240	@ (adr r3, 801b298 <__ieee754_acos+0x298>)
 801b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1aa:	f7e5 f86f 	bl	800028c <__adddf3>
 801b1ae:	4622      	mov	r2, r4
 801b1b0:	462b      	mov	r3, r5
 801b1b2:	f7e5 fa21 	bl	80005f8 <__aeabi_dmul>
 801b1b6:	a33a      	add	r3, pc, #232	@ (adr r3, 801b2a0 <__ieee754_acos+0x2a0>)
 801b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1bc:	f7e5 f864 	bl	8000288 <__aeabi_dsub>
 801b1c0:	4622      	mov	r2, r4
 801b1c2:	462b      	mov	r3, r5
 801b1c4:	f7e5 fa18 	bl	80005f8 <__aeabi_dmul>
 801b1c8:	a337      	add	r3, pc, #220	@ (adr r3, 801b2a8 <__ieee754_acos+0x2a8>)
 801b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ce:	f7e5 f85d 	bl	800028c <__adddf3>
 801b1d2:	4622      	mov	r2, r4
 801b1d4:	462b      	mov	r3, r5
 801b1d6:	f7e5 fa0f 	bl	80005f8 <__aeabi_dmul>
 801b1da:	a335      	add	r3, pc, #212	@ (adr r3, 801b2b0 <__ieee754_acos+0x2b0>)
 801b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e0:	4606      	mov	r6, r0
 801b1e2:	460f      	mov	r7, r1
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	f7e5 fa06 	bl	80005f8 <__aeabi_dmul>
 801b1ec:	a332      	add	r3, pc, #200	@ (adr r3, 801b2b8 <__ieee754_acos+0x2b8>)
 801b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f2:	f7e5 f849 	bl	8000288 <__aeabi_dsub>
 801b1f6:	4622      	mov	r2, r4
 801b1f8:	462b      	mov	r3, r5
 801b1fa:	f7e5 f9fd 	bl	80005f8 <__aeabi_dmul>
 801b1fe:	a330      	add	r3, pc, #192	@ (adr r3, 801b2c0 <__ieee754_acos+0x2c0>)
 801b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b204:	f7e5 f842 	bl	800028c <__adddf3>
 801b208:	4622      	mov	r2, r4
 801b20a:	462b      	mov	r3, r5
 801b20c:	f7e5 f9f4 	bl	80005f8 <__aeabi_dmul>
 801b210:	a32d      	add	r3, pc, #180	@ (adr r3, 801b2c8 <__ieee754_acos+0x2c8>)
 801b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b216:	f7e5 f837 	bl	8000288 <__aeabi_dsub>
 801b21a:	4622      	mov	r2, r4
 801b21c:	462b      	mov	r3, r5
 801b21e:	f7e5 f9eb 	bl	80005f8 <__aeabi_dmul>
 801b222:	4b34      	ldr	r3, [pc, #208]	@ (801b2f4 <__ieee754_acos+0x2f4>)
 801b224:	2200      	movs	r2, #0
 801b226:	f7e5 f831 	bl	800028c <__adddf3>
 801b22a:	ec45 4b10 	vmov	d0, r4, r5
 801b22e:	4680      	mov	r8, r0
 801b230:	4689      	mov	r9, r1
 801b232:	f7ff fc45 	bl	801aac0 <__ieee754_sqrt>
 801b236:	ec55 4b10 	vmov	r4, r5, d0
 801b23a:	4642      	mov	r2, r8
 801b23c:	464b      	mov	r3, r9
 801b23e:	4630      	mov	r0, r6
 801b240:	4639      	mov	r1, r7
 801b242:	f7e5 fb03 	bl	800084c <__aeabi_ddiv>
 801b246:	4622      	mov	r2, r4
 801b248:	462b      	mov	r3, r5
 801b24a:	f7e5 f9d5 	bl	80005f8 <__aeabi_dmul>
 801b24e:	a320      	add	r3, pc, #128	@ (adr r3, 801b2d0 <__ieee754_acos+0x2d0>)
 801b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b254:	f7e5 f818 	bl	8000288 <__aeabi_dsub>
 801b258:	4622      	mov	r2, r4
 801b25a:	462b      	mov	r3, r5
 801b25c:	f7e5 f816 	bl	800028c <__adddf3>
 801b260:	4602      	mov	r2, r0
 801b262:	460b      	mov	r3, r1
 801b264:	f7e5 f812 	bl	800028c <__adddf3>
 801b268:	4602      	mov	r2, r0
 801b26a:	460b      	mov	r3, r1
 801b26c:	a11c      	add	r1, pc, #112	@ (adr r1, 801b2e0 <__ieee754_acos+0x2e0>)
 801b26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b272:	e76e      	b.n	801b152 <__ieee754_acos+0x152>
 801b274:	f3af 8000 	nop.w
	...
 801b280:	0dfdf709 	.word	0x0dfdf709
 801b284:	3f023de1 	.word	0x3f023de1
 801b288:	7501b288 	.word	0x7501b288
 801b28c:	3f49efe0 	.word	0x3f49efe0
 801b290:	b5688f3b 	.word	0xb5688f3b
 801b294:	3fa48228 	.word	0x3fa48228
 801b298:	0e884455 	.word	0x0e884455
 801b29c:	3fc9c155 	.word	0x3fc9c155
 801b2a0:	03eb6f7d 	.word	0x03eb6f7d
 801b2a4:	3fd4d612 	.word	0x3fd4d612
 801b2a8:	55555555 	.word	0x55555555
 801b2ac:	3fc55555 	.word	0x3fc55555
 801b2b0:	b12e9282 	.word	0xb12e9282
 801b2b4:	3fb3b8c5 	.word	0x3fb3b8c5
 801b2b8:	1b8d0159 	.word	0x1b8d0159
 801b2bc:	3fe6066c 	.word	0x3fe6066c
 801b2c0:	9c598ac8 	.word	0x9c598ac8
 801b2c4:	40002ae5 	.word	0x40002ae5
 801b2c8:	1c8a2d4b 	.word	0x1c8a2d4b
 801b2cc:	40033a27 	.word	0x40033a27
 801b2d0:	33145c07 	.word	0x33145c07
 801b2d4:	3c91a626 	.word	0x3c91a626
 801b2d8:	54442d18 	.word	0x54442d18
 801b2dc:	3ff921fb 	.word	0x3ff921fb
 801b2e0:	54442d18 	.word	0x54442d18
 801b2e4:	400921fb 	.word	0x400921fb
 801b2e8:	3fefffff 	.word	0x3fefffff
 801b2ec:	3fdfffff 	.word	0x3fdfffff
 801b2f0:	3c600000 	.word	0x3c600000
 801b2f4:	3ff00000 	.word	0x3ff00000
 801b2f8:	3fe00000 	.word	0x3fe00000
 801b2fc:	4622      	mov	r2, r4
 801b2fe:	462b      	mov	r3, r5
 801b300:	496b      	ldr	r1, [pc, #428]	@ (801b4b0 <__ieee754_acos+0x4b0>)
 801b302:	2000      	movs	r0, #0
 801b304:	f7e4 ffc0 	bl	8000288 <__aeabi_dsub>
 801b308:	4b6a      	ldr	r3, [pc, #424]	@ (801b4b4 <__ieee754_acos+0x4b4>)
 801b30a:	2200      	movs	r2, #0
 801b30c:	f7e5 f974 	bl	80005f8 <__aeabi_dmul>
 801b310:	4604      	mov	r4, r0
 801b312:	460d      	mov	r5, r1
 801b314:	ec45 4b10 	vmov	d0, r4, r5
 801b318:	f7ff fbd2 	bl	801aac0 <__ieee754_sqrt>
 801b31c:	a34c      	add	r3, pc, #304	@ (adr r3, 801b450 <__ieee754_acos+0x450>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	4620      	mov	r0, r4
 801b324:	4629      	mov	r1, r5
 801b326:	ec59 8b10 	vmov	r8, r9, d0
 801b32a:	f7e5 f965 	bl	80005f8 <__aeabi_dmul>
 801b32e:	a34a      	add	r3, pc, #296	@ (adr r3, 801b458 <__ieee754_acos+0x458>)
 801b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b334:	f7e4 ffaa 	bl	800028c <__adddf3>
 801b338:	4622      	mov	r2, r4
 801b33a:	462b      	mov	r3, r5
 801b33c:	f7e5 f95c 	bl	80005f8 <__aeabi_dmul>
 801b340:	a347      	add	r3, pc, #284	@ (adr r3, 801b460 <__ieee754_acos+0x460>)
 801b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b346:	f7e4 ff9f 	bl	8000288 <__aeabi_dsub>
 801b34a:	4622      	mov	r2, r4
 801b34c:	462b      	mov	r3, r5
 801b34e:	f7e5 f953 	bl	80005f8 <__aeabi_dmul>
 801b352:	a345      	add	r3, pc, #276	@ (adr r3, 801b468 <__ieee754_acos+0x468>)
 801b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b358:	f7e4 ff98 	bl	800028c <__adddf3>
 801b35c:	4622      	mov	r2, r4
 801b35e:	462b      	mov	r3, r5
 801b360:	f7e5 f94a 	bl	80005f8 <__aeabi_dmul>
 801b364:	a342      	add	r3, pc, #264	@ (adr r3, 801b470 <__ieee754_acos+0x470>)
 801b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36a:	f7e4 ff8d 	bl	8000288 <__aeabi_dsub>
 801b36e:	4622      	mov	r2, r4
 801b370:	462b      	mov	r3, r5
 801b372:	f7e5 f941 	bl	80005f8 <__aeabi_dmul>
 801b376:	a340      	add	r3, pc, #256	@ (adr r3, 801b478 <__ieee754_acos+0x478>)
 801b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37c:	f7e4 ff86 	bl	800028c <__adddf3>
 801b380:	4622      	mov	r2, r4
 801b382:	462b      	mov	r3, r5
 801b384:	f7e5 f938 	bl	80005f8 <__aeabi_dmul>
 801b388:	a33d      	add	r3, pc, #244	@ (adr r3, 801b480 <__ieee754_acos+0x480>)
 801b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b38e:	4682      	mov	sl, r0
 801b390:	468b      	mov	fp, r1
 801b392:	4620      	mov	r0, r4
 801b394:	4629      	mov	r1, r5
 801b396:	f7e5 f92f 	bl	80005f8 <__aeabi_dmul>
 801b39a:	a33b      	add	r3, pc, #236	@ (adr r3, 801b488 <__ieee754_acos+0x488>)
 801b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3a0:	f7e4 ff72 	bl	8000288 <__aeabi_dsub>
 801b3a4:	4622      	mov	r2, r4
 801b3a6:	462b      	mov	r3, r5
 801b3a8:	f7e5 f926 	bl	80005f8 <__aeabi_dmul>
 801b3ac:	a338      	add	r3, pc, #224	@ (adr r3, 801b490 <__ieee754_acos+0x490>)
 801b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b2:	f7e4 ff6b 	bl	800028c <__adddf3>
 801b3b6:	4622      	mov	r2, r4
 801b3b8:	462b      	mov	r3, r5
 801b3ba:	f7e5 f91d 	bl	80005f8 <__aeabi_dmul>
 801b3be:	a336      	add	r3, pc, #216	@ (adr r3, 801b498 <__ieee754_acos+0x498>)
 801b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c4:	f7e4 ff60 	bl	8000288 <__aeabi_dsub>
 801b3c8:	4622      	mov	r2, r4
 801b3ca:	462b      	mov	r3, r5
 801b3cc:	f7e5 f914 	bl	80005f8 <__aeabi_dmul>
 801b3d0:	4b37      	ldr	r3, [pc, #220]	@ (801b4b0 <__ieee754_acos+0x4b0>)
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	f7e4 ff5a 	bl	800028c <__adddf3>
 801b3d8:	4602      	mov	r2, r0
 801b3da:	460b      	mov	r3, r1
 801b3dc:	4650      	mov	r0, sl
 801b3de:	4659      	mov	r1, fp
 801b3e0:	f7e5 fa34 	bl	800084c <__aeabi_ddiv>
 801b3e4:	4642      	mov	r2, r8
 801b3e6:	464b      	mov	r3, r9
 801b3e8:	f7e5 f906 	bl	80005f8 <__aeabi_dmul>
 801b3ec:	2600      	movs	r6, #0
 801b3ee:	4682      	mov	sl, r0
 801b3f0:	468b      	mov	fp, r1
 801b3f2:	4632      	mov	r2, r6
 801b3f4:	464b      	mov	r3, r9
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	4649      	mov	r1, r9
 801b3fa:	f7e5 f8fd 	bl	80005f8 <__aeabi_dmul>
 801b3fe:	4602      	mov	r2, r0
 801b400:	460b      	mov	r3, r1
 801b402:	4620      	mov	r0, r4
 801b404:	4629      	mov	r1, r5
 801b406:	f7e4 ff3f 	bl	8000288 <__aeabi_dsub>
 801b40a:	4632      	mov	r2, r6
 801b40c:	4604      	mov	r4, r0
 801b40e:	460d      	mov	r5, r1
 801b410:	464b      	mov	r3, r9
 801b412:	4640      	mov	r0, r8
 801b414:	4649      	mov	r1, r9
 801b416:	f7e4 ff39 	bl	800028c <__adddf3>
 801b41a:	4602      	mov	r2, r0
 801b41c:	460b      	mov	r3, r1
 801b41e:	4620      	mov	r0, r4
 801b420:	4629      	mov	r1, r5
 801b422:	f7e5 fa13 	bl	800084c <__aeabi_ddiv>
 801b426:	4602      	mov	r2, r0
 801b428:	460b      	mov	r3, r1
 801b42a:	4650      	mov	r0, sl
 801b42c:	4659      	mov	r1, fp
 801b42e:	f7e4 ff2d 	bl	800028c <__adddf3>
 801b432:	4632      	mov	r2, r6
 801b434:	464b      	mov	r3, r9
 801b436:	f7e4 ff29 	bl	800028c <__adddf3>
 801b43a:	4602      	mov	r2, r0
 801b43c:	460b      	mov	r3, r1
 801b43e:	f7e4 ff25 	bl	800028c <__adddf3>
 801b442:	e5fd      	b.n	801b040 <__ieee754_acos+0x40>
 801b444:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801b4a0 <__ieee754_acos+0x4a0>
 801b448:	e5ee      	b.n	801b028 <__ieee754_acos+0x28>
 801b44a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801b4a8 <__ieee754_acos+0x4a8>
 801b44e:	e5eb      	b.n	801b028 <__ieee754_acos+0x28>
 801b450:	0dfdf709 	.word	0x0dfdf709
 801b454:	3f023de1 	.word	0x3f023de1
 801b458:	7501b288 	.word	0x7501b288
 801b45c:	3f49efe0 	.word	0x3f49efe0
 801b460:	b5688f3b 	.word	0xb5688f3b
 801b464:	3fa48228 	.word	0x3fa48228
 801b468:	0e884455 	.word	0x0e884455
 801b46c:	3fc9c155 	.word	0x3fc9c155
 801b470:	03eb6f7d 	.word	0x03eb6f7d
 801b474:	3fd4d612 	.word	0x3fd4d612
 801b478:	55555555 	.word	0x55555555
 801b47c:	3fc55555 	.word	0x3fc55555
 801b480:	b12e9282 	.word	0xb12e9282
 801b484:	3fb3b8c5 	.word	0x3fb3b8c5
 801b488:	1b8d0159 	.word	0x1b8d0159
 801b48c:	3fe6066c 	.word	0x3fe6066c
 801b490:	9c598ac8 	.word	0x9c598ac8
 801b494:	40002ae5 	.word	0x40002ae5
 801b498:	1c8a2d4b 	.word	0x1c8a2d4b
 801b49c:	40033a27 	.word	0x40033a27
 801b4a0:	54442d18 	.word	0x54442d18
 801b4a4:	400921fb 	.word	0x400921fb
 801b4a8:	54442d18 	.word	0x54442d18
 801b4ac:	3ff921fb 	.word	0x3ff921fb
 801b4b0:	3ff00000 	.word	0x3ff00000
 801b4b4:	3fe00000 	.word	0x3fe00000

0801b4b8 <__ieee754_asin>:
 801b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4bc:	ec55 4b10 	vmov	r4, r5, d0
 801b4c0:	4bc7      	ldr	r3, [pc, #796]	@ (801b7e0 <__ieee754_asin+0x328>)
 801b4c2:	b087      	sub	sp, #28
 801b4c4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801b4c8:	429e      	cmp	r6, r3
 801b4ca:	9501      	str	r5, [sp, #4]
 801b4cc:	d92d      	bls.n	801b52a <__ieee754_asin+0x72>
 801b4ce:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801b4d2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801b4d6:	4326      	orrs	r6, r4
 801b4d8:	d116      	bne.n	801b508 <__ieee754_asin+0x50>
 801b4da:	a3a7      	add	r3, pc, #668	@ (adr r3, 801b778 <__ieee754_asin+0x2c0>)
 801b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	4629      	mov	r1, r5
 801b4e4:	f7e5 f888 	bl	80005f8 <__aeabi_dmul>
 801b4e8:	a3a5      	add	r3, pc, #660	@ (adr r3, 801b780 <__ieee754_asin+0x2c8>)
 801b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ee:	4606      	mov	r6, r0
 801b4f0:	460f      	mov	r7, r1
 801b4f2:	4620      	mov	r0, r4
 801b4f4:	4629      	mov	r1, r5
 801b4f6:	f7e5 f87f 	bl	80005f8 <__aeabi_dmul>
 801b4fa:	4602      	mov	r2, r0
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	4630      	mov	r0, r6
 801b500:	4639      	mov	r1, r7
 801b502:	f7e4 fec3 	bl	800028c <__adddf3>
 801b506:	e009      	b.n	801b51c <__ieee754_asin+0x64>
 801b508:	4622      	mov	r2, r4
 801b50a:	462b      	mov	r3, r5
 801b50c:	4620      	mov	r0, r4
 801b50e:	4629      	mov	r1, r5
 801b510:	f7e4 feba 	bl	8000288 <__aeabi_dsub>
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	f7e5 f998 	bl	800084c <__aeabi_ddiv>
 801b51c:	4604      	mov	r4, r0
 801b51e:	460d      	mov	r5, r1
 801b520:	ec45 4b10 	vmov	d0, r4, r5
 801b524:	b007      	add	sp, #28
 801b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52a:	4bae      	ldr	r3, [pc, #696]	@ (801b7e4 <__ieee754_asin+0x32c>)
 801b52c:	429e      	cmp	r6, r3
 801b52e:	d810      	bhi.n	801b552 <__ieee754_asin+0x9a>
 801b530:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801b534:	f080 80ad 	bcs.w	801b692 <__ieee754_asin+0x1da>
 801b538:	a393      	add	r3, pc, #588	@ (adr r3, 801b788 <__ieee754_asin+0x2d0>)
 801b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53e:	4620      	mov	r0, r4
 801b540:	4629      	mov	r1, r5
 801b542:	f7e4 fea3 	bl	800028c <__adddf3>
 801b546:	4ba8      	ldr	r3, [pc, #672]	@ (801b7e8 <__ieee754_asin+0x330>)
 801b548:	2200      	movs	r2, #0
 801b54a:	f7e5 fae5 	bl	8000b18 <__aeabi_dcmpgt>
 801b54e:	2800      	cmp	r0, #0
 801b550:	d1e6      	bne.n	801b520 <__ieee754_asin+0x68>
 801b552:	ec45 4b10 	vmov	d0, r4, r5
 801b556:	f7ff fa43 	bl	801a9e0 <fabs>
 801b55a:	49a3      	ldr	r1, [pc, #652]	@ (801b7e8 <__ieee754_asin+0x330>)
 801b55c:	ec53 2b10 	vmov	r2, r3, d0
 801b560:	2000      	movs	r0, #0
 801b562:	f7e4 fe91 	bl	8000288 <__aeabi_dsub>
 801b566:	4ba1      	ldr	r3, [pc, #644]	@ (801b7ec <__ieee754_asin+0x334>)
 801b568:	2200      	movs	r2, #0
 801b56a:	f7e5 f845 	bl	80005f8 <__aeabi_dmul>
 801b56e:	a388      	add	r3, pc, #544	@ (adr r3, 801b790 <__ieee754_asin+0x2d8>)
 801b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b574:	4604      	mov	r4, r0
 801b576:	460d      	mov	r5, r1
 801b578:	f7e5 f83e 	bl	80005f8 <__aeabi_dmul>
 801b57c:	a386      	add	r3, pc, #536	@ (adr r3, 801b798 <__ieee754_asin+0x2e0>)
 801b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b582:	f7e4 fe83 	bl	800028c <__adddf3>
 801b586:	4622      	mov	r2, r4
 801b588:	462b      	mov	r3, r5
 801b58a:	f7e5 f835 	bl	80005f8 <__aeabi_dmul>
 801b58e:	a384      	add	r3, pc, #528	@ (adr r3, 801b7a0 <__ieee754_asin+0x2e8>)
 801b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b594:	f7e4 fe78 	bl	8000288 <__aeabi_dsub>
 801b598:	4622      	mov	r2, r4
 801b59a:	462b      	mov	r3, r5
 801b59c:	f7e5 f82c 	bl	80005f8 <__aeabi_dmul>
 801b5a0:	a381      	add	r3, pc, #516	@ (adr r3, 801b7a8 <__ieee754_asin+0x2f0>)
 801b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a6:	f7e4 fe71 	bl	800028c <__adddf3>
 801b5aa:	4622      	mov	r2, r4
 801b5ac:	462b      	mov	r3, r5
 801b5ae:	f7e5 f823 	bl	80005f8 <__aeabi_dmul>
 801b5b2:	a37f      	add	r3, pc, #508	@ (adr r3, 801b7b0 <__ieee754_asin+0x2f8>)
 801b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b8:	f7e4 fe66 	bl	8000288 <__aeabi_dsub>
 801b5bc:	4622      	mov	r2, r4
 801b5be:	462b      	mov	r3, r5
 801b5c0:	f7e5 f81a 	bl	80005f8 <__aeabi_dmul>
 801b5c4:	a37c      	add	r3, pc, #496	@ (adr r3, 801b7b8 <__ieee754_asin+0x300>)
 801b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ca:	f7e4 fe5f 	bl	800028c <__adddf3>
 801b5ce:	4622      	mov	r2, r4
 801b5d0:	462b      	mov	r3, r5
 801b5d2:	f7e5 f811 	bl	80005f8 <__aeabi_dmul>
 801b5d6:	a37a      	add	r3, pc, #488	@ (adr r3, 801b7c0 <__ieee754_asin+0x308>)
 801b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5e0:	4620      	mov	r0, r4
 801b5e2:	4629      	mov	r1, r5
 801b5e4:	f7e5 f808 	bl	80005f8 <__aeabi_dmul>
 801b5e8:	a377      	add	r3, pc, #476	@ (adr r3, 801b7c8 <__ieee754_asin+0x310>)
 801b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ee:	f7e4 fe4b 	bl	8000288 <__aeabi_dsub>
 801b5f2:	4622      	mov	r2, r4
 801b5f4:	462b      	mov	r3, r5
 801b5f6:	f7e4 ffff 	bl	80005f8 <__aeabi_dmul>
 801b5fa:	a375      	add	r3, pc, #468	@ (adr r3, 801b7d0 <__ieee754_asin+0x318>)
 801b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b600:	f7e4 fe44 	bl	800028c <__adddf3>
 801b604:	4622      	mov	r2, r4
 801b606:	462b      	mov	r3, r5
 801b608:	f7e4 fff6 	bl	80005f8 <__aeabi_dmul>
 801b60c:	a372      	add	r3, pc, #456	@ (adr r3, 801b7d8 <__ieee754_asin+0x320>)
 801b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b612:	f7e4 fe39 	bl	8000288 <__aeabi_dsub>
 801b616:	4622      	mov	r2, r4
 801b618:	462b      	mov	r3, r5
 801b61a:	f7e4 ffed 	bl	80005f8 <__aeabi_dmul>
 801b61e:	4b72      	ldr	r3, [pc, #456]	@ (801b7e8 <__ieee754_asin+0x330>)
 801b620:	2200      	movs	r2, #0
 801b622:	f7e4 fe33 	bl	800028c <__adddf3>
 801b626:	ec45 4b10 	vmov	d0, r4, r5
 801b62a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b62e:	f7ff fa47 	bl	801aac0 <__ieee754_sqrt>
 801b632:	4b6f      	ldr	r3, [pc, #444]	@ (801b7f0 <__ieee754_asin+0x338>)
 801b634:	429e      	cmp	r6, r3
 801b636:	ec5b ab10 	vmov	sl, fp, d0
 801b63a:	f240 80db 	bls.w	801b7f4 <__ieee754_asin+0x33c>
 801b63e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b646:	f7e5 f901 	bl	800084c <__aeabi_ddiv>
 801b64a:	4652      	mov	r2, sl
 801b64c:	465b      	mov	r3, fp
 801b64e:	f7e4 ffd3 	bl	80005f8 <__aeabi_dmul>
 801b652:	4652      	mov	r2, sl
 801b654:	465b      	mov	r3, fp
 801b656:	f7e4 fe19 	bl	800028c <__adddf3>
 801b65a:	4602      	mov	r2, r0
 801b65c:	460b      	mov	r3, r1
 801b65e:	f7e4 fe15 	bl	800028c <__adddf3>
 801b662:	a347      	add	r3, pc, #284	@ (adr r3, 801b780 <__ieee754_asin+0x2c8>)
 801b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b668:	f7e4 fe0e 	bl	8000288 <__aeabi_dsub>
 801b66c:	4602      	mov	r2, r0
 801b66e:	460b      	mov	r3, r1
 801b670:	a141      	add	r1, pc, #260	@ (adr r1, 801b778 <__ieee754_asin+0x2c0>)
 801b672:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b676:	f7e4 fe07 	bl	8000288 <__aeabi_dsub>
 801b67a:	9b01      	ldr	r3, [sp, #4]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	bfdc      	itt	le
 801b680:	4602      	movle	r2, r0
 801b682:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801b686:	4604      	mov	r4, r0
 801b688:	460d      	mov	r5, r1
 801b68a:	bfdc      	itt	le
 801b68c:	4614      	movle	r4, r2
 801b68e:	461d      	movle	r5, r3
 801b690:	e746      	b.n	801b520 <__ieee754_asin+0x68>
 801b692:	4622      	mov	r2, r4
 801b694:	462b      	mov	r3, r5
 801b696:	4620      	mov	r0, r4
 801b698:	4629      	mov	r1, r5
 801b69a:	f7e4 ffad 	bl	80005f8 <__aeabi_dmul>
 801b69e:	a33c      	add	r3, pc, #240	@ (adr r3, 801b790 <__ieee754_asin+0x2d8>)
 801b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a4:	4606      	mov	r6, r0
 801b6a6:	460f      	mov	r7, r1
 801b6a8:	f7e4 ffa6 	bl	80005f8 <__aeabi_dmul>
 801b6ac:	a33a      	add	r3, pc, #232	@ (adr r3, 801b798 <__ieee754_asin+0x2e0>)
 801b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b2:	f7e4 fdeb 	bl	800028c <__adddf3>
 801b6b6:	4632      	mov	r2, r6
 801b6b8:	463b      	mov	r3, r7
 801b6ba:	f7e4 ff9d 	bl	80005f8 <__aeabi_dmul>
 801b6be:	a338      	add	r3, pc, #224	@ (adr r3, 801b7a0 <__ieee754_asin+0x2e8>)
 801b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c4:	f7e4 fde0 	bl	8000288 <__aeabi_dsub>
 801b6c8:	4632      	mov	r2, r6
 801b6ca:	463b      	mov	r3, r7
 801b6cc:	f7e4 ff94 	bl	80005f8 <__aeabi_dmul>
 801b6d0:	a335      	add	r3, pc, #212	@ (adr r3, 801b7a8 <__ieee754_asin+0x2f0>)
 801b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d6:	f7e4 fdd9 	bl	800028c <__adddf3>
 801b6da:	4632      	mov	r2, r6
 801b6dc:	463b      	mov	r3, r7
 801b6de:	f7e4 ff8b 	bl	80005f8 <__aeabi_dmul>
 801b6e2:	a333      	add	r3, pc, #204	@ (adr r3, 801b7b0 <__ieee754_asin+0x2f8>)
 801b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e8:	f7e4 fdce 	bl	8000288 <__aeabi_dsub>
 801b6ec:	4632      	mov	r2, r6
 801b6ee:	463b      	mov	r3, r7
 801b6f0:	f7e4 ff82 	bl	80005f8 <__aeabi_dmul>
 801b6f4:	a330      	add	r3, pc, #192	@ (adr r3, 801b7b8 <__ieee754_asin+0x300>)
 801b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6fa:	f7e4 fdc7 	bl	800028c <__adddf3>
 801b6fe:	4632      	mov	r2, r6
 801b700:	463b      	mov	r3, r7
 801b702:	f7e4 ff79 	bl	80005f8 <__aeabi_dmul>
 801b706:	a32e      	add	r3, pc, #184	@ (adr r3, 801b7c0 <__ieee754_asin+0x308>)
 801b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b70c:	4680      	mov	r8, r0
 801b70e:	4689      	mov	r9, r1
 801b710:	4630      	mov	r0, r6
 801b712:	4639      	mov	r1, r7
 801b714:	f7e4 ff70 	bl	80005f8 <__aeabi_dmul>
 801b718:	a32b      	add	r3, pc, #172	@ (adr r3, 801b7c8 <__ieee754_asin+0x310>)
 801b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b71e:	f7e4 fdb3 	bl	8000288 <__aeabi_dsub>
 801b722:	4632      	mov	r2, r6
 801b724:	463b      	mov	r3, r7
 801b726:	f7e4 ff67 	bl	80005f8 <__aeabi_dmul>
 801b72a:	a329      	add	r3, pc, #164	@ (adr r3, 801b7d0 <__ieee754_asin+0x318>)
 801b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b730:	f7e4 fdac 	bl	800028c <__adddf3>
 801b734:	4632      	mov	r2, r6
 801b736:	463b      	mov	r3, r7
 801b738:	f7e4 ff5e 	bl	80005f8 <__aeabi_dmul>
 801b73c:	a326      	add	r3, pc, #152	@ (adr r3, 801b7d8 <__ieee754_asin+0x320>)
 801b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b742:	f7e4 fda1 	bl	8000288 <__aeabi_dsub>
 801b746:	4632      	mov	r2, r6
 801b748:	463b      	mov	r3, r7
 801b74a:	f7e4 ff55 	bl	80005f8 <__aeabi_dmul>
 801b74e:	4b26      	ldr	r3, [pc, #152]	@ (801b7e8 <__ieee754_asin+0x330>)
 801b750:	2200      	movs	r2, #0
 801b752:	f7e4 fd9b 	bl	800028c <__adddf3>
 801b756:	4602      	mov	r2, r0
 801b758:	460b      	mov	r3, r1
 801b75a:	4640      	mov	r0, r8
 801b75c:	4649      	mov	r1, r9
 801b75e:	f7e5 f875 	bl	800084c <__aeabi_ddiv>
 801b762:	4622      	mov	r2, r4
 801b764:	462b      	mov	r3, r5
 801b766:	f7e4 ff47 	bl	80005f8 <__aeabi_dmul>
 801b76a:	4602      	mov	r2, r0
 801b76c:	460b      	mov	r3, r1
 801b76e:	4620      	mov	r0, r4
 801b770:	4629      	mov	r1, r5
 801b772:	e6c6      	b.n	801b502 <__ieee754_asin+0x4a>
 801b774:	f3af 8000 	nop.w
 801b778:	54442d18 	.word	0x54442d18
 801b77c:	3ff921fb 	.word	0x3ff921fb
 801b780:	33145c07 	.word	0x33145c07
 801b784:	3c91a626 	.word	0x3c91a626
 801b788:	8800759c 	.word	0x8800759c
 801b78c:	7e37e43c 	.word	0x7e37e43c
 801b790:	0dfdf709 	.word	0x0dfdf709
 801b794:	3f023de1 	.word	0x3f023de1
 801b798:	7501b288 	.word	0x7501b288
 801b79c:	3f49efe0 	.word	0x3f49efe0
 801b7a0:	b5688f3b 	.word	0xb5688f3b
 801b7a4:	3fa48228 	.word	0x3fa48228
 801b7a8:	0e884455 	.word	0x0e884455
 801b7ac:	3fc9c155 	.word	0x3fc9c155
 801b7b0:	03eb6f7d 	.word	0x03eb6f7d
 801b7b4:	3fd4d612 	.word	0x3fd4d612
 801b7b8:	55555555 	.word	0x55555555
 801b7bc:	3fc55555 	.word	0x3fc55555
 801b7c0:	b12e9282 	.word	0xb12e9282
 801b7c4:	3fb3b8c5 	.word	0x3fb3b8c5
 801b7c8:	1b8d0159 	.word	0x1b8d0159
 801b7cc:	3fe6066c 	.word	0x3fe6066c
 801b7d0:	9c598ac8 	.word	0x9c598ac8
 801b7d4:	40002ae5 	.word	0x40002ae5
 801b7d8:	1c8a2d4b 	.word	0x1c8a2d4b
 801b7dc:	40033a27 	.word	0x40033a27
 801b7e0:	3fefffff 	.word	0x3fefffff
 801b7e4:	3fdfffff 	.word	0x3fdfffff
 801b7e8:	3ff00000 	.word	0x3ff00000
 801b7ec:	3fe00000 	.word	0x3fe00000
 801b7f0:	3fef3332 	.word	0x3fef3332
 801b7f4:	4652      	mov	r2, sl
 801b7f6:	465b      	mov	r3, fp
 801b7f8:	4650      	mov	r0, sl
 801b7fa:	4659      	mov	r1, fp
 801b7fc:	f7e4 fd46 	bl	800028c <__adddf3>
 801b800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b804:	4606      	mov	r6, r0
 801b806:	460f      	mov	r7, r1
 801b808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b80c:	f7e5 f81e 	bl	800084c <__aeabi_ddiv>
 801b810:	4602      	mov	r2, r0
 801b812:	460b      	mov	r3, r1
 801b814:	4630      	mov	r0, r6
 801b816:	4639      	mov	r1, r7
 801b818:	f7e4 feee 	bl	80005f8 <__aeabi_dmul>
 801b81c:	f04f 0800 	mov.w	r8, #0
 801b820:	4606      	mov	r6, r0
 801b822:	460f      	mov	r7, r1
 801b824:	4642      	mov	r2, r8
 801b826:	465b      	mov	r3, fp
 801b828:	4640      	mov	r0, r8
 801b82a:	4659      	mov	r1, fp
 801b82c:	f7e4 fee4 	bl	80005f8 <__aeabi_dmul>
 801b830:	4602      	mov	r2, r0
 801b832:	460b      	mov	r3, r1
 801b834:	4620      	mov	r0, r4
 801b836:	4629      	mov	r1, r5
 801b838:	f7e4 fd26 	bl	8000288 <__aeabi_dsub>
 801b83c:	4642      	mov	r2, r8
 801b83e:	4604      	mov	r4, r0
 801b840:	460d      	mov	r5, r1
 801b842:	465b      	mov	r3, fp
 801b844:	4650      	mov	r0, sl
 801b846:	4659      	mov	r1, fp
 801b848:	f7e4 fd20 	bl	800028c <__adddf3>
 801b84c:	4602      	mov	r2, r0
 801b84e:	460b      	mov	r3, r1
 801b850:	4620      	mov	r0, r4
 801b852:	4629      	mov	r1, r5
 801b854:	f7e4 fffa 	bl	800084c <__aeabi_ddiv>
 801b858:	4602      	mov	r2, r0
 801b85a:	460b      	mov	r3, r1
 801b85c:	f7e4 fd16 	bl	800028c <__adddf3>
 801b860:	4602      	mov	r2, r0
 801b862:	460b      	mov	r3, r1
 801b864:	a112      	add	r1, pc, #72	@ (adr r1, 801b8b0 <__ieee754_asin+0x3f8>)
 801b866:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b86a:	f7e4 fd0d 	bl	8000288 <__aeabi_dsub>
 801b86e:	4602      	mov	r2, r0
 801b870:	460b      	mov	r3, r1
 801b872:	4630      	mov	r0, r6
 801b874:	4639      	mov	r1, r7
 801b876:	f7e4 fd07 	bl	8000288 <__aeabi_dsub>
 801b87a:	4642      	mov	r2, r8
 801b87c:	4604      	mov	r4, r0
 801b87e:	460d      	mov	r5, r1
 801b880:	465b      	mov	r3, fp
 801b882:	4640      	mov	r0, r8
 801b884:	4659      	mov	r1, fp
 801b886:	f7e4 fd01 	bl	800028c <__adddf3>
 801b88a:	4602      	mov	r2, r0
 801b88c:	460b      	mov	r3, r1
 801b88e:	a10a      	add	r1, pc, #40	@ (adr r1, 801b8b8 <__ieee754_asin+0x400>)
 801b890:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b894:	f7e4 fcf8 	bl	8000288 <__aeabi_dsub>
 801b898:	4602      	mov	r2, r0
 801b89a:	460b      	mov	r3, r1
 801b89c:	4620      	mov	r0, r4
 801b89e:	4629      	mov	r1, r5
 801b8a0:	f7e4 fcf2 	bl	8000288 <__aeabi_dsub>
 801b8a4:	4602      	mov	r2, r0
 801b8a6:	460b      	mov	r3, r1
 801b8a8:	a103      	add	r1, pc, #12	@ (adr r1, 801b8b8 <__ieee754_asin+0x400>)
 801b8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8ae:	e6e2      	b.n	801b676 <__ieee754_asin+0x1be>
 801b8b0:	33145c07 	.word	0x33145c07
 801b8b4:	3c91a626 	.word	0x3c91a626
 801b8b8:	54442d18 	.word	0x54442d18
 801b8bc:	3fe921fb 	.word	0x3fe921fb

0801b8c0 <__ieee754_atan2>:
 801b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8c4:	ec57 6b11 	vmov	r6, r7, d1
 801b8c8:	4273      	negs	r3, r6
 801b8ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801ba48 <__ieee754_atan2+0x188>
 801b8ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801b8d2:	4333      	orrs	r3, r6
 801b8d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b8d8:	4543      	cmp	r3, r8
 801b8da:	ec51 0b10 	vmov	r0, r1, d0
 801b8de:	4635      	mov	r5, r6
 801b8e0:	d809      	bhi.n	801b8f6 <__ieee754_atan2+0x36>
 801b8e2:	4244      	negs	r4, r0
 801b8e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b8e8:	4304      	orrs	r4, r0
 801b8ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b8ee:	4544      	cmp	r4, r8
 801b8f0:	468e      	mov	lr, r1
 801b8f2:	4681      	mov	r9, r0
 801b8f4:	d907      	bls.n	801b906 <__ieee754_atan2+0x46>
 801b8f6:	4632      	mov	r2, r6
 801b8f8:	463b      	mov	r3, r7
 801b8fa:	f7e4 fcc7 	bl	800028c <__adddf3>
 801b8fe:	ec41 0b10 	vmov	d0, r0, r1
 801b902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b906:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801b90a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801b90e:	4334      	orrs	r4, r6
 801b910:	d103      	bne.n	801b91a <__ieee754_atan2+0x5a>
 801b912:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b916:	f7fe be77 	b.w	801a608 <atan>
 801b91a:	17bc      	asrs	r4, r7, #30
 801b91c:	f004 0402 	and.w	r4, r4, #2
 801b920:	ea53 0909 	orrs.w	r9, r3, r9
 801b924:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b928:	d107      	bne.n	801b93a <__ieee754_atan2+0x7a>
 801b92a:	2c02      	cmp	r4, #2
 801b92c:	d05f      	beq.n	801b9ee <__ieee754_atan2+0x12e>
 801b92e:	2c03      	cmp	r4, #3
 801b930:	d1e5      	bne.n	801b8fe <__ieee754_atan2+0x3e>
 801b932:	a143      	add	r1, pc, #268	@ (adr r1, 801ba40 <__ieee754_atan2+0x180>)
 801b934:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b938:	e7e1      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b93a:	4315      	orrs	r5, r2
 801b93c:	d106      	bne.n	801b94c <__ieee754_atan2+0x8c>
 801b93e:	f1be 0f00 	cmp.w	lr, #0
 801b942:	db5f      	blt.n	801ba04 <__ieee754_atan2+0x144>
 801b944:	a136      	add	r1, pc, #216	@ (adr r1, 801ba20 <__ieee754_atan2+0x160>)
 801b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b94a:	e7d8      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b94c:	4542      	cmp	r2, r8
 801b94e:	d10f      	bne.n	801b970 <__ieee754_atan2+0xb0>
 801b950:	4293      	cmp	r3, r2
 801b952:	f104 34ff 	add.w	r4, r4, #4294967295
 801b956:	d107      	bne.n	801b968 <__ieee754_atan2+0xa8>
 801b958:	2c02      	cmp	r4, #2
 801b95a:	d84c      	bhi.n	801b9f6 <__ieee754_atan2+0x136>
 801b95c:	4b36      	ldr	r3, [pc, #216]	@ (801ba38 <__ieee754_atan2+0x178>)
 801b95e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b962:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b966:	e7ca      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b968:	2c02      	cmp	r4, #2
 801b96a:	d848      	bhi.n	801b9fe <__ieee754_atan2+0x13e>
 801b96c:	4b33      	ldr	r3, [pc, #204]	@ (801ba3c <__ieee754_atan2+0x17c>)
 801b96e:	e7f6      	b.n	801b95e <__ieee754_atan2+0x9e>
 801b970:	4543      	cmp	r3, r8
 801b972:	d0e4      	beq.n	801b93e <__ieee754_atan2+0x7e>
 801b974:	1a9b      	subs	r3, r3, r2
 801b976:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801b97a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b97e:	da1e      	bge.n	801b9be <__ieee754_atan2+0xfe>
 801b980:	2f00      	cmp	r7, #0
 801b982:	da01      	bge.n	801b988 <__ieee754_atan2+0xc8>
 801b984:	323c      	adds	r2, #60	@ 0x3c
 801b986:	db1e      	blt.n	801b9c6 <__ieee754_atan2+0x106>
 801b988:	4632      	mov	r2, r6
 801b98a:	463b      	mov	r3, r7
 801b98c:	f7e4 ff5e 	bl	800084c <__aeabi_ddiv>
 801b990:	ec41 0b10 	vmov	d0, r0, r1
 801b994:	f7ff f824 	bl	801a9e0 <fabs>
 801b998:	f7fe fe36 	bl	801a608 <atan>
 801b99c:	ec51 0b10 	vmov	r0, r1, d0
 801b9a0:	2c01      	cmp	r4, #1
 801b9a2:	d013      	beq.n	801b9cc <__ieee754_atan2+0x10c>
 801b9a4:	2c02      	cmp	r4, #2
 801b9a6:	d015      	beq.n	801b9d4 <__ieee754_atan2+0x114>
 801b9a8:	2c00      	cmp	r4, #0
 801b9aa:	d0a8      	beq.n	801b8fe <__ieee754_atan2+0x3e>
 801b9ac:	a318      	add	r3, pc, #96	@ (adr r3, 801ba10 <__ieee754_atan2+0x150>)
 801b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b2:	f7e4 fc69 	bl	8000288 <__aeabi_dsub>
 801b9b6:	a318      	add	r3, pc, #96	@ (adr r3, 801ba18 <__ieee754_atan2+0x158>)
 801b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9bc:	e014      	b.n	801b9e8 <__ieee754_atan2+0x128>
 801b9be:	a118      	add	r1, pc, #96	@ (adr r1, 801ba20 <__ieee754_atan2+0x160>)
 801b9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9c4:	e7ec      	b.n	801b9a0 <__ieee754_atan2+0xe0>
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	2100      	movs	r1, #0
 801b9ca:	e7e9      	b.n	801b9a0 <__ieee754_atan2+0xe0>
 801b9cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b9d0:	4619      	mov	r1, r3
 801b9d2:	e794      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b9d4:	a30e      	add	r3, pc, #56	@ (adr r3, 801ba10 <__ieee754_atan2+0x150>)
 801b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9da:	f7e4 fc55 	bl	8000288 <__aeabi_dsub>
 801b9de:	4602      	mov	r2, r0
 801b9e0:	460b      	mov	r3, r1
 801b9e2:	a10d      	add	r1, pc, #52	@ (adr r1, 801ba18 <__ieee754_atan2+0x158>)
 801b9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9e8:	f7e4 fc4e 	bl	8000288 <__aeabi_dsub>
 801b9ec:	e787      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b9ee:	a10a      	add	r1, pc, #40	@ (adr r1, 801ba18 <__ieee754_atan2+0x158>)
 801b9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9f4:	e783      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b9f6:	a10c      	add	r1, pc, #48	@ (adr r1, 801ba28 <__ieee754_atan2+0x168>)
 801b9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9fc:	e77f      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801b9fe:	2000      	movs	r0, #0
 801ba00:	2100      	movs	r1, #0
 801ba02:	e77c      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801ba04:	a10a      	add	r1, pc, #40	@ (adr r1, 801ba30 <__ieee754_atan2+0x170>)
 801ba06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba0a:	e778      	b.n	801b8fe <__ieee754_atan2+0x3e>
 801ba0c:	f3af 8000 	nop.w
 801ba10:	33145c07 	.word	0x33145c07
 801ba14:	3ca1a626 	.word	0x3ca1a626
 801ba18:	54442d18 	.word	0x54442d18
 801ba1c:	400921fb 	.word	0x400921fb
 801ba20:	54442d18 	.word	0x54442d18
 801ba24:	3ff921fb 	.word	0x3ff921fb
 801ba28:	54442d18 	.word	0x54442d18
 801ba2c:	3fe921fb 	.word	0x3fe921fb
 801ba30:	54442d18 	.word	0x54442d18
 801ba34:	bff921fb 	.word	0xbff921fb
 801ba38:	0801d978 	.word	0x0801d978
 801ba3c:	0801d960 	.word	0x0801d960
 801ba40:	54442d18 	.word	0x54442d18
 801ba44:	c00921fb 	.word	0xc00921fb
 801ba48:	7ff00000 	.word	0x7ff00000

0801ba4c <__ieee754_hypot>:
 801ba4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba50:	ec53 2b10 	vmov	r2, r3, d0
 801ba54:	ec51 0b11 	vmov	r0, r1, d1
 801ba58:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801ba5c:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 801ba60:	42ac      	cmp	r4, r5
 801ba62:	b087      	sub	sp, #28
 801ba64:	db05      	blt.n	801ba72 <__ieee754_hypot+0x26>
 801ba66:	462e      	mov	r6, r5
 801ba68:	4625      	mov	r5, r4
 801ba6a:	4634      	mov	r4, r6
 801ba6c:	4606      	mov	r6, r0
 801ba6e:	4610      	mov	r0, r2
 801ba70:	4632      	mov	r2, r6
 801ba72:	1b2b      	subs	r3, r5, r4
 801ba74:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 801ba78:	4629      	mov	r1, r5
 801ba7a:	4682      	mov	sl, r0
 801ba7c:	46ab      	mov	fp, r5
 801ba7e:	4616      	mov	r6, r2
 801ba80:	4627      	mov	r7, r4
 801ba82:	dd05      	ble.n	801ba90 <__ieee754_hypot+0x44>
 801ba84:	4623      	mov	r3, r4
 801ba86:	f7e4 fc01 	bl	800028c <__adddf3>
 801ba8a:	4682      	mov	sl, r0
 801ba8c:	468b      	mov	fp, r1
 801ba8e:	e016      	b.n	801babe <__ieee754_hypot+0x72>
 801ba90:	4b75      	ldr	r3, [pc, #468]	@ (801bc68 <__ieee754_hypot+0x21c>)
 801ba92:	429d      	cmp	r5, r3
 801ba94:	f340 8096 	ble.w	801bbc4 <__ieee754_hypot+0x178>
 801ba98:	4b74      	ldr	r3, [pc, #464]	@ (801bc6c <__ieee754_hypot+0x220>)
 801ba9a:	429d      	cmp	r5, r3
 801ba9c:	dd14      	ble.n	801bac8 <__ieee754_hypot+0x7c>
 801ba9e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801baa2:	4305      	orrs	r5, r0
 801baa4:	d004      	beq.n	801bab0 <__ieee754_hypot+0x64>
 801baa6:	4623      	mov	r3, r4
 801baa8:	f7e4 fbf0 	bl	800028c <__adddf3>
 801baac:	4682      	mov	sl, r0
 801baae:	468b      	mov	fp, r1
 801bab0:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 801bab4:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 801bab8:	4334      	orrs	r4, r6
 801baba:	f000 80d2 	beq.w	801bc62 <__ieee754_hypot+0x216>
 801babe:	ec4b ab10 	vmov	d0, sl, fp
 801bac2:	b007      	add	sp, #28
 801bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bac8:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801bacc:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 801bad0:	46ab      	mov	fp, r5
 801bad2:	4627      	mov	r7, r4
 801bad4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801bad8:	9301      	str	r3, [sp, #4]
 801bada:	4b65      	ldr	r3, [pc, #404]	@ (801bc70 <__ieee754_hypot+0x224>)
 801badc:	429c      	cmp	r4, r3
 801bade:	dc19      	bgt.n	801bb14 <__ieee754_hypot+0xc8>
 801bae0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 801bae4:	da70      	bge.n	801bbc8 <__ieee754_hypot+0x17c>
 801bae6:	4633      	mov	r3, r6
 801bae8:	4323      	orrs	r3, r4
 801baea:	d0e8      	beq.n	801babe <__ieee754_hypot+0x72>
 801baec:	4b61      	ldr	r3, [pc, #388]	@ (801bc74 <__ieee754_hypot+0x228>)
 801baee:	2200      	movs	r2, #0
 801baf0:	4630      	mov	r0, r6
 801baf2:	4639      	mov	r1, r7
 801baf4:	f7e4 fd80 	bl	80005f8 <__aeabi_dmul>
 801baf8:	4b5e      	ldr	r3, [pc, #376]	@ (801bc74 <__ieee754_hypot+0x228>)
 801bafa:	4606      	mov	r6, r0
 801bafc:	460f      	mov	r7, r1
 801bafe:	4650      	mov	r0, sl
 801bb00:	4659      	mov	r1, fp
 801bb02:	2200      	movs	r2, #0
 801bb04:	f7e4 fd78 	bl	80005f8 <__aeabi_dmul>
 801bb08:	9b01      	ldr	r3, [sp, #4]
 801bb0a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801bb0e:	4682      	mov	sl, r0
 801bb10:	468b      	mov	fp, r1
 801bb12:	9301      	str	r3, [sp, #4]
 801bb14:	4632      	mov	r2, r6
 801bb16:	463b      	mov	r3, r7
 801bb18:	4650      	mov	r0, sl
 801bb1a:	4659      	mov	r1, fp
 801bb1c:	f7e4 fbb4 	bl	8000288 <__aeabi_dsub>
 801bb20:	4602      	mov	r2, r0
 801bb22:	460b      	mov	r3, r1
 801bb24:	4680      	mov	r8, r0
 801bb26:	4689      	mov	r9, r1
 801bb28:	4630      	mov	r0, r6
 801bb2a:	4639      	mov	r1, r7
 801bb2c:	f7e4 ffd6 	bl	8000adc <__aeabi_dcmplt>
 801bb30:	2200      	movs	r2, #0
 801bb32:	2800      	cmp	r0, #0
 801bb34:	d053      	beq.n	801bbde <__ieee754_hypot+0x192>
 801bb36:	462b      	mov	r3, r5
 801bb38:	4610      	mov	r0, r2
 801bb3a:	4629      	mov	r1, r5
 801bb3c:	4614      	mov	r4, r2
 801bb3e:	f7e4 fd5b 	bl	80005f8 <__aeabi_dmul>
 801bb42:	4632      	mov	r2, r6
 801bb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb48:	463b      	mov	r3, r7
 801bb4a:	4630      	mov	r0, r6
 801bb4c:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 801bb50:	f7e4 fd52 	bl	80005f8 <__aeabi_dmul>
 801bb54:	4622      	mov	r2, r4
 801bb56:	4606      	mov	r6, r0
 801bb58:	460f      	mov	r7, r1
 801bb5a:	462b      	mov	r3, r5
 801bb5c:	4650      	mov	r0, sl
 801bb5e:	4659      	mov	r1, fp
 801bb60:	f7e4 fb94 	bl	800028c <__adddf3>
 801bb64:	4622      	mov	r2, r4
 801bb66:	4680      	mov	r8, r0
 801bb68:	4689      	mov	r9, r1
 801bb6a:	462b      	mov	r3, r5
 801bb6c:	4650      	mov	r0, sl
 801bb6e:	4659      	mov	r1, fp
 801bb70:	f7e4 fb8a 	bl	8000288 <__aeabi_dsub>
 801bb74:	4602      	mov	r2, r0
 801bb76:	460b      	mov	r3, r1
 801bb78:	4640      	mov	r0, r8
 801bb7a:	4649      	mov	r1, r9
 801bb7c:	f7e4 fd3c 	bl	80005f8 <__aeabi_dmul>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4630      	mov	r0, r6
 801bb86:	4639      	mov	r1, r7
 801bb88:	f7e4 fb7e 	bl	8000288 <__aeabi_dsub>
 801bb8c:	4602      	mov	r2, r0
 801bb8e:	460b      	mov	r3, r1
 801bb90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb94:	f7e4 fb78 	bl	8000288 <__aeabi_dsub>
 801bb98:	ec41 0b10 	vmov	d0, r0, r1
 801bb9c:	f7fe ff90 	bl	801aac0 <__ieee754_sqrt>
 801bba0:	9b01      	ldr	r3, [sp, #4]
 801bba2:	ec5b ab10 	vmov	sl, fp, d0
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d089      	beq.n	801babe <__ieee754_hypot+0x72>
 801bbaa:	051b      	lsls	r3, r3, #20
 801bbac:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801bbb0:	2000      	movs	r0, #0
 801bbb2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801bbb6:	4602      	mov	r2, r0
 801bbb8:	460b      	mov	r3, r1
 801bbba:	4650      	mov	r0, sl
 801bbbc:	4659      	mov	r1, fp
 801bbbe:	f7e4 fd1b 	bl	80005f8 <__aeabi_dmul>
 801bbc2:	e762      	b.n	801ba8a <__ieee754_hypot+0x3e>
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	e787      	b.n	801bad8 <__ieee754_hypot+0x8c>
 801bbc8:	9b01      	ldr	r3, [sp, #4]
 801bbca:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 801bbce:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801bbd2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801bbd6:	9301      	str	r3, [sp, #4]
 801bbd8:	46ab      	mov	fp, r5
 801bbda:	4627      	mov	r7, r4
 801bbdc:	e79a      	b.n	801bb14 <__ieee754_hypot+0xc8>
 801bbde:	4623      	mov	r3, r4
 801bbe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bbe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbe8:	2200      	movs	r2, #0
 801bbea:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801bbee:	4614      	mov	r4, r2
 801bbf0:	461d      	mov	r5, r3
 801bbf2:	f7e4 fd01 	bl	80005f8 <__aeabi_dmul>
 801bbf6:	4642      	mov	r2, r8
 801bbf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bbfc:	464b      	mov	r3, r9
 801bbfe:	4640      	mov	r0, r8
 801bc00:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 801bc04:	f7e4 fcf8 	bl	80005f8 <__aeabi_dmul>
 801bc08:	4652      	mov	r2, sl
 801bc0a:	465b      	mov	r3, fp
 801bc0c:	4680      	mov	r8, r0
 801bc0e:	4689      	mov	r9, r1
 801bc10:	4650      	mov	r0, sl
 801bc12:	4659      	mov	r1, fp
 801bc14:	f7e4 fb3a 	bl	800028c <__adddf3>
 801bc18:	4622      	mov	r2, r4
 801bc1a:	462b      	mov	r3, r5
 801bc1c:	f7e4 fb34 	bl	8000288 <__aeabi_dsub>
 801bc20:	4632      	mov	r2, r6
 801bc22:	463b      	mov	r3, r7
 801bc24:	f7e4 fce8 	bl	80005f8 <__aeabi_dmul>
 801bc28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc2c:	4682      	mov	sl, r0
 801bc2e:	468b      	mov	fp, r1
 801bc30:	4630      	mov	r0, r6
 801bc32:	4639      	mov	r1, r7
 801bc34:	f7e4 fb28 	bl	8000288 <__aeabi_dsub>
 801bc38:	4622      	mov	r2, r4
 801bc3a:	462b      	mov	r3, r5
 801bc3c:	f7e4 fcdc 	bl	80005f8 <__aeabi_dmul>
 801bc40:	4602      	mov	r2, r0
 801bc42:	460b      	mov	r3, r1
 801bc44:	4650      	mov	r0, sl
 801bc46:	4659      	mov	r1, fp
 801bc48:	f7e4 fb20 	bl	800028c <__adddf3>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	4640      	mov	r0, r8
 801bc52:	4649      	mov	r1, r9
 801bc54:	f7e4 fb18 	bl	8000288 <__aeabi_dsub>
 801bc58:	4602      	mov	r2, r0
 801bc5a:	460b      	mov	r3, r1
 801bc5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc60:	e798      	b.n	801bb94 <__ieee754_hypot+0x148>
 801bc62:	46b2      	mov	sl, r6
 801bc64:	46bb      	mov	fp, r7
 801bc66:	e72a      	b.n	801babe <__ieee754_hypot+0x72>
 801bc68:	5f300000 	.word	0x5f300000
 801bc6c:	7fefffff 	.word	0x7fefffff
 801bc70:	20afffff 	.word	0x20afffff
 801bc74:	7fd00000 	.word	0x7fd00000

0801bc78 <__ieee754_pow>:
 801bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc7c:	b091      	sub	sp, #68	@ 0x44
 801bc7e:	ed8d 1b00 	vstr	d1, [sp]
 801bc82:	e9dd 1900 	ldrd	r1, r9, [sp]
 801bc86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801bc8a:	ea5a 0001 	orrs.w	r0, sl, r1
 801bc8e:	ec57 6b10 	vmov	r6, r7, d0
 801bc92:	d113      	bne.n	801bcbc <__ieee754_pow+0x44>
 801bc94:	19b3      	adds	r3, r6, r6
 801bc96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801bc9a:	4152      	adcs	r2, r2
 801bc9c:	4298      	cmp	r0, r3
 801bc9e:	4b9a      	ldr	r3, [pc, #616]	@ (801bf08 <__ieee754_pow+0x290>)
 801bca0:	4193      	sbcs	r3, r2
 801bca2:	f080 84ee 	bcs.w	801c682 <__ieee754_pow+0xa0a>
 801bca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcaa:	4630      	mov	r0, r6
 801bcac:	4639      	mov	r1, r7
 801bcae:	f7e4 faed 	bl	800028c <__adddf3>
 801bcb2:	ec41 0b10 	vmov	d0, r0, r1
 801bcb6:	b011      	add	sp, #68	@ 0x44
 801bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcbc:	4a93      	ldr	r2, [pc, #588]	@ (801bf0c <__ieee754_pow+0x294>)
 801bcbe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801bcc2:	4295      	cmp	r5, r2
 801bcc4:	46b8      	mov	r8, r7
 801bcc6:	4633      	mov	r3, r6
 801bcc8:	d80a      	bhi.n	801bce0 <__ieee754_pow+0x68>
 801bcca:	d104      	bne.n	801bcd6 <__ieee754_pow+0x5e>
 801bccc:	2e00      	cmp	r6, #0
 801bcce:	d1ea      	bne.n	801bca6 <__ieee754_pow+0x2e>
 801bcd0:	45aa      	cmp	sl, r5
 801bcd2:	d8e8      	bhi.n	801bca6 <__ieee754_pow+0x2e>
 801bcd4:	e001      	b.n	801bcda <__ieee754_pow+0x62>
 801bcd6:	4592      	cmp	sl, r2
 801bcd8:	d802      	bhi.n	801bce0 <__ieee754_pow+0x68>
 801bcda:	4592      	cmp	sl, r2
 801bcdc:	d10f      	bne.n	801bcfe <__ieee754_pow+0x86>
 801bcde:	b171      	cbz	r1, 801bcfe <__ieee754_pow+0x86>
 801bce0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801bce4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801bce8:	ea58 0803 	orrs.w	r8, r8, r3
 801bcec:	d1db      	bne.n	801bca6 <__ieee754_pow+0x2e>
 801bcee:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bcf2:	18db      	adds	r3, r3, r3
 801bcf4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801bcf8:	4152      	adcs	r2, r2
 801bcfa:	4598      	cmp	r8, r3
 801bcfc:	e7cf      	b.n	801bc9e <__ieee754_pow+0x26>
 801bcfe:	f1b8 0f00 	cmp.w	r8, #0
 801bd02:	46ab      	mov	fp, r5
 801bd04:	da43      	bge.n	801bd8e <__ieee754_pow+0x116>
 801bd06:	4a82      	ldr	r2, [pc, #520]	@ (801bf10 <__ieee754_pow+0x298>)
 801bd08:	4592      	cmp	sl, r2
 801bd0a:	d856      	bhi.n	801bdba <__ieee754_pow+0x142>
 801bd0c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801bd10:	4592      	cmp	sl, r2
 801bd12:	f240 84c5 	bls.w	801c6a0 <__ieee754_pow+0xa28>
 801bd16:	ea4f 522a 	mov.w	r2, sl, asr #20
 801bd1a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801bd1e:	2a14      	cmp	r2, #20
 801bd20:	dd18      	ble.n	801bd54 <__ieee754_pow+0xdc>
 801bd22:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801bd26:	fa21 f402 	lsr.w	r4, r1, r2
 801bd2a:	fa04 f202 	lsl.w	r2, r4, r2
 801bd2e:	428a      	cmp	r2, r1
 801bd30:	f040 84b6 	bne.w	801c6a0 <__ieee754_pow+0xa28>
 801bd34:	f004 0401 	and.w	r4, r4, #1
 801bd38:	f1c4 0402 	rsb	r4, r4, #2
 801bd3c:	2900      	cmp	r1, #0
 801bd3e:	d159      	bne.n	801bdf4 <__ieee754_pow+0x17c>
 801bd40:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801bd44:	d148      	bne.n	801bdd8 <__ieee754_pow+0x160>
 801bd46:	4632      	mov	r2, r6
 801bd48:	463b      	mov	r3, r7
 801bd4a:	4630      	mov	r0, r6
 801bd4c:	4639      	mov	r1, r7
 801bd4e:	f7e4 fc53 	bl	80005f8 <__aeabi_dmul>
 801bd52:	e7ae      	b.n	801bcb2 <__ieee754_pow+0x3a>
 801bd54:	2900      	cmp	r1, #0
 801bd56:	d14c      	bne.n	801bdf2 <__ieee754_pow+0x17a>
 801bd58:	f1c2 0214 	rsb	r2, r2, #20
 801bd5c:	fa4a f402 	asr.w	r4, sl, r2
 801bd60:	fa04 f202 	lsl.w	r2, r4, r2
 801bd64:	4552      	cmp	r2, sl
 801bd66:	f040 8498 	bne.w	801c69a <__ieee754_pow+0xa22>
 801bd6a:	f004 0401 	and.w	r4, r4, #1
 801bd6e:	f1c4 0402 	rsb	r4, r4, #2
 801bd72:	4a68      	ldr	r2, [pc, #416]	@ (801bf14 <__ieee754_pow+0x29c>)
 801bd74:	4592      	cmp	sl, r2
 801bd76:	d1e3      	bne.n	801bd40 <__ieee754_pow+0xc8>
 801bd78:	f1b9 0f00 	cmp.w	r9, #0
 801bd7c:	f280 8489 	bge.w	801c692 <__ieee754_pow+0xa1a>
 801bd80:	4964      	ldr	r1, [pc, #400]	@ (801bf14 <__ieee754_pow+0x29c>)
 801bd82:	4632      	mov	r2, r6
 801bd84:	463b      	mov	r3, r7
 801bd86:	2000      	movs	r0, #0
 801bd88:	f7e4 fd60 	bl	800084c <__aeabi_ddiv>
 801bd8c:	e791      	b.n	801bcb2 <__ieee754_pow+0x3a>
 801bd8e:	2400      	movs	r4, #0
 801bd90:	bb81      	cbnz	r1, 801bdf4 <__ieee754_pow+0x17c>
 801bd92:	4a5e      	ldr	r2, [pc, #376]	@ (801bf0c <__ieee754_pow+0x294>)
 801bd94:	4592      	cmp	sl, r2
 801bd96:	d1ec      	bne.n	801bd72 <__ieee754_pow+0xfa>
 801bd98:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801bd9c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801bda0:	431a      	orrs	r2, r3
 801bda2:	f000 846e 	beq.w	801c682 <__ieee754_pow+0xa0a>
 801bda6:	4b5c      	ldr	r3, [pc, #368]	@ (801bf18 <__ieee754_pow+0x2a0>)
 801bda8:	429d      	cmp	r5, r3
 801bdaa:	d908      	bls.n	801bdbe <__ieee754_pow+0x146>
 801bdac:	f1b9 0f00 	cmp.w	r9, #0
 801bdb0:	f280 846b 	bge.w	801c68a <__ieee754_pow+0xa12>
 801bdb4:	2000      	movs	r0, #0
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	e77b      	b.n	801bcb2 <__ieee754_pow+0x3a>
 801bdba:	2402      	movs	r4, #2
 801bdbc:	e7e8      	b.n	801bd90 <__ieee754_pow+0x118>
 801bdbe:	f1b9 0f00 	cmp.w	r9, #0
 801bdc2:	f04f 0000 	mov.w	r0, #0
 801bdc6:	f04f 0100 	mov.w	r1, #0
 801bdca:	f6bf af72 	bge.w	801bcb2 <__ieee754_pow+0x3a>
 801bdce:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bdd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bdd6:	e76c      	b.n	801bcb2 <__ieee754_pow+0x3a>
 801bdd8:	4a50      	ldr	r2, [pc, #320]	@ (801bf1c <__ieee754_pow+0x2a4>)
 801bdda:	4591      	cmp	r9, r2
 801bddc:	d10a      	bne.n	801bdf4 <__ieee754_pow+0x17c>
 801bdde:	f1b8 0f00 	cmp.w	r8, #0
 801bde2:	db07      	blt.n	801bdf4 <__ieee754_pow+0x17c>
 801bde4:	ec47 6b10 	vmov	d0, r6, r7
 801bde8:	b011      	add	sp, #68	@ 0x44
 801bdea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdee:	f7fe be67 	b.w	801aac0 <__ieee754_sqrt>
 801bdf2:	2400      	movs	r4, #0
 801bdf4:	ec47 6b10 	vmov	d0, r6, r7
 801bdf8:	9302      	str	r3, [sp, #8]
 801bdfa:	f7fe fdf1 	bl	801a9e0 <fabs>
 801bdfe:	9b02      	ldr	r3, [sp, #8]
 801be00:	ec51 0b10 	vmov	r0, r1, d0
 801be04:	bb43      	cbnz	r3, 801be58 <__ieee754_pow+0x1e0>
 801be06:	4b43      	ldr	r3, [pc, #268]	@ (801bf14 <__ieee754_pow+0x29c>)
 801be08:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801be0c:	429a      	cmp	r2, r3
 801be0e:	d000      	beq.n	801be12 <__ieee754_pow+0x19a>
 801be10:	bb15      	cbnz	r5, 801be58 <__ieee754_pow+0x1e0>
 801be12:	f1b9 0f00 	cmp.w	r9, #0
 801be16:	da05      	bge.n	801be24 <__ieee754_pow+0x1ac>
 801be18:	4602      	mov	r2, r0
 801be1a:	460b      	mov	r3, r1
 801be1c:	2000      	movs	r0, #0
 801be1e:	493d      	ldr	r1, [pc, #244]	@ (801bf14 <__ieee754_pow+0x29c>)
 801be20:	f7e4 fd14 	bl	800084c <__aeabi_ddiv>
 801be24:	f1b8 0f00 	cmp.w	r8, #0
 801be28:	f6bf af43 	bge.w	801bcb2 <__ieee754_pow+0x3a>
 801be2c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801be30:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801be34:	4325      	orrs	r5, r4
 801be36:	d108      	bne.n	801be4a <__ieee754_pow+0x1d2>
 801be38:	4602      	mov	r2, r0
 801be3a:	460b      	mov	r3, r1
 801be3c:	4610      	mov	r0, r2
 801be3e:	4619      	mov	r1, r3
 801be40:	f7e4 fa22 	bl	8000288 <__aeabi_dsub>
 801be44:	4602      	mov	r2, r0
 801be46:	460b      	mov	r3, r1
 801be48:	e79e      	b.n	801bd88 <__ieee754_pow+0x110>
 801be4a:	2c01      	cmp	r4, #1
 801be4c:	f47f af31 	bne.w	801bcb2 <__ieee754_pow+0x3a>
 801be50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801be54:	4619      	mov	r1, r3
 801be56:	e72c      	b.n	801bcb2 <__ieee754_pow+0x3a>
 801be58:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801be5c:	3b01      	subs	r3, #1
 801be5e:	ea53 0204 	orrs.w	r2, r3, r4
 801be62:	d102      	bne.n	801be6a <__ieee754_pow+0x1f2>
 801be64:	4632      	mov	r2, r6
 801be66:	463b      	mov	r3, r7
 801be68:	e7e8      	b.n	801be3c <__ieee754_pow+0x1c4>
 801be6a:	3c01      	subs	r4, #1
 801be6c:	431c      	orrs	r4, r3
 801be6e:	d016      	beq.n	801be9e <__ieee754_pow+0x226>
 801be70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801bef8 <__ieee754_pow+0x280>
 801be74:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801be78:	ed8d 7b02 	vstr	d7, [sp, #8]
 801be7c:	f240 8110 	bls.w	801c0a0 <__ieee754_pow+0x428>
 801be80:	4b27      	ldr	r3, [pc, #156]	@ (801bf20 <__ieee754_pow+0x2a8>)
 801be82:	459a      	cmp	sl, r3
 801be84:	4b24      	ldr	r3, [pc, #144]	@ (801bf18 <__ieee754_pow+0x2a0>)
 801be86:	d916      	bls.n	801beb6 <__ieee754_pow+0x23e>
 801be88:	429d      	cmp	r5, r3
 801be8a:	d80b      	bhi.n	801bea4 <__ieee754_pow+0x22c>
 801be8c:	f1b9 0f00 	cmp.w	r9, #0
 801be90:	da0b      	bge.n	801beaa <__ieee754_pow+0x232>
 801be92:	2000      	movs	r0, #0
 801be94:	b011      	add	sp, #68	@ 0x44
 801be96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be9a:	f000 bee5 	b.w	801cc68 <__math_oflow>
 801be9e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 801bf00 <__ieee754_pow+0x288>
 801bea2:	e7e7      	b.n	801be74 <__ieee754_pow+0x1fc>
 801bea4:	f1b9 0f00 	cmp.w	r9, #0
 801bea8:	dcf3      	bgt.n	801be92 <__ieee754_pow+0x21a>
 801beaa:	2000      	movs	r0, #0
 801beac:	b011      	add	sp, #68	@ 0x44
 801beae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb2:	f000 bed1 	b.w	801cc58 <__math_uflow>
 801beb6:	429d      	cmp	r5, r3
 801beb8:	d20c      	bcs.n	801bed4 <__ieee754_pow+0x25c>
 801beba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bebe:	2200      	movs	r2, #0
 801bec0:	2300      	movs	r3, #0
 801bec2:	f7e4 fe0b 	bl	8000adc <__aeabi_dcmplt>
 801bec6:	3800      	subs	r0, #0
 801bec8:	bf18      	it	ne
 801beca:	2001      	movne	r0, #1
 801becc:	f1b9 0f00 	cmp.w	r9, #0
 801bed0:	daec      	bge.n	801beac <__ieee754_pow+0x234>
 801bed2:	e7df      	b.n	801be94 <__ieee754_pow+0x21c>
 801bed4:	4b0f      	ldr	r3, [pc, #60]	@ (801bf14 <__ieee754_pow+0x29c>)
 801bed6:	429d      	cmp	r5, r3
 801bed8:	f04f 0200 	mov.w	r2, #0
 801bedc:	d922      	bls.n	801bf24 <__ieee754_pow+0x2ac>
 801bede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bee2:	2300      	movs	r3, #0
 801bee4:	f7e4 fdfa 	bl	8000adc <__aeabi_dcmplt>
 801bee8:	3800      	subs	r0, #0
 801beea:	bf18      	it	ne
 801beec:	2001      	movne	r0, #1
 801beee:	f1b9 0f00 	cmp.w	r9, #0
 801bef2:	dccf      	bgt.n	801be94 <__ieee754_pow+0x21c>
 801bef4:	e7da      	b.n	801beac <__ieee754_pow+0x234>
 801bef6:	bf00      	nop
 801bef8:	00000000 	.word	0x00000000
 801befc:	3ff00000 	.word	0x3ff00000
 801bf00:	00000000 	.word	0x00000000
 801bf04:	bff00000 	.word	0xbff00000
 801bf08:	fff00000 	.word	0xfff00000
 801bf0c:	7ff00000 	.word	0x7ff00000
 801bf10:	433fffff 	.word	0x433fffff
 801bf14:	3ff00000 	.word	0x3ff00000
 801bf18:	3fefffff 	.word	0x3fefffff
 801bf1c:	3fe00000 	.word	0x3fe00000
 801bf20:	43f00000 	.word	0x43f00000
 801bf24:	4b5a      	ldr	r3, [pc, #360]	@ (801c090 <__ieee754_pow+0x418>)
 801bf26:	f7e4 f9af 	bl	8000288 <__aeabi_dsub>
 801bf2a:	a351      	add	r3, pc, #324	@ (adr r3, 801c070 <__ieee754_pow+0x3f8>)
 801bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf30:	4604      	mov	r4, r0
 801bf32:	460d      	mov	r5, r1
 801bf34:	f7e4 fb60 	bl	80005f8 <__aeabi_dmul>
 801bf38:	a34f      	add	r3, pc, #316	@ (adr r3, 801c078 <__ieee754_pow+0x400>)
 801bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf3e:	4606      	mov	r6, r0
 801bf40:	460f      	mov	r7, r1
 801bf42:	4620      	mov	r0, r4
 801bf44:	4629      	mov	r1, r5
 801bf46:	f7e4 fb57 	bl	80005f8 <__aeabi_dmul>
 801bf4a:	4b52      	ldr	r3, [pc, #328]	@ (801c094 <__ieee754_pow+0x41c>)
 801bf4c:	4682      	mov	sl, r0
 801bf4e:	468b      	mov	fp, r1
 801bf50:	2200      	movs	r2, #0
 801bf52:	4620      	mov	r0, r4
 801bf54:	4629      	mov	r1, r5
 801bf56:	f7e4 fb4f 	bl	80005f8 <__aeabi_dmul>
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	460b      	mov	r3, r1
 801bf5e:	a148      	add	r1, pc, #288	@ (adr r1, 801c080 <__ieee754_pow+0x408>)
 801bf60:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf64:	f7e4 f990 	bl	8000288 <__aeabi_dsub>
 801bf68:	4622      	mov	r2, r4
 801bf6a:	462b      	mov	r3, r5
 801bf6c:	f7e4 fb44 	bl	80005f8 <__aeabi_dmul>
 801bf70:	4602      	mov	r2, r0
 801bf72:	460b      	mov	r3, r1
 801bf74:	2000      	movs	r0, #0
 801bf76:	4948      	ldr	r1, [pc, #288]	@ (801c098 <__ieee754_pow+0x420>)
 801bf78:	f7e4 f986 	bl	8000288 <__aeabi_dsub>
 801bf7c:	4622      	mov	r2, r4
 801bf7e:	4680      	mov	r8, r0
 801bf80:	4689      	mov	r9, r1
 801bf82:	462b      	mov	r3, r5
 801bf84:	4620      	mov	r0, r4
 801bf86:	4629      	mov	r1, r5
 801bf88:	f7e4 fb36 	bl	80005f8 <__aeabi_dmul>
 801bf8c:	4602      	mov	r2, r0
 801bf8e:	460b      	mov	r3, r1
 801bf90:	4640      	mov	r0, r8
 801bf92:	4649      	mov	r1, r9
 801bf94:	f7e4 fb30 	bl	80005f8 <__aeabi_dmul>
 801bf98:	a33b      	add	r3, pc, #236	@ (adr r3, 801c088 <__ieee754_pow+0x410>)
 801bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9e:	f7e4 fb2b 	bl	80005f8 <__aeabi_dmul>
 801bfa2:	4602      	mov	r2, r0
 801bfa4:	460b      	mov	r3, r1
 801bfa6:	4650      	mov	r0, sl
 801bfa8:	4659      	mov	r1, fp
 801bfaa:	f7e4 f96d 	bl	8000288 <__aeabi_dsub>
 801bfae:	4602      	mov	r2, r0
 801bfb0:	460b      	mov	r3, r1
 801bfb2:	4680      	mov	r8, r0
 801bfb4:	4689      	mov	r9, r1
 801bfb6:	4630      	mov	r0, r6
 801bfb8:	4639      	mov	r1, r7
 801bfba:	f7e4 f967 	bl	800028c <__adddf3>
 801bfbe:	2400      	movs	r4, #0
 801bfc0:	4632      	mov	r2, r6
 801bfc2:	463b      	mov	r3, r7
 801bfc4:	4620      	mov	r0, r4
 801bfc6:	460d      	mov	r5, r1
 801bfc8:	f7e4 f95e 	bl	8000288 <__aeabi_dsub>
 801bfcc:	4602      	mov	r2, r0
 801bfce:	460b      	mov	r3, r1
 801bfd0:	4640      	mov	r0, r8
 801bfd2:	4649      	mov	r1, r9
 801bfd4:	f7e4 f958 	bl	8000288 <__aeabi_dsub>
 801bfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	9304      	str	r3, [sp, #16]
 801bfe4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bfe8:	4606      	mov	r6, r0
 801bfea:	460f      	mov	r7, r1
 801bfec:	465b      	mov	r3, fp
 801bfee:	4652      	mov	r2, sl
 801bff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bff4:	f7e4 f948 	bl	8000288 <__aeabi_dsub>
 801bff8:	4622      	mov	r2, r4
 801bffa:	462b      	mov	r3, r5
 801bffc:	f7e4 fafc 	bl	80005f8 <__aeabi_dmul>
 801c000:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c004:	4680      	mov	r8, r0
 801c006:	4689      	mov	r9, r1
 801c008:	4630      	mov	r0, r6
 801c00a:	4639      	mov	r1, r7
 801c00c:	f7e4 faf4 	bl	80005f8 <__aeabi_dmul>
 801c010:	4602      	mov	r2, r0
 801c012:	460b      	mov	r3, r1
 801c014:	4640      	mov	r0, r8
 801c016:	4649      	mov	r1, r9
 801c018:	f7e4 f938 	bl	800028c <__adddf3>
 801c01c:	465b      	mov	r3, fp
 801c01e:	4606      	mov	r6, r0
 801c020:	460f      	mov	r7, r1
 801c022:	4652      	mov	r2, sl
 801c024:	4620      	mov	r0, r4
 801c026:	4629      	mov	r1, r5
 801c028:	f7e4 fae6 	bl	80005f8 <__aeabi_dmul>
 801c02c:	460b      	mov	r3, r1
 801c02e:	4602      	mov	r2, r0
 801c030:	4680      	mov	r8, r0
 801c032:	4689      	mov	r9, r1
 801c034:	4630      	mov	r0, r6
 801c036:	4639      	mov	r1, r7
 801c038:	f7e4 f928 	bl	800028c <__adddf3>
 801c03c:	4b17      	ldr	r3, [pc, #92]	@ (801c09c <__ieee754_pow+0x424>)
 801c03e:	4299      	cmp	r1, r3
 801c040:	4604      	mov	r4, r0
 801c042:	460d      	mov	r5, r1
 801c044:	468b      	mov	fp, r1
 801c046:	f340 820b 	ble.w	801c460 <__ieee754_pow+0x7e8>
 801c04a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801c04e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801c052:	4303      	orrs	r3, r0
 801c054:	f000 81ea 	beq.w	801c42c <__ieee754_pow+0x7b4>
 801c058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c05c:	2200      	movs	r2, #0
 801c05e:	2300      	movs	r3, #0
 801c060:	f7e4 fd3c 	bl	8000adc <__aeabi_dcmplt>
 801c064:	3800      	subs	r0, #0
 801c066:	bf18      	it	ne
 801c068:	2001      	movne	r0, #1
 801c06a:	e713      	b.n	801be94 <__ieee754_pow+0x21c>
 801c06c:	f3af 8000 	nop.w
 801c070:	60000000 	.word	0x60000000
 801c074:	3ff71547 	.word	0x3ff71547
 801c078:	f85ddf44 	.word	0xf85ddf44
 801c07c:	3e54ae0b 	.word	0x3e54ae0b
 801c080:	55555555 	.word	0x55555555
 801c084:	3fd55555 	.word	0x3fd55555
 801c088:	652b82fe 	.word	0x652b82fe
 801c08c:	3ff71547 	.word	0x3ff71547
 801c090:	3ff00000 	.word	0x3ff00000
 801c094:	3fd00000 	.word	0x3fd00000
 801c098:	3fe00000 	.word	0x3fe00000
 801c09c:	408fffff 	.word	0x408fffff
 801c0a0:	4bd5      	ldr	r3, [pc, #852]	@ (801c3f8 <__ieee754_pow+0x780>)
 801c0a2:	ea08 0303 	and.w	r3, r8, r3
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	b92b      	cbnz	r3, 801c0b6 <__ieee754_pow+0x43e>
 801c0aa:	4bd4      	ldr	r3, [pc, #848]	@ (801c3fc <__ieee754_pow+0x784>)
 801c0ac:	f7e4 faa4 	bl	80005f8 <__aeabi_dmul>
 801c0b0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801c0b4:	468b      	mov	fp, r1
 801c0b6:	ea4f 532b 	mov.w	r3, fp, asr #20
 801c0ba:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801c0be:	4413      	add	r3, r2
 801c0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0c2:	4bcf      	ldr	r3, [pc, #828]	@ (801c400 <__ieee754_pow+0x788>)
 801c0c4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801c0c8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801c0cc:	459b      	cmp	fp, r3
 801c0ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c0d2:	dd08      	ble.n	801c0e6 <__ieee754_pow+0x46e>
 801c0d4:	4bcb      	ldr	r3, [pc, #812]	@ (801c404 <__ieee754_pow+0x78c>)
 801c0d6:	459b      	cmp	fp, r3
 801c0d8:	f340 81a5 	ble.w	801c426 <__ieee754_pow+0x7ae>
 801c0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0de:	3301      	adds	r3, #1
 801c0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0e2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801c0e6:	f04f 0a00 	mov.w	sl, #0
 801c0ea:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c0f0:	4bc5      	ldr	r3, [pc, #788]	@ (801c408 <__ieee754_pow+0x790>)
 801c0f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c0f6:	ed93 7b00 	vldr	d7, [r3]
 801c0fa:	4629      	mov	r1, r5
 801c0fc:	ec53 2b17 	vmov	r2, r3, d7
 801c100:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c104:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c108:	f7e4 f8be 	bl	8000288 <__aeabi_dsub>
 801c10c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c110:	4606      	mov	r6, r0
 801c112:	460f      	mov	r7, r1
 801c114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c118:	f7e4 f8b8 	bl	800028c <__adddf3>
 801c11c:	4602      	mov	r2, r0
 801c11e:	460b      	mov	r3, r1
 801c120:	2000      	movs	r0, #0
 801c122:	49ba      	ldr	r1, [pc, #744]	@ (801c40c <__ieee754_pow+0x794>)
 801c124:	f7e4 fb92 	bl	800084c <__aeabi_ddiv>
 801c128:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801c12c:	4602      	mov	r2, r0
 801c12e:	460b      	mov	r3, r1
 801c130:	4630      	mov	r0, r6
 801c132:	4639      	mov	r1, r7
 801c134:	f7e4 fa60 	bl	80005f8 <__aeabi_dmul>
 801c138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c13c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801c140:	106d      	asrs	r5, r5, #1
 801c142:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801c146:	f04f 0b00 	mov.w	fp, #0
 801c14a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801c14e:	4661      	mov	r1, ip
 801c150:	2200      	movs	r2, #0
 801c152:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c156:	4658      	mov	r0, fp
 801c158:	46e1      	mov	r9, ip
 801c15a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801c15e:	4614      	mov	r4, r2
 801c160:	461d      	mov	r5, r3
 801c162:	f7e4 fa49 	bl	80005f8 <__aeabi_dmul>
 801c166:	4602      	mov	r2, r0
 801c168:	460b      	mov	r3, r1
 801c16a:	4630      	mov	r0, r6
 801c16c:	4639      	mov	r1, r7
 801c16e:	f7e4 f88b 	bl	8000288 <__aeabi_dsub>
 801c172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c176:	4606      	mov	r6, r0
 801c178:	460f      	mov	r7, r1
 801c17a:	4620      	mov	r0, r4
 801c17c:	4629      	mov	r1, r5
 801c17e:	f7e4 f883 	bl	8000288 <__aeabi_dsub>
 801c182:	4602      	mov	r2, r0
 801c184:	460b      	mov	r3, r1
 801c186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c18a:	f7e4 f87d 	bl	8000288 <__aeabi_dsub>
 801c18e:	465a      	mov	r2, fp
 801c190:	464b      	mov	r3, r9
 801c192:	f7e4 fa31 	bl	80005f8 <__aeabi_dmul>
 801c196:	4602      	mov	r2, r0
 801c198:	460b      	mov	r3, r1
 801c19a:	4630      	mov	r0, r6
 801c19c:	4639      	mov	r1, r7
 801c19e:	f7e4 f873 	bl	8000288 <__aeabi_dsub>
 801c1a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c1a6:	f7e4 fa27 	bl	80005f8 <__aeabi_dmul>
 801c1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c1b2:	4610      	mov	r0, r2
 801c1b4:	4619      	mov	r1, r3
 801c1b6:	f7e4 fa1f 	bl	80005f8 <__aeabi_dmul>
 801c1ba:	a37d      	add	r3, pc, #500	@ (adr r3, 801c3b0 <__ieee754_pow+0x738>)
 801c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1c0:	4604      	mov	r4, r0
 801c1c2:	460d      	mov	r5, r1
 801c1c4:	f7e4 fa18 	bl	80005f8 <__aeabi_dmul>
 801c1c8:	a37b      	add	r3, pc, #492	@ (adr r3, 801c3b8 <__ieee754_pow+0x740>)
 801c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ce:	f7e4 f85d 	bl	800028c <__adddf3>
 801c1d2:	4622      	mov	r2, r4
 801c1d4:	462b      	mov	r3, r5
 801c1d6:	f7e4 fa0f 	bl	80005f8 <__aeabi_dmul>
 801c1da:	a379      	add	r3, pc, #484	@ (adr r3, 801c3c0 <__ieee754_pow+0x748>)
 801c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e0:	f7e4 f854 	bl	800028c <__adddf3>
 801c1e4:	4622      	mov	r2, r4
 801c1e6:	462b      	mov	r3, r5
 801c1e8:	f7e4 fa06 	bl	80005f8 <__aeabi_dmul>
 801c1ec:	a376      	add	r3, pc, #472	@ (adr r3, 801c3c8 <__ieee754_pow+0x750>)
 801c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f2:	f7e4 f84b 	bl	800028c <__adddf3>
 801c1f6:	4622      	mov	r2, r4
 801c1f8:	462b      	mov	r3, r5
 801c1fa:	f7e4 f9fd 	bl	80005f8 <__aeabi_dmul>
 801c1fe:	a374      	add	r3, pc, #464	@ (adr r3, 801c3d0 <__ieee754_pow+0x758>)
 801c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c204:	f7e4 f842 	bl	800028c <__adddf3>
 801c208:	4622      	mov	r2, r4
 801c20a:	462b      	mov	r3, r5
 801c20c:	f7e4 f9f4 	bl	80005f8 <__aeabi_dmul>
 801c210:	a371      	add	r3, pc, #452	@ (adr r3, 801c3d8 <__ieee754_pow+0x760>)
 801c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c216:	f7e4 f839 	bl	800028c <__adddf3>
 801c21a:	4622      	mov	r2, r4
 801c21c:	4606      	mov	r6, r0
 801c21e:	460f      	mov	r7, r1
 801c220:	462b      	mov	r3, r5
 801c222:	4620      	mov	r0, r4
 801c224:	4629      	mov	r1, r5
 801c226:	f7e4 f9e7 	bl	80005f8 <__aeabi_dmul>
 801c22a:	4602      	mov	r2, r0
 801c22c:	460b      	mov	r3, r1
 801c22e:	4630      	mov	r0, r6
 801c230:	4639      	mov	r1, r7
 801c232:	f7e4 f9e1 	bl	80005f8 <__aeabi_dmul>
 801c236:	465a      	mov	r2, fp
 801c238:	4604      	mov	r4, r0
 801c23a:	460d      	mov	r5, r1
 801c23c:	464b      	mov	r3, r9
 801c23e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c242:	f7e4 f823 	bl	800028c <__adddf3>
 801c246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c24a:	f7e4 f9d5 	bl	80005f8 <__aeabi_dmul>
 801c24e:	4622      	mov	r2, r4
 801c250:	462b      	mov	r3, r5
 801c252:	f7e4 f81b 	bl	800028c <__adddf3>
 801c256:	465a      	mov	r2, fp
 801c258:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c25c:	464b      	mov	r3, r9
 801c25e:	4658      	mov	r0, fp
 801c260:	4649      	mov	r1, r9
 801c262:	f7e4 f9c9 	bl	80005f8 <__aeabi_dmul>
 801c266:	4b6a      	ldr	r3, [pc, #424]	@ (801c410 <__ieee754_pow+0x798>)
 801c268:	2200      	movs	r2, #0
 801c26a:	4606      	mov	r6, r0
 801c26c:	460f      	mov	r7, r1
 801c26e:	f7e4 f80d 	bl	800028c <__adddf3>
 801c272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c276:	f7e4 f809 	bl	800028c <__adddf3>
 801c27a:	46d8      	mov	r8, fp
 801c27c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801c280:	460d      	mov	r5, r1
 801c282:	465a      	mov	r2, fp
 801c284:	460b      	mov	r3, r1
 801c286:	4640      	mov	r0, r8
 801c288:	4649      	mov	r1, r9
 801c28a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801c28e:	f7e4 f9b3 	bl	80005f8 <__aeabi_dmul>
 801c292:	465c      	mov	r4, fp
 801c294:	4680      	mov	r8, r0
 801c296:	4689      	mov	r9, r1
 801c298:	4b5d      	ldr	r3, [pc, #372]	@ (801c410 <__ieee754_pow+0x798>)
 801c29a:	2200      	movs	r2, #0
 801c29c:	4620      	mov	r0, r4
 801c29e:	4629      	mov	r1, r5
 801c2a0:	f7e3 fff2 	bl	8000288 <__aeabi_dsub>
 801c2a4:	4632      	mov	r2, r6
 801c2a6:	463b      	mov	r3, r7
 801c2a8:	f7e3 ffee 	bl	8000288 <__aeabi_dsub>
 801c2ac:	4602      	mov	r2, r0
 801c2ae:	460b      	mov	r3, r1
 801c2b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c2b4:	f7e3 ffe8 	bl	8000288 <__aeabi_dsub>
 801c2b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c2bc:	f7e4 f99c 	bl	80005f8 <__aeabi_dmul>
 801c2c0:	4622      	mov	r2, r4
 801c2c2:	4606      	mov	r6, r0
 801c2c4:	460f      	mov	r7, r1
 801c2c6:	462b      	mov	r3, r5
 801c2c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c2cc:	f7e4 f994 	bl	80005f8 <__aeabi_dmul>
 801c2d0:	4602      	mov	r2, r0
 801c2d2:	460b      	mov	r3, r1
 801c2d4:	4630      	mov	r0, r6
 801c2d6:	4639      	mov	r1, r7
 801c2d8:	f7e3 ffd8 	bl	800028c <__adddf3>
 801c2dc:	4606      	mov	r6, r0
 801c2de:	460f      	mov	r7, r1
 801c2e0:	4602      	mov	r2, r0
 801c2e2:	460b      	mov	r3, r1
 801c2e4:	4640      	mov	r0, r8
 801c2e6:	4649      	mov	r1, r9
 801c2e8:	f7e3 ffd0 	bl	800028c <__adddf3>
 801c2ec:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801c2f0:	a33b      	add	r3, pc, #236	@ (adr r3, 801c3e0 <__ieee754_pow+0x768>)
 801c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f6:	4658      	mov	r0, fp
 801c2f8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801c2fc:	460d      	mov	r5, r1
 801c2fe:	f7e4 f97b 	bl	80005f8 <__aeabi_dmul>
 801c302:	465c      	mov	r4, fp
 801c304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c308:	4642      	mov	r2, r8
 801c30a:	464b      	mov	r3, r9
 801c30c:	4620      	mov	r0, r4
 801c30e:	4629      	mov	r1, r5
 801c310:	f7e3 ffba 	bl	8000288 <__aeabi_dsub>
 801c314:	4602      	mov	r2, r0
 801c316:	460b      	mov	r3, r1
 801c318:	4630      	mov	r0, r6
 801c31a:	4639      	mov	r1, r7
 801c31c:	f7e3 ffb4 	bl	8000288 <__aeabi_dsub>
 801c320:	a331      	add	r3, pc, #196	@ (adr r3, 801c3e8 <__ieee754_pow+0x770>)
 801c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c326:	f7e4 f967 	bl	80005f8 <__aeabi_dmul>
 801c32a:	a331      	add	r3, pc, #196	@ (adr r3, 801c3f0 <__ieee754_pow+0x778>)
 801c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c330:	4606      	mov	r6, r0
 801c332:	460f      	mov	r7, r1
 801c334:	4620      	mov	r0, r4
 801c336:	4629      	mov	r1, r5
 801c338:	f7e4 f95e 	bl	80005f8 <__aeabi_dmul>
 801c33c:	4602      	mov	r2, r0
 801c33e:	460b      	mov	r3, r1
 801c340:	4630      	mov	r0, r6
 801c342:	4639      	mov	r1, r7
 801c344:	f7e3 ffa2 	bl	800028c <__adddf3>
 801c348:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c34a:	4b32      	ldr	r3, [pc, #200]	@ (801c414 <__ieee754_pow+0x79c>)
 801c34c:	4413      	add	r3, r2
 801c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c352:	f7e3 ff9b 	bl	800028c <__adddf3>
 801c356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c35a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c35c:	f7e4 f8e2 	bl	8000524 <__aeabi_i2d>
 801c360:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c362:	4b2d      	ldr	r3, [pc, #180]	@ (801c418 <__ieee754_pow+0x7a0>)
 801c364:	4413      	add	r3, r2
 801c366:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c36a:	4606      	mov	r6, r0
 801c36c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c370:	460f      	mov	r7, r1
 801c372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c376:	f7e3 ff89 	bl	800028c <__adddf3>
 801c37a:	4642      	mov	r2, r8
 801c37c:	464b      	mov	r3, r9
 801c37e:	f7e3 ff85 	bl	800028c <__adddf3>
 801c382:	4632      	mov	r2, r6
 801c384:	463b      	mov	r3, r7
 801c386:	f7e3 ff81 	bl	800028c <__adddf3>
 801c38a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801c38e:	4632      	mov	r2, r6
 801c390:	463b      	mov	r3, r7
 801c392:	4658      	mov	r0, fp
 801c394:	460d      	mov	r5, r1
 801c396:	f7e3 ff77 	bl	8000288 <__aeabi_dsub>
 801c39a:	4642      	mov	r2, r8
 801c39c:	464b      	mov	r3, r9
 801c39e:	f7e3 ff73 	bl	8000288 <__aeabi_dsub>
 801c3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c3a6:	f7e3 ff6f 	bl	8000288 <__aeabi_dsub>
 801c3aa:	465c      	mov	r4, fp
 801c3ac:	e036      	b.n	801c41c <__ieee754_pow+0x7a4>
 801c3ae:	bf00      	nop
 801c3b0:	4a454eef 	.word	0x4a454eef
 801c3b4:	3fca7e28 	.word	0x3fca7e28
 801c3b8:	93c9db65 	.word	0x93c9db65
 801c3bc:	3fcd864a 	.word	0x3fcd864a
 801c3c0:	a91d4101 	.word	0xa91d4101
 801c3c4:	3fd17460 	.word	0x3fd17460
 801c3c8:	518f264d 	.word	0x518f264d
 801c3cc:	3fd55555 	.word	0x3fd55555
 801c3d0:	db6fabff 	.word	0xdb6fabff
 801c3d4:	3fdb6db6 	.word	0x3fdb6db6
 801c3d8:	33333303 	.word	0x33333303
 801c3dc:	3fe33333 	.word	0x3fe33333
 801c3e0:	e0000000 	.word	0xe0000000
 801c3e4:	3feec709 	.word	0x3feec709
 801c3e8:	dc3a03fd 	.word	0xdc3a03fd
 801c3ec:	3feec709 	.word	0x3feec709
 801c3f0:	145b01f5 	.word	0x145b01f5
 801c3f4:	be3e2fe0 	.word	0xbe3e2fe0
 801c3f8:	7ff00000 	.word	0x7ff00000
 801c3fc:	43400000 	.word	0x43400000
 801c400:	0003988e 	.word	0x0003988e
 801c404:	000bb679 	.word	0x000bb679
 801c408:	0801d9b0 	.word	0x0801d9b0
 801c40c:	3ff00000 	.word	0x3ff00000
 801c410:	40080000 	.word	0x40080000
 801c414:	0801d990 	.word	0x0801d990
 801c418:	0801d9a0 	.word	0x0801d9a0
 801c41c:	4602      	mov	r2, r0
 801c41e:	460b      	mov	r3, r1
 801c420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c424:	e5d6      	b.n	801bfd4 <__ieee754_pow+0x35c>
 801c426:	f04f 0a01 	mov.w	sl, #1
 801c42a:	e65e      	b.n	801c0ea <__ieee754_pow+0x472>
 801c42c:	a3b5      	add	r3, pc, #724	@ (adr r3, 801c704 <__ieee754_pow+0xa8c>)
 801c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c432:	4630      	mov	r0, r6
 801c434:	4639      	mov	r1, r7
 801c436:	f7e3 ff29 	bl	800028c <__adddf3>
 801c43a:	4642      	mov	r2, r8
 801c43c:	e9cd 0100 	strd	r0, r1, [sp]
 801c440:	464b      	mov	r3, r9
 801c442:	4620      	mov	r0, r4
 801c444:	4629      	mov	r1, r5
 801c446:	f7e3 ff1f 	bl	8000288 <__aeabi_dsub>
 801c44a:	4602      	mov	r2, r0
 801c44c:	460b      	mov	r3, r1
 801c44e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c452:	f7e4 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 801c456:	2800      	cmp	r0, #0
 801c458:	f47f adfe 	bne.w	801c058 <__ieee754_pow+0x3e0>
 801c45c:	4ba2      	ldr	r3, [pc, #648]	@ (801c6e8 <__ieee754_pow+0xa70>)
 801c45e:	e022      	b.n	801c4a6 <__ieee754_pow+0x82e>
 801c460:	4ca2      	ldr	r4, [pc, #648]	@ (801c6ec <__ieee754_pow+0xa74>)
 801c462:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c466:	42a3      	cmp	r3, r4
 801c468:	d919      	bls.n	801c49e <__ieee754_pow+0x826>
 801c46a:	4ba1      	ldr	r3, [pc, #644]	@ (801c6f0 <__ieee754_pow+0xa78>)
 801c46c:	440b      	add	r3, r1
 801c46e:	4303      	orrs	r3, r0
 801c470:	d009      	beq.n	801c486 <__ieee754_pow+0x80e>
 801c472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c476:	2200      	movs	r2, #0
 801c478:	2300      	movs	r3, #0
 801c47a:	f7e4 fb2f 	bl	8000adc <__aeabi_dcmplt>
 801c47e:	3800      	subs	r0, #0
 801c480:	bf18      	it	ne
 801c482:	2001      	movne	r0, #1
 801c484:	e512      	b.n	801beac <__ieee754_pow+0x234>
 801c486:	4642      	mov	r2, r8
 801c488:	464b      	mov	r3, r9
 801c48a:	f7e3 fefd 	bl	8000288 <__aeabi_dsub>
 801c48e:	4632      	mov	r2, r6
 801c490:	463b      	mov	r3, r7
 801c492:	f7e4 fb37 	bl	8000b04 <__aeabi_dcmpge>
 801c496:	2800      	cmp	r0, #0
 801c498:	d1eb      	bne.n	801c472 <__ieee754_pow+0x7fa>
 801c49a:	4b96      	ldr	r3, [pc, #600]	@ (801c6f4 <__ieee754_pow+0xa7c>)
 801c49c:	e003      	b.n	801c4a6 <__ieee754_pow+0x82e>
 801c49e:	4a96      	ldr	r2, [pc, #600]	@ (801c6f8 <__ieee754_pow+0xa80>)
 801c4a0:	4293      	cmp	r3, r2
 801c4a2:	f240 80e7 	bls.w	801c674 <__ieee754_pow+0x9fc>
 801c4a6:	151b      	asrs	r3, r3, #20
 801c4a8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801c4ac:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 801c4b0:	fa4a fa03 	asr.w	sl, sl, r3
 801c4b4:	44da      	add	sl, fp
 801c4b6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c4ba:	4890      	ldr	r0, [pc, #576]	@ (801c6fc <__ieee754_pow+0xa84>)
 801c4bc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801c4c0:	4108      	asrs	r0, r1
 801c4c2:	ea00 030a 	and.w	r3, r0, sl
 801c4c6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c4ca:	f1c1 0114 	rsb	r1, r1, #20
 801c4ce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801c4d2:	fa4a fa01 	asr.w	sl, sl, r1
 801c4d6:	f1bb 0f00 	cmp.w	fp, #0
 801c4da:	4640      	mov	r0, r8
 801c4dc:	4649      	mov	r1, r9
 801c4de:	f04f 0200 	mov.w	r2, #0
 801c4e2:	bfb8      	it	lt
 801c4e4:	f1ca 0a00 	rsblt	sl, sl, #0
 801c4e8:	f7e3 fece 	bl	8000288 <__aeabi_dsub>
 801c4ec:	4680      	mov	r8, r0
 801c4ee:	4689      	mov	r9, r1
 801c4f0:	4632      	mov	r2, r6
 801c4f2:	463b      	mov	r3, r7
 801c4f4:	4640      	mov	r0, r8
 801c4f6:	4649      	mov	r1, r9
 801c4f8:	f7e3 fec8 	bl	800028c <__adddf3>
 801c4fc:	2400      	movs	r4, #0
 801c4fe:	a36a      	add	r3, pc, #424	@ (adr r3, 801c6a8 <__ieee754_pow+0xa30>)
 801c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c504:	4620      	mov	r0, r4
 801c506:	460d      	mov	r5, r1
 801c508:	f7e4 f876 	bl	80005f8 <__aeabi_dmul>
 801c50c:	4642      	mov	r2, r8
 801c50e:	e9cd 0100 	strd	r0, r1, [sp]
 801c512:	464b      	mov	r3, r9
 801c514:	4620      	mov	r0, r4
 801c516:	4629      	mov	r1, r5
 801c518:	f7e3 feb6 	bl	8000288 <__aeabi_dsub>
 801c51c:	4602      	mov	r2, r0
 801c51e:	460b      	mov	r3, r1
 801c520:	4630      	mov	r0, r6
 801c522:	4639      	mov	r1, r7
 801c524:	f7e3 feb0 	bl	8000288 <__aeabi_dsub>
 801c528:	a361      	add	r3, pc, #388	@ (adr r3, 801c6b0 <__ieee754_pow+0xa38>)
 801c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c52e:	f7e4 f863 	bl	80005f8 <__aeabi_dmul>
 801c532:	a361      	add	r3, pc, #388	@ (adr r3, 801c6b8 <__ieee754_pow+0xa40>)
 801c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c538:	4680      	mov	r8, r0
 801c53a:	4689      	mov	r9, r1
 801c53c:	4620      	mov	r0, r4
 801c53e:	4629      	mov	r1, r5
 801c540:	f7e4 f85a 	bl	80005f8 <__aeabi_dmul>
 801c544:	4602      	mov	r2, r0
 801c546:	460b      	mov	r3, r1
 801c548:	4640      	mov	r0, r8
 801c54a:	4649      	mov	r1, r9
 801c54c:	f7e3 fe9e 	bl	800028c <__adddf3>
 801c550:	4604      	mov	r4, r0
 801c552:	460d      	mov	r5, r1
 801c554:	4602      	mov	r2, r0
 801c556:	460b      	mov	r3, r1
 801c558:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c55c:	f7e3 fe96 	bl	800028c <__adddf3>
 801c560:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c564:	4680      	mov	r8, r0
 801c566:	4689      	mov	r9, r1
 801c568:	f7e3 fe8e 	bl	8000288 <__aeabi_dsub>
 801c56c:	4602      	mov	r2, r0
 801c56e:	460b      	mov	r3, r1
 801c570:	4620      	mov	r0, r4
 801c572:	4629      	mov	r1, r5
 801c574:	f7e3 fe88 	bl	8000288 <__aeabi_dsub>
 801c578:	4642      	mov	r2, r8
 801c57a:	4606      	mov	r6, r0
 801c57c:	460f      	mov	r7, r1
 801c57e:	464b      	mov	r3, r9
 801c580:	4640      	mov	r0, r8
 801c582:	4649      	mov	r1, r9
 801c584:	f7e4 f838 	bl	80005f8 <__aeabi_dmul>
 801c588:	a34d      	add	r3, pc, #308	@ (adr r3, 801c6c0 <__ieee754_pow+0xa48>)
 801c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c58e:	4604      	mov	r4, r0
 801c590:	460d      	mov	r5, r1
 801c592:	f7e4 f831 	bl	80005f8 <__aeabi_dmul>
 801c596:	a34c      	add	r3, pc, #304	@ (adr r3, 801c6c8 <__ieee754_pow+0xa50>)
 801c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59c:	f7e3 fe74 	bl	8000288 <__aeabi_dsub>
 801c5a0:	4622      	mov	r2, r4
 801c5a2:	462b      	mov	r3, r5
 801c5a4:	f7e4 f828 	bl	80005f8 <__aeabi_dmul>
 801c5a8:	a349      	add	r3, pc, #292	@ (adr r3, 801c6d0 <__ieee754_pow+0xa58>)
 801c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ae:	f7e3 fe6d 	bl	800028c <__adddf3>
 801c5b2:	4622      	mov	r2, r4
 801c5b4:	462b      	mov	r3, r5
 801c5b6:	f7e4 f81f 	bl	80005f8 <__aeabi_dmul>
 801c5ba:	a347      	add	r3, pc, #284	@ (adr r3, 801c6d8 <__ieee754_pow+0xa60>)
 801c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c0:	f7e3 fe62 	bl	8000288 <__aeabi_dsub>
 801c5c4:	4622      	mov	r2, r4
 801c5c6:	462b      	mov	r3, r5
 801c5c8:	f7e4 f816 	bl	80005f8 <__aeabi_dmul>
 801c5cc:	a344      	add	r3, pc, #272	@ (adr r3, 801c6e0 <__ieee754_pow+0xa68>)
 801c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d2:	f7e3 fe5b 	bl	800028c <__adddf3>
 801c5d6:	4622      	mov	r2, r4
 801c5d8:	462b      	mov	r3, r5
 801c5da:	f7e4 f80d 	bl	80005f8 <__aeabi_dmul>
 801c5de:	4602      	mov	r2, r0
 801c5e0:	460b      	mov	r3, r1
 801c5e2:	4640      	mov	r0, r8
 801c5e4:	4649      	mov	r1, r9
 801c5e6:	f7e3 fe4f 	bl	8000288 <__aeabi_dsub>
 801c5ea:	4604      	mov	r4, r0
 801c5ec:	460d      	mov	r5, r1
 801c5ee:	4602      	mov	r2, r0
 801c5f0:	460b      	mov	r3, r1
 801c5f2:	4640      	mov	r0, r8
 801c5f4:	4649      	mov	r1, r9
 801c5f6:	f7e3 ffff 	bl	80005f8 <__aeabi_dmul>
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	e9cd 0100 	strd	r0, r1, [sp]
 801c600:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c604:	4620      	mov	r0, r4
 801c606:	4629      	mov	r1, r5
 801c608:	f7e3 fe3e 	bl	8000288 <__aeabi_dsub>
 801c60c:	4602      	mov	r2, r0
 801c60e:	460b      	mov	r3, r1
 801c610:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c614:	f7e4 f91a 	bl	800084c <__aeabi_ddiv>
 801c618:	4632      	mov	r2, r6
 801c61a:	4604      	mov	r4, r0
 801c61c:	460d      	mov	r5, r1
 801c61e:	463b      	mov	r3, r7
 801c620:	4640      	mov	r0, r8
 801c622:	4649      	mov	r1, r9
 801c624:	f7e3 ffe8 	bl	80005f8 <__aeabi_dmul>
 801c628:	4632      	mov	r2, r6
 801c62a:	463b      	mov	r3, r7
 801c62c:	f7e3 fe2e 	bl	800028c <__adddf3>
 801c630:	4602      	mov	r2, r0
 801c632:	460b      	mov	r3, r1
 801c634:	4620      	mov	r0, r4
 801c636:	4629      	mov	r1, r5
 801c638:	f7e3 fe26 	bl	8000288 <__aeabi_dsub>
 801c63c:	4642      	mov	r2, r8
 801c63e:	464b      	mov	r3, r9
 801c640:	f7e3 fe22 	bl	8000288 <__aeabi_dsub>
 801c644:	460b      	mov	r3, r1
 801c646:	4602      	mov	r2, r0
 801c648:	492d      	ldr	r1, [pc, #180]	@ (801c700 <__ieee754_pow+0xa88>)
 801c64a:	2000      	movs	r0, #0
 801c64c:	f7e3 fe1c 	bl	8000288 <__aeabi_dsub>
 801c650:	ec41 0b10 	vmov	d0, r0, r1
 801c654:	ee10 3a90 	vmov	r3, s1
 801c658:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c65c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c660:	da0b      	bge.n	801c67a <__ieee754_pow+0xa02>
 801c662:	4650      	mov	r0, sl
 801c664:	f000 fa50 	bl	801cb08 <scalbn>
 801c668:	ec51 0b10 	vmov	r0, r1, d0
 801c66c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c670:	f7ff bb6d 	b.w	801bd4e <__ieee754_pow+0xd6>
 801c674:	f8dd a010 	ldr.w	sl, [sp, #16]
 801c678:	e73a      	b.n	801c4f0 <__ieee754_pow+0x878>
 801c67a:	ec51 0b10 	vmov	r0, r1, d0
 801c67e:	4619      	mov	r1, r3
 801c680:	e7f4      	b.n	801c66c <__ieee754_pow+0x9f4>
 801c682:	491f      	ldr	r1, [pc, #124]	@ (801c700 <__ieee754_pow+0xa88>)
 801c684:	2000      	movs	r0, #0
 801c686:	f7ff bb14 	b.w	801bcb2 <__ieee754_pow+0x3a>
 801c68a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c68e:	f7ff bb10 	b.w	801bcb2 <__ieee754_pow+0x3a>
 801c692:	4630      	mov	r0, r6
 801c694:	4639      	mov	r1, r7
 801c696:	f7ff bb0c 	b.w	801bcb2 <__ieee754_pow+0x3a>
 801c69a:	460c      	mov	r4, r1
 801c69c:	f7ff bb69 	b.w	801bd72 <__ieee754_pow+0xfa>
 801c6a0:	2400      	movs	r4, #0
 801c6a2:	f7ff bb4b 	b.w	801bd3c <__ieee754_pow+0xc4>
 801c6a6:	bf00      	nop
 801c6a8:	00000000 	.word	0x00000000
 801c6ac:	3fe62e43 	.word	0x3fe62e43
 801c6b0:	fefa39ef 	.word	0xfefa39ef
 801c6b4:	3fe62e42 	.word	0x3fe62e42
 801c6b8:	0ca86c39 	.word	0x0ca86c39
 801c6bc:	be205c61 	.word	0xbe205c61
 801c6c0:	72bea4d0 	.word	0x72bea4d0
 801c6c4:	3e663769 	.word	0x3e663769
 801c6c8:	c5d26bf1 	.word	0xc5d26bf1
 801c6cc:	3ebbbd41 	.word	0x3ebbbd41
 801c6d0:	af25de2c 	.word	0xaf25de2c
 801c6d4:	3f11566a 	.word	0x3f11566a
 801c6d8:	16bebd93 	.word	0x16bebd93
 801c6dc:	3f66c16c 	.word	0x3f66c16c
 801c6e0:	5555553e 	.word	0x5555553e
 801c6e4:	3fc55555 	.word	0x3fc55555
 801c6e8:	40900000 	.word	0x40900000
 801c6ec:	4090cbff 	.word	0x4090cbff
 801c6f0:	3f6f3400 	.word	0x3f6f3400
 801c6f4:	4090cc00 	.word	0x4090cc00
 801c6f8:	3fe00000 	.word	0x3fe00000
 801c6fc:	fff00000 	.word	0xfff00000
 801c700:	3ff00000 	.word	0x3ff00000
 801c704:	652b82fe 	.word	0x652b82fe
 801c708:	3c971547 	.word	0x3c971547
 801c70c:	00000000 	.word	0x00000000

0801c710 <__ieee754_rem_pio2>:
 801c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c714:	ec57 6b10 	vmov	r6, r7, d0
 801c718:	4bc5      	ldr	r3, [pc, #788]	@ (801ca30 <__ieee754_rem_pio2+0x320>)
 801c71a:	b08d      	sub	sp, #52	@ 0x34
 801c71c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801c720:	4598      	cmp	r8, r3
 801c722:	4604      	mov	r4, r0
 801c724:	9704      	str	r7, [sp, #16]
 801c726:	d807      	bhi.n	801c738 <__ieee754_rem_pio2+0x28>
 801c728:	2200      	movs	r2, #0
 801c72a:	2300      	movs	r3, #0
 801c72c:	ed80 0b00 	vstr	d0, [r0]
 801c730:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c734:	2500      	movs	r5, #0
 801c736:	e028      	b.n	801c78a <__ieee754_rem_pio2+0x7a>
 801c738:	4bbe      	ldr	r3, [pc, #760]	@ (801ca34 <__ieee754_rem_pio2+0x324>)
 801c73a:	4598      	cmp	r8, r3
 801c73c:	d878      	bhi.n	801c830 <__ieee754_rem_pio2+0x120>
 801c73e:	9b04      	ldr	r3, [sp, #16]
 801c740:	4dbd      	ldr	r5, [pc, #756]	@ (801ca38 <__ieee754_rem_pio2+0x328>)
 801c742:	2b00      	cmp	r3, #0
 801c744:	4630      	mov	r0, r6
 801c746:	a3ac      	add	r3, pc, #688	@ (adr r3, 801c9f8 <__ieee754_rem_pio2+0x2e8>)
 801c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c74c:	4639      	mov	r1, r7
 801c74e:	dd38      	ble.n	801c7c2 <__ieee754_rem_pio2+0xb2>
 801c750:	f7e3 fd9a 	bl	8000288 <__aeabi_dsub>
 801c754:	45a8      	cmp	r8, r5
 801c756:	4606      	mov	r6, r0
 801c758:	460f      	mov	r7, r1
 801c75a:	d01a      	beq.n	801c792 <__ieee754_rem_pio2+0x82>
 801c75c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801ca00 <__ieee754_rem_pio2+0x2f0>)
 801c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c762:	f7e3 fd91 	bl	8000288 <__aeabi_dsub>
 801c766:	4602      	mov	r2, r0
 801c768:	460b      	mov	r3, r1
 801c76a:	4680      	mov	r8, r0
 801c76c:	4689      	mov	r9, r1
 801c76e:	4630      	mov	r0, r6
 801c770:	4639      	mov	r1, r7
 801c772:	f7e3 fd89 	bl	8000288 <__aeabi_dsub>
 801c776:	a3a2      	add	r3, pc, #648	@ (adr r3, 801ca00 <__ieee754_rem_pio2+0x2f0>)
 801c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77c:	f7e3 fd84 	bl	8000288 <__aeabi_dsub>
 801c780:	e9c4 8900 	strd	r8, r9, [r4]
 801c784:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c788:	2501      	movs	r5, #1
 801c78a:	4628      	mov	r0, r5
 801c78c:	b00d      	add	sp, #52	@ 0x34
 801c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c792:	a39d      	add	r3, pc, #628	@ (adr r3, 801ca08 <__ieee754_rem_pio2+0x2f8>)
 801c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c798:	f7e3 fd76 	bl	8000288 <__aeabi_dsub>
 801c79c:	a39c      	add	r3, pc, #624	@ (adr r3, 801ca10 <__ieee754_rem_pio2+0x300>)
 801c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a2:	4606      	mov	r6, r0
 801c7a4:	460f      	mov	r7, r1
 801c7a6:	f7e3 fd6f 	bl	8000288 <__aeabi_dsub>
 801c7aa:	4602      	mov	r2, r0
 801c7ac:	460b      	mov	r3, r1
 801c7ae:	4680      	mov	r8, r0
 801c7b0:	4689      	mov	r9, r1
 801c7b2:	4630      	mov	r0, r6
 801c7b4:	4639      	mov	r1, r7
 801c7b6:	f7e3 fd67 	bl	8000288 <__aeabi_dsub>
 801c7ba:	a395      	add	r3, pc, #596	@ (adr r3, 801ca10 <__ieee754_rem_pio2+0x300>)
 801c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c0:	e7dc      	b.n	801c77c <__ieee754_rem_pio2+0x6c>
 801c7c2:	f7e3 fd63 	bl	800028c <__adddf3>
 801c7c6:	45a8      	cmp	r8, r5
 801c7c8:	4606      	mov	r6, r0
 801c7ca:	460f      	mov	r7, r1
 801c7cc:	d018      	beq.n	801c800 <__ieee754_rem_pio2+0xf0>
 801c7ce:	a38c      	add	r3, pc, #560	@ (adr r3, 801ca00 <__ieee754_rem_pio2+0x2f0>)
 801c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d4:	f7e3 fd5a 	bl	800028c <__adddf3>
 801c7d8:	4602      	mov	r2, r0
 801c7da:	460b      	mov	r3, r1
 801c7dc:	4680      	mov	r8, r0
 801c7de:	4689      	mov	r9, r1
 801c7e0:	4630      	mov	r0, r6
 801c7e2:	4639      	mov	r1, r7
 801c7e4:	f7e3 fd50 	bl	8000288 <__aeabi_dsub>
 801c7e8:	a385      	add	r3, pc, #532	@ (adr r3, 801ca00 <__ieee754_rem_pio2+0x2f0>)
 801c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ee:	f7e3 fd4d 	bl	800028c <__adddf3>
 801c7f2:	f04f 35ff 	mov.w	r5, #4294967295
 801c7f6:	e9c4 8900 	strd	r8, r9, [r4]
 801c7fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c7fe:	e7c4      	b.n	801c78a <__ieee754_rem_pio2+0x7a>
 801c800:	a381      	add	r3, pc, #516	@ (adr r3, 801ca08 <__ieee754_rem_pio2+0x2f8>)
 801c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c806:	f7e3 fd41 	bl	800028c <__adddf3>
 801c80a:	a381      	add	r3, pc, #516	@ (adr r3, 801ca10 <__ieee754_rem_pio2+0x300>)
 801c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c810:	4606      	mov	r6, r0
 801c812:	460f      	mov	r7, r1
 801c814:	f7e3 fd3a 	bl	800028c <__adddf3>
 801c818:	4602      	mov	r2, r0
 801c81a:	460b      	mov	r3, r1
 801c81c:	4680      	mov	r8, r0
 801c81e:	4689      	mov	r9, r1
 801c820:	4630      	mov	r0, r6
 801c822:	4639      	mov	r1, r7
 801c824:	f7e3 fd30 	bl	8000288 <__aeabi_dsub>
 801c828:	a379      	add	r3, pc, #484	@ (adr r3, 801ca10 <__ieee754_rem_pio2+0x300>)
 801c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c82e:	e7de      	b.n	801c7ee <__ieee754_rem_pio2+0xde>
 801c830:	4b82      	ldr	r3, [pc, #520]	@ (801ca3c <__ieee754_rem_pio2+0x32c>)
 801c832:	4598      	cmp	r8, r3
 801c834:	f200 80d1 	bhi.w	801c9da <__ieee754_rem_pio2+0x2ca>
 801c838:	f7fe f8d2 	bl	801a9e0 <fabs>
 801c83c:	ec57 6b10 	vmov	r6, r7, d0
 801c840:	a375      	add	r3, pc, #468	@ (adr r3, 801ca18 <__ieee754_rem_pio2+0x308>)
 801c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c846:	4630      	mov	r0, r6
 801c848:	4639      	mov	r1, r7
 801c84a:	f7e3 fed5 	bl	80005f8 <__aeabi_dmul>
 801c84e:	4b7c      	ldr	r3, [pc, #496]	@ (801ca40 <__ieee754_rem_pio2+0x330>)
 801c850:	2200      	movs	r2, #0
 801c852:	f7e3 fd1b 	bl	800028c <__adddf3>
 801c856:	f7e4 f97f 	bl	8000b58 <__aeabi_d2iz>
 801c85a:	4605      	mov	r5, r0
 801c85c:	f7e3 fe62 	bl	8000524 <__aeabi_i2d>
 801c860:	4602      	mov	r2, r0
 801c862:	460b      	mov	r3, r1
 801c864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c868:	a363      	add	r3, pc, #396	@ (adr r3, 801c9f8 <__ieee754_rem_pio2+0x2e8>)
 801c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c86e:	f7e3 fec3 	bl	80005f8 <__aeabi_dmul>
 801c872:	4602      	mov	r2, r0
 801c874:	460b      	mov	r3, r1
 801c876:	4630      	mov	r0, r6
 801c878:	4639      	mov	r1, r7
 801c87a:	f7e3 fd05 	bl	8000288 <__aeabi_dsub>
 801c87e:	a360      	add	r3, pc, #384	@ (adr r3, 801ca00 <__ieee754_rem_pio2+0x2f0>)
 801c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c884:	4682      	mov	sl, r0
 801c886:	468b      	mov	fp, r1
 801c888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c88c:	f7e3 feb4 	bl	80005f8 <__aeabi_dmul>
 801c890:	2d1f      	cmp	r5, #31
 801c892:	4606      	mov	r6, r0
 801c894:	460f      	mov	r7, r1
 801c896:	dc0c      	bgt.n	801c8b2 <__ieee754_rem_pio2+0x1a2>
 801c898:	4b6a      	ldr	r3, [pc, #424]	@ (801ca44 <__ieee754_rem_pio2+0x334>)
 801c89a:	1e6a      	subs	r2, r5, #1
 801c89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8a0:	4543      	cmp	r3, r8
 801c8a2:	d006      	beq.n	801c8b2 <__ieee754_rem_pio2+0x1a2>
 801c8a4:	4632      	mov	r2, r6
 801c8a6:	463b      	mov	r3, r7
 801c8a8:	4650      	mov	r0, sl
 801c8aa:	4659      	mov	r1, fp
 801c8ac:	f7e3 fcec 	bl	8000288 <__aeabi_dsub>
 801c8b0:	e00e      	b.n	801c8d0 <__ieee754_rem_pio2+0x1c0>
 801c8b2:	463b      	mov	r3, r7
 801c8b4:	4632      	mov	r2, r6
 801c8b6:	4650      	mov	r0, sl
 801c8b8:	4659      	mov	r1, fp
 801c8ba:	f7e3 fce5 	bl	8000288 <__aeabi_dsub>
 801c8be:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c8c2:	9305      	str	r3, [sp, #20]
 801c8c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c8c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801c8cc:	2b10      	cmp	r3, #16
 801c8ce:	dc02      	bgt.n	801c8d6 <__ieee754_rem_pio2+0x1c6>
 801c8d0:	e9c4 0100 	strd	r0, r1, [r4]
 801c8d4:	e039      	b.n	801c94a <__ieee754_rem_pio2+0x23a>
 801c8d6:	a34c      	add	r3, pc, #304	@ (adr r3, 801ca08 <__ieee754_rem_pio2+0x2f8>)
 801c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c8e0:	f7e3 fe8a 	bl	80005f8 <__aeabi_dmul>
 801c8e4:	4606      	mov	r6, r0
 801c8e6:	460f      	mov	r7, r1
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	460b      	mov	r3, r1
 801c8ec:	4650      	mov	r0, sl
 801c8ee:	4659      	mov	r1, fp
 801c8f0:	f7e3 fcca 	bl	8000288 <__aeabi_dsub>
 801c8f4:	4602      	mov	r2, r0
 801c8f6:	460b      	mov	r3, r1
 801c8f8:	4680      	mov	r8, r0
 801c8fa:	4689      	mov	r9, r1
 801c8fc:	4650      	mov	r0, sl
 801c8fe:	4659      	mov	r1, fp
 801c900:	f7e3 fcc2 	bl	8000288 <__aeabi_dsub>
 801c904:	4632      	mov	r2, r6
 801c906:	463b      	mov	r3, r7
 801c908:	f7e3 fcbe 	bl	8000288 <__aeabi_dsub>
 801c90c:	a340      	add	r3, pc, #256	@ (adr r3, 801ca10 <__ieee754_rem_pio2+0x300>)
 801c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c912:	4606      	mov	r6, r0
 801c914:	460f      	mov	r7, r1
 801c916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c91a:	f7e3 fe6d 	bl	80005f8 <__aeabi_dmul>
 801c91e:	4632      	mov	r2, r6
 801c920:	463b      	mov	r3, r7
 801c922:	f7e3 fcb1 	bl	8000288 <__aeabi_dsub>
 801c926:	4602      	mov	r2, r0
 801c928:	460b      	mov	r3, r1
 801c92a:	4606      	mov	r6, r0
 801c92c:	460f      	mov	r7, r1
 801c92e:	4640      	mov	r0, r8
 801c930:	4649      	mov	r1, r9
 801c932:	f7e3 fca9 	bl	8000288 <__aeabi_dsub>
 801c936:	9a05      	ldr	r2, [sp, #20]
 801c938:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c93c:	1ad3      	subs	r3, r2, r3
 801c93e:	2b31      	cmp	r3, #49	@ 0x31
 801c940:	dc20      	bgt.n	801c984 <__ieee754_rem_pio2+0x274>
 801c942:	e9c4 0100 	strd	r0, r1, [r4]
 801c946:	46c2      	mov	sl, r8
 801c948:	46cb      	mov	fp, r9
 801c94a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c94e:	4650      	mov	r0, sl
 801c950:	4642      	mov	r2, r8
 801c952:	464b      	mov	r3, r9
 801c954:	4659      	mov	r1, fp
 801c956:	f7e3 fc97 	bl	8000288 <__aeabi_dsub>
 801c95a:	463b      	mov	r3, r7
 801c95c:	4632      	mov	r2, r6
 801c95e:	f7e3 fc93 	bl	8000288 <__aeabi_dsub>
 801c962:	9b04      	ldr	r3, [sp, #16]
 801c964:	2b00      	cmp	r3, #0
 801c966:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c96a:	f6bf af0e 	bge.w	801c78a <__ieee754_rem_pio2+0x7a>
 801c96e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801c972:	6063      	str	r3, [r4, #4]
 801c974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c978:	f8c4 8000 	str.w	r8, [r4]
 801c97c:	60a0      	str	r0, [r4, #8]
 801c97e:	60e3      	str	r3, [r4, #12]
 801c980:	426d      	negs	r5, r5
 801c982:	e702      	b.n	801c78a <__ieee754_rem_pio2+0x7a>
 801c984:	a326      	add	r3, pc, #152	@ (adr r3, 801ca20 <__ieee754_rem_pio2+0x310>)
 801c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c98a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c98e:	f7e3 fe33 	bl	80005f8 <__aeabi_dmul>
 801c992:	4606      	mov	r6, r0
 801c994:	460f      	mov	r7, r1
 801c996:	4602      	mov	r2, r0
 801c998:	460b      	mov	r3, r1
 801c99a:	4640      	mov	r0, r8
 801c99c:	4649      	mov	r1, r9
 801c99e:	f7e3 fc73 	bl	8000288 <__aeabi_dsub>
 801c9a2:	4602      	mov	r2, r0
 801c9a4:	460b      	mov	r3, r1
 801c9a6:	4682      	mov	sl, r0
 801c9a8:	468b      	mov	fp, r1
 801c9aa:	4640      	mov	r0, r8
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	f7e3 fc6b 	bl	8000288 <__aeabi_dsub>
 801c9b2:	4632      	mov	r2, r6
 801c9b4:	463b      	mov	r3, r7
 801c9b6:	f7e3 fc67 	bl	8000288 <__aeabi_dsub>
 801c9ba:	a31b      	add	r3, pc, #108	@ (adr r3, 801ca28 <__ieee754_rem_pio2+0x318>)
 801c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c0:	4606      	mov	r6, r0
 801c9c2:	460f      	mov	r7, r1
 801c9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c9c8:	f7e3 fe16 	bl	80005f8 <__aeabi_dmul>
 801c9cc:	4632      	mov	r2, r6
 801c9ce:	463b      	mov	r3, r7
 801c9d0:	f7e3 fc5a 	bl	8000288 <__aeabi_dsub>
 801c9d4:	4606      	mov	r6, r0
 801c9d6:	460f      	mov	r7, r1
 801c9d8:	e764      	b.n	801c8a4 <__ieee754_rem_pio2+0x194>
 801c9da:	4b1b      	ldr	r3, [pc, #108]	@ (801ca48 <__ieee754_rem_pio2+0x338>)
 801c9dc:	4598      	cmp	r8, r3
 801c9de:	d935      	bls.n	801ca4c <__ieee754_rem_pio2+0x33c>
 801c9e0:	4632      	mov	r2, r6
 801c9e2:	463b      	mov	r3, r7
 801c9e4:	4630      	mov	r0, r6
 801c9e6:	4639      	mov	r1, r7
 801c9e8:	f7e3 fc4e 	bl	8000288 <__aeabi_dsub>
 801c9ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c9f0:	e9c4 0100 	strd	r0, r1, [r4]
 801c9f4:	e69e      	b.n	801c734 <__ieee754_rem_pio2+0x24>
 801c9f6:	bf00      	nop
 801c9f8:	54400000 	.word	0x54400000
 801c9fc:	3ff921fb 	.word	0x3ff921fb
 801ca00:	1a626331 	.word	0x1a626331
 801ca04:	3dd0b461 	.word	0x3dd0b461
 801ca08:	1a600000 	.word	0x1a600000
 801ca0c:	3dd0b461 	.word	0x3dd0b461
 801ca10:	2e037073 	.word	0x2e037073
 801ca14:	3ba3198a 	.word	0x3ba3198a
 801ca18:	6dc9c883 	.word	0x6dc9c883
 801ca1c:	3fe45f30 	.word	0x3fe45f30
 801ca20:	2e000000 	.word	0x2e000000
 801ca24:	3ba3198a 	.word	0x3ba3198a
 801ca28:	252049c1 	.word	0x252049c1
 801ca2c:	397b839a 	.word	0x397b839a
 801ca30:	3fe921fb 	.word	0x3fe921fb
 801ca34:	4002d97b 	.word	0x4002d97b
 801ca38:	3ff921fb 	.word	0x3ff921fb
 801ca3c:	413921fb 	.word	0x413921fb
 801ca40:	3fe00000 	.word	0x3fe00000
 801ca44:	0801d9c0 	.word	0x0801d9c0
 801ca48:	7fefffff 	.word	0x7fefffff
 801ca4c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ca50:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ca54:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ca58:	4630      	mov	r0, r6
 801ca5a:	460f      	mov	r7, r1
 801ca5c:	f7e4 f87c 	bl	8000b58 <__aeabi_d2iz>
 801ca60:	f7e3 fd60 	bl	8000524 <__aeabi_i2d>
 801ca64:	4602      	mov	r2, r0
 801ca66:	460b      	mov	r3, r1
 801ca68:	4630      	mov	r0, r6
 801ca6a:	4639      	mov	r1, r7
 801ca6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ca70:	f7e3 fc0a 	bl	8000288 <__aeabi_dsub>
 801ca74:	4b22      	ldr	r3, [pc, #136]	@ (801cb00 <__ieee754_rem_pio2+0x3f0>)
 801ca76:	2200      	movs	r2, #0
 801ca78:	f7e3 fdbe 	bl	80005f8 <__aeabi_dmul>
 801ca7c:	460f      	mov	r7, r1
 801ca7e:	4606      	mov	r6, r0
 801ca80:	f7e4 f86a 	bl	8000b58 <__aeabi_d2iz>
 801ca84:	f7e3 fd4e 	bl	8000524 <__aeabi_i2d>
 801ca88:	4602      	mov	r2, r0
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	4630      	mov	r0, r6
 801ca8e:	4639      	mov	r1, r7
 801ca90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca94:	f7e3 fbf8 	bl	8000288 <__aeabi_dsub>
 801ca98:	4b19      	ldr	r3, [pc, #100]	@ (801cb00 <__ieee754_rem_pio2+0x3f0>)
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	f7e3 fdac 	bl	80005f8 <__aeabi_dmul>
 801caa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801caa4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801caa8:	f04f 0803 	mov.w	r8, #3
 801caac:	2600      	movs	r6, #0
 801caae:	2700      	movs	r7, #0
 801cab0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801cab4:	4632      	mov	r2, r6
 801cab6:	463b      	mov	r3, r7
 801cab8:	46c2      	mov	sl, r8
 801caba:	f108 38ff 	add.w	r8, r8, #4294967295
 801cabe:	f7e4 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 801cac2:	2800      	cmp	r0, #0
 801cac4:	d1f4      	bne.n	801cab0 <__ieee754_rem_pio2+0x3a0>
 801cac6:	4b0f      	ldr	r3, [pc, #60]	@ (801cb04 <__ieee754_rem_pio2+0x3f4>)
 801cac8:	9301      	str	r3, [sp, #4]
 801caca:	2302      	movs	r3, #2
 801cacc:	9300      	str	r3, [sp, #0]
 801cace:	462a      	mov	r2, r5
 801cad0:	4653      	mov	r3, sl
 801cad2:	4621      	mov	r1, r4
 801cad4:	a806      	add	r0, sp, #24
 801cad6:	f000 f8cf 	bl	801cc78 <__kernel_rem_pio2>
 801cada:	9b04      	ldr	r3, [sp, #16]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	4605      	mov	r5, r0
 801cae0:	f6bf ae53 	bge.w	801c78a <__ieee754_rem_pio2+0x7a>
 801cae4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801cae8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801caec:	e9c4 2300 	strd	r2, r3, [r4]
 801caf0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801caf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801caf8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801cafc:	e740      	b.n	801c980 <__ieee754_rem_pio2+0x270>
 801cafe:	bf00      	nop
 801cb00:	41700000 	.word	0x41700000
 801cb04:	0801da40 	.word	0x0801da40

0801cb08 <scalbn>:
 801cb08:	b570      	push	{r4, r5, r6, lr}
 801cb0a:	ec55 4b10 	vmov	r4, r5, d0
 801cb0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cb12:	4606      	mov	r6, r0
 801cb14:	462b      	mov	r3, r5
 801cb16:	b991      	cbnz	r1, 801cb3e <scalbn+0x36>
 801cb18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801cb1c:	4323      	orrs	r3, r4
 801cb1e:	d03b      	beq.n	801cb98 <scalbn+0x90>
 801cb20:	4b33      	ldr	r3, [pc, #204]	@ (801cbf0 <scalbn+0xe8>)
 801cb22:	4620      	mov	r0, r4
 801cb24:	4629      	mov	r1, r5
 801cb26:	2200      	movs	r2, #0
 801cb28:	f7e3 fd66 	bl	80005f8 <__aeabi_dmul>
 801cb2c:	4b31      	ldr	r3, [pc, #196]	@ (801cbf4 <scalbn+0xec>)
 801cb2e:	429e      	cmp	r6, r3
 801cb30:	4604      	mov	r4, r0
 801cb32:	460d      	mov	r5, r1
 801cb34:	da0f      	bge.n	801cb56 <scalbn+0x4e>
 801cb36:	a326      	add	r3, pc, #152	@ (adr r3, 801cbd0 <scalbn+0xc8>)
 801cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3c:	e01e      	b.n	801cb7c <scalbn+0x74>
 801cb3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801cb42:	4291      	cmp	r1, r2
 801cb44:	d10b      	bne.n	801cb5e <scalbn+0x56>
 801cb46:	4622      	mov	r2, r4
 801cb48:	4620      	mov	r0, r4
 801cb4a:	4629      	mov	r1, r5
 801cb4c:	f7e3 fb9e 	bl	800028c <__adddf3>
 801cb50:	4604      	mov	r4, r0
 801cb52:	460d      	mov	r5, r1
 801cb54:	e020      	b.n	801cb98 <scalbn+0x90>
 801cb56:	460b      	mov	r3, r1
 801cb58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801cb5c:	3936      	subs	r1, #54	@ 0x36
 801cb5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801cb62:	4296      	cmp	r6, r2
 801cb64:	dd0d      	ble.n	801cb82 <scalbn+0x7a>
 801cb66:	2d00      	cmp	r5, #0
 801cb68:	a11b      	add	r1, pc, #108	@ (adr r1, 801cbd8 <scalbn+0xd0>)
 801cb6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb6e:	da02      	bge.n	801cb76 <scalbn+0x6e>
 801cb70:	a11b      	add	r1, pc, #108	@ (adr r1, 801cbe0 <scalbn+0xd8>)
 801cb72:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb76:	a318      	add	r3, pc, #96	@ (adr r3, 801cbd8 <scalbn+0xd0>)
 801cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb7c:	f7e3 fd3c 	bl	80005f8 <__aeabi_dmul>
 801cb80:	e7e6      	b.n	801cb50 <scalbn+0x48>
 801cb82:	1872      	adds	r2, r6, r1
 801cb84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801cb88:	428a      	cmp	r2, r1
 801cb8a:	dcec      	bgt.n	801cb66 <scalbn+0x5e>
 801cb8c:	2a00      	cmp	r2, #0
 801cb8e:	dd06      	ble.n	801cb9e <scalbn+0x96>
 801cb90:	f36f 531e 	bfc	r3, #20, #11
 801cb94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cb98:	ec45 4b10 	vmov	d0, r4, r5
 801cb9c:	bd70      	pop	{r4, r5, r6, pc}
 801cb9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801cba2:	da08      	bge.n	801cbb6 <scalbn+0xae>
 801cba4:	2d00      	cmp	r5, #0
 801cba6:	a10a      	add	r1, pc, #40	@ (adr r1, 801cbd0 <scalbn+0xc8>)
 801cba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbac:	dac3      	bge.n	801cb36 <scalbn+0x2e>
 801cbae:	a10e      	add	r1, pc, #56	@ (adr r1, 801cbe8 <scalbn+0xe0>)
 801cbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbb4:	e7bf      	b.n	801cb36 <scalbn+0x2e>
 801cbb6:	3236      	adds	r2, #54	@ 0x36
 801cbb8:	f36f 531e 	bfc	r3, #20, #11
 801cbbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cbc0:	4620      	mov	r0, r4
 801cbc2:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf8 <scalbn+0xf0>)
 801cbc4:	4629      	mov	r1, r5
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	e7d8      	b.n	801cb7c <scalbn+0x74>
 801cbca:	bf00      	nop
 801cbcc:	f3af 8000 	nop.w
 801cbd0:	c2f8f359 	.word	0xc2f8f359
 801cbd4:	01a56e1f 	.word	0x01a56e1f
 801cbd8:	8800759c 	.word	0x8800759c
 801cbdc:	7e37e43c 	.word	0x7e37e43c
 801cbe0:	8800759c 	.word	0x8800759c
 801cbe4:	fe37e43c 	.word	0xfe37e43c
 801cbe8:	c2f8f359 	.word	0xc2f8f359
 801cbec:	81a56e1f 	.word	0x81a56e1f
 801cbf0:	43500000 	.word	0x43500000
 801cbf4:	ffff3cb0 	.word	0xffff3cb0
 801cbf8:	3c900000 	.word	0x3c900000

0801cbfc <with_errno>:
 801cbfc:	b510      	push	{r4, lr}
 801cbfe:	ed2d 8b02 	vpush	{d8}
 801cc02:	eeb0 8a40 	vmov.f32	s16, s0
 801cc06:	eef0 8a60 	vmov.f32	s17, s1
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	f7fb fe3a 	bl	8018884 <__errno>
 801cc10:	eeb0 0a48 	vmov.f32	s0, s16
 801cc14:	eef0 0a68 	vmov.f32	s1, s17
 801cc18:	ecbd 8b02 	vpop	{d8}
 801cc1c:	6004      	str	r4, [r0, #0]
 801cc1e:	bd10      	pop	{r4, pc}

0801cc20 <xflow>:
 801cc20:	4603      	mov	r3, r0
 801cc22:	b507      	push	{r0, r1, r2, lr}
 801cc24:	ec51 0b10 	vmov	r0, r1, d0
 801cc28:	b183      	cbz	r3, 801cc4c <xflow+0x2c>
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cc30:	e9cd 2300 	strd	r2, r3, [sp]
 801cc34:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cc38:	f7e3 fcde 	bl	80005f8 <__aeabi_dmul>
 801cc3c:	ec41 0b10 	vmov	d0, r0, r1
 801cc40:	2022      	movs	r0, #34	@ 0x22
 801cc42:	b003      	add	sp, #12
 801cc44:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc48:	f7ff bfd8 	b.w	801cbfc <with_errno>
 801cc4c:	4602      	mov	r2, r0
 801cc4e:	460b      	mov	r3, r1
 801cc50:	e7ee      	b.n	801cc30 <xflow+0x10>
 801cc52:	0000      	movs	r0, r0
 801cc54:	0000      	movs	r0, r0
	...

0801cc58 <__math_uflow>:
 801cc58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801cc60 <__math_uflow+0x8>
 801cc5c:	f7ff bfe0 	b.w	801cc20 <xflow>
 801cc60:	00000000 	.word	0x00000000
 801cc64:	10000000 	.word	0x10000000

0801cc68 <__math_oflow>:
 801cc68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801cc70 <__math_oflow+0x8>
 801cc6c:	f7ff bfd8 	b.w	801cc20 <xflow>
 801cc70:	00000000 	.word	0x00000000
 801cc74:	70000000 	.word	0x70000000

0801cc78 <__kernel_rem_pio2>:
 801cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc7c:	ed2d 8b02 	vpush	{d8}
 801cc80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801cc84:	f112 0f14 	cmn.w	r2, #20
 801cc88:	9306      	str	r3, [sp, #24]
 801cc8a:	9104      	str	r1, [sp, #16]
 801cc8c:	4bc2      	ldr	r3, [pc, #776]	@ (801cf98 <__kernel_rem_pio2+0x320>)
 801cc8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801cc90:	9008      	str	r0, [sp, #32]
 801cc92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	9b06      	ldr	r3, [sp, #24]
 801cc9a:	f103 33ff 	add.w	r3, r3, #4294967295
 801cc9e:	bfa8      	it	ge
 801cca0:	1ed4      	subge	r4, r2, #3
 801cca2:	9305      	str	r3, [sp, #20]
 801cca4:	bfb2      	itee	lt
 801cca6:	2400      	movlt	r4, #0
 801cca8:	2318      	movge	r3, #24
 801ccaa:	fb94 f4f3 	sdivge	r4, r4, r3
 801ccae:	f06f 0317 	mvn.w	r3, #23
 801ccb2:	fb04 3303 	mla	r3, r4, r3, r3
 801ccb6:	eb03 0b02 	add.w	fp, r3, r2
 801ccba:	9b00      	ldr	r3, [sp, #0]
 801ccbc:	9a05      	ldr	r2, [sp, #20]
 801ccbe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 801cf88 <__kernel_rem_pio2+0x310>
 801ccc2:	eb03 0802 	add.w	r8, r3, r2
 801ccc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ccc8:	1aa7      	subs	r7, r4, r2
 801ccca:	ae20      	add	r6, sp, #128	@ 0x80
 801cccc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ccd0:	2500      	movs	r5, #0
 801ccd2:	4545      	cmp	r5, r8
 801ccd4:	dd12      	ble.n	801ccfc <__kernel_rem_pio2+0x84>
 801ccd6:	9b06      	ldr	r3, [sp, #24]
 801ccd8:	aa20      	add	r2, sp, #128	@ 0x80
 801ccda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ccde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801cce2:	2700      	movs	r7, #0
 801cce4:	9b00      	ldr	r3, [sp, #0]
 801cce6:	429f      	cmp	r7, r3
 801cce8:	dc2e      	bgt.n	801cd48 <__kernel_rem_pio2+0xd0>
 801ccea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 801cf88 <__kernel_rem_pio2+0x310>
 801ccee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ccf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ccf6:	46a8      	mov	r8, r5
 801ccf8:	2600      	movs	r6, #0
 801ccfa:	e01b      	b.n	801cd34 <__kernel_rem_pio2+0xbc>
 801ccfc:	42ef      	cmn	r7, r5
 801ccfe:	d407      	bmi.n	801cd10 <__kernel_rem_pio2+0x98>
 801cd00:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801cd04:	f7e3 fc0e 	bl	8000524 <__aeabi_i2d>
 801cd08:	e8e6 0102 	strd	r0, r1, [r6], #8
 801cd0c:	3501      	adds	r5, #1
 801cd0e:	e7e0      	b.n	801ccd2 <__kernel_rem_pio2+0x5a>
 801cd10:	ec51 0b18 	vmov	r0, r1, d8
 801cd14:	e7f8      	b.n	801cd08 <__kernel_rem_pio2+0x90>
 801cd16:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801cd1a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801cd1e:	f7e3 fc6b 	bl	80005f8 <__aeabi_dmul>
 801cd22:	4602      	mov	r2, r0
 801cd24:	460b      	mov	r3, r1
 801cd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cd2a:	f7e3 faaf 	bl	800028c <__adddf3>
 801cd2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd32:	3601      	adds	r6, #1
 801cd34:	9b05      	ldr	r3, [sp, #20]
 801cd36:	429e      	cmp	r6, r3
 801cd38:	dded      	ble.n	801cd16 <__kernel_rem_pio2+0x9e>
 801cd3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cd3e:	3701      	adds	r7, #1
 801cd40:	ecaa 7b02 	vstmia	sl!, {d7}
 801cd44:	3508      	adds	r5, #8
 801cd46:	e7cd      	b.n	801cce4 <__kernel_rem_pio2+0x6c>
 801cd48:	9b00      	ldr	r3, [sp, #0]
 801cd4a:	f8dd 8000 	ldr.w	r8, [sp]
 801cd4e:	aa0c      	add	r2, sp, #48	@ 0x30
 801cd50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cd54:	930a      	str	r3, [sp, #40]	@ 0x28
 801cd56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801cd58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cd62:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cd64:	ab98      	add	r3, sp, #608	@ 0x260
 801cd66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801cd6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801cd6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd72:	ac0c      	add	r4, sp, #48	@ 0x30
 801cd74:	ab70      	add	r3, sp, #448	@ 0x1c0
 801cd76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801cd7a:	46a1      	mov	r9, r4
 801cd7c:	46c2      	mov	sl, r8
 801cd7e:	f1ba 0f00 	cmp.w	sl, #0
 801cd82:	dc77      	bgt.n	801ce74 <__kernel_rem_pio2+0x1fc>
 801cd84:	4658      	mov	r0, fp
 801cd86:	ed9d 0b02 	vldr	d0, [sp, #8]
 801cd8a:	f7ff febd 	bl	801cb08 <scalbn>
 801cd8e:	ec57 6b10 	vmov	r6, r7, d0
 801cd92:	2200      	movs	r2, #0
 801cd94:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801cd98:	4630      	mov	r0, r6
 801cd9a:	4639      	mov	r1, r7
 801cd9c:	f7e3 fc2c 	bl	80005f8 <__aeabi_dmul>
 801cda0:	ec41 0b10 	vmov	d0, r0, r1
 801cda4:	f000 fab8 	bl	801d318 <floor>
 801cda8:	4b7c      	ldr	r3, [pc, #496]	@ (801cf9c <__kernel_rem_pio2+0x324>)
 801cdaa:	ec51 0b10 	vmov	r0, r1, d0
 801cdae:	2200      	movs	r2, #0
 801cdb0:	f7e3 fc22 	bl	80005f8 <__aeabi_dmul>
 801cdb4:	4602      	mov	r2, r0
 801cdb6:	460b      	mov	r3, r1
 801cdb8:	4630      	mov	r0, r6
 801cdba:	4639      	mov	r1, r7
 801cdbc:	f7e3 fa64 	bl	8000288 <__aeabi_dsub>
 801cdc0:	460f      	mov	r7, r1
 801cdc2:	4606      	mov	r6, r0
 801cdc4:	f7e3 fec8 	bl	8000b58 <__aeabi_d2iz>
 801cdc8:	9002      	str	r0, [sp, #8]
 801cdca:	f7e3 fbab 	bl	8000524 <__aeabi_i2d>
 801cdce:	4602      	mov	r2, r0
 801cdd0:	460b      	mov	r3, r1
 801cdd2:	4630      	mov	r0, r6
 801cdd4:	4639      	mov	r1, r7
 801cdd6:	f7e3 fa57 	bl	8000288 <__aeabi_dsub>
 801cdda:	f1bb 0f00 	cmp.w	fp, #0
 801cdde:	4606      	mov	r6, r0
 801cde0:	460f      	mov	r7, r1
 801cde2:	dd6c      	ble.n	801cebe <__kernel_rem_pio2+0x246>
 801cde4:	f108 31ff 	add.w	r1, r8, #4294967295
 801cde8:	ab0c      	add	r3, sp, #48	@ 0x30
 801cdea:	9d02      	ldr	r5, [sp, #8]
 801cdec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cdf0:	f1cb 0018 	rsb	r0, fp, #24
 801cdf4:	fa43 f200 	asr.w	r2, r3, r0
 801cdf8:	4415      	add	r5, r2
 801cdfa:	4082      	lsls	r2, r0
 801cdfc:	1a9b      	subs	r3, r3, r2
 801cdfe:	aa0c      	add	r2, sp, #48	@ 0x30
 801ce00:	9502      	str	r5, [sp, #8]
 801ce02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ce06:	f1cb 0217 	rsb	r2, fp, #23
 801ce0a:	fa43 f902 	asr.w	r9, r3, r2
 801ce0e:	f1b9 0f00 	cmp.w	r9, #0
 801ce12:	dd64      	ble.n	801cede <__kernel_rem_pio2+0x266>
 801ce14:	9b02      	ldr	r3, [sp, #8]
 801ce16:	2200      	movs	r2, #0
 801ce18:	3301      	adds	r3, #1
 801ce1a:	9302      	str	r3, [sp, #8]
 801ce1c:	4615      	mov	r5, r2
 801ce1e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801ce22:	4590      	cmp	r8, r2
 801ce24:	f300 80a1 	bgt.w	801cf6a <__kernel_rem_pio2+0x2f2>
 801ce28:	f1bb 0f00 	cmp.w	fp, #0
 801ce2c:	dd07      	ble.n	801ce3e <__kernel_rem_pio2+0x1c6>
 801ce2e:	f1bb 0f01 	cmp.w	fp, #1
 801ce32:	f000 80c1 	beq.w	801cfb8 <__kernel_rem_pio2+0x340>
 801ce36:	f1bb 0f02 	cmp.w	fp, #2
 801ce3a:	f000 80c8 	beq.w	801cfce <__kernel_rem_pio2+0x356>
 801ce3e:	f1b9 0f02 	cmp.w	r9, #2
 801ce42:	d14c      	bne.n	801cede <__kernel_rem_pio2+0x266>
 801ce44:	4632      	mov	r2, r6
 801ce46:	463b      	mov	r3, r7
 801ce48:	4955      	ldr	r1, [pc, #340]	@ (801cfa0 <__kernel_rem_pio2+0x328>)
 801ce4a:	2000      	movs	r0, #0
 801ce4c:	f7e3 fa1c 	bl	8000288 <__aeabi_dsub>
 801ce50:	4606      	mov	r6, r0
 801ce52:	460f      	mov	r7, r1
 801ce54:	2d00      	cmp	r5, #0
 801ce56:	d042      	beq.n	801cede <__kernel_rem_pio2+0x266>
 801ce58:	4658      	mov	r0, fp
 801ce5a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 801cf90 <__kernel_rem_pio2+0x318>
 801ce5e:	f7ff fe53 	bl	801cb08 <scalbn>
 801ce62:	4630      	mov	r0, r6
 801ce64:	4639      	mov	r1, r7
 801ce66:	ec53 2b10 	vmov	r2, r3, d0
 801ce6a:	f7e3 fa0d 	bl	8000288 <__aeabi_dsub>
 801ce6e:	4606      	mov	r6, r0
 801ce70:	460f      	mov	r7, r1
 801ce72:	e034      	b.n	801cede <__kernel_rem_pio2+0x266>
 801ce74:	4b4b      	ldr	r3, [pc, #300]	@ (801cfa4 <__kernel_rem_pio2+0x32c>)
 801ce76:	2200      	movs	r2, #0
 801ce78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ce7c:	f7e3 fbbc 	bl	80005f8 <__aeabi_dmul>
 801ce80:	f7e3 fe6a 	bl	8000b58 <__aeabi_d2iz>
 801ce84:	f7e3 fb4e 	bl	8000524 <__aeabi_i2d>
 801ce88:	4b47      	ldr	r3, [pc, #284]	@ (801cfa8 <__kernel_rem_pio2+0x330>)
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	4606      	mov	r6, r0
 801ce8e:	460f      	mov	r7, r1
 801ce90:	f7e3 fbb2 	bl	80005f8 <__aeabi_dmul>
 801ce94:	4602      	mov	r2, r0
 801ce96:	460b      	mov	r3, r1
 801ce98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ce9c:	f7e3 f9f4 	bl	8000288 <__aeabi_dsub>
 801cea0:	f7e3 fe5a 	bl	8000b58 <__aeabi_d2iz>
 801cea4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801cea8:	f849 0b04 	str.w	r0, [r9], #4
 801ceac:	4639      	mov	r1, r7
 801ceae:	4630      	mov	r0, r6
 801ceb0:	f7e3 f9ec 	bl	800028c <__adddf3>
 801ceb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ceb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cebc:	e75f      	b.n	801cd7e <__kernel_rem_pio2+0x106>
 801cebe:	d107      	bne.n	801ced0 <__kernel_rem_pio2+0x258>
 801cec0:	f108 33ff 	add.w	r3, r8, #4294967295
 801cec4:	aa0c      	add	r2, sp, #48	@ 0x30
 801cec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ceca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801cece:	e79e      	b.n	801ce0e <__kernel_rem_pio2+0x196>
 801ced0:	4b36      	ldr	r3, [pc, #216]	@ (801cfac <__kernel_rem_pio2+0x334>)
 801ced2:	2200      	movs	r2, #0
 801ced4:	f7e3 fe16 	bl	8000b04 <__aeabi_dcmpge>
 801ced8:	2800      	cmp	r0, #0
 801ceda:	d143      	bne.n	801cf64 <__kernel_rem_pio2+0x2ec>
 801cedc:	4681      	mov	r9, r0
 801cede:	2200      	movs	r2, #0
 801cee0:	2300      	movs	r3, #0
 801cee2:	4630      	mov	r0, r6
 801cee4:	4639      	mov	r1, r7
 801cee6:	f7e3 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 801ceea:	2800      	cmp	r0, #0
 801ceec:	f000 80c1 	beq.w	801d072 <__kernel_rem_pio2+0x3fa>
 801cef0:	f108 33ff 	add.w	r3, r8, #4294967295
 801cef4:	2200      	movs	r2, #0
 801cef6:	9900      	ldr	r1, [sp, #0]
 801cef8:	428b      	cmp	r3, r1
 801cefa:	da70      	bge.n	801cfde <__kernel_rem_pio2+0x366>
 801cefc:	2a00      	cmp	r2, #0
 801cefe:	f000 808b 	beq.w	801d018 <__kernel_rem_pio2+0x3a0>
 801cf02:	f108 38ff 	add.w	r8, r8, #4294967295
 801cf06:	ab0c      	add	r3, sp, #48	@ 0x30
 801cf08:	f1ab 0b18 	sub.w	fp, fp, #24
 801cf0c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d0f6      	beq.n	801cf02 <__kernel_rem_pio2+0x28a>
 801cf14:	4658      	mov	r0, fp
 801cf16:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 801cf90 <__kernel_rem_pio2+0x318>
 801cf1a:	f7ff fdf5 	bl	801cb08 <scalbn>
 801cf1e:	f108 0301 	add.w	r3, r8, #1
 801cf22:	00da      	lsls	r2, r3, #3
 801cf24:	9205      	str	r2, [sp, #20]
 801cf26:	ec55 4b10 	vmov	r4, r5, d0
 801cf2a:	aa70      	add	r2, sp, #448	@ 0x1c0
 801cf2c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801cfa4 <__kernel_rem_pio2+0x32c>
 801cf30:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801cf34:	4646      	mov	r6, r8
 801cf36:	f04f 0a00 	mov.w	sl, #0
 801cf3a:	2e00      	cmp	r6, #0
 801cf3c:	f280 80d1 	bge.w	801d0e2 <__kernel_rem_pio2+0x46a>
 801cf40:	4644      	mov	r4, r8
 801cf42:	2c00      	cmp	r4, #0
 801cf44:	f2c0 80ff 	blt.w	801d146 <__kernel_rem_pio2+0x4ce>
 801cf48:	4b19      	ldr	r3, [pc, #100]	@ (801cfb0 <__kernel_rem_pio2+0x338>)
 801cf4a:	461f      	mov	r7, r3
 801cf4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801cf4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cf52:	9306      	str	r3, [sp, #24]
 801cf54:	f04f 0a00 	mov.w	sl, #0
 801cf58:	f04f 0b00 	mov.w	fp, #0
 801cf5c:	2600      	movs	r6, #0
 801cf5e:	eba8 0504 	sub.w	r5, r8, r4
 801cf62:	e0e4      	b.n	801d12e <__kernel_rem_pio2+0x4b6>
 801cf64:	f04f 0902 	mov.w	r9, #2
 801cf68:	e754      	b.n	801ce14 <__kernel_rem_pio2+0x19c>
 801cf6a:	f854 3b04 	ldr.w	r3, [r4], #4
 801cf6e:	bb0d      	cbnz	r5, 801cfb4 <__kernel_rem_pio2+0x33c>
 801cf70:	b123      	cbz	r3, 801cf7c <__kernel_rem_pio2+0x304>
 801cf72:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801cf76:	f844 3c04 	str.w	r3, [r4, #-4]
 801cf7a:	2301      	movs	r3, #1
 801cf7c:	3201      	adds	r2, #1
 801cf7e:	461d      	mov	r5, r3
 801cf80:	e74f      	b.n	801ce22 <__kernel_rem_pio2+0x1aa>
 801cf82:	bf00      	nop
 801cf84:	f3af 8000 	nop.w
	...
 801cf94:	3ff00000 	.word	0x3ff00000
 801cf98:	0801db88 	.word	0x0801db88
 801cf9c:	40200000 	.word	0x40200000
 801cfa0:	3ff00000 	.word	0x3ff00000
 801cfa4:	3e700000 	.word	0x3e700000
 801cfa8:	41700000 	.word	0x41700000
 801cfac:	3fe00000 	.word	0x3fe00000
 801cfb0:	0801db48 	.word	0x0801db48
 801cfb4:	1acb      	subs	r3, r1, r3
 801cfb6:	e7de      	b.n	801cf76 <__kernel_rem_pio2+0x2fe>
 801cfb8:	f108 32ff 	add.w	r2, r8, #4294967295
 801cfbc:	ab0c      	add	r3, sp, #48	@ 0x30
 801cfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cfc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cfc6:	a90c      	add	r1, sp, #48	@ 0x30
 801cfc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cfcc:	e737      	b.n	801ce3e <__kernel_rem_pio2+0x1c6>
 801cfce:	f108 32ff 	add.w	r2, r8, #4294967295
 801cfd2:	ab0c      	add	r3, sp, #48	@ 0x30
 801cfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cfd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cfdc:	e7f3      	b.n	801cfc6 <__kernel_rem_pio2+0x34e>
 801cfde:	a90c      	add	r1, sp, #48	@ 0x30
 801cfe0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cfe4:	3b01      	subs	r3, #1
 801cfe6:	430a      	orrs	r2, r1
 801cfe8:	e785      	b.n	801cef6 <__kernel_rem_pio2+0x27e>
 801cfea:	3401      	adds	r4, #1
 801cfec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cff0:	2a00      	cmp	r2, #0
 801cff2:	d0fa      	beq.n	801cfea <__kernel_rem_pio2+0x372>
 801cff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801cffa:	eb0d 0503 	add.w	r5, sp, r3
 801cffe:	9b06      	ldr	r3, [sp, #24]
 801d000:	aa20      	add	r2, sp, #128	@ 0x80
 801d002:	4443      	add	r3, r8
 801d004:	f108 0701 	add.w	r7, r8, #1
 801d008:	3d98      	subs	r5, #152	@ 0x98
 801d00a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801d00e:	4444      	add	r4, r8
 801d010:	42bc      	cmp	r4, r7
 801d012:	da04      	bge.n	801d01e <__kernel_rem_pio2+0x3a6>
 801d014:	46a0      	mov	r8, r4
 801d016:	e6a2      	b.n	801cd5e <__kernel_rem_pio2+0xe6>
 801d018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d01a:	2401      	movs	r4, #1
 801d01c:	e7e6      	b.n	801cfec <__kernel_rem_pio2+0x374>
 801d01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d020:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801d024:	f7e3 fa7e 	bl	8000524 <__aeabi_i2d>
 801d028:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 801d2e8 <__kernel_rem_pio2+0x670>
 801d02c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801d030:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d038:	46b2      	mov	sl, r6
 801d03a:	f04f 0800 	mov.w	r8, #0
 801d03e:	9b05      	ldr	r3, [sp, #20]
 801d040:	4598      	cmp	r8, r3
 801d042:	dd05      	ble.n	801d050 <__kernel_rem_pio2+0x3d8>
 801d044:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d048:	3701      	adds	r7, #1
 801d04a:	eca5 7b02 	vstmia	r5!, {d7}
 801d04e:	e7df      	b.n	801d010 <__kernel_rem_pio2+0x398>
 801d050:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801d054:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801d058:	f7e3 face 	bl	80005f8 <__aeabi_dmul>
 801d05c:	4602      	mov	r2, r0
 801d05e:	460b      	mov	r3, r1
 801d060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d064:	f7e3 f912 	bl	800028c <__adddf3>
 801d068:	f108 0801 	add.w	r8, r8, #1
 801d06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d070:	e7e5      	b.n	801d03e <__kernel_rem_pio2+0x3c6>
 801d072:	f1cb 0000 	rsb	r0, fp, #0
 801d076:	ec47 6b10 	vmov	d0, r6, r7
 801d07a:	f7ff fd45 	bl	801cb08 <scalbn>
 801d07e:	ec55 4b10 	vmov	r4, r5, d0
 801d082:	4b9b      	ldr	r3, [pc, #620]	@ (801d2f0 <__kernel_rem_pio2+0x678>)
 801d084:	2200      	movs	r2, #0
 801d086:	4620      	mov	r0, r4
 801d088:	4629      	mov	r1, r5
 801d08a:	f7e3 fd3b 	bl	8000b04 <__aeabi_dcmpge>
 801d08e:	b300      	cbz	r0, 801d0d2 <__kernel_rem_pio2+0x45a>
 801d090:	4b98      	ldr	r3, [pc, #608]	@ (801d2f4 <__kernel_rem_pio2+0x67c>)
 801d092:	2200      	movs	r2, #0
 801d094:	4620      	mov	r0, r4
 801d096:	4629      	mov	r1, r5
 801d098:	f7e3 faae 	bl	80005f8 <__aeabi_dmul>
 801d09c:	f7e3 fd5c 	bl	8000b58 <__aeabi_d2iz>
 801d0a0:	4606      	mov	r6, r0
 801d0a2:	f7e3 fa3f 	bl	8000524 <__aeabi_i2d>
 801d0a6:	4b92      	ldr	r3, [pc, #584]	@ (801d2f0 <__kernel_rem_pio2+0x678>)
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	f7e3 faa5 	bl	80005f8 <__aeabi_dmul>
 801d0ae:	460b      	mov	r3, r1
 801d0b0:	4602      	mov	r2, r0
 801d0b2:	4629      	mov	r1, r5
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7e3 f8e7 	bl	8000288 <__aeabi_dsub>
 801d0ba:	f7e3 fd4d 	bl	8000b58 <__aeabi_d2iz>
 801d0be:	ab0c      	add	r3, sp, #48	@ 0x30
 801d0c0:	f10b 0b18 	add.w	fp, fp, #24
 801d0c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801d0c8:	f108 0801 	add.w	r8, r8, #1
 801d0cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801d0d0:	e720      	b.n	801cf14 <__kernel_rem_pio2+0x29c>
 801d0d2:	4620      	mov	r0, r4
 801d0d4:	4629      	mov	r1, r5
 801d0d6:	f7e3 fd3f 	bl	8000b58 <__aeabi_d2iz>
 801d0da:	ab0c      	add	r3, sp, #48	@ 0x30
 801d0dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801d0e0:	e718      	b.n	801cf14 <__kernel_rem_pio2+0x29c>
 801d0e2:	ab0c      	add	r3, sp, #48	@ 0x30
 801d0e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d0e8:	f7e3 fa1c 	bl	8000524 <__aeabi_i2d>
 801d0ec:	4622      	mov	r2, r4
 801d0ee:	462b      	mov	r3, r5
 801d0f0:	f7e3 fa82 	bl	80005f8 <__aeabi_dmul>
 801d0f4:	4652      	mov	r2, sl
 801d0f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801d0fa:	465b      	mov	r3, fp
 801d0fc:	4620      	mov	r0, r4
 801d0fe:	4629      	mov	r1, r5
 801d100:	f7e3 fa7a 	bl	80005f8 <__aeabi_dmul>
 801d104:	3e01      	subs	r6, #1
 801d106:	4604      	mov	r4, r0
 801d108:	460d      	mov	r5, r1
 801d10a:	e716      	b.n	801cf3a <__kernel_rem_pio2+0x2c2>
 801d10c:	9906      	ldr	r1, [sp, #24]
 801d10e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801d112:	9106      	str	r1, [sp, #24]
 801d114:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801d118:	f7e3 fa6e 	bl	80005f8 <__aeabi_dmul>
 801d11c:	4602      	mov	r2, r0
 801d11e:	460b      	mov	r3, r1
 801d120:	4650      	mov	r0, sl
 801d122:	4659      	mov	r1, fp
 801d124:	f7e3 f8b2 	bl	800028c <__adddf3>
 801d128:	3601      	adds	r6, #1
 801d12a:	4682      	mov	sl, r0
 801d12c:	468b      	mov	fp, r1
 801d12e:	9b00      	ldr	r3, [sp, #0]
 801d130:	429e      	cmp	r6, r3
 801d132:	dc01      	bgt.n	801d138 <__kernel_rem_pio2+0x4c0>
 801d134:	42ae      	cmp	r6, r5
 801d136:	dde9      	ble.n	801d10c <__kernel_rem_pio2+0x494>
 801d138:	ab48      	add	r3, sp, #288	@ 0x120
 801d13a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801d13e:	e9c5 ab00 	strd	sl, fp, [r5]
 801d142:	3c01      	subs	r4, #1
 801d144:	e6fd      	b.n	801cf42 <__kernel_rem_pio2+0x2ca>
 801d146:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801d148:	2b02      	cmp	r3, #2
 801d14a:	dc0b      	bgt.n	801d164 <__kernel_rem_pio2+0x4ec>
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	dc35      	bgt.n	801d1bc <__kernel_rem_pio2+0x544>
 801d150:	d059      	beq.n	801d206 <__kernel_rem_pio2+0x58e>
 801d152:	9b02      	ldr	r3, [sp, #8]
 801d154:	f003 0007 	and.w	r0, r3, #7
 801d158:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801d15c:	ecbd 8b02 	vpop	{d8}
 801d160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d164:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801d166:	2b03      	cmp	r3, #3
 801d168:	d1f3      	bne.n	801d152 <__kernel_rem_pio2+0x4da>
 801d16a:	9b05      	ldr	r3, [sp, #20]
 801d16c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d170:	eb0d 0403 	add.w	r4, sp, r3
 801d174:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801d178:	4625      	mov	r5, r4
 801d17a:	46c2      	mov	sl, r8
 801d17c:	f1ba 0f00 	cmp.w	sl, #0
 801d180:	dc69      	bgt.n	801d256 <__kernel_rem_pio2+0x5de>
 801d182:	4645      	mov	r5, r8
 801d184:	2d01      	cmp	r5, #1
 801d186:	f300 8087 	bgt.w	801d298 <__kernel_rem_pio2+0x620>
 801d18a:	9c05      	ldr	r4, [sp, #20]
 801d18c:	ab48      	add	r3, sp, #288	@ 0x120
 801d18e:	441c      	add	r4, r3
 801d190:	2000      	movs	r0, #0
 801d192:	2100      	movs	r1, #0
 801d194:	f1b8 0f01 	cmp.w	r8, #1
 801d198:	f300 809c 	bgt.w	801d2d4 <__kernel_rem_pio2+0x65c>
 801d19c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 801d1a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801d1a4:	f1b9 0f00 	cmp.w	r9, #0
 801d1a8:	f040 80a6 	bne.w	801d2f8 <__kernel_rem_pio2+0x680>
 801d1ac:	9b04      	ldr	r3, [sp, #16]
 801d1ae:	e9c3 5600 	strd	r5, r6, [r3]
 801d1b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801d1b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801d1ba:	e7ca      	b.n	801d152 <__kernel_rem_pio2+0x4da>
 801d1bc:	9d05      	ldr	r5, [sp, #20]
 801d1be:	ab48      	add	r3, sp, #288	@ 0x120
 801d1c0:	441d      	add	r5, r3
 801d1c2:	4644      	mov	r4, r8
 801d1c4:	2000      	movs	r0, #0
 801d1c6:	2100      	movs	r1, #0
 801d1c8:	2c00      	cmp	r4, #0
 801d1ca:	da35      	bge.n	801d238 <__kernel_rem_pio2+0x5c0>
 801d1cc:	f1b9 0f00 	cmp.w	r9, #0
 801d1d0:	d038      	beq.n	801d244 <__kernel_rem_pio2+0x5cc>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d1d8:	9c04      	ldr	r4, [sp, #16]
 801d1da:	e9c4 2300 	strd	r2, r3, [r4]
 801d1de:	4602      	mov	r2, r0
 801d1e0:	460b      	mov	r3, r1
 801d1e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801d1e6:	f7e3 f84f 	bl	8000288 <__aeabi_dsub>
 801d1ea:	ad4a      	add	r5, sp, #296	@ 0x128
 801d1ec:	2401      	movs	r4, #1
 801d1ee:	45a0      	cmp	r8, r4
 801d1f0:	da2b      	bge.n	801d24a <__kernel_rem_pio2+0x5d2>
 801d1f2:	f1b9 0f00 	cmp.w	r9, #0
 801d1f6:	d002      	beq.n	801d1fe <__kernel_rem_pio2+0x586>
 801d1f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d1fc:	4619      	mov	r1, r3
 801d1fe:	9b04      	ldr	r3, [sp, #16]
 801d200:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801d204:	e7a5      	b.n	801d152 <__kernel_rem_pio2+0x4da>
 801d206:	9c05      	ldr	r4, [sp, #20]
 801d208:	ab48      	add	r3, sp, #288	@ 0x120
 801d20a:	441c      	add	r4, r3
 801d20c:	2000      	movs	r0, #0
 801d20e:	2100      	movs	r1, #0
 801d210:	f1b8 0f00 	cmp.w	r8, #0
 801d214:	da09      	bge.n	801d22a <__kernel_rem_pio2+0x5b2>
 801d216:	f1b9 0f00 	cmp.w	r9, #0
 801d21a:	d002      	beq.n	801d222 <__kernel_rem_pio2+0x5aa>
 801d21c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d220:	4619      	mov	r1, r3
 801d222:	9b04      	ldr	r3, [sp, #16]
 801d224:	e9c3 0100 	strd	r0, r1, [r3]
 801d228:	e793      	b.n	801d152 <__kernel_rem_pio2+0x4da>
 801d22a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d22e:	f7e3 f82d 	bl	800028c <__adddf3>
 801d232:	f108 38ff 	add.w	r8, r8, #4294967295
 801d236:	e7eb      	b.n	801d210 <__kernel_rem_pio2+0x598>
 801d238:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801d23c:	f7e3 f826 	bl	800028c <__adddf3>
 801d240:	3c01      	subs	r4, #1
 801d242:	e7c1      	b.n	801d1c8 <__kernel_rem_pio2+0x550>
 801d244:	4602      	mov	r2, r0
 801d246:	460b      	mov	r3, r1
 801d248:	e7c6      	b.n	801d1d8 <__kernel_rem_pio2+0x560>
 801d24a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801d24e:	f7e3 f81d 	bl	800028c <__adddf3>
 801d252:	3401      	adds	r4, #1
 801d254:	e7cb      	b.n	801d1ee <__kernel_rem_pio2+0x576>
 801d256:	ed35 7b02 	vldmdb	r5!, {d7}
 801d25a:	ed8d 7b00 	vstr	d7, [sp]
 801d25e:	ed95 7b02 	vldr	d7, [r5, #8]
 801d262:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d266:	ec53 2b17 	vmov	r2, r3, d7
 801d26a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d26e:	f7e3 f80d 	bl	800028c <__adddf3>
 801d272:	4602      	mov	r2, r0
 801d274:	460b      	mov	r3, r1
 801d276:	4606      	mov	r6, r0
 801d278:	460f      	mov	r7, r1
 801d27a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d27e:	f7e3 f803 	bl	8000288 <__aeabi_dsub>
 801d282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d286:	f7e3 f801 	bl	800028c <__adddf3>
 801d28a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d28e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801d292:	e9c5 6700 	strd	r6, r7, [r5]
 801d296:	e771      	b.n	801d17c <__kernel_rem_pio2+0x504>
 801d298:	ed34 7b02 	vldmdb	r4!, {d7}
 801d29c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801d2a0:	ec51 0b17 	vmov	r0, r1, d7
 801d2a4:	4652      	mov	r2, sl
 801d2a6:	465b      	mov	r3, fp
 801d2a8:	ed8d 7b00 	vstr	d7, [sp]
 801d2ac:	f7e2 ffee 	bl	800028c <__adddf3>
 801d2b0:	4602      	mov	r2, r0
 801d2b2:	460b      	mov	r3, r1
 801d2b4:	4606      	mov	r6, r0
 801d2b6:	460f      	mov	r7, r1
 801d2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d2bc:	f7e2 ffe4 	bl	8000288 <__aeabi_dsub>
 801d2c0:	4652      	mov	r2, sl
 801d2c2:	465b      	mov	r3, fp
 801d2c4:	f7e2 ffe2 	bl	800028c <__adddf3>
 801d2c8:	3d01      	subs	r5, #1
 801d2ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d2ce:	e9c4 6700 	strd	r6, r7, [r4]
 801d2d2:	e757      	b.n	801d184 <__kernel_rem_pio2+0x50c>
 801d2d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d2d8:	f7e2 ffd8 	bl	800028c <__adddf3>
 801d2dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801d2e0:	e758      	b.n	801d194 <__kernel_rem_pio2+0x51c>
 801d2e2:	bf00      	nop
 801d2e4:	f3af 8000 	nop.w
	...
 801d2f0:	41700000 	.word	0x41700000
 801d2f4:	3e700000 	.word	0x3e700000
 801d2f8:	9b04      	ldr	r3, [sp, #16]
 801d2fa:	9a04      	ldr	r2, [sp, #16]
 801d2fc:	601d      	str	r5, [r3, #0]
 801d2fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801d302:	605c      	str	r4, [r3, #4]
 801d304:	609f      	str	r7, [r3, #8]
 801d306:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801d30a:	60d3      	str	r3, [r2, #12]
 801d30c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d310:	6110      	str	r0, [r2, #16]
 801d312:	6153      	str	r3, [r2, #20]
 801d314:	e71d      	b.n	801d152 <__kernel_rem_pio2+0x4da>
 801d316:	bf00      	nop

0801d318 <floor>:
 801d318:	ec51 0b10 	vmov	r0, r1, d0
 801d31c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d324:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801d328:	2e13      	cmp	r6, #19
 801d32a:	460c      	mov	r4, r1
 801d32c:	4605      	mov	r5, r0
 801d32e:	4680      	mov	r8, r0
 801d330:	dc34      	bgt.n	801d39c <floor+0x84>
 801d332:	2e00      	cmp	r6, #0
 801d334:	da17      	bge.n	801d366 <floor+0x4e>
 801d336:	a332      	add	r3, pc, #200	@ (adr r3, 801d400 <floor+0xe8>)
 801d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d33c:	f7e2 ffa6 	bl	800028c <__adddf3>
 801d340:	2200      	movs	r2, #0
 801d342:	2300      	movs	r3, #0
 801d344:	f7e3 fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 801d348:	b150      	cbz	r0, 801d360 <floor+0x48>
 801d34a:	2c00      	cmp	r4, #0
 801d34c:	da55      	bge.n	801d3fa <floor+0xe2>
 801d34e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d352:	432c      	orrs	r4, r5
 801d354:	2500      	movs	r5, #0
 801d356:	42ac      	cmp	r4, r5
 801d358:	4c2b      	ldr	r4, [pc, #172]	@ (801d408 <floor+0xf0>)
 801d35a:	bf08      	it	eq
 801d35c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d360:	4621      	mov	r1, r4
 801d362:	4628      	mov	r0, r5
 801d364:	e023      	b.n	801d3ae <floor+0x96>
 801d366:	4f29      	ldr	r7, [pc, #164]	@ (801d40c <floor+0xf4>)
 801d368:	4137      	asrs	r7, r6
 801d36a:	ea01 0307 	and.w	r3, r1, r7
 801d36e:	4303      	orrs	r3, r0
 801d370:	d01d      	beq.n	801d3ae <floor+0x96>
 801d372:	a323      	add	r3, pc, #140	@ (adr r3, 801d400 <floor+0xe8>)
 801d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d378:	f7e2 ff88 	bl	800028c <__adddf3>
 801d37c:	2200      	movs	r2, #0
 801d37e:	2300      	movs	r3, #0
 801d380:	f7e3 fbca 	bl	8000b18 <__aeabi_dcmpgt>
 801d384:	2800      	cmp	r0, #0
 801d386:	d0eb      	beq.n	801d360 <floor+0x48>
 801d388:	2c00      	cmp	r4, #0
 801d38a:	bfbe      	ittt	lt
 801d38c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d390:	4133      	asrlt	r3, r6
 801d392:	18e4      	addlt	r4, r4, r3
 801d394:	ea24 0407 	bic.w	r4, r4, r7
 801d398:	2500      	movs	r5, #0
 801d39a:	e7e1      	b.n	801d360 <floor+0x48>
 801d39c:	2e33      	cmp	r6, #51	@ 0x33
 801d39e:	dd0a      	ble.n	801d3b6 <floor+0x9e>
 801d3a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d3a4:	d103      	bne.n	801d3ae <floor+0x96>
 801d3a6:	4602      	mov	r2, r0
 801d3a8:	460b      	mov	r3, r1
 801d3aa:	f7e2 ff6f 	bl	800028c <__adddf3>
 801d3ae:	ec41 0b10 	vmov	d0, r0, r1
 801d3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801d3ba:	f04f 37ff 	mov.w	r7, #4294967295
 801d3be:	40df      	lsrs	r7, r3
 801d3c0:	4207      	tst	r7, r0
 801d3c2:	d0f4      	beq.n	801d3ae <floor+0x96>
 801d3c4:	a30e      	add	r3, pc, #56	@ (adr r3, 801d400 <floor+0xe8>)
 801d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ca:	f7e2 ff5f 	bl	800028c <__adddf3>
 801d3ce:	2200      	movs	r2, #0
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	f7e3 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 801d3d6:	2800      	cmp	r0, #0
 801d3d8:	d0c2      	beq.n	801d360 <floor+0x48>
 801d3da:	2c00      	cmp	r4, #0
 801d3dc:	da0a      	bge.n	801d3f4 <floor+0xdc>
 801d3de:	2e14      	cmp	r6, #20
 801d3e0:	d101      	bne.n	801d3e6 <floor+0xce>
 801d3e2:	3401      	adds	r4, #1
 801d3e4:	e006      	b.n	801d3f4 <floor+0xdc>
 801d3e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d3ea:	2301      	movs	r3, #1
 801d3ec:	40b3      	lsls	r3, r6
 801d3ee:	441d      	add	r5, r3
 801d3f0:	4545      	cmp	r5, r8
 801d3f2:	d3f6      	bcc.n	801d3e2 <floor+0xca>
 801d3f4:	ea25 0507 	bic.w	r5, r5, r7
 801d3f8:	e7b2      	b.n	801d360 <floor+0x48>
 801d3fa:	2500      	movs	r5, #0
 801d3fc:	462c      	mov	r4, r5
 801d3fe:	e7af      	b.n	801d360 <floor+0x48>
 801d400:	8800759c 	.word	0x8800759c
 801d404:	7e37e43c 	.word	0x7e37e43c
 801d408:	bff00000 	.word	0xbff00000
 801d40c:	000fffff 	.word	0x000fffff

0801d410 <_init>:
 801d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d412:	bf00      	nop
 801d414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d416:	bc08      	pop	{r3}
 801d418:	469e      	mov	lr, r3
 801d41a:	4770      	bx	lr

0801d41c <_fini>:
 801d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d41e:	bf00      	nop
 801d420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d422:	bc08      	pop	{r3}
 801d424:	469e      	mov	lr, r3
 801d426:	4770      	bx	lr
